syntax = "proto3";
package injective.oracle.v1beta1;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/InjectiveLabs/injective-core/injective-chain/modules/oracle/types";

message Params {
  option (gogoproto.equal) = true;

  string pyth_contract = 1;
}

enum OracleType {
  Unspecified = 0;
  Band = 1;
  PriceFeed = 2;
  Coinbase = 3;
  Chainlink = 4;
  Razor = 5;
  Dia = 6;
  API3 = 7;
  Uma = 8;
  Pyth = 9;
  BandIBC = 10;
  Provider = 11;
}

message OracleInfo {
  string symbol = 1;
  OracleType oracle_type = 2;
  uint32 scale_factor = 3;
}

message ChainlinkPriceState {
  string feed_id = 1;
  string answer = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  uint64 timestamp = 3;
  PriceState price_state = 4 [ (gogoproto.nullable) = false ];
}

message BandPriceState {
  string symbol = 1;
  string rate = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  uint64 resolve_time = 3;
  uint64 request_ID = 4;
  PriceState price_state = 5 [ (gogoproto.nullable) = false ];
}

message PriceFeedState {
  string base = 1;
  string quote = 2;
  PriceState price_state = 3;
  repeated string relayers = 4;
}

message ProviderInfo {
  string provider = 1;
  repeated string relayers = 2;
}

message ProviderState {
  ProviderInfo provider_info = 1;
  repeated ProviderPriceState provider_price_states = 2;
}

message ProviderPriceState {
  string symbol = 1;
  PriceState state = 2;
}

message PriceFeedInfo {
  string base = 1;
  string quote = 2;
}

message PriceFeedPrice {
  string price = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

message CoinbasePriceState {
  // kind should always be "prices"
  string kind = 1;
  // timestamp of the when the price was signed by coinbase
  uint64 timestamp = 2;
  // the symbol of the price, e.g. BTC
  string key = 3;
  // the value of the price scaled by 1e6
  uint64 value = 4;
  // the price state
  PriceState price_state = 5 [ (gogoproto.nullable) = false ];
}

message PriceState {
  string price = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  string cumulative_price = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  int64 timestamp = 3;
}

message PythPriceState {
  string price_id = 1;
  string ema_price = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  string ema_conf = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  string conf = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  uint64 publish_time = 5;
  PriceState price_state = 6 [ (gogoproto.nullable) = false ];
}

message BandOracleRequest {
  // Unique Identifier for band ibc oracle request
  uint64 request_id = 1;

  // OracleScriptID is the unique identifier of the oracle script to be
  // executed.
  int64 oracle_script_id = 2;

  // Symbols is the list of symbols to prepare in the calldata
  repeated string symbols = 3;

  // AskCount is the number of validators that are requested to respond to this
  // oracle request. Higher value means more security, at a higher gas cost.
  uint64 ask_count = 4;

  // MinCount is the minimum number of validators necessary for the request to
  // proceed to the execution phase. Higher value means more security, at the
  // cost of liveness.
  uint64 min_count = 5;

  // FeeLimit is the maximum tokens that will be paid to all data source
  // providers.
  repeated cosmos.base.v1beta1.Coin fee_limit = 6 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];

  // PrepareGas is amount of gas to pay to prepare raw requests
  uint64 prepare_gas = 7;
  // ExecuteGas is amount of gas to reserve for executing
  uint64 execute_gas = 8;
  // MinSourceCount is the minimum number of data sources that must be used by
  // each validator
  uint64 min_source_count = 9;
}

message BandIBCParams {
  // true if Band IBC should be enabled
  bool band_ibc_enabled = 1;
  // block request interval to send Band IBC prices
  int64 ibc_request_interval = 2;

  // band IBC source channel
  string ibc_source_channel = 3;
  // band IBC version
  string ibc_version = 4;
  // band IBC portID
  string ibc_port_id = 5;
  //  legacy oracle scheme ids
  repeated int64 legacy_oracle_ids = 6;
}

message SymbolPriceTimestamp {
  OracleType oracle = 1;
  string symbol_id = 2;

  int64 timestamp = 3;
}

message LastPriceTimestamps {
  repeated SymbolPriceTimestamp last_price_timestamps = 1;
}

message PriceRecords {
  OracleType oracle = 1;
  string symbol_id = 2;
  repeated PriceRecord latest_price_records = 3;
}

message PriceRecord {
  int64 timestamp = 1;

  string price = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

// MetadataStatistics refers to the metadata summary statistics of the
// historical sample considered
message MetadataStatistics {
  // GroupCount refers to the number of groups used. Equals RecordsSampleSize if
  // no grouping is used
  uint32 group_count = 1;
  // RecordsSampleSize refers to the total number of records used.
  uint32 records_sample_size = 2;
  // Mean refers to the arithmetic mean
  // For trades, the mean is the VWAP computed over the grouped trade records ∑
  // (price * quantity) / ∑ quantity For oracle prices, the mean is computed
  // over the price records ∑ (price) / prices_count
  string mean = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  // TWAP refers to the time-weighted average price which equals ∑ (price_i *
  // ∆t_i) / ∑ ∆t_i where ∆t_i = t_i - t_{i-1}
  string twap = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  // FirstTimestamp is the timestamp of the oldest record considered
  int64 first_timestamp = 5;
  // LastTimestamp is the timestamp of the youngest record considered
  int64 last_timestamp = 6;
  // MinPrice refers to the smallest individual raw price considered
  string min_price = 7 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  // MaxPrice refers to the largest individual raw price considered
  string max_price = 8 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  // MedianPrice refers to the median individual raw price considered
  string median_price = 9 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

message PriceAttestation {
  string price_id = 1;
  // MaxPrice refers to the largest individual raw price considered
  int64 price = 2;
  uint64 conf = 3;
  int32 expo = 4;
  int64 ema_price = 5;
  uint64 ema_conf = 6;
  int32 ema_expo = 7;
  int64 publish_time = 8;
}
