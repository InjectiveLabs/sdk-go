syntax = "proto3";
package injective.exchange.v1beta1;

import "cosmos/base/v1beta1/coin.proto";
import "cosmos/distribution/v1beta1/distribution.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "injective/exchange/v1beta1/exchange.proto";
import "injective/oracle/v1beta1/oracle.proto";

option go_package = "github.com/InjectiveLabs/injective-core/injective-chain/modules/exchange/types";

message SpotMarketParamUpdateProposal {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (cosmos_proto.implements_interface) = "cosmos.gov.v1beta1.Content";

  string title = 1;
  string description = 2;
  string market_id = 3;

  // maker_fee_rate defines the trade fee rate for makers on the spot market
  string maker_fee_rate = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = true
  ];

  // taker_fee_rate defines the trade fee rate for takers on the spot market
  string taker_fee_rate = 5 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = true
  ];

  // relayer_fee_share_rate defines the relayer fee share rate for the spot
  // market
  string relayer_fee_share_rate = 6 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = true
  ];

  // min_price_tick_size defines the minimum tick size of the order's price and
  // margin
  string min_price_tick_size = 7 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = true
  ];
  // min_quantity_tick_size defines the minimum tick size of the order's
  // quantity
  string min_quantity_tick_size = 8 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = true
  ];

  MarketStatus status = 9;
}

enum ExchangeType {
  EXCHANGE_UNSPECIFIED = 0
      [ (gogoproto.enumvalue_customname) = "EXCHANGE_UNSPECIFIED" ];
  SPOT = 1 [ (gogoproto.enumvalue_customname) = "SPOT" ];
  DERIVATIVES = 2 [ (gogoproto.enumvalue_customname) = "DERIVATIVES" ];
}

message ExchangeEnableProposal {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string title = 1;
  string description = 2;

  ExchangeType exchangeType = 3;
}

message BatchExchangeModificationProposal {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (cosmos_proto.implements_interface) = "cosmos.gov.v1beta1.Content";

  string title = 1;
  string description = 2;

  repeated SpotMarketParamUpdateProposal spot_market_param_update_proposals = 3;
  repeated DerivativeMarketParamUpdateProposal
      derivative_market_param_update_proposals = 4;
  repeated SpotMarketLaunchProposal spot_market_launch_proposals = 5;
  repeated PerpetualMarketLaunchProposal perpetual_market_launch_proposals = 6;
  repeated ExpiryFuturesMarketLaunchProposal
      expiry_futures_market_launch_proposals = 7;
  TradingRewardCampaignUpdateProposal trading_reward_campaign_update_proposal =
      8;
  repeated BinaryOptionsMarketLaunchProposal
      binary_options_market_launch_proposals = 9;
  repeated BinaryOptionsMarketParamUpdateProposal
      binary_options_param_update_proposals = 10;
  UpdateDenomDecimalsProposal denom_decimals_update_proposal = 11;

  FeeDiscountProposal fee_discount_proposal = 12;

  repeated MarketForcedSettlementProposal market_forced_settlement_proposals =
      13;
}

// SpotMarketLaunchProposal defines a SDK message for proposing a new spot
// market through governance
message SpotMarketLaunchProposal {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (cosmos_proto.implements_interface) = "cosmos.gov.v1beta1.Content";

  string title = 1;
  string description = 2;
  // Ticker for the spot market.
  string ticker = 3;
  // type of coin to use as the base currency
  string base_denom = 4;
  // type of coin to use as the quote currency
  string quote_denom = 5;
  // min_price_tick_size defines the minimum tick size of the order's price
  string min_price_tick_size = 6 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  // min_quantity_tick_size defines the minimum tick size of the order's
  // quantity
  string min_quantity_tick_size = 7 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  // maker_fee_rate defines the fee percentage makers pay when trading
  string maker_fee_rate = 8 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = true
  ];
  // taker_fee_rate defines the fee percentage takers pay when trading
  string taker_fee_rate = 9 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = true
  ];
}

// PerpetualMarketLaunchProposal defines a SDK message for proposing a new
// perpetual futures market through governance
message PerpetualMarketLaunchProposal {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (cosmos_proto.implements_interface) = "cosmos.gov.v1beta1.Content";

  string title = 1;
  string description = 2;
  // Ticker for the derivative market.
  string ticker = 3;
  // type of coin to use as the base currency
  string quote_denom = 4;
  // Oracle base currency
  string oracle_base = 5;
  // Oracle quote currency
  string oracle_quote = 6;
  // Scale factor for oracle prices.
  uint32 oracle_scale_factor = 7;
  // Oracle type
  injective.oracle.v1beta1.OracleType oracle_type = 8;
  // initial_margin_ratio defines the initial margin ratio for the derivative
  // market
  string initial_margin_ratio = 9 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // maintenance_margin_ratio defines the maintenance margin ratio for the
  // derivative market
  string maintenance_margin_ratio = 10 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // maker_fee_rate defines the exchange trade fee for makers for the derivative
  // market
  string maker_fee_rate = 11 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // taker_fee_rate defines the exchange trade fee for takers for the derivative
  // market
  string taker_fee_rate = 12 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  // min_price_tick_size defines the minimum tick size of the order's price and
  // margin
  string min_price_tick_size = 13 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  // min_quantity_tick_size defines the minimum tick size of the order's
  // quantity
  string min_quantity_tick_size = 14 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

message BinaryOptionsMarketLaunchProposal {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (cosmos_proto.implements_interface) = "cosmos.gov.v1beta1.Content";

  string title = 1;
  string description = 2;
  // Ticker for the derivative contract.
  string ticker = 3;
  // Oracle symbol
  string oracle_symbol = 4;
  // Oracle Provider
  string oracle_provider = 5;
  // Oracle type
  injective.oracle.v1beta1.OracleType oracle_type = 6;
  // Scale factor for oracle prices.
  uint32 oracle_scale_factor = 7;
  // expiration timestamp
  int64 expiration_timestamp = 8;
  // expiration timestamp
  int64 settlement_timestamp = 9;
  // admin of the market
  string admin = 10;
  // Address of the quote currency denomination for the binary options contract
  string quote_denom = 11;
  // maker_fee_rate defines the maker fee rate of a binary options market
  string maker_fee_rate = 12 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  // taker_fee_rate defines the taker fee rate of a derivative market
  string taker_fee_rate = 13 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  // min_price_tick_size defines the minimum tick size that the price and margin
  // required for orders in the market
  string min_price_tick_size = 14 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  // min_quantity_tick_size defines the minimum tick size of the quantity
  // required for orders in the market
  string min_quantity_tick_size = 15 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

// ExpiryFuturesMarketLaunchProposal defines a SDK message for proposing a new
// expiry futures market through governance
message ExpiryFuturesMarketLaunchProposal {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (cosmos_proto.implements_interface) = "cosmos.gov.v1beta1.Content";

  string title = 1;
  string description = 2;
  // Ticker for the derivative market.
  string ticker = 3;
  // type of coin to use as the quote currency
  string quote_denom = 4;
  // Oracle base currency
  string oracle_base = 5;
  // Oracle quote currency
  string oracle_quote = 6;
  // Scale factor for oracle prices.
  uint32 oracle_scale_factor = 7;
  // Oracle type
  injective.oracle.v1beta1.OracleType oracle_type = 8;
  // Expiration time of the market
  int64 expiry = 9;
  // initial_margin_ratio defines the initial margin ratio for the derivative
  // market
  string initial_margin_ratio = 10 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // maintenance_margin_ratio defines the maintenance margin ratio for the
  // derivative market
  string maintenance_margin_ratio = 11 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // maker_fee_rate defines the exchange trade fee for makers for the derivative
  // market
  string maker_fee_rate = 12 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // taker_fee_rate defines the exchange trade fee for takers for the derivative
  // market
  string taker_fee_rate = 13 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  // min_price_tick_size defines the minimum tick size of the order's price and
  // margin
  string min_price_tick_size = 14 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  // min_quantity_tick_size defines the minimum tick size of the order's
  // quantity
  string min_quantity_tick_size = 15 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

message DerivativeMarketParamUpdateProposal {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  option (cosmos_proto.implements_interface) = "cosmos.gov.v1beta1.Content";

  string title = 1;
  string description = 2;
  string market_id = 3;

  // initial_margin_ratio defines the initial margin ratio for the derivative
  // market
  string initial_margin_ratio = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = true
  ];

  // maintenance_margin_ratio defines the maintenance margin ratio for the
  // derivative market
  string maintenance_margin_ratio = 5 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = true
  ];

  // maker_fee_rate defines the exchange trade fee for makers for the derivative
  // market
  string maker_fee_rate = 6 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = true
  ];

  // taker_fee_rate defines the exchange trade fee for takers for the derivative
  // market
  string taker_fee_rate = 7 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = true
  ];

  // relayer_fee_share_rate defines the relayer fee share rate for the
  // derivative market
  string relayer_fee_share_rate = 8 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = true
  ];

  // min_price_tick_size defines the minimum tick size of the order's price and
  // margin
  string min_price_tick_size = 9 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = true
  ];
  // min_quantity_tick_size defines the minimum tick size of the order's
  // quantity
  string min_quantity_tick_size = 10 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = true
  ];
  // hourly_interest_rate defines the hourly interest rate
  string HourlyInterestRate = 11 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = true
  ];
  // hourly_funding_rate_cap defines the maximum absolute value of the hourly
  // funding rate
  string HourlyFundingRateCap = 12 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = true
  ];

  MarketStatus status = 13;

  OracleParams oracle_params = 14;
}

message MarketForcedSettlementProposal {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (cosmos_proto.implements_interface) = "cosmos.gov.v1beta1.Content";

  string title = 1;
  string description = 2;
  string market_id = 3;
  string settlement_price = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = true
  ];
}

message UpdateDenomDecimalsProposal {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (cosmos_proto.implements_interface) = "cosmos.gov.v1beta1.Content";

  string title = 1;
  string description = 2;
  repeated DenomDecimals denom_decimals = 3;
}

message BinaryOptionsMarketParamUpdateProposal {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  option (cosmos_proto.implements_interface) = "cosmos.gov.v1beta1.Content";

  string title = 1;
  string description = 2;
  string market_id = 3;

  // maker_fee_rate defines the exchange trade fee for makers for the derivative
  // market
  string maker_fee_rate = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = true
  ];

  // taker_fee_rate defines the exchange trade fee for takers for the derivative
  // market
  string taker_fee_rate = 5 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = true
  ];

  // relayer_fee_share_rate defines the relayer fee share rate for the
  // derivative market
  string relayer_fee_share_rate = 6 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = true
  ];

  // min_price_tick_size defines the minimum tick size of the order's price and
  // margin
  string min_price_tick_size = 7 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = true
  ];
  // min_quantity_tick_size defines the minimum tick size of the order's
  // quantity
  string min_quantity_tick_size = 8 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = true
  ];

  // expiration timestamp
  int64 expiration_timestamp = 9;
  // expiration timestamp
  int64 settlement_timestamp = 10;
  // new price at which market will be settled
  string settlement_price = 11 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = true
  ];
  // admin of the market
  string admin = 12;
  MarketStatus status = 13;
  ProviderOracleParams oracle_params = 14;
}

message ProviderOracleParams {
  // Oracle base currency
  string symbol = 1;
  // Oracle quote currency
  string provider = 2;
  // Scale factor for oracle prices.
  uint32 oracle_scale_factor = 3;
  // Oracle type
  injective.oracle.v1beta1.OracleType oracle_type = 4;
}

message OracleParams {
  // Oracle base currency
  string oracle_base = 1;
  // Oracle quote currency
  string oracle_quote = 2;
  // Scale factor for oracle prices.
  uint32 oracle_scale_factor = 3;
  // Oracle type
  injective.oracle.v1beta1.OracleType oracle_type = 4;
}

message TradingRewardCampaignLaunchProposal {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (cosmos_proto.implements_interface) = "cosmos.gov.v1beta1.Content";

  string title = 1;
  string description = 2;
  TradingRewardCampaignInfo campaign_info = 3;
  repeated CampaignRewardPool campaign_reward_pools = 4;
}

message TradingRewardCampaignUpdateProposal {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (cosmos_proto.implements_interface) = "cosmos.gov.v1beta1.Content";

  string title = 1;
  string description = 2;
  TradingRewardCampaignInfo campaign_info = 3;
  repeated CampaignRewardPool campaign_reward_pools_additions = 4;
  repeated CampaignRewardPool campaign_reward_pools_updates = 5;
}

message RewardPointUpdate {
  string account_address = 1;
  // new_points overwrites the current trading reward points for the account
  string new_points = 12 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

message TradingRewardPendingPointsUpdateProposal {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (cosmos_proto.implements_interface) = "cosmos.gov.v1beta1.Content";

  string title = 1;
  string description = 2;
  int64 pending_pool_timestamp = 3;
  repeated RewardPointUpdate reward_point_updates = 4;
}

message FeeDiscountProposal {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (cosmos_proto.implements_interface) = "cosmos.gov.v1beta1.Content";

  string title = 1;
  string description = 2;
  FeeDiscountSchedule schedule = 3;
}

message BatchCommunityPoolSpendProposal {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (cosmos_proto.implements_interface) = "cosmos.gov.v1beta1.Content";

  string title = 1;
  string description = 2;
  repeated cosmos.distribution.v1beta1.CommunityPoolSpendProposal proposals = 3;
}

// AtomicMarketOrderFeeMultiplierScheduleProposal defines a SDK message for
// proposing new atomic take fee multipliers for specified markets
message AtomicMarketOrderFeeMultiplierScheduleProposal {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (cosmos_proto.implements_interface) = "cosmos.gov.v1beta1.Content";

  string title = 1;
  string description = 2;

  repeated MarketFeeMultiplier market_fee_multipliers = 3;
}