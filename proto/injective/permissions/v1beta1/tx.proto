syntax = "proto3";
package injective.permissions.v1beta1;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/bank/v1beta1/bank.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "injective/permissions/v1beta1/params.proto";
import "injective/permissions/v1beta1/permissions.proto";

option go_package = "github.com/InjectiveLabs/injective-core/injective-chain/modules/permissions/types";

// Msg defines the permissions module's gRPC message service.
service Msg {
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  rpc CreateNamespace(MsgCreateNamespace) returns (MsgCreateNamespaceResponse);
  rpc DeleteNamespace(MsgDeleteNamespace) returns (MsgDeleteNamespaceResponse);
  rpc UpdateNamespace(MsgUpdateNamespace) returns (MsgUpdateNamespaceResponse);
  rpc UpdateNamespaceRoles(MsgUpdateNamespaceRoles)
      returns (MsgUpdateNamespaceRolesResponse);
  rpc RevokeNamespaceRoles(MsgRevokeNamespaceRoles)
      returns (MsgRevokeNamespaceRolesResponse);
  rpc ClaimVoucher(MsgClaimVoucher) returns (MsgClaimVoucherResponse);
}

message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the governance account.
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // params defines the permissions parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [ (gogoproto.nullable) = false ];
}

message MsgUpdateParamsResponse {}

message MsgCreateNamespace {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1 [ (gogoproto.moretags) = "yaml:\"sender\"" ];

  Namespace namespace = 2 [ (gogoproto.nullable) = false ];
}

message MsgCreateNamespaceResponse {}

message MsgDeleteNamespace {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1 [ (gogoproto.moretags) = "yaml:\"sender\"" ];

  string namespace_denom = 2;
}

message MsgDeleteNamespaceResponse {}

message MsgUpdateNamespace {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1 [ (gogoproto.moretags) = "yaml:\"sender\"" ];

  string namespace_denom =
      2; // namespace denom to which this updates are applied

  message MsgSetWasmHook { string new_value = 1; }
  MsgSetWasmHook wasm_hook =
      3; // address of smart contract to apply code-based restrictions

  message MsgSetMintsPaused { bool new_value = 1; }
  MsgSetMintsPaused mints_paused = 4;

  message MsgSetSendsPaused { bool new_value = 1; }
  MsgSetSendsPaused sends_paused = 5;

  message MsgSetBurnsPaused { bool new_value = 1; }
  MsgSetBurnsPaused burns_paused = 6;
}

message MsgUpdateNamespaceResponse {}

message MsgUpdateNamespaceRoles {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1 [ (gogoproto.moretags) = "yaml:\"sender\"" ];

  string namespace_denom =
      2; // namespace denom to which this updates are applied

  map<string, uint32> role_permissions =
      3; // new role definitions or updated permissions for existing roles
  map<string, Roles> address_roles =
      4; // new addresses to add or new roles for existing addresses to
         // overwrite current roles
}

message MsgUpdateNamespaceRolesResponse {}

message MsgRevokeNamespaceRoles {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1 [ (gogoproto.moretags) = "yaml:\"sender\"" ];

  string namespace_denom =
      2; // namespace denom to which this updates are applied
  map<string, Roles> address_roles_to_revoke =
      3; // map of {"address" => array of roles to revoke from this address}
}

message MsgRevokeNamespaceRolesResponse {}

message MsgClaimVoucher {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1 [ (gogoproto.moretags) = "yaml:\"sender\"" ];

  string originator = 2; // address of the original voucher sender (typically a module address, a key from VouchersForAddress query response)
}

message MsgClaimVoucherResponse {}
