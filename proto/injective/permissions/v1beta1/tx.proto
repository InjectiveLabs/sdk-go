syntax = "proto3";
package injective.permissions.v1beta1;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/bank/v1beta1/bank.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "injective/permissions/v1beta1/params.proto";
import "injective/permissions/v1beta1/permissions.proto";
import "amino/amino.proto";

option go_package = "github.com/InjectiveLabs/injective-core/injective-chain/modules/permissions/types";

// Msg defines the permissions module's gRPC message service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  rpc CreateNamespace(MsgCreateNamespace) returns (MsgCreateNamespaceResponse);
  rpc UpdateNamespace(MsgUpdateNamespace) returns (MsgUpdateNamespaceResponse);
  rpc UpdateActorRoles(MsgUpdateActorRoles)
      returns (MsgUpdateActorRolesResponse);
  rpc ClaimVoucher(MsgClaimVoucher) returns (MsgClaimVoucherResponse);

  //  rpc DeleteNamespace(MsgDeleteNamespace) returns
  //  (MsgDeleteNamespaceResponse);
}

message MsgUpdateParams {
  option (amino.name) = "permissions/MsgUpdateParams";
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the governance account.
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // params defines the permissions parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [ (gogoproto.nullable) = false ];
}

message MsgUpdateParamsResponse {}

message MsgCreateNamespace {
  option (amino.name) = "permissions/MsgCreateNamespace";
  option (cosmos.msg.v1.signer) = "sender";
  // The sender's Injective address
  string sender = 1 [ (gogoproto.moretags) = "yaml:\"sender\"" ];
  // The namespace information
  Namespace namespace = 2 [ (gogoproto.nullable) = false ];
}

message MsgCreateNamespaceResponse {}

message MsgUpdateNamespace {
  option (amino.name) = "permissions/MsgUpdateNamespace";
  option (cosmos.msg.v1.signer) = "sender";
  // The sender's Injective address
  string sender = 1 [ (gogoproto.moretags) = "yaml:\"sender\"" ];

  // denom whose namespace updates are to be applied
  string denom = 2;

  message SetContractHook { string new_value = 1; }
  // address of smart contract to apply code-based restrictions
  SetContractHook contract_hook = 3;
  // role permissions to update
  repeated Role role_permissions = 4;
  // role managers to update
  repeated RoleManager role_managers = 5;
  // policy statuses to update
  repeated PolicyStatus policy_statuses = 6;
  // policy manager capabilities to update
  repeated PolicyManagerCapability policy_manager_capabilities = 7;
}

message MsgUpdateNamespaceResponse {}

message MsgUpdateActorRoles {
  option (amino.name) = "permissions/MsgUpdateActorRoles";
  option (cosmos.msg.v1.signer) = "sender";
  // The sender's Injective address
  string sender = 1 [ (gogoproto.moretags) = "yaml:\"sender\"" ];
  // The namespace denom to which this updates are applied
  string denom = 2;
  // The roles to add for given actors
  repeated RoleActors role_actors_to_add = 3;
  // The roles to revoke from given actors
  repeated RoleActors role_actors_to_revoke = 5;
}

message MsgUpdateActorRolesResponse {}

message MsgClaimVoucher {
  option (amino.name) = "permissions/MsgClaimVoucher";
  option (cosmos.msg.v1.signer) = "sender";

  // The sender's Injective address
  string sender = 1 [ (gogoproto.moretags) = "yaml:\"sender\"" ];
  // The token denom of the voucher to claim
  string denom = 2;
}

message MsgClaimVoucherResponse {}
