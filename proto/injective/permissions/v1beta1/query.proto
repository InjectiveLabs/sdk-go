syntax = "proto3";
package injective.permissions.v1beta1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "injective/permissions/v1beta1/params.proto";
import "injective/permissions/v1beta1/genesis.proto";
import "injective/permissions/v1beta1/permissions.proto";

option go_package = "github.com/InjectiveLabs/injective-core/injective-chain/modules/permissions/types";

// Query defines the gRPC querier service.
service Query {
  // Params defines a gRPC query method that returns the permissions module's
  // parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/injective/permissions/v1beta1/params";
  }

  // NamespaceDenoms defines a gRPC query method that returns the denoms for which a namespace exists
  rpc NamespaceDenoms(QueryNamespaceDenomsRequest)
      returns (QueryNamespaceDenomsResponse) {
    option (google.api.http).get =
        "/injective/permissions/v1beta1/namespace_denoms";
  }

  // Namespaces defines a gRPC query method that returns the permissions
  // module's created namespaces.
  rpc Namespaces(QueryNamespacesRequest)
      returns (QueryNamespacesResponse) {
    option (google.api.http).get =
        "/injective/permissions/v1beta1/namespaces";
  }

  // Namespace defines a gRPC query method that returns the permissions
  // module's namespace associated with the provided denom.
  rpc Namespace(QueryNamespaceRequest)
      returns (QueryNamespaceResponse) {
    option (google.api.http).get =
        "/injective/permissions/v1beta1/namespace/{denom}";
  }

  // RolesByActor defines a gRPC query method that returns roles for the actor in the namespace
  rpc RolesByActor(QueryRolesByActorRequest)
      returns (QueryRolesByActorResponse) {
    option (google.api.http).get =
        "/injective/permissions/v1beta1/roles_by_actor/{denom}/{actor}";
  }

  // ActorsByRole defines a gRPC query method that returns a namespace's roles associated with the provided actor.
  rpc ActorsByRole(QueryActorsByRoleRequest)
      returns (QueryActorsByRoleResponse) {
    option (google.api.http).get =
        "/injective/permissions/v1beta1/actors_by_role/{denom}/{role}";
  }

  // RoleManagers defines a gRPC query method that returns a namespace's role managers
  rpc RoleManagers(QueryRoleManagersRequest)
      returns (QueryRoleManagersResponse) {
    option (google.api.http).get =
        "/injective/permissions/v1beta1/role_managers/{denom}";
  }

  // RoleManager defines a gRPC query method that returns the roles a given role manager manages for a given namespace
  rpc RoleManager(QueryRoleManagerRequest)
      returns (QueryRoleManagerResponse) {
    option (google.api.http).get =
        "/injective/permissions/v1beta1/role_manager/{denom}/{manager}";
  }

  // PolicyStatuses defines a gRPC query method that returns a namespace's policy statuses
  rpc PolicyStatuses(QueryPolicyStatusesRequest)
      returns (QueryPolicyStatusesResponse) {
    option (google.api.http).get =
        "/injective/permissions/v1beta1/policy_statuses/{denom}";
  }

  // PolicyManagerCapabilities defines a gRPC query method that returns a namespace's policy manager capabilities
  rpc PolicyManagerCapabilities(QueryPolicyManagerCapabilitiesRequest)
      returns (QueryPolicyManagerCapabilitiesResponse) {
    option (google.api.http).get =
        "/injective/permissions/v1beta1/policy_manager_capabilities/{denom}";
  }

  // Vouchers defines a gRPC query method for the vouchers for a given denom
  rpc Vouchers(QueryVouchersRequest)
      returns (QueryVouchersResponse) {
    option (google.api.http).get =
        "/injective/permissions/v1beta1/vouchers/{denom}";
  }

  // Voucher defines a gRPC query method for the vouchers for a given denom and address
  rpc Voucher(QueryVoucherRequest)
      returns (QueryVoucherResponse) {
    option (google.api.http).get =
        "/injective/permissions/v1beta1/voucher/{denom}/{address}";
  }

  // Retrieves the entire permissions module's state
  rpc PermissionsModuleState(QueryModuleStateRequest)
      returns (QueryModuleStateResponse) {
    option (google.api.http).get = "/injective/permissions/v1beta1/module_state";
  }
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

// QueryNamespaceDenomsRequest is the request type for the Query/NamespaceDenoms RPC
// method.
message QueryNamespaceDenomsRequest {}

// QueryNamespaceDenomsResponse is the response type for the Query/NamespaceDenoms
// RPC method.
message QueryNamespaceDenomsResponse { repeated string denoms = 1; }

// QueryNamespacesRequest is the request type for the Query/Namespaces RPC
// method.
message QueryNamespacesRequest {}

// QueryNamespacesResponse is the response type for the Query/Namespaces
// RPC method.
message QueryNamespacesResponse { repeated Namespace namespaces = 1; }

// QueryNamespaceRequest is the request type for the
// Query/Namespace RPC method.
message QueryNamespaceRequest {
  string denom = 1;
}

// QueryNamespaceResponse is the response type for the
// Query/NamespaceByDenom RPC method.
message QueryNamespaceResponse { Namespace namespace = 1; }

// QueryAddressesByRoleRequest is the request type for the Query/AddressesByRole
// RPC method.
message QueryActorsByRoleRequest {
  string denom = 1;
  string role = 2;
}

// QueryAddressesByRoleResponse is the response type for the
// Query/AddressesByRole RPC method.
message QueryActorsByRoleResponse { repeated string actors = 1; }

// QueryRolesByActorRequest is the request type for the
// Query/RolesByActor RPC method.
message QueryRolesByActorRequest {
  string denom = 1;
  string actor = 2;
}

// QueryRolesByActorResponse is the response type for the
// Query/RolesByActor RPC method.
message QueryRolesByActorResponse { repeated string roles = 1; }

// QueryRoleManagersRequest is the request type for the Query/RoleManagers
// RPC method.
message QueryRoleManagersRequest {
  string denom = 1;
}

// QueryRoleManagersResponse is the response type for the
// Query/RoleManagers RPC method.
message QueryRoleManagersResponse { repeated RoleManager role_managers = 1; }

// QueryRoleManagerRequest is the request type for the Query/RoleManager
// RPC method.
message QueryRoleManagerRequest {
  string denom = 1;
  string manager = 2;
}

// QueryRoleManagerResponse is the response type for the
// Query/RoleManager RPC method.
message QueryRoleManagerResponse { RoleManager role_manager = 1; }

// QueryPolicyStatusesRequest is the request type for the Query/PolicyStatuses
// RPC method.
message QueryPolicyStatusesRequest {
  string denom = 1;
}

// QueryRoleManagerResponse is the response type for the
// Query/RoleManager RPC method.
message QueryPolicyStatusesResponse { repeated PolicyStatus policy_statuses = 1; }

// QueryPolicyManagerCapabilitiesRequest is the request type for the Query/PolicyManagerCapabilities
// RPC method.
message QueryPolicyManagerCapabilitiesRequest {
  string denom = 1;
}

// QueryPolicyManagerCapabilitiesResponse is the response type for the
// Query/PolicyManagerCapabilities RPC method.
message QueryPolicyManagerCapabilitiesResponse { repeated PolicyManagerCapability policy_manager_capabilities = 1; }

message QueryVouchersRequest { string denom = 1; }

message QueryVouchersResponse {
  repeated AddressVoucher vouchers = 1;
}

message QueryVoucherRequest {
  string denom = 1;
  string address = 2;
}

message QueryVoucherResponse {
  cosmos.base.v1beta1.Coin voucher = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.jsontag) = "voucher,omitempty"
  ];
}

// QueryModuleStateRequest is the request type for the Query/PermissionsModuleState
// RPC method.
message QueryModuleStateRequest {}

// QueryModuleStateResponse is the response type for the Query/PermissionsModuleState
// RPC method.
message QueryModuleStateResponse { GenesisState state = 1; }