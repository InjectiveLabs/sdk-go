syntax = "proto3";
package injective.auction.v1beta1;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "injective/auction/v1beta1/auction.proto";

option go_package = "github.com/InjectiveLabs/injective-core/injective-chain/modules/auction/types";

// Msg defines the auction Msg service.
service Msg {

  // Bid defines a method for placing a bid for an auction
  rpc Bid(MsgBid) returns (MsgBidResponse);

  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// Bid defines a SDK message for placing a bid for an auction
message MsgBid {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  // amount of the bid in INJ tokens
  cosmos.base.v1beta1.Coin bid_amount = 2 [ (gogoproto.nullable) = false ];
  // the current auction round being bid on
  uint64 round = 3;
}

message MsgBidResponse {}

message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the governance account.
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // params defines the ocr parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [ (gogoproto.nullable) = false ];
}

message MsgUpdateParamsResponse {}