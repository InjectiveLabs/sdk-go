syntax = "proto3";
package injective.auction.v1beta1;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "amino/amino.proto";

option go_package = "github.com/InjectiveLabs/injective-core/injective-chain/modules/auction/types";

message Params {
  option (gogoproto.equal) = true;
  option (amino.name) = "auction/Params";

  // auction_period_duration defines the auction period duration
  int64 auction_period = 1;
  // min_next_bid_increment_rate defines the minimum increment rate for new bids
  string min_next_bid_increment_rate = 2 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  // inj_basket_max_cap defines the maximum cap for INJ contained in an auction
  // basket
  string inj_basket_max_cap = 3 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

message Bid {
  string bidder = 1 [
    (gogoproto.jsontag) = "bidder",
    (gogoproto.moretags) = "yaml:\"bidder\""
  ];

  cosmos.base.v1beta1.Coin amount = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable) = false
  ];
}

message LastAuctionResult {
  // winner describes the address of the winner
  string winner = 1;
  // amount describes the amount the winner get from the auction
  cosmos.base.v1beta1.Coin amount = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable) = false
  ];
  // round defines the round number of auction
  uint64 round = 3;
}

message EventBid {
  // bidder describes the address of bidder
  string bidder = 1;
  // amount describes the amount the bidder put on the auction
  cosmos.base.v1beta1.Coin amount = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable) = false
  ];
  // round defines the round number of auction
  uint64 round = 3;
}

message EventAuctionResult {
  // winner describes the address of the winner
  string winner = 1;
  // amount describes the amount the winner get from the auction
  cosmos.base.v1beta1.Coin amount = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable) = false
  ];
  // round defines the round number of auction
  uint64 round = 3;
}

message EventAuctionStart {
  // round defines the round number of auction
  uint64 round = 1;
  // ending_timestamp describes auction end time
  int64 ending_timestamp = 2;
  // new_basket describes auction module balance at the time of new auction
  // start
  repeated cosmos.base.v1beta1.Coin new_basket = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}