// Code generated with goa v3.7.0, DO NOT EDIT.
//
// InjectiveInsuranceRPC protocol buffer definition
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-indexer/api/design -o ../

syntax = "proto3";

package injective_insurance_rpc;

option go_package = "/injective_insurance_rpcpb";

// InjectiveInsuranceRPC defines gRPC API of Insurance provider.
service InjectiveInsuranceRPC {
	// Funds lists all insurance funds.
	rpc Funds (FundsRequest) returns (FundsResponse);
	// Funds returns an insurance fund for a given insurance fund token denom.
	rpc Fund (FundRequest) returns (FundResponse);
	// PendingRedemptions lists all pending redemptions according to a filter
	rpc Redemptions (RedemptionsRequest) returns (RedemptionsResponse);
}

message FundsRequest {
}

message FundsResponse {
	repeated InsuranceFund funds = 1;
}

message InsuranceFund {
	// Ticker of the derivative market.
	string market_ticker = 1;
	// Derivative Market ID
	string market_id = 2;
	// Coin denom used for the underwriting of the insurance fund.
	string deposit_denom = 3;
	// Pool token denom
	string pool_token_denom = 4;
	// Redemption notice period duration in seconds.
	sint64 redemption_notice_period_duration = 5;
	string balance = 6;
	string total_share = 7;
	// Oracle base currency
	string oracle_base = 8;
	// Oracle quote currency
	string oracle_quote = 9;
	// Oracle Type
	string oracle_type = 10;
	// Defines the expiry, if any
	sint64 expiry = 11;
	// Token metadata for the deposit asset, only for Ethereum-based assets
	TokenMeta deposit_token_meta = 12;
}

message TokenMeta {
	// Token full name
	string name = 1;
	// Token Ethereum contract address
	string address = 2;
	// Token symbol short name
	string symbol = 3;
	// URL to the logo image
	string logo = 4;
	// Token decimals
	sint32 decimals = 5;
	// Token metadata fetched timestamp in UNIX millis.
	sint64 updated_at = 6;
}

message FundRequest {
	// denom of insurance fund
	string denom = 1;
}

message FundResponse {
	// The insurance fund corresponding to the provided token denom
	InsuranceFund fund = 1;
}

message RedemptionsRequest {
	// Account address of the redemption owner
	string redeemer = 1;
	// Denom of the insurance pool token.
	string redemption_denom = 2;
	// Status of the redemption. Either pending or disbursed.
	string status = 3;
}

message RedemptionsResponse {
	repeated RedemptionSchedule redemption_schedules = 1;
}

message RedemptionSchedule {
	// Redemption ID.
	uint64 redemption_id = 1;
	// Status of the redemption. Either pending or disbursed.
	string status = 2;
	// Account address of the redemption owner
	string redeemer = 3;
	// Claimable redemption time in seconds
	sint64 claimable_redemption_time = 4;
	// Amount of pool tokens being redeemed.
	string redemption_amount = 5;
	// Pool token denom being redeemed.
	string redemption_denom = 6;
	// Redemption request time in unix milliseconds.
	sint64 requested_at = 7;
	// Amount of quote tokens disbursed
	string disbursed_amount = 8;
	// Denom of the quote tokens disbursed
	string disbursed_denom = 9;
	// Redemption disbursement time in unix milliseconds.
	sint64 disbursed_at = 10;
}
