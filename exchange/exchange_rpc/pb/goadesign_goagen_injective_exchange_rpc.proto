// Code generated with goa v3.7.0, DO NOT EDIT.
//
// InjectiveExchangeRPC protocol buffer definition
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-indexer/api/design -o ../

syntax = "proto3";

package injective_exchange_rpc;

option go_package = "/injective_exchange_rpcpb";

// InjectiveExchangeRPC defines gRPC API of an Injective Exchange service.
service InjectiveExchangeRPC {
	// GetTx gets transaction details by hash.
	rpc GetTx (GetTxRequest) returns (GetTxResponse);
	// PrepareTx generates a Web3-signable body for a Cosmos transaction
	rpc PrepareTx (PrepareTxRequest) returns (PrepareTxResponse);
	// BroadcastTx broadcasts a signed Web3 transaction
	rpc BroadcastTx (BroadcastTxRequest) returns (BroadcastTxResponse);
	// PrepareCosmosTx generates a Web3-signable body for a Cosmos transaction
	rpc PrepareCosmosTx (PrepareCosmosTxRequest) returns (PrepareCosmosTxResponse);
	// BroadcastCosmosTx broadcasts a signed Web3 transaction
	rpc BroadcastCosmosTx (BroadcastCosmosTxRequest) returns (BroadcastCosmosTxResponse);
	// Return fee payer information's
	rpc GetFeePayer (GetFeePayerRequest) returns (GetFeePayerResponse);
}

message GetTxRequest {
	// Transaction hash in hex without 0x prefix (Cosmos-like).
	string hash = 1;
}

message GetTxResponse {
	// Hex-encoded Tendermint transaction hash
	string tx_hash = 1;
	// The block height
	sint64 height = 2;
	// Tx index in the block
	uint32 index = 3;
	// Namespace for the resp code
	string codespace = 4;
	// Response code
	uint32 code = 5;
	// Result bytes, if any
	bytes data = 6;
	// The output of the application's logger (raw string). May be
// non-deterministic.
	string raw_log = 7;
	// Time of the previous block.
	string timestamp = 8;
}

message PrepareTxRequest {
	// Specify chainID for the target tx
	uint64 chain_id = 1;
	// Specify Ethereum address of a signer
	string signer_address = 2;
	// Deprecated: this field is ignored
	uint64 sequence = 3;
	// Textual memo information to attach with tx
	string memo = 4;
	// Block height until which the transaction is valid.
	uint64 timeout_height = 5;
	// Transaction fee details.
	CosmosTxFee fee = 6;
	// List of Cosmos proto3-encoded Msgs to include in a single tx
	repeated bytes msgs = 7;
}

message CosmosTxFee {
	// Transaction gas price
	repeated CosmosCoin price = 1;
	// Transaction gas limit
	uint64 gas = 2;
	// Explicitly require fee delegation when set to true. Or don't care = false.
// Will be replaced by other flag in the next version.
	bool delegate_fee = 3;
}

message CosmosCoin {
	// Coin denominator
	string denom = 1;
	// Coin amount (big int)
	string amount = 2;
}

message PrepareTxResponse {
	// EIP712-compatible message suitable for signing with eth_signTypedData_v4
	string data = 1;
	// Account tx sequence (nonce)
	uint64 sequence = 2;
	// Sign mode for the resulting tx
	string sign_mode = 3;
	// Specify proto-URL of a public key, which defines the signature format
	string pub_key_type = 4;
	// Fee payer address provided by service
	string fee_payer = 5;
	// Hex-encoded ethsecp256k1 signature bytes from fee payer
	string fee_payer_sig = 6;
}

message BroadcastTxRequest {
	// Specify Web3 chainID (from prepateTx) for the target Tx
	uint64 chain_id = 1;
	// Amino-encoded Tx JSON data (except Msgs)
	bytes tx = 2;
	// List of Cosmos proto3-encoded Msgs from tx
	repeated bytes msgs = 3;
	// Specify ethsecp256k1 pubkey of the signer
	CosmosPubKey pub_key = 4;
	// Hex-encoded ethsecp256k1 signature bytes
	string signature = 5;
	// Fee payer address provided by service
	string fee_payer = 6;
	// Hex-encoded ethsecp256k1 signature bytes from fee payer
	string fee_payer_sig = 7;
	// Broadcast mode
	string mode = 8;
}

message CosmosPubKey {
	// Pubkey type URL
	string type = 1;
	// Hex-encoded string of the public key
	string key = 2;
}

message BroadcastTxResponse {
	// Hex-encoded Tendermint transaction hash
	string tx_hash = 1;
	// The block height
	sint64 height = 2;
	// Tx index in the block
	uint32 index = 3;
	// Namespace for the resp code
	string codespace = 4;
	// Response code
	uint32 code = 5;
	// Result bytes, if any
	bytes data = 6;
	// The output of the application's logger (raw string). May be
// non-deterministic.
	string raw_log = 7;
	// Time of the previous block.
	string timestamp = 8;
}

message PrepareCosmosTxRequest {
	// Specify chainID for the target tx
	uint64 chain_id = 1;
	// sender address provided
	string sender_address = 2;
	// Textual memo information to attach with tx
	string memo = 3;
	// Block height until which the transaction is valid.
	uint64 timeout_height = 4;
	// Transaction fee details.
	CosmosTxFee fee = 5;
	// List of Cosmos proto3-encoded Msgs to include in a single tx
	repeated bytes msgs = 6;
}

message PrepareCosmosTxResponse {
	// proto encoded tx
	bytes tx = 1;
	// Sign mode for the resulting tx
	string sign_mode = 2;
	// Specify proto-URL of a public key, which defines the signature format
	string pub_key_type = 3;
	// Fee payer address provided by service
	string fee_payer = 4;
	// Hex-encoded ethsecp256k1 signature bytes from fee payer
	string fee_payer_sig = 5;
	// ethsecp256k1 feePayer pubkey
	CosmosPubKey fee_payer_pub_key = 6;
}

message BroadcastCosmosTxRequest {
	// proto encoded tx
	bytes tx = 1;
	// Specify ethsecp256k1 sender pubkey
	CosmosPubKey pub_key = 2;
	// Hex-encoded ethsecp256k1 sender signature bytes
	string signature = 3;
	// sender address
	string sender_address = 4;
}

message BroadcastCosmosTxResponse {
	// Hex-encoded Tendermint transaction hash
	string tx_hash = 1;
	// The block height
	sint64 height = 2;
	// Tx index in the block
	uint32 index = 3;
	// Namespace for the resp code
	string codespace = 4;
	// Response code
	uint32 code = 5;
	// Result bytes, if any
	bytes data = 6;
	// The output of the application's logger (raw string). May be
// non-deterministic.
	string raw_log = 7;
	// Time of the previous block.
	string timestamp = 8;
}

message GetFeePayerRequest {
}

message GetFeePayerResponse {
	// Fee payer address provided by service
	string fee_payer = 1;
	// ethsecp256k1 feePayer pubkey
	CosmosPubKey fee_payer_pub_key = 2;
}
