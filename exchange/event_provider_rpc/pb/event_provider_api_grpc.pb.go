// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package event_provider_apipb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventProviderAPIClient is the client API for EventProviderAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventProviderAPIClient interface {
	// Get latest block from event provider
	GetLatestHeight(ctx context.Context, in *GetLatestHeightRequest, opts ...grpc.CallOption) (*GetLatestHeightResponse, error)
	// Stream processed block events for selected backend
	StreamBlockEvents(ctx context.Context, in *StreamBlockEventsRequest, opts ...grpc.CallOption) (EventProviderAPI_StreamBlockEventsClient, error)
	// Get processed block events for selected backend
	GetBlockEventsRPC(ctx context.Context, in *GetBlockEventsRPCRequest, opts ...grpc.CallOption) (*GetBlockEventsRPCResponse, error)
	// Get custom processed block events for selected backend
	GetCustomEventsRPC(ctx context.Context, in *GetCustomEventsRPCRequest, opts ...grpc.CallOption) (*GetCustomEventsRPCResponse, error)
	// Get raw block events for selected height
	GetABCIBlockEvents(ctx context.Context, in *GetABCIBlockEventsRequest, opts ...grpc.CallOption) (*GetABCIBlockEventsResponse, error)
}

type eventProviderAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewEventProviderAPIClient(cc grpc.ClientConnInterface) EventProviderAPIClient {
	return &eventProviderAPIClient{cc}
}

func (c *eventProviderAPIClient) GetLatestHeight(ctx context.Context, in *GetLatestHeightRequest, opts ...grpc.CallOption) (*GetLatestHeightResponse, error) {
	out := new(GetLatestHeightResponse)
	err := c.cc.Invoke(ctx, "/event_provider_api.EventProviderAPI/GetLatestHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventProviderAPIClient) StreamBlockEvents(ctx context.Context, in *StreamBlockEventsRequest, opts ...grpc.CallOption) (EventProviderAPI_StreamBlockEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventProviderAPI_ServiceDesc.Streams[0], "/event_provider_api.EventProviderAPI/StreamBlockEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventProviderAPIStreamBlockEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventProviderAPI_StreamBlockEventsClient interface {
	Recv() (*StreamBlockEventsResponse, error)
	grpc.ClientStream
}

type eventProviderAPIStreamBlockEventsClient struct {
	grpc.ClientStream
}

func (x *eventProviderAPIStreamBlockEventsClient) Recv() (*StreamBlockEventsResponse, error) {
	m := new(StreamBlockEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventProviderAPIClient) GetBlockEventsRPC(ctx context.Context, in *GetBlockEventsRPCRequest, opts ...grpc.CallOption) (*GetBlockEventsRPCResponse, error) {
	out := new(GetBlockEventsRPCResponse)
	err := c.cc.Invoke(ctx, "/event_provider_api.EventProviderAPI/GetBlockEventsRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventProviderAPIClient) GetCustomEventsRPC(ctx context.Context, in *GetCustomEventsRPCRequest, opts ...grpc.CallOption) (*GetCustomEventsRPCResponse, error) {
	out := new(GetCustomEventsRPCResponse)
	err := c.cc.Invoke(ctx, "/event_provider_api.EventProviderAPI/GetCustomEventsRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventProviderAPIClient) GetABCIBlockEvents(ctx context.Context, in *GetABCIBlockEventsRequest, opts ...grpc.CallOption) (*GetABCIBlockEventsResponse, error) {
	out := new(GetABCIBlockEventsResponse)
	err := c.cc.Invoke(ctx, "/event_provider_api.EventProviderAPI/GetABCIBlockEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventProviderAPIServer is the server API for EventProviderAPI service.
// All implementations must embed UnimplementedEventProviderAPIServer
// for forward compatibility
type EventProviderAPIServer interface {
	// Get latest block from event provider
	GetLatestHeight(context.Context, *GetLatestHeightRequest) (*GetLatestHeightResponse, error)
	// Stream processed block events for selected backend
	StreamBlockEvents(*StreamBlockEventsRequest, EventProviderAPI_StreamBlockEventsServer) error
	// Get processed block events for selected backend
	GetBlockEventsRPC(context.Context, *GetBlockEventsRPCRequest) (*GetBlockEventsRPCResponse, error)
	// Get custom processed block events for selected backend
	GetCustomEventsRPC(context.Context, *GetCustomEventsRPCRequest) (*GetCustomEventsRPCResponse, error)
	// Get raw block events for selected height
	GetABCIBlockEvents(context.Context, *GetABCIBlockEventsRequest) (*GetABCIBlockEventsResponse, error)
	mustEmbedUnimplementedEventProviderAPIServer()
}

// UnimplementedEventProviderAPIServer must be embedded to have forward compatible implementations.
type UnimplementedEventProviderAPIServer struct {
}

func (UnimplementedEventProviderAPIServer) GetLatestHeight(context.Context, *GetLatestHeightRequest) (*GetLatestHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestHeight not implemented")
}
func (UnimplementedEventProviderAPIServer) StreamBlockEvents(*StreamBlockEventsRequest, EventProviderAPI_StreamBlockEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamBlockEvents not implemented")
}
func (UnimplementedEventProviderAPIServer) GetBlockEventsRPC(context.Context, *GetBlockEventsRPCRequest) (*GetBlockEventsRPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockEventsRPC not implemented")
}
func (UnimplementedEventProviderAPIServer) GetCustomEventsRPC(context.Context, *GetCustomEventsRPCRequest) (*GetCustomEventsRPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomEventsRPC not implemented")
}
func (UnimplementedEventProviderAPIServer) GetABCIBlockEvents(context.Context, *GetABCIBlockEventsRequest) (*GetABCIBlockEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetABCIBlockEvents not implemented")
}
func (UnimplementedEventProviderAPIServer) mustEmbedUnimplementedEventProviderAPIServer() {}

// UnsafeEventProviderAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventProviderAPIServer will
// result in compilation errors.
type UnsafeEventProviderAPIServer interface {
	mustEmbedUnimplementedEventProviderAPIServer()
}

func RegisterEventProviderAPIServer(s grpc.ServiceRegistrar, srv EventProviderAPIServer) {
	s.RegisterService(&EventProviderAPI_ServiceDesc, srv)
}

func _EventProviderAPI_GetLatestHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventProviderAPIServer).GetLatestHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event_provider_api.EventProviderAPI/GetLatestHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventProviderAPIServer).GetLatestHeight(ctx, req.(*GetLatestHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventProviderAPI_StreamBlockEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamBlockEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventProviderAPIServer).StreamBlockEvents(m, &eventProviderAPIStreamBlockEventsServer{stream})
}

type EventProviderAPI_StreamBlockEventsServer interface {
	Send(*StreamBlockEventsResponse) error
	grpc.ServerStream
}

type eventProviderAPIStreamBlockEventsServer struct {
	grpc.ServerStream
}

func (x *eventProviderAPIStreamBlockEventsServer) Send(m *StreamBlockEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EventProviderAPI_GetBlockEventsRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockEventsRPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventProviderAPIServer).GetBlockEventsRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event_provider_api.EventProviderAPI/GetBlockEventsRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventProviderAPIServer).GetBlockEventsRPC(ctx, req.(*GetBlockEventsRPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventProviderAPI_GetCustomEventsRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomEventsRPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventProviderAPIServer).GetCustomEventsRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event_provider_api.EventProviderAPI/GetCustomEventsRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventProviderAPIServer).GetCustomEventsRPC(ctx, req.(*GetCustomEventsRPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventProviderAPI_GetABCIBlockEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetABCIBlockEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventProviderAPIServer).GetABCIBlockEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event_provider_api.EventProviderAPI/GetABCIBlockEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventProviderAPIServer).GetABCIBlockEvents(ctx, req.(*GetABCIBlockEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventProviderAPI_ServiceDesc is the grpc.ServiceDesc for EventProviderAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventProviderAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event_provider_api.EventProviderAPI",
	HandlerType: (*EventProviderAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLatestHeight",
			Handler:    _EventProviderAPI_GetLatestHeight_Handler,
		},
		{
			MethodName: "GetBlockEventsRPC",
			Handler:    _EventProviderAPI_GetBlockEventsRPC_Handler,
		},
		{
			MethodName: "GetCustomEventsRPC",
			Handler:    _EventProviderAPI_GetCustomEventsRPC_Handler,
		},
		{
			MethodName: "GetABCIBlockEvents",
			Handler:    _EventProviderAPI_GetABCIBlockEvents_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamBlockEvents",
			Handler:       _EventProviderAPI_StreamBlockEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "event_provider_api.proto",
}
