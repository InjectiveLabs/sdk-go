// Code generated with goa v3.5.2, DO NOT EDIT.
//
// InjectiveDmmRPC protocol buffer definition
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-exchange/api/design -o ../

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: injective_dmm_rpc.proto

package injective_dmm_rpcpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetEpochsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetEpochsRequest) Reset() {
	*x = GetEpochsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_dmm_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEpochsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEpochsRequest) ProtoMessage() {}

func (x *GetEpochsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_injective_dmm_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEpochsRequest.ProtoReflect.Descriptor instead.
func (*GetEpochsRequest) Descriptor() ([]byte, []int) {
	return file_injective_dmm_rpc_proto_rawDescGZIP(), []int{0}
}

type GetEpochsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Meta of all passed epochs and the current or next incoming epoch, order by
	// Epoch start/end time desc
	Epochs []*EpochMeta `protobuf:"bytes,1,rep,name=epochs,proto3" json:"epochs,omitempty"`
}

func (x *GetEpochsResponse) Reset() {
	*x = GetEpochsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_dmm_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEpochsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEpochsResponse) ProtoMessage() {}

func (x *GetEpochsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_injective_dmm_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEpochsResponse.ProtoReflect.Descriptor instead.
func (*GetEpochsResponse) Descriptor() ([]byte, []int) {
	return file_injective_dmm_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *GetEpochsResponse) GetEpochs() []*EpochMeta {
	if x != nil {
		return x.Epochs
	}
	return nil
}

type EpochMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of this epoch.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The start time of this epoch formatted in RFC3339.
	StartTime string `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The end time of this epoch formatted in RFC3339.
	EndTime string `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// The total reward inj amount of this epoch.
	RewardInjNum string `protobuf:"bytes,4,opt,name=reward_inj_num,json=rewardInjNum,proto3" json:"reward_inj_num,omitempty"`
	// The reward fraction of the LCS ranking pool of this epoch.
	LcsRewardFraction string `protobuf:"bytes,6,opt,name=lcs_reward_fraction,json=lcsRewardFraction,proto3" json:"lcs_reward_fraction,omitempty"`
	// The reward fraction of the VCS ranking pool of this epoch.
	VcsRewardFraction string `protobuf:"bytes,7,opt,name=vcs_reward_fraction,json=vcsRewardFraction,proto3" json:"vcs_reward_fraction,omitempty"`
	// Markets configuration
	Markets map[string]*MarketConfig `protobuf:"bytes,8,rep,name=markets,proto3" json:"markets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// All DMMs' addresses
	DmmAddresses map[string]*ArrayOfString `protobuf:"bytes,9,rep,name=dmm_addresses,json=dmmAddresses,proto3" json:"dmm_addresses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EpochMeta) Reset() {
	*x = EpochMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_dmm_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochMeta) ProtoMessage() {}

func (x *EpochMeta) ProtoReflect() protoreflect.Message {
	mi := &file_injective_dmm_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpochMeta.ProtoReflect.Descriptor instead.
func (*EpochMeta) Descriptor() ([]byte, []int) {
	return file_injective_dmm_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *EpochMeta) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EpochMeta) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *EpochMeta) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *EpochMeta) GetRewardInjNum() string {
	if x != nil {
		return x.RewardInjNum
	}
	return ""
}

func (x *EpochMeta) GetLcsRewardFraction() string {
	if x != nil {
		return x.LcsRewardFraction
	}
	return ""
}

func (x *EpochMeta) GetVcsRewardFraction() string {
	if x != nil {
		return x.VcsRewardFraction
	}
	return ""
}

func (x *EpochMeta) GetMarkets() map[string]*MarketConfig {
	if x != nil {
		return x.Markets
	}
	return nil
}

func (x *EpochMeta) GetDmmAddresses() map[string]*ArrayOfString {
	if x != nil {
		return x.DmmAddresses
	}
	return nil
}

type MarketConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market adjust factor for LCS
	LcsAdjustFactor string `protobuf:"bytes,1,opt,name=lcs_adjust_factor,json=lcsAdjustFactor,proto3" json:"lcs_adjust_factor,omitempty"`
	// Market adjust factor for VCS
	VcsAdjustFactor string `protobuf:"bytes,2,opt,name=vcs_adjust_factor,json=vcsAdjustFactor,proto3" json:"vcs_adjust_factor,omitempty"`
	// Order value multipliers
	OrderValueMultipliers []*OrderValueMultiplier `protobuf:"bytes,3,rep,name=order_value_multipliers,json=orderValueMultipliers,proto3" json:"order_value_multipliers,omitempty"`
}

func (x *MarketConfig) Reset() {
	*x = MarketConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_dmm_rpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketConfig) ProtoMessage() {}

func (x *MarketConfig) ProtoReflect() protoreflect.Message {
	mi := &file_injective_dmm_rpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketConfig.ProtoReflect.Descriptor instead.
func (*MarketConfig) Descriptor() ([]byte, []int) {
	return file_injective_dmm_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *MarketConfig) GetLcsAdjustFactor() string {
	if x != nil {
		return x.LcsAdjustFactor
	}
	return ""
}

func (x *MarketConfig) GetVcsAdjustFactor() string {
	if x != nil {
		return x.VcsAdjustFactor
	}
	return ""
}

func (x *MarketConfig) GetOrderValueMultipliers() []*OrderValueMultiplier {
	if x != nil {
		return x.OrderValueMultipliers
	}
	return nil
}

type OrderValueMultiplier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The threshold of the bias between market price and order price
	OrderPriceBiasThreshold string `protobuf:"bytes,1,opt,name=order_price_bias_threshold,json=orderPriceBiasThreshold,proto3" json:"order_price_bias_threshold,omitempty"`
	// The order value multiplier for orders matching this bucket
	Multiplier string `protobuf:"bytes,2,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
}

func (x *OrderValueMultiplier) Reset() {
	*x = OrderValueMultiplier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_dmm_rpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderValueMultiplier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderValueMultiplier) ProtoMessage() {}

func (x *OrderValueMultiplier) ProtoReflect() protoreflect.Message {
	mi := &file_injective_dmm_rpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderValueMultiplier.ProtoReflect.Descriptor instead.
func (*OrderValueMultiplier) Descriptor() ([]byte, []int) {
	return file_injective_dmm_rpc_proto_rawDescGZIP(), []int{4}
}

func (x *OrderValueMultiplier) GetOrderPriceBiasThreshold() string {
	if x != nil {
		return x.OrderPriceBiasThreshold
	}
	return ""
}

func (x *OrderValueMultiplier) GetMultiplier() string {
	if x != nil {
		return x.Multiplier
	}
	return ""
}

type ArrayOfString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field []string `protobuf:"bytes,1,rep,name=field,proto3" json:"field,omitempty"`
}

func (x *ArrayOfString) Reset() {
	*x = ArrayOfString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_dmm_rpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArrayOfString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrayOfString) ProtoMessage() {}

func (x *ArrayOfString) ProtoReflect() protoreflect.Message {
	mi := &file_injective_dmm_rpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrayOfString.ProtoReflect.Descriptor instead.
func (*ArrayOfString) Descriptor() ([]byte, []int) {
	return file_injective_dmm_rpc_proto_rawDescGZIP(), []int{5}
}

func (x *ArrayOfString) GetField() []string {
	if x != nil {
		return x.Field
	}
	return nil
}

type GetEpochSummaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the epoch, if empty, will return records of the latest epoch
	EpochId string `protobuf:"bytes,1,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
}

func (x *GetEpochSummaryRequest) Reset() {
	*x = GetEpochSummaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_dmm_rpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEpochSummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEpochSummaryRequest) ProtoMessage() {}

func (x *GetEpochSummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_injective_dmm_rpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEpochSummaryRequest.ProtoReflect.Descriptor instead.
func (*GetEpochSummaryRequest) Descriptor() ([]byte, []int) {
	return file_injective_dmm_rpc_proto_rawDescGZIP(), []int{6}
}

func (x *GetEpochSummaryRequest) GetEpochId() string {
	if x != nil {
		return x.EpochId
	}
	return ""
}

type GetEpochSummaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The latest epoch
	Epoch *Epoch `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *GetEpochSummaryResponse) Reset() {
	*x = GetEpochSummaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_dmm_rpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEpochSummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEpochSummaryResponse) ProtoMessage() {}

func (x *GetEpochSummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_injective_dmm_rpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEpochSummaryResponse.ProtoReflect.Descriptor instead.
func (*GetEpochSummaryResponse) Descriptor() ([]byte, []int) {
	return file_injective_dmm_rpc_proto_rawDescGZIP(), []int{7}
}

func (x *GetEpochSummaryResponse) GetEpoch() *Epoch {
	if x != nil {
		return x.Epoch
	}
	return nil
}

type Epoch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The metadata of this epoch.
	Meta *EpochMeta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The latest result record of this epoch.
	Result *EpochResultRecord `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *Epoch) Reset() {
	*x = Epoch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_dmm_rpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Epoch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Epoch) ProtoMessage() {}

func (x *Epoch) ProtoReflect() protoreflect.Message {
	mi := &file_injective_dmm_rpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Epoch.ProtoReflect.Descriptor instead.
func (*Epoch) Descriptor() ([]byte, []int) {
	return file_injective_dmm_rpc_proto_rawDescGZIP(), []int{8}
}

func (x *Epoch) GetMeta() *EpochMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Epoch) GetResult() *EpochResultRecord {
	if x != nil {
		return x.Result
	}
	return nil
}

type EpochResultRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All DMMs' final LCS.
	Lcs *LCSResultRecord `protobuf:"bytes,1,opt,name=lcs,proto3" json:"lcs,omitempty"`
	// All DMMs' final VCS.
	Vcs *VCSResultRecord `protobuf:"bytes,2,opt,name=vcs,proto3" json:"vcs,omitempty"`
	// The timestamp which this result record is updated at
	CreatedAt string `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *EpochResultRecord) Reset() {
	*x = EpochResultRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_dmm_rpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochResultRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochResultRecord) ProtoMessage() {}

func (x *EpochResultRecord) ProtoReflect() protoreflect.Message {
	mi := &file_injective_dmm_rpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpochResultRecord.ProtoReflect.Descriptor instead.
func (*EpochResultRecord) Descriptor() ([]byte, []int) {
	return file_injective_dmm_rpc_proto_rawDescGZIP(), []int{9}
}

func (x *EpochResultRecord) GetLcs() *LCSResultRecord {
	if x != nil {
		return x.Lcs
	}
	return nil
}

func (x *EpochResultRecord) GetVcs() *VCSResultRecord {
	if x != nil {
		return x.Vcs
	}
	return nil
}

func (x *EpochResultRecord) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type LCSResultRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Summary LCS of each DMM in this epoch
	Summary map[string]*DMMLCS `protobuf:"bytes,1,rep,name=summary,proto3" json:"summary,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// LCS of each DMM in each market
	ByMarkets map[string]*MapOfStringDMMLCS `protobuf:"bytes,2,rep,name=by_markets,json=byMarkets,proto3" json:"by_markets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LCSResultRecord) Reset() {
	*x = LCSResultRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_dmm_rpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LCSResultRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LCSResultRecord) ProtoMessage() {}

func (x *LCSResultRecord) ProtoReflect() protoreflect.Message {
	mi := &file_injective_dmm_rpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LCSResultRecord.ProtoReflect.Descriptor instead.
func (*LCSResultRecord) Descriptor() ([]byte, []int) {
	return file_injective_dmm_rpc_proto_rawDescGZIP(), []int{10}
}

func (x *LCSResultRecord) GetSummary() map[string]*DMMLCS {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *LCSResultRecord) GetByMarkets() map[string]*MapOfStringDMMLCS {
	if x != nil {
		return x.ByMarkets
	}
	return nil
}

type DMMLCS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LCS
	Lcs string `protobuf:"bytes,1,opt,name=lcs,proto3" json:"lcs,omitempty"`
	// Sum of normalized buy order value of all snapshots
	NormBuy string `protobuf:"bytes,2,opt,name=norm_buy,json=normBuy,proto3" json:"norm_buy,omitempty"`
	// Sum of normalized sell order value of all snapshots
	NormSell string `protobuf:"bytes,3,opt,name=norm_sell,json=normSell,proto3" json:"norm_sell,omitempty"`
}

func (x *DMMLCS) Reset() {
	*x = DMMLCS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_dmm_rpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DMMLCS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DMMLCS) ProtoMessage() {}

func (x *DMMLCS) ProtoReflect() protoreflect.Message {
	mi := &file_injective_dmm_rpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DMMLCS.ProtoReflect.Descriptor instead.
func (*DMMLCS) Descriptor() ([]byte, []int) {
	return file_injective_dmm_rpc_proto_rawDescGZIP(), []int{11}
}

func (x *DMMLCS) GetLcs() string {
	if x != nil {
		return x.Lcs
	}
	return ""
}

func (x *DMMLCS) GetNormBuy() string {
	if x != nil {
		return x.NormBuy
	}
	return ""
}

func (x *DMMLCS) GetNormSell() string {
	if x != nil {
		return x.NormSell
	}
	return ""
}

type MapOfStringDMMLCS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field map[string]*DMMLCS `protobuf:"bytes,1,rep,name=field,proto3" json:"field,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapOfStringDMMLCS) Reset() {
	*x = MapOfStringDMMLCS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_dmm_rpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapOfStringDMMLCS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapOfStringDMMLCS) ProtoMessage() {}

func (x *MapOfStringDMMLCS) ProtoReflect() protoreflect.Message {
	mi := &file_injective_dmm_rpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapOfStringDMMLCS.ProtoReflect.Descriptor instead.
func (*MapOfStringDMMLCS) Descriptor() ([]byte, []int) {
	return file_injective_dmm_rpc_proto_rawDescGZIP(), []int{12}
}

func (x *MapOfStringDMMLCS) GetField() map[string]*DMMLCS {
	if x != nil {
		return x.Field
	}
	return nil
}

type VCSResultRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Summary VCS of each DMM in this epoch
	Summary map[string]*DMMVCS `protobuf:"bytes,1,rep,name=summary,proto3" json:"summary,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// VCS of each DMM in each market
	ByMarkets map[string]*MapOfStringDMMVCS `protobuf:"bytes,2,rep,name=by_markets,json=byMarkets,proto3" json:"by_markets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// VCS of each DMM in each day
	ByDate map[int32]*MapOfStringDMMVCS `protobuf:"bytes,3,rep,name=by_date,json=byDate,proto3" json:"by_date,omitempty" protobuf_key:"zigzag32,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VCSResultRecord) Reset() {
	*x = VCSResultRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_dmm_rpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCSResultRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCSResultRecord) ProtoMessage() {}

func (x *VCSResultRecord) ProtoReflect() protoreflect.Message {
	mi := &file_injective_dmm_rpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCSResultRecord.ProtoReflect.Descriptor instead.
func (*VCSResultRecord) Descriptor() ([]byte, []int) {
	return file_injective_dmm_rpc_proto_rawDescGZIP(), []int{13}
}

func (x *VCSResultRecord) GetSummary() map[string]*DMMVCS {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *VCSResultRecord) GetByMarkets() map[string]*MapOfStringDMMVCS {
	if x != nil {
		return x.ByMarkets
	}
	return nil
}

func (x *VCSResultRecord) GetByDate() map[int32]*MapOfStringDMMVCS {
	if x != nil {
		return x.ByDate
	}
	return nil
}

type DMMVCS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VCS
	Vcs string `protobuf:"bytes,1,opt,name=vcs,proto3" json:"vcs,omitempty"`
	// Total trade volume
	Volume string `protobuf:"bytes,2,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *DMMVCS) Reset() {
	*x = DMMVCS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_dmm_rpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DMMVCS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DMMVCS) ProtoMessage() {}

func (x *DMMVCS) ProtoReflect() protoreflect.Message {
	mi := &file_injective_dmm_rpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DMMVCS.ProtoReflect.Descriptor instead.
func (*DMMVCS) Descriptor() ([]byte, []int) {
	return file_injective_dmm_rpc_proto_rawDescGZIP(), []int{14}
}

func (x *DMMVCS) GetVcs() string {
	if x != nil {
		return x.Vcs
	}
	return ""
}

func (x *DMMVCS) GetVolume() string {
	if x != nil {
		return x.Volume
	}
	return ""
}

type MapOfStringDMMVCS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field map[string]*DMMVCS `protobuf:"bytes,1,rep,name=field,proto3" json:"field,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapOfStringDMMVCS) Reset() {
	*x = MapOfStringDMMVCS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_dmm_rpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapOfStringDMMVCS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapOfStringDMMVCS) ProtoMessage() {}

func (x *MapOfStringDMMVCS) ProtoReflect() protoreflect.Message {
	mi := &file_injective_dmm_rpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapOfStringDMMVCS.ProtoReflect.Descriptor instead.
func (*MapOfStringDMMVCS) Descriptor() ([]byte, []int) {
	return file_injective_dmm_rpc_proto_rawDescGZIP(), []int{15}
}

func (x *MapOfStringDMMVCS) GetField() map[string]*DMMVCS {
	if x != nil {
		return x.Field
	}
	return nil
}

type GetDMMRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account address
	AccountAddress string `protobuf:"bytes,1,opt,name=account_address,json=accountAddress,proto3" json:"account_address,omitempty"`
	// The name of this dmm
	DmmName string `protobuf:"bytes,2,opt,name=dmm_name,json=dmmName,proto3" json:"dmm_name,omitempty"`
	// The ID of the epoch, if empty, will return records of the latest epoch
	EpochId string `protobuf:"bytes,3,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
}

func (x *GetDMMRecordsRequest) Reset() {
	*x = GetDMMRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_dmm_rpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDMMRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDMMRecordsRequest) ProtoMessage() {}

func (x *GetDMMRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_injective_dmm_rpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDMMRecordsRequest.ProtoReflect.Descriptor instead.
func (*GetDMMRecordsRequest) Descriptor() ([]byte, []int) {
	return file_injective_dmm_rpc_proto_rawDescGZIP(), []int{16}
}

func (x *GetDMMRecordsRequest) GetAccountAddress() string {
	if x != nil {
		return x.AccountAddress
	}
	return ""
}

func (x *GetDMMRecordsRequest) GetDmmName() string {
	if x != nil {
		return x.DmmName
	}
	return ""
}

func (x *GetDMMRecordsRequest) GetEpochId() string {
	if x != nil {
		return x.EpochId
	}
	return ""
}

type GetDMMRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The metadata of this epoch.
	Meta *EpochMeta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// List of records, same structure as the whole epoch's result with only one
	// dmm's info
	Records []*EpochResultRecord `protobuf:"bytes,2,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *GetDMMRecordsResponse) Reset() {
	*x = GetDMMRecordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_dmm_rpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDMMRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDMMRecordsResponse) ProtoMessage() {}

func (x *GetDMMRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_injective_dmm_rpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDMMRecordsResponse.ProtoReflect.Descriptor instead.
func (*GetDMMRecordsResponse) Descriptor() ([]byte, []int) {
	return file_injective_dmm_rpc_proto_rawDescGZIP(), []int{17}
}

func (x *GetDMMRecordsResponse) GetMeta() *EpochMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *GetDMMRecordsResponse) GetRecords() []*EpochResultRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

var File_injective_dmm_rpc_proto protoreflect.FileDescriptor

var file_injective_dmm_rpc_proto_rawDesc = []byte{
	0x0a, 0x17, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x6d, 0x6d, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x69, 0x6e, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x6d, 0x6d, 0x5f, 0x72, 0x70, 0x63, 0x22, 0x12, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x49, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x64, 0x6d, 0x6d, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x06, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x73, 0x22, 0xb5, 0x04, 0x0a, 0x09,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e,
	0x6a, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x49, 0x6e, 0x6a, 0x4e, 0x75, 0x6d, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x63, 0x73,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x63, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x76, 0x63, 0x73,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x63, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x07, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6e, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x6d, 0x6d, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x53,
	0x0a, 0x0d, 0x64, 0x6d, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x64, 0x6d, 0x6d, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x4d,
	0x65, 0x74, 0x61, 0x2e, 0x44, 0x6d, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x64, 0x6d, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x1a, 0x5b, 0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x64, 0x6d, 0x6d, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x61, 0x0a, 0x11, 0x44, 0x6d, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x64, 0x6d, 0x6d, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x4f, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xc7, 0x01, 0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x63, 0x73, 0x5f, 0x61, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6c, 0x63, 0x73, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x2a, 0x0a, 0x11, 0x76, 0x63, 0x73, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x63, 0x73,
	0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x5f, 0x0a, 0x17,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x6d, 0x6d, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x52, 0x15, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x73, 0x22, 0x73, 0x0a,
	0x14, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x1a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x69, 0x61, 0x73, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x22, 0x25, 0x0a, 0x0d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4f, 0x66, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x33, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x49, 0x64, 0x22, 0x49,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x6d, 0x6d, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x22, 0x77, 0x0a, 0x05, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x6d, 0x6d,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x64, 0x6d, 0x6d, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x9e, 0x01, 0x0a, 0x11, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x6c, 0x63, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x64, 0x6d, 0x6d, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x43, 0x53, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x03, 0x6c, 0x63, 0x73, 0x12, 0x34,
	0x0a, 0x03, 0x76, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x6d, 0x6d, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x56, 0x43, 0x53, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x03, 0x76, 0x63, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0xe9, 0x02, 0x0a, 0x0f, 0x4c, 0x43, 0x53, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x49, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x6d, 0x6d, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x43, 0x53,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x50, 0x0a, 0x0a, 0x62, 0x79, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x64, 0x6d, 0x6d, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x43, 0x53, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x42, 0x79, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x62, 0x79, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x73, 0x1a, 0x55, 0x0a, 0x0c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x64, 0x6d, 0x6d, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x4d, 0x4d, 0x4c, 0x43, 0x53,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x62, 0x0a, 0x0e, 0x42,
	0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x6d, 0x6d, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x4d, 0x61, 0x70, 0x4f, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x4d,
	0x4d, 0x4c, 0x43, 0x53, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x52, 0x0a, 0x06, 0x44, 0x4d, 0x4d, 0x4c, 0x43, 0x53, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x63, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x63, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6e,
	0x6f, 0x72, 0x6d, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x6f, 0x72, 0x6d, 0x42, 0x75, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x72, 0x6d, 0x5f, 0x73,
	0x65, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x72, 0x6d, 0x53,
	0x65, 0x6c, 0x6c, 0x22, 0xaf, 0x01, 0x0a, 0x11, 0x4d, 0x61, 0x70, 0x4f, 0x66, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x44, 0x4d, 0x4d, 0x4c, 0x43, 0x53, 0x12, 0x45, 0x0a, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x6d, 0x6d, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x70,
	0x4f, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x4d, 0x4d, 0x4c, 0x43, 0x53, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x1a, 0x53, 0x0a, 0x0a, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x6d, 0x6d, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x44, 0x4d, 0x4d, 0x4c, 0x43, 0x53, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x93, 0x04, 0x0a, 0x0f, 0x56, 0x43, 0x53, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x49, 0x0a, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6e, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x6d, 0x6d, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x56,
	0x43, 0x53, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x50, 0x0a, 0x0a, 0x62, 0x79, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x6d, 0x6d, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x43, 0x53,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x42, 0x79, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x62, 0x79, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x07, 0x62, 0x79, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x64, 0x6d, 0x6d, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x43, 0x53, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x42, 0x79, 0x44, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x62, 0x79, 0x44, 0x61, 0x74, 0x65, 0x1a,
	0x55, 0x0a, 0x0c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x6d, 0x6d,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x4d, 0x4d, 0x56, 0x43, 0x53, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x62, 0x0a, 0x0e, 0x42, 0x79, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69, 0x6e, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x6d, 0x6d, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61,
	0x70, 0x4f, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x4d, 0x4d, 0x56, 0x43, 0x53, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5f, 0x0a, 0x0b, 0x42, 0x79,
	0x44, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69, 0x6e, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x6d, 0x6d, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4d,
	0x61, 0x70, 0x4f, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x4d, 0x4d, 0x56, 0x43, 0x53,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x32, 0x0a, 0x06, 0x44,
	0x4d, 0x4d, 0x56, 0x43, 0x53, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x76, 0x63, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22,
	0xaf, 0x01, 0x0a, 0x11, 0x4d, 0x61, 0x70, 0x4f, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44,
	0x4d, 0x4d, 0x56, 0x43, 0x53, 0x12, 0x45, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x64, 0x6d, 0x6d, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x70, 0x4f, 0x66, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x44, 0x4d, 0x4d, 0x56, 0x43, 0x53, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x53, 0x0a, 0x0a,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x6d, 0x6d, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x44, 0x4d, 0x4d, 0x56, 0x43, 0x53, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x75, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x4d, 0x4d, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x6d, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6d, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x49, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x44, 0x4d, 0x4d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x6d, 0x6d,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x64, 0x6d, 0x6d, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x32, 0xb7, 0x02, 0x0a, 0x0f, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x44, 0x6d, 0x6d, 0x52, 0x50, 0x43, 0x12, 0x56, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x73, 0x12, 0x23, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x64, 0x6d, 0x6d, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x69, 0x6e, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x6d, 0x6d, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x68, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x29, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x64, 0x6d, 0x6d, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x6d, 0x6d, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x44, 0x4d, 0x4d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x27, 0x2e, 0x69, 0x6e,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x6d, 0x6d, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x4d, 0x4d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x64, 0x6d, 0x6d, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x4d, 0x4d, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x16,
	0x5a, 0x14, 0x2f, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x6d, 0x6d,
	0x5f, 0x72, 0x70, 0x63, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_injective_dmm_rpc_proto_rawDescOnce sync.Once
	file_injective_dmm_rpc_proto_rawDescData = file_injective_dmm_rpc_proto_rawDesc
)

func file_injective_dmm_rpc_proto_rawDescGZIP() []byte {
	file_injective_dmm_rpc_proto_rawDescOnce.Do(func() {
		file_injective_dmm_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_injective_dmm_rpc_proto_rawDescData)
	})
	return file_injective_dmm_rpc_proto_rawDescData
}

var file_injective_dmm_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_injective_dmm_rpc_proto_goTypes = []interface{}{
	(*GetEpochsRequest)(nil),        // 0: injective_dmm_rpc.GetEpochsRequest
	(*GetEpochsResponse)(nil),       // 1: injective_dmm_rpc.GetEpochsResponse
	(*EpochMeta)(nil),               // 2: injective_dmm_rpc.EpochMeta
	(*MarketConfig)(nil),            // 3: injective_dmm_rpc.MarketConfig
	(*OrderValueMultiplier)(nil),    // 4: injective_dmm_rpc.OrderValueMultiplier
	(*ArrayOfString)(nil),           // 5: injective_dmm_rpc.ArrayOfString
	(*GetEpochSummaryRequest)(nil),  // 6: injective_dmm_rpc.GetEpochSummaryRequest
	(*GetEpochSummaryResponse)(nil), // 7: injective_dmm_rpc.GetEpochSummaryResponse
	(*Epoch)(nil),                   // 8: injective_dmm_rpc.Epoch
	(*EpochResultRecord)(nil),       // 9: injective_dmm_rpc.EpochResultRecord
	(*LCSResultRecord)(nil),         // 10: injective_dmm_rpc.LCSResultRecord
	(*DMMLCS)(nil),                  // 11: injective_dmm_rpc.DMMLCS
	(*MapOfStringDMMLCS)(nil),       // 12: injective_dmm_rpc.MapOfStringDMMLCS
	(*VCSResultRecord)(nil),         // 13: injective_dmm_rpc.VCSResultRecord
	(*DMMVCS)(nil),                  // 14: injective_dmm_rpc.DMMVCS
	(*MapOfStringDMMVCS)(nil),       // 15: injective_dmm_rpc.MapOfStringDMMVCS
	(*GetDMMRecordsRequest)(nil),    // 16: injective_dmm_rpc.GetDMMRecordsRequest
	(*GetDMMRecordsResponse)(nil),   // 17: injective_dmm_rpc.GetDMMRecordsResponse
	nil,                             // 18: injective_dmm_rpc.EpochMeta.MarketsEntry
	nil,                             // 19: injective_dmm_rpc.EpochMeta.DmmAddressesEntry
	nil,                             // 20: injective_dmm_rpc.LCSResultRecord.SummaryEntry
	nil,                             // 21: injective_dmm_rpc.LCSResultRecord.ByMarketsEntry
	nil,                             // 22: injective_dmm_rpc.MapOfStringDMMLCS.FieldEntry
	nil,                             // 23: injective_dmm_rpc.VCSResultRecord.SummaryEntry
	nil,                             // 24: injective_dmm_rpc.VCSResultRecord.ByMarketsEntry
	nil,                             // 25: injective_dmm_rpc.VCSResultRecord.ByDateEntry
	nil,                             // 26: injective_dmm_rpc.MapOfStringDMMVCS.FieldEntry
}
var file_injective_dmm_rpc_proto_depIdxs = []int32{
	2,  // 0: injective_dmm_rpc.GetEpochsResponse.epochs:type_name -> injective_dmm_rpc.EpochMeta
	18, // 1: injective_dmm_rpc.EpochMeta.markets:type_name -> injective_dmm_rpc.EpochMeta.MarketsEntry
	19, // 2: injective_dmm_rpc.EpochMeta.dmm_addresses:type_name -> injective_dmm_rpc.EpochMeta.DmmAddressesEntry
	4,  // 3: injective_dmm_rpc.MarketConfig.order_value_multipliers:type_name -> injective_dmm_rpc.OrderValueMultiplier
	8,  // 4: injective_dmm_rpc.GetEpochSummaryResponse.epoch:type_name -> injective_dmm_rpc.Epoch
	2,  // 5: injective_dmm_rpc.Epoch.meta:type_name -> injective_dmm_rpc.EpochMeta
	9,  // 6: injective_dmm_rpc.Epoch.result:type_name -> injective_dmm_rpc.EpochResultRecord
	10, // 7: injective_dmm_rpc.EpochResultRecord.lcs:type_name -> injective_dmm_rpc.LCSResultRecord
	13, // 8: injective_dmm_rpc.EpochResultRecord.vcs:type_name -> injective_dmm_rpc.VCSResultRecord
	20, // 9: injective_dmm_rpc.LCSResultRecord.summary:type_name -> injective_dmm_rpc.LCSResultRecord.SummaryEntry
	21, // 10: injective_dmm_rpc.LCSResultRecord.by_markets:type_name -> injective_dmm_rpc.LCSResultRecord.ByMarketsEntry
	22, // 11: injective_dmm_rpc.MapOfStringDMMLCS.field:type_name -> injective_dmm_rpc.MapOfStringDMMLCS.FieldEntry
	23, // 12: injective_dmm_rpc.VCSResultRecord.summary:type_name -> injective_dmm_rpc.VCSResultRecord.SummaryEntry
	24, // 13: injective_dmm_rpc.VCSResultRecord.by_markets:type_name -> injective_dmm_rpc.VCSResultRecord.ByMarketsEntry
	25, // 14: injective_dmm_rpc.VCSResultRecord.by_date:type_name -> injective_dmm_rpc.VCSResultRecord.ByDateEntry
	26, // 15: injective_dmm_rpc.MapOfStringDMMVCS.field:type_name -> injective_dmm_rpc.MapOfStringDMMVCS.FieldEntry
	2,  // 16: injective_dmm_rpc.GetDMMRecordsResponse.meta:type_name -> injective_dmm_rpc.EpochMeta
	9,  // 17: injective_dmm_rpc.GetDMMRecordsResponse.records:type_name -> injective_dmm_rpc.EpochResultRecord
	3,  // 18: injective_dmm_rpc.EpochMeta.MarketsEntry.value:type_name -> injective_dmm_rpc.MarketConfig
	5,  // 19: injective_dmm_rpc.EpochMeta.DmmAddressesEntry.value:type_name -> injective_dmm_rpc.ArrayOfString
	11, // 20: injective_dmm_rpc.LCSResultRecord.SummaryEntry.value:type_name -> injective_dmm_rpc.DMMLCS
	12, // 21: injective_dmm_rpc.LCSResultRecord.ByMarketsEntry.value:type_name -> injective_dmm_rpc.MapOfStringDMMLCS
	11, // 22: injective_dmm_rpc.MapOfStringDMMLCS.FieldEntry.value:type_name -> injective_dmm_rpc.DMMLCS
	14, // 23: injective_dmm_rpc.VCSResultRecord.SummaryEntry.value:type_name -> injective_dmm_rpc.DMMVCS
	15, // 24: injective_dmm_rpc.VCSResultRecord.ByMarketsEntry.value:type_name -> injective_dmm_rpc.MapOfStringDMMVCS
	15, // 25: injective_dmm_rpc.VCSResultRecord.ByDateEntry.value:type_name -> injective_dmm_rpc.MapOfStringDMMVCS
	14, // 26: injective_dmm_rpc.MapOfStringDMMVCS.FieldEntry.value:type_name -> injective_dmm_rpc.DMMVCS
	0,  // 27: injective_dmm_rpc.InjectiveDmmRPC.GetEpochs:input_type -> injective_dmm_rpc.GetEpochsRequest
	6,  // 28: injective_dmm_rpc.InjectiveDmmRPC.GetEpochSummary:input_type -> injective_dmm_rpc.GetEpochSummaryRequest
	16, // 29: injective_dmm_rpc.InjectiveDmmRPC.GetDMMRecords:input_type -> injective_dmm_rpc.GetDMMRecordsRequest
	1,  // 30: injective_dmm_rpc.InjectiveDmmRPC.GetEpochs:output_type -> injective_dmm_rpc.GetEpochsResponse
	7,  // 31: injective_dmm_rpc.InjectiveDmmRPC.GetEpochSummary:output_type -> injective_dmm_rpc.GetEpochSummaryResponse
	17, // 32: injective_dmm_rpc.InjectiveDmmRPC.GetDMMRecords:output_type -> injective_dmm_rpc.GetDMMRecordsResponse
	30, // [30:33] is the sub-list for method output_type
	27, // [27:30] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_injective_dmm_rpc_proto_init() }
func file_injective_dmm_rpc_proto_init() {
	if File_injective_dmm_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_injective_dmm_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEpochsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_dmm_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEpochsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_dmm_rpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_dmm_rpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_dmm_rpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderValueMultiplier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_dmm_rpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArrayOfString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_dmm_rpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEpochSummaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_dmm_rpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEpochSummaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_dmm_rpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Epoch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_dmm_rpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochResultRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_dmm_rpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LCSResultRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_dmm_rpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DMMLCS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_dmm_rpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapOfStringDMMLCS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_dmm_rpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCSResultRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_dmm_rpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DMMVCS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_dmm_rpc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapOfStringDMMVCS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_dmm_rpc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDMMRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_dmm_rpc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDMMRecordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_injective_dmm_rpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_injective_dmm_rpc_proto_goTypes,
		DependencyIndexes: file_injective_dmm_rpc_proto_depIdxs,
		MessageInfos:      file_injective_dmm_rpc_proto_msgTypes,
	}.Build()
	File_injective_dmm_rpc_proto = out.File
	file_injective_dmm_rpc_proto_rawDesc = nil
	file_injective_dmm_rpc_proto_goTypes = nil
	file_injective_dmm_rpc_proto_depIdxs = nil
}
