// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package injective_dmm_rpcpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InjectiveDmmRPCClient is the client API for InjectiveDmmRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InjectiveDmmRPCClient interface {
	// Get all passed epochs and the current or next incoming epoch
	GetEpochs(ctx context.Context, in *GetEpochsRequest, opts ...grpc.CallOption) (*GetEpochsResponse, error)
	// Get epoch summary by epoch id
	GetEpochSummary(ctx context.Context, in *GetEpochSummaryRequest, opts ...grpc.CallOption) (*GetEpochSummaryResponse, error)
	// Get all epoch result records for one dmm
	GetDMMRecords(ctx context.Context, in *GetDMMRecordsRequest, opts ...grpc.CallOption) (*GetDMMRecordsResponse, error)
}

type injectiveDmmRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewInjectiveDmmRPCClient(cc grpc.ClientConnInterface) InjectiveDmmRPCClient {
	return &injectiveDmmRPCClient{cc}
}

func (c *injectiveDmmRPCClient) GetEpochs(ctx context.Context, in *GetEpochsRequest, opts ...grpc.CallOption) (*GetEpochsResponse, error) {
	out := new(GetEpochsResponse)
	err := c.cc.Invoke(ctx, "/injective_dmm_rpc.InjectiveDmmRPC/GetEpochs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *injectiveDmmRPCClient) GetEpochSummary(ctx context.Context, in *GetEpochSummaryRequest, opts ...grpc.CallOption) (*GetEpochSummaryResponse, error) {
	out := new(GetEpochSummaryResponse)
	err := c.cc.Invoke(ctx, "/injective_dmm_rpc.InjectiveDmmRPC/GetEpochSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *injectiveDmmRPCClient) GetDMMRecords(ctx context.Context, in *GetDMMRecordsRequest, opts ...grpc.CallOption) (*GetDMMRecordsResponse, error) {
	out := new(GetDMMRecordsResponse)
	err := c.cc.Invoke(ctx, "/injective_dmm_rpc.InjectiveDmmRPC/GetDMMRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InjectiveDmmRPCServer is the server API for InjectiveDmmRPC service.
// All implementations must embed UnimplementedInjectiveDmmRPCServer
// for forward compatibility
type InjectiveDmmRPCServer interface {
	// Get all passed epochs and the current or next incoming epoch
	GetEpochs(context.Context, *GetEpochsRequest) (*GetEpochsResponse, error)
	// Get epoch summary by epoch id
	GetEpochSummary(context.Context, *GetEpochSummaryRequest) (*GetEpochSummaryResponse, error)
	// Get all epoch result records for one dmm
	GetDMMRecords(context.Context, *GetDMMRecordsRequest) (*GetDMMRecordsResponse, error)
	mustEmbedUnimplementedInjectiveDmmRPCServer()
}

// UnimplementedInjectiveDmmRPCServer must be embedded to have forward compatible implementations.
type UnimplementedInjectiveDmmRPCServer struct {
}

func (UnimplementedInjectiveDmmRPCServer) GetEpochs(context.Context, *GetEpochsRequest) (*GetEpochsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEpochs not implemented")
}
func (UnimplementedInjectiveDmmRPCServer) GetEpochSummary(context.Context, *GetEpochSummaryRequest) (*GetEpochSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEpochSummary not implemented")
}
func (UnimplementedInjectiveDmmRPCServer) GetDMMRecords(context.Context, *GetDMMRecordsRequest) (*GetDMMRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDMMRecords not implemented")
}
func (UnimplementedInjectiveDmmRPCServer) mustEmbedUnimplementedInjectiveDmmRPCServer() {}

// UnsafeInjectiveDmmRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InjectiveDmmRPCServer will
// result in compilation errors.
type UnsafeInjectiveDmmRPCServer interface {
	mustEmbedUnimplementedInjectiveDmmRPCServer()
}

func RegisterInjectiveDmmRPCServer(s grpc.ServiceRegistrar, srv InjectiveDmmRPCServer) {
	s.RegisterService(&InjectiveDmmRPC_ServiceDesc, srv)
}

func _InjectiveDmmRPC_GetEpochs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEpochsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InjectiveDmmRPCServer).GetEpochs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective_dmm_rpc.InjectiveDmmRPC/GetEpochs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InjectiveDmmRPCServer).GetEpochs(ctx, req.(*GetEpochsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InjectiveDmmRPC_GetEpochSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEpochSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InjectiveDmmRPCServer).GetEpochSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective_dmm_rpc.InjectiveDmmRPC/GetEpochSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InjectiveDmmRPCServer).GetEpochSummary(ctx, req.(*GetEpochSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InjectiveDmmRPC_GetDMMRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDMMRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InjectiveDmmRPCServer).GetDMMRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective_dmm_rpc.InjectiveDmmRPC/GetDMMRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InjectiveDmmRPCServer).GetDMMRecords(ctx, req.(*GetDMMRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InjectiveDmmRPC_ServiceDesc is the grpc.ServiceDesc for InjectiveDmmRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InjectiveDmmRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "injective_dmm_rpc.InjectiveDmmRPC",
	HandlerType: (*InjectiveDmmRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEpochs",
			Handler:    _InjectiveDmmRPC_GetEpochs_Handler,
		},
		{
			MethodName: "GetEpochSummary",
			Handler:    _InjectiveDmmRPC_GetEpochSummary_Handler,
		},
		{
			MethodName: "GetDMMRecords",
			Handler:    _InjectiveDmmRPC_GetDMMRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "injective_dmm_rpc.proto",
}
