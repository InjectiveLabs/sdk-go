// Code generated with goa v3.5.2, DO NOT EDIT.
//
// InjectiveAuctionRPC protocol buffer definition
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-indexer/api/design -o ../

syntax = "proto3";

package injective_auction_rpc;

option go_package = "/injective_auction_rpcpb";

// InjectiveAuctionRPC defines gRPC API of the Auction API.
service InjectiveAuctionRPC {
	// Provide historical auction info for a given auction
	rpc AuctionEndpoint (AuctionEndpointRequest) returns (AuctionEndpointResponse);
	// Provide the historical auctions info
	rpc Auctions (AuctionsRequest) returns (AuctionsResponse);
	// StreamBids streams new bids of an auction.
	rpc StreamBids (StreamBidsRequest) returns (stream StreamBidsResponse);
}

message AuctionEndpointRequest {
	// The auction round number. -1 for latest.
	sint64 round = 1;
}

message AuctionEndpointResponse {
	// The auction
	Auction auction = 1;
	// Bids of the auction
	repeated Bid bids = 2;
}

message Auction {
	// Account address of the auction winner
	string winner = 1;
	// Coins in the basket
	repeated Coin basket = 2;
	string winning_bid_amount = 3;
	uint64 round = 4;
	// Auction end timestamp in UNIX millis.
	sint64 end_timestamp = 5;
	// UpdatedAt timestamp in UNIX millis.
	sint64 updated_at = 6;
}

message Coin {
	// Denom of the coin
	string denom = 1;
	string amount = 2;
}

message Bid {
	// Account address of the bidder
	string bidder = 1;
	string amount = 2;
	// Bid timestamp in UNIX millis.
	sint64 timestamp = 3;
}

message AuctionsRequest {
}

message AuctionsResponse {
	// The historical auctions
	repeated Auction auctions = 1;
}

message StreamBidsRequest {
}

message StreamBidsResponse {
	// Account address of the bidder
	string bidder = 1;
	string bid_amount = 2;
	uint64 round = 3;
	// Operation timestamp in UNIX millis.
	sint64 timestamp = 4;
}
