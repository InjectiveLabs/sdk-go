// Code generated with goa v3.5.2, DO NOT EDIT.
//
// InjectiveDerivativeExchangeRPC protocol buffer definition
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-indexer/api/design -o ../

syntax = "proto3";

package injective_derivative_exchange_rpc;

option go_package = "/injective_derivative_exchange_rpcpb";

// InjectiveDerivativeExchangeRPC defines gRPC API of Derivative Markets
// provider.
service InjectiveDerivativeExchangeRPC {
	// Markets gets a list of Derivative Markets
	rpc Markets (MarketsRequest) returns (MarketsResponse);
	// Market gets details of a single derivative market
	rpc Market (MarketRequest) returns (MarketResponse);
	// StreamMarket streams live updates of selected derivative markets
	rpc StreamMarket (StreamMarketRequest) returns (stream StreamMarketResponse);
	// BinaryOptionsMarkets gets a list of Binary Options Markets
	rpc BinaryOptionsMarkets (BinaryOptionsMarketsRequest) returns (BinaryOptionsMarketsResponse);
	// BinaryOptionMarket gets details of a single binary options market
	rpc BinaryOptionsMarket (BinaryOptionsMarketRequest) returns (BinaryOptionsMarketResponse);
	// Orderbook gets the Orderbook of a Derivative Market
	rpc Orderbook (OrderbookRequest) returns (OrderbookResponse);
	// Orderbook gets the Orderbook of a Derivative Market
	rpc OrderbookV2 (OrderbookV2Request) returns (OrderbookV2Response);
	// Orderbooks gets the Orderbooks of requested derivative markets
	rpc Orderbooks (OrderbooksRequest) returns (OrderbooksResponse);
	// Orderbooks gets the Orderbooks of requested derivative markets
	rpc OrderbooksV2 (OrderbooksV2Request) returns (OrderbooksV2Response);
	// Stream live snapshot updates of selected derivative market orderbook
	rpc StreamOrderbook (StreamOrderbookRequest) returns (stream StreamOrderbookResponse);
	// Stream live snapshot updates of selected derivative market orderbook
	rpc StreamOrderbookV2 (StreamOrderbookV2Request) returns (stream StreamOrderbookV2Response);
	// Stream live level updates of selected derivative market orderbook
	rpc StreamOrderbookUpdate (StreamOrderbookUpdateRequest) returns (stream StreamOrderbookUpdateResponse);
	// DerivativeLimitOrders gets the limit orders of a derivative Market.
	rpc Orders (OrdersRequest) returns (OrdersResponse);
	// Positions gets the positions for a trader.
	rpc Positions (PositionsRequest) returns (PositionsResponse);
	// LiquidablePositions gets all the liquidable positions.
	rpc LiquidablePositions (LiquidablePositionsRequest) returns (LiquidablePositionsResponse);
	// FundingPayments gets the funding payments for a trader.
	rpc FundingPayments (FundingPaymentsRequest) returns (FundingPaymentsResponse);
	// FundingRates gets the historical funding rates for a market.
	rpc FundingRates (FundingRatesRequest) returns (FundingRatesResponse);
	// StreamPositions streams derivatives position updates.
	rpc StreamPositions (StreamPositionsRequest) returns (stream StreamPositionsResponse);
	// StreamOrders streams updates to individual orders of a Derivative Market.
	rpc StreamOrders (StreamOrdersRequest) returns (stream StreamOrdersResponse);
	// Trades gets the trades of a Derivative Market.
	rpc Trades (TradesRequest) returns (TradesResponse);
	// StreamTrades streams newly executed trades from Derivative Market.
	rpc StreamTrades (StreamTradesRequest) returns (stream StreamTradesResponse);
	// SubaccountOrdersList lists orders posted from this subaccount.
	rpc SubaccountOrdersList (SubaccountOrdersListRequest) returns (SubaccountOrdersListResponse);
	// SubaccountTradesList gets a list of derivatives trades executed by this
// subaccount.
	rpc SubaccountTradesList (SubaccountTradesListRequest) returns (SubaccountTradesListResponse);
	// Lists history orders posted from a subaccount
	rpc OrdersHistory (OrdersHistoryRequest) returns (OrdersHistoryResponse);
	// Stream updates to historical orders of a derivative Market
	rpc StreamOrdersHistory (StreamOrdersHistoryRequest) returns (stream StreamOrdersHistoryResponse);
}

message MarketsRequest {
	// Filter by market status
	string market_status = 1;
	// Filter by the Coin denomination of the quote currency
	string quote_denom = 2;
}

message MarketsResponse {
	// Derivative Markets list
	repeated DerivativeMarketInfo markets = 1;
}

message DerivativeMarketInfo {
	// DerivativeMarket ID is crypto.Keccak256Hash([]byte((oracleType.String() +
// ticker + quoteDenom + oracleBase + oracleQuote))) for perpetual markets and
// crypto.Keccak256Hash([]byte((oracleType.String() + ticker + quoteDenom +
// oracleBase + oracleQuote + strconv.Itoa(int(expiry))))) for expiry futures
// markets
	string market_id = 1;
	// The status of the market
	string market_status = 2;
	// A name of the pair in format AAA/BBB, where AAA is base asset, BBB is quote
// asset.
	string ticker = 3;
	// Oracle base currency
	string oracle_base = 4;
	// Oracle quote currency
	string oracle_quote = 5;
	// Oracle Type
	string oracle_type = 6;
	// OracleScaleFactor
	uint32 oracle_scale_factor = 7;
	// Defines the initial margin ratio of a derivative market
	string initial_margin_ratio = 8;
	// Defines the maintenance margin ratio of a derivative market
	string maintenance_margin_ratio = 9;
	// Coin denom used for the quote asset.
	string quote_denom = 10;
	// Token metadata for quote asset, only for Ethereum-based assets
	TokenMeta quote_token_meta = 11;
	// Defines the fee percentage makers pay when trading (in quote asset)
	string maker_fee_rate = 12;
	// Defines the fee percentage takers pay when trading (in quote asset)
	string taker_fee_rate = 13;
	// Percentage of the transaction fee shared with the service provider
	string service_provider_fee = 14;
	// True if the market is a perpetual swap market
	bool is_perpetual = 15;
	// Defines the minimum required tick size for the order's price
	string min_price_tick_size = 16;
	// Defines the minimum required tick size for the order's quantity
	string min_quantity_tick_size = 17;
	PerpetualMarketInfo perpetual_market_info = 18;
	PerpetualMarketFunding perpetual_market_funding = 19;
	ExpiryFuturesMarketInfo expiry_futures_market_info = 20;
}

message TokenMeta {
	// Token full name
	string name = 1;
	// Token Ethereum contract address
	string address = 2;
	// Token symbol short name
	string symbol = 3;
	// URL to the logo image
	string logo = 4;
	// Token decimals
	sint32 decimals = 5;
	// Token metadata fetched timestamp in UNIX millis.
	sint64 updated_at = 6;
}

message PerpetualMarketInfo {
	// Defines the default maximum absolute value of the hourly funding rate of the
// perpetual market.
	string hourly_funding_rate_cap = 1;
	// Defines the hourly interest rate of the perpetual market.
	string hourly_interest_rate = 2;
	// Defines the next funding timestamp in seconds of a perpetual market in UNIX
// seconds.
	sint64 next_funding_timestamp = 3;
	// Defines the funding interval in seconds of a perpetual market in seconds.
	sint64 funding_interval = 4;
}

message PerpetualMarketFunding {
	// Defines the cumulative funding of a perpetual market.
	string cumulative_funding = 1;
	// Defines defines the cumulative price for the current hour up to the last
// timestamp.
	string cumulative_price = 2;
	// Defines the last funding timestamp in seconds of a perpetual market in UNIX
// seconds.
	sint64 last_timestamp = 3;
}

message ExpiryFuturesMarketInfo {
	// Defines the expiration time for a time expiry futures market in UNIX seconds.
	sint64 expiration_timestamp = 1;
	// Defines the settlement price for a time expiry futures market.
	string settlement_price = 2;
}

message MarketRequest {
	// MarketId of the market we want to fetch
	string market_id = 1;
}

message MarketResponse {
	// Info about particular derivative market
	DerivativeMarketInfo market = 1;
}

message StreamMarketRequest {
	// List of market IDs for updates streaming, empty means 'ALL' derivative
// markets
	repeated string market_ids = 1;
}

message StreamMarketResponse {
	// Info about particular derivative market
	DerivativeMarketInfo market = 1;
	// Update type
	string operation_type = 2;
	// Operation timestamp in UNIX millis.
	sint64 timestamp = 3;
}

message BinaryOptionsMarketsRequest {
	// Filter by market status
	string market_status = 1;
	// Filter by the Coin denomination of the quote currency
	string quote_denom = 2;
	// Skip will skip the first n item from the result
	uint64 skip = 3;
	// Limit is used to specify the maximum number of items to be returned.
	sint32 limit = 4;
}

message BinaryOptionsMarketsResponse {
	// Binary Options Markets list
	repeated BinaryOptionsMarketInfo markets = 1;
	Paging paging = 2;
}

message BinaryOptionsMarketInfo {
	// Binary Options Market ID is crypto.Keccak256Hash([]byte((oracleType.String()
// + ticker + quoteDenom + oracleSymbol + oracleProvider)))
	string market_id = 1;
	// The status of the market
	string market_status = 2;
	// A name of the binary options market.
	string ticker = 3;
	// Oracle symbol
	string oracle_symbol = 4;
	// Oracle provider
	string oracle_provider = 5;
	// Oracle Type
	string oracle_type = 6;
	// OracleScaleFactor
	uint32 oracle_scale_factor = 7;
	// Defines the expiration time for the market in UNIX seconds.
	sint64 expiration_timestamp = 8;
	// Defines the settlement time for the market in UNIX seconds.
	sint64 settlement_timestamp = 9;
	// Coin denom used for the quote asset.
	string quote_denom = 10;
	// Token metadata for quote asset, only for Ethereum-based assets
	TokenMeta quote_token_meta = 11;
	// Defines the fee percentage makers pay when trading (in quote asset)
	string maker_fee_rate = 12;
	// Defines the fee percentage takers pay when trading (in quote asset)
	string taker_fee_rate = 13;
	// Percentage of the transaction fee shared with the service provider
	string service_provider_fee = 14;
	// Defines the minimum required tick size for the order's price
	string min_price_tick_size = 15;
	// Defines the minimum required tick size for the order's quantity
	string min_quantity_tick_size = 16;
	// Defines the settlement price of the market
	string settlement_price = 17;
}
// Paging defines the structure for required params for handling pagination
message Paging {
	// total number of txs saved in database
	sint64 total = 1;
	// can be either block height or index num
	sint32 from = 2;
	// can be either block height or index num
	sint32 to = 3;
	// count entries by subaccount, serving some places on helix
	sint64 count_by_subaccount = 4;
}

message BinaryOptionsMarketRequest {
	// MarketId of the market we want to fetch
	string market_id = 1;
}

message BinaryOptionsMarketResponse {
	// Info about particular derivative market
	BinaryOptionsMarketInfo market = 1;
}

message OrderbookRequest {
	// MarketId of the market's orderbook we want to fetch
	string market_id = 1;
}

message OrderbookResponse {
	// Orderbook of a particular derivative market
	DerivativeLimitOrderbook orderbook = 1;
}

message DerivativeLimitOrderbook {
	// Array of price levels for buys
	repeated PriceLevel buys = 1;
	// Array of price levels for sells
	repeated PriceLevel sells = 2;
	// Last update timestamp in UNIX millis.
	sint64 timestamp = 4;
}

message PriceLevel {
	// Price number of the price level.
	string price = 1;
	// Quantity of the price level.
	string quantity = 2;
	// Price level last updated timestamp in UNIX millis.
	sint64 timestamp = 3;
}

message OrderbookV2Request {
	// MarketId of the market's orderbook we want to fetch
	string market_id = 1;
}

message OrderbookV2Response {
	// Orderbook of a particular derivative market
	DerivativeLimitOrderbookV2 orderbook = 1;
}

message DerivativeLimitOrderbookV2 {
	// Array of price levels for buys
	repeated PriceLevel buys = 1;
	// Array of price levels for sells
	repeated PriceLevel sells = 2;
	// market orderbook sequence
	uint64 sequence = 3;
	// Last update timestamp in UNIX millis.
	sint64 timestamp = 4;
}

message OrderbooksRequest {
	// MarketIds of the markets
	repeated string market_ids = 1;
}

message OrderbooksResponse {
	repeated SingleDerivativeLimitOrderbook orderbooks = 1;
}

message SingleDerivativeLimitOrderbook {
	// market's ID
	string market_id = 1;
	// Orderbook of the market
	DerivativeLimitOrderbook orderbook = 2;
}

message OrderbooksV2Request {
	// MarketIds of the markets
	repeated string market_ids = 1;
}

message OrderbooksV2Response {
	repeated SingleDerivativeLimitOrderbookV2 orderbooks = 1;
}

message SingleDerivativeLimitOrderbookV2 {
	// market's ID
	string market_id = 1;
	// Orderbook of the market
	DerivativeLimitOrderbookV2 orderbook = 2;
}

message StreamOrderbookRequest {
	// List of market IDs for orderbook streaming, empty means 'ALL' derivative
// markets
	repeated string market_ids = 1;
}

message StreamOrderbookResponse {
	// Orderbook of a Derivative Market
	DerivativeLimitOrderbook orderbook = 1;
	// Order update type
	string operation_type = 2;
	// Operation timestamp in UNIX millis.
	sint64 timestamp = 3;
	// MarketId of the market's orderbook
	string market_id = 4;
}

message StreamOrderbookV2Request {
	// List of market IDs for orderbook streaming, empty means 'ALL' derivative
// markets
	repeated string market_ids = 1;
}

message StreamOrderbookV2Response {
	// Orderbook of a Derivative Market
	DerivativeLimitOrderbookV2 orderbook = 1;
	// Order update type
	string operation_type = 2;
	// Operation timestamp in UNIX millis.
	sint64 timestamp = 3;
	// MarketId of the market's orderbook
	string market_id = 4;
}

message StreamOrderbookUpdateRequest {
	// List of market IDs for orderbook streaming, empty means 'ALL' derivative
// markets
	repeated string market_ids = 1;
}

message StreamOrderbookUpdateResponse {
	// Orderbook level updates of a Derivative Market
	OrderbookLevelUpdates orderbook_level_updates = 1;
	// Order update type
	string operation_type = 2;
	// Operation timestamp in UNIX millis.
	sint64 timestamp = 3;
	// MarketId of the market's orderbook
	string market_id = 4;
}

message OrderbookLevelUpdates {
	// market's ID
	string market_id = 1;
	// orderbook update sequence
	uint64 sequence = 2;
	// buy levels
	repeated PriceLevelUpdate buys = 3;
	// sell levels
	repeated PriceLevelUpdate sells = 4;
	// updates timestamp
	sint64 updated_at = 5;
}

message PriceLevelUpdate {
	// Price number of the price level.
	string price = 1;
	// Quantity of the price level.
	string quantity = 2;
	// Price level status.
	bool is_active = 3;
	// Price level last updated timestamp in UNIX millis.
	sint64 timestamp = 4;
}

message OrdersRequest {
	// MarketId of market we want to fetch orders from. Using this field for one
// single marketId
	string market_id = 1;
	// Look for specific order side
	string order_side = 2;
	// Look for specific subaccountId of an order
	string subaccount_id = 3;
	// Skip will skip the first n item from the result
	uint64 skip = 4;
	// Limit is used to specify the maximum number of items to be returned
	sint32 limit = 5;
	// The starting timestamp in UNIX milliseconds that the trades must be equal or
// older than
	sint64 start_time = 6;
	// The ending timestamp in UNIX milliseconds that the trades must be equal or
// younger than
	sint64 end_time = 7;
	// MarketIds of the markets of which we want to get order from, use this field
// for fetching orders from multiple markets
	repeated string market_ids = 8;
	// Only search for conditional/non-conditional orders
	string is_conditional = 9;
	// Search for specific order type
	string order_type = 10;
	// Should include inactive orders
	bool include_inactive = 11;
	// Choose to return subaccount total orders
	bool subaccount_total_orders = 12;
}

message OrdersResponse {
	repeated DerivativeLimitOrder orders = 1;
	Paging paging = 2;
}

message DerivativeLimitOrder {
	// Hash of the order
	string order_hash = 1;
	// The side of the order
	string order_side = 2;
	// Derivative Market ID
	string market_id = 3;
	// The subaccountId that this order belongs to
	string subaccount_id = 4;
	// True if the order is a reduce-only order
	bool is_reduce_only = 5;
	// Margin of the order
	string margin = 6;
	// Price of the order
	string price = 7;
	// Quantity of the order
	string quantity = 8;
	// The amount of the quantity remaining unfilled
	string unfilled_quantity = 9;
	// Trigger price is the trigger price used by stop/take orders
	string trigger_price = 10;
	// Fee recipient address
	string fee_recipient = 11;
	// Order state
	string state = 12;
	// Order committed timestamp in UNIX millis.
	sint64 created_at = 13;
	// Order updated timestamp in UNIX millis.
	sint64 updated_at = 14;
	// Order number of subaccount
	sint64 order_number = 15;
	// Order type
	string order_type = 16;
	// Order type
	bool is_conditional = 17;
	// Trigger timestamp, only exists for conditional orders
	uint64 trigger_at = 18;
	// OrderHash of order that is triggered by this conditional order
	string placed_order_hash = 19;
	// Execution type of conditional order
	string execution_type = 20;
}

message PositionsRequest {
	// SubaccountId of the trader we want to get the positions from
	string subaccount_id = 1;
	// MarketId of the position we want to fetch. Use this field for fetching from
// single market
	string market_id = 2;
	// Skip will skip the first n item from the result
	uint64 skip = 3;
	// Limit is used to specify the maximum number of items to be returned
	sint32 limit = 4;
	// The starting timestamp in UNIX milliseconds that the trades must be equal or
// older than
	sint64 start_time = 5;
	// The ending timestamp in UNIX milliseconds that the trades must be equal or
// younger than
	sint64 end_time = 6;
	// MarketIds of the markets we want to filter. Use this field for fetching from
// multiple markets
	repeated string market_ids = 7;
	// filter by direction of the position
	string direction = 8;
	// set to True to return subaccount total positions
	bool subaccount_total_positions = 9;
}

message PositionsResponse {
	repeated DerivativePosition positions = 1;
	Paging paging = 2;
}

message DerivativePosition {
	// Ticker of the derivative market
	string ticker = 1;
	// Derivative Market ID
	string market_id = 2;
	// The subaccountId that the position belongs to
	string subaccount_id = 3;
	// Direction of the position
	string direction = 4;
	// Quantity of the position
	string quantity = 5;
	// Price of the position
	string entry_price = 6;
	// Margin of the position
	string margin = 7;
	// LiquidationPrice of the position
	string liquidation_price = 8;
	// MarkPrice of the position
	string mark_price = 9;
	// Aggregate Quantity of the Reduce Only orders associated with the position
	string aggregate_reduce_only_quantity = 11;
	// Position updated timestamp in UNIX millis.
	sint64 updated_at = 12;
	// Position created timestamp in UNIX millis.
	sint64 created_at = 13;
}

message LiquidablePositionsRequest {
	// Market ID to filter orders for specific market
	string market_id = 1;
	// Skip will skip the first n item from the result
	uint64 skip = 2;
	// Limit is used to specify the maximum number of items to be returned.
	sint32 limit = 3;
}

message LiquidablePositionsResponse {
	// List of derivative positions
	repeated DerivativePosition positions = 1;
}

message FundingPaymentsRequest {
	// SubaccountId of the trader we want to get the positions from
	string subaccount_id = 1;
	// MarketIds of the funding payment we want to fetch. Using this for only one
// market id. This field is prioritized
	string market_id = 2;
	// Skip will skip the first n item from the result
	uint64 skip = 3;
	// Limit is used to specify the maximum number of items to be returned.
	sint32 limit = 4;
	// Upper bound of funding payment updatedAt
	sint64 end_time = 5;
	// Filter by market ids. Using this field for fetching funding payments from
// multiple market ids
	repeated string market_ids = 6;
}

message FundingPaymentsResponse {
	// List of funding payments
	repeated FundingPayment payments = 1;
	Paging paging = 2;
}

message FundingPayment {
	// Derivative Market ID
	string market_id = 1;
	// The subaccountId that the position belongs to
	string subaccount_id = 2;
	// Amount of the funding payment
	string amount = 3;
	// Timestamp of funding payment in UNIX millis
	sint64 timestamp = 4;
}

message FundingRatesRequest {
	// MarketId of the position we want to fetch
	string market_id = 1;
	// Skip will skip the first n item from the result
	uint64 skip = 2;
	// Limit is used to specify the maximum number of items to be returned.
	sint32 limit = 3;
	// Upper bound of funding timestamp
	sint64 end_time = 4;
}

message FundingRatesResponse {
	// List of funding rates
	repeated FundingRate funding_rates = 1;
	Paging paging = 2;
}

message FundingRate {
	// Derivative Market ID
	string market_id = 1;
	// Value of the funding rate
	string rate = 2;
	// Timestamp of funding rate in UNIX millis
	sint64 timestamp = 3;
}

message StreamPositionsRequest {
	// SubaccountId of the trader we want to get the positions from
	string subaccount_id = 1;
	// Backward compat single market ID of position we want to stream
	string market_id = 2;
	// List of market IDs of the positions we want to stream
	repeated string market_ids = 3;
	// Subaccount ids of traders we want to get positions
	repeated string subaccount_ids = 4;
}

message StreamPositionsResponse {
	// Updated Derivative Position
	DerivativePosition position = 1;
	// Operation timestamp in UNIX millis.
	sint64 timestamp = 2;
}

message StreamOrdersRequest {
	// MarketId of market we want to fetch orders from. Using this field for one
// single marketId
	string market_id = 1;
	// Look for specific order side
	string order_side = 2;
	// Look for specific subaccountId of an order
	string subaccount_id = 3;
	// Skip will skip the first n item from the result
	uint64 skip = 4;
	// Limit is used to specify the maximum number of items to be returned
	sint32 limit = 5;
	// The starting timestamp in UNIX milliseconds that the trades must be equal or
// older than
	sint64 start_time = 6;
	// The ending timestamp in UNIX milliseconds that the trades must be equal or
// younger than
	sint64 end_time = 7;
	// MarketIds of the markets of which we want to get order from, use this field
// for fetching orders from multiple markets
	repeated string market_ids = 8;
	// Only search for conditional/non-conditional orders
	string is_conditional = 9;
	// Search for specific order type
	string order_type = 10;
	// Should include inactive orders
	bool include_inactive = 11;
	// Choose to return subaccount total orders
	bool subaccount_total_orders = 12;
}

message StreamOrdersResponse {
	// Updated market order
	DerivativeLimitOrder order = 1;
	// Order update type
	string operation_type = 2;
	// Operation timestamp in UNIX millis.
	sint64 timestamp = 3;
}

message TradesRequest {
	// MarketId of the market's orderbook we want to fetch
	string market_id = 1;
	// Filter by execution side of the trade
	string execution_side = 2;
	// Filter by direction the trade
	string direction = 3;
	// SubaccountId of the trader we want to get the trades from
	string subaccount_id = 4;
	// Skip will skip the first n item from the result
	uint64 skip = 5;
	// Limit is used to specify the maximum number of items to be returned.
	sint32 limit = 6;
	// The starting timestamp in UNIX milliseconds that the trades must be equal or
// older than
	sint64 start_time = 7;
	// The ending timestamp in UNIX milliseconds that the trades must be equal or
// younger than
	sint64 end_time = 8;
	// MarketIds of the markets of which we want to get trades
	repeated string market_ids = 9;
	// Subaccount ids of traders we want to get trades. Use this field for fetching
// trades from multiple subaccounts
	repeated string subaccount_ids = 10;
	repeated string execution_types = 11;
}

message TradesResponse {
	// Trades of a Derivative Market
	repeated DerivativeTrade trades = 1;
	Paging paging = 2;
}

message DerivativeTrade {
	// Order hash.
	string order_hash = 1;
	// The subaccountId that executed the trade
	string subaccount_id = 2;
	// The ID of the market that this trade is in
	string market_id = 3;
	// The execution type of the trade
	string trade_execution_type = 4;
	// True if the trade is a liquidation
	bool is_liquidation = 5;
	// Position Delta from the trade
	PositionDelta position_delta = 6;
	// The payout associated with the trade
	string payout = 7;
	// The fee associated with the trade
	string fee = 8;
	// Timestamp of trade execution in UNIX millis
	sint64 executed_at = 9;
	// Fee recipient address
	string fee_recipient = 10;
	// A unique string that helps differentiate between trades
	string trade_id = 11;
	// Trade's execution side, marker/taker
	string execution_side = 12;
}

message PositionDelta {
	// The direction the trade
	string trade_direction = 1;
	// Execution Price of the trade.
	string execution_price = 2;
	// Execution Quantity of the trade.
	string execution_quantity = 3;
	// Execution Margin of the trade.
	string execution_margin = 4;
}

message StreamTradesRequest {
	// MarketId of the market's orderbook we want to fetch
	string market_id = 1;
	// Filter by execution side of the trade
	string execution_side = 2;
	// Filter by direction the trade
	string direction = 3;
	// SubaccountId of the trader we want to get the trades from
	string subaccount_id = 4;
	// Skip will skip the first n item from the result
	uint64 skip = 5;
	// Limit is used to specify the maximum number of items to be returned.
	sint32 limit = 6;
	// The starting timestamp in UNIX milliseconds that the trades must be equal or
// older than
	sint64 start_time = 7;
	// The ending timestamp in UNIX milliseconds that the trades must be equal or
// younger than
	sint64 end_time = 8;
	// MarketIds of the markets of which we want to get trades
	repeated string market_ids = 9;
	// Subaccount ids of traders we want to get trades. Use this field for fetching
// trades from multiple subaccounts
	repeated string subaccount_ids = 10;
	repeated string execution_types = 11;
}

message StreamTradesResponse {
	// New derivative market trade
	DerivativeTrade trade = 1;
	// Executed trades update type
	string operation_type = 2;
	// Operation timestamp in UNIX millis.
	sint64 timestamp = 3;
}

message SubaccountOrdersListRequest {
	// subaccount ID to filter orders for specific subaccount
	string subaccount_id = 1;
	// Market ID to filter orders for specific market
	string market_id = 2;
	// Skip will skip the first n item from the result
	uint64 skip = 3;
	// Limit is used to specify the maximum number of items to be returned
	sint32 limit = 4;
}

message SubaccountOrdersListResponse {
	// List of derivative orders
	repeated DerivativeLimitOrder orders = 1;
	Paging paging = 2;
}

message SubaccountTradesListRequest {
	// SubaccountId of the trader we want to get the trades from
	string subaccount_id = 1;
	// Filter trades by market ID
	string market_id = 2;
	// Filter by execution type of trades
	string execution_type = 3;
	// Filter by direction trades
	string direction = 4;
	// Skip will skip the first n item from the result
	uint64 skip = 5;
	// Limit is used to specify the maximum number of items to be returned
	sint32 limit = 6;
}

message SubaccountTradesListResponse {
	// List of derivative market trades
	repeated DerivativeTrade trades = 1;
}

message OrdersHistoryRequest {
	// subaccount ID to filter orders for specific subaccount
	string subaccount_id = 1;
	// Market ID to filter orders for specific market
	string market_id = 2;
	// Skip will skip the first n item from the result
	uint64 skip = 3;
	// Limit is used to specify the maximum number of items to be returned
	sint32 limit = 4;
	// filter by order types
	repeated string order_types = 5;
	// order side filter
	string direction = 6;
	// Search for orders which createdAt >= startTime, time in millisecond
	sint64 start_time = 7;
	// Search for orders which createdAt <= endTime, time in millisecond
	sint64 end_time = 8;
	// Only search for conditional/non-conditional orders
	string is_conditional = 9;
	// filter by order type
	string order_type = 10;
	// Filter by order state
	string state = 11;
	repeated string execution_types = 12;
	repeated string market_ids = 13;
}

message OrdersHistoryResponse {
	// List of historical derivative orders
	repeated DerivativeOrderHistory orders = 1;
	Paging paging = 2;
}

message DerivativeOrderHistory {
	// Hash of the order
	string order_hash = 1;
	// Spot Market ID is keccak265(baseDenom + quoteDenom)
	string market_id = 2;
	// active state of the order
	bool is_active = 3;
	// The subaccountId that this order belongs to
	string subaccount_id = 4;
	// The execution type
	string execution_type = 5;
	// The side of the order
	string order_type = 6;
	// Price of the order
	string price = 7;
	// Trigger price
	string trigger_price = 8;
	// Quantity of the order
	string quantity = 9;
	// Filled amount
	string filled_quantity = 10;
	// Order state
	string state = 11;
	// Order committed timestamp in UNIX millis.
	sint64 created_at = 12;
	// Order updated timestamp in UNIX millis.
	sint64 updated_at = 13;
	// True if an order is reduce only
	bool is_reduce_only = 14;
	// Order direction (order side)
	string direction = 15;
	// True if this is conditional order, otherwise false
	bool is_conditional = 16;
	// Trigger timestamp in unix milli
	uint64 trigger_at = 17;
	// Order hash placed when this triggers
	string placed_order_hash = 18;
	// Order's margin
	string margin = 19;
}

message StreamOrdersHistoryRequest {
	// subaccount ID to filter orders for specific subaccount
	string subaccount_id = 1;
	// Market ID to filter orders for specific market
	string market_id = 2;
	// filter by order types
	repeated string order_types = 3;
	// order side filter
	string direction = 4;
	// Filter by order state
	string state = 5;
	repeated string execution_types = 6;
}

message StreamOrdersHistoryResponse {
	// Updated order
	DerivativeOrderHistory order = 1;
	// Order update type
	string operation_type = 2;
	// Operation timestamp in UNIX millis.
	sint64 timestamp = 3;
}
