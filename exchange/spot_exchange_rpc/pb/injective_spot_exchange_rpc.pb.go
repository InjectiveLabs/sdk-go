// Code generated with goa v3.5.2, DO NOT EDIT.
//
// InjectiveSpotExchangeRPC protocol buffer definition
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-indexer/api/design -o ../

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1-devel
// 	protoc        v3.19.4
// source: injective_spot_exchange_rpc.proto

package injective_spot_exchange_rpcpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MarketsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter by market status
	MarketStatus string `protobuf:"bytes,1,opt,name=market_status,json=marketStatus,proto3" json:"market_status,omitempty"`
	// Filter by the Coin denomination of the base currency
	BaseDenom string `protobuf:"bytes,2,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty"`
	// Filter by the Coin denomination of the quote currency
	QuoteDenom string `protobuf:"bytes,3,opt,name=quote_denom,json=quoteDenom,proto3" json:"quote_denom,omitempty"`
}

func (x *MarketsRequest) Reset() {
	*x = MarketsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketsRequest) ProtoMessage() {}

func (x *MarketsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketsRequest.ProtoReflect.Descriptor instead.
func (*MarketsRequest) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *MarketsRequest) GetMarketStatus() string {
	if x != nil {
		return x.MarketStatus
	}
	return ""
}

func (x *MarketsRequest) GetBaseDenom() string {
	if x != nil {
		return x.BaseDenom
	}
	return ""
}

func (x *MarketsRequest) GetQuoteDenom() string {
	if x != nil {
		return x.QuoteDenom
	}
	return ""
}

type MarketsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Spot Markets list
	Markets []*SpotMarketInfo `protobuf:"bytes,1,rep,name=markets,proto3" json:"markets,omitempty"`
}

func (x *MarketsResponse) Reset() {
	*x = MarketsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketsResponse) ProtoMessage() {}

func (x *MarketsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketsResponse.ProtoReflect.Descriptor instead.
func (*MarketsResponse) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *MarketsResponse) GetMarkets() []*SpotMarketInfo {
	if x != nil {
		return x.Markets
	}
	return nil
}

type SpotMarketInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SpotMarket ID is keccak265(baseDenom || quoteDenom)
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// The status of the market
	MarketStatus string `protobuf:"bytes,2,opt,name=market_status,json=marketStatus,proto3" json:"market_status,omitempty"`
	// A name of the pair in format AAA/BBB, where AAA is base asset, BBB is quote
	// asset.
	Ticker string `protobuf:"bytes,3,opt,name=ticker,proto3" json:"ticker,omitempty"`
	// Coin denom used for the base asset.
	BaseDenom string `protobuf:"bytes,4,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty"`
	// Token metadata for base asset, only for Ethereum-based assets
	BaseTokenMeta *TokenMeta `protobuf:"bytes,5,opt,name=base_token_meta,json=baseTokenMeta,proto3" json:"base_token_meta,omitempty"`
	// Coin denom used for the quote asset.
	QuoteDenom string `protobuf:"bytes,6,opt,name=quote_denom,json=quoteDenom,proto3" json:"quote_denom,omitempty"`
	// Token metadata for quote asset, only for Ethereum-based assets
	QuoteTokenMeta *TokenMeta `protobuf:"bytes,7,opt,name=quote_token_meta,json=quoteTokenMeta,proto3" json:"quote_token_meta,omitempty"`
	// Defines the fee percentage makers pay when trading (in quote asset)
	MakerFeeRate string `protobuf:"bytes,8,opt,name=maker_fee_rate,json=makerFeeRate,proto3" json:"maker_fee_rate,omitempty"`
	// Defines the fee percentage takers pay when trading (in quote asset)
	TakerFeeRate string `protobuf:"bytes,9,opt,name=taker_fee_rate,json=takerFeeRate,proto3" json:"taker_fee_rate,omitempty"`
	// Percentage of the transaction fee shared with the service provider
	ServiceProviderFee string `protobuf:"bytes,10,opt,name=service_provider_fee,json=serviceProviderFee,proto3" json:"service_provider_fee,omitempty"`
	// Defines the minimum required tick size for the order's price
	MinPriceTickSize string `protobuf:"bytes,11,opt,name=min_price_tick_size,json=minPriceTickSize,proto3" json:"min_price_tick_size,omitempty"`
	// Defines the minimum required tick size for the order's quantity
	MinQuantityTickSize string `protobuf:"bytes,12,opt,name=min_quantity_tick_size,json=minQuantityTickSize,proto3" json:"min_quantity_tick_size,omitempty"`
}

func (x *SpotMarketInfo) Reset() {
	*x = SpotMarketInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotMarketInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotMarketInfo) ProtoMessage() {}

func (x *SpotMarketInfo) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotMarketInfo.ProtoReflect.Descriptor instead.
func (*SpotMarketInfo) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *SpotMarketInfo) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *SpotMarketInfo) GetMarketStatus() string {
	if x != nil {
		return x.MarketStatus
	}
	return ""
}

func (x *SpotMarketInfo) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *SpotMarketInfo) GetBaseDenom() string {
	if x != nil {
		return x.BaseDenom
	}
	return ""
}

func (x *SpotMarketInfo) GetBaseTokenMeta() *TokenMeta {
	if x != nil {
		return x.BaseTokenMeta
	}
	return nil
}

func (x *SpotMarketInfo) GetQuoteDenom() string {
	if x != nil {
		return x.QuoteDenom
	}
	return ""
}

func (x *SpotMarketInfo) GetQuoteTokenMeta() *TokenMeta {
	if x != nil {
		return x.QuoteTokenMeta
	}
	return nil
}

func (x *SpotMarketInfo) GetMakerFeeRate() string {
	if x != nil {
		return x.MakerFeeRate
	}
	return ""
}

func (x *SpotMarketInfo) GetTakerFeeRate() string {
	if x != nil {
		return x.TakerFeeRate
	}
	return ""
}

func (x *SpotMarketInfo) GetServiceProviderFee() string {
	if x != nil {
		return x.ServiceProviderFee
	}
	return ""
}

func (x *SpotMarketInfo) GetMinPriceTickSize() string {
	if x != nil {
		return x.MinPriceTickSize
	}
	return ""
}

func (x *SpotMarketInfo) GetMinQuantityTickSize() string {
	if x != nil {
		return x.MinQuantityTickSize
	}
	return ""
}

type TokenMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token full name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Token Ethereum contract address
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// Token symbol short name
	Symbol string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// URL to the logo image
	Logo string `protobuf:"bytes,4,opt,name=logo,proto3" json:"logo,omitempty"`
	// Token decimals
	Decimals int32 `protobuf:"zigzag32,5,opt,name=decimals,proto3" json:"decimals,omitempty"`
	// Token metadata fetched timestamp in UNIX millis.
	UpdatedAt int64 `protobuf:"zigzag64,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *TokenMeta) Reset() {
	*x = TokenMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenMeta) ProtoMessage() {}

func (x *TokenMeta) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenMeta.ProtoReflect.Descriptor instead.
func (*TokenMeta) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *TokenMeta) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TokenMeta) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TokenMeta) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *TokenMeta) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *TokenMeta) GetDecimals() int32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *TokenMeta) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type MarketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MarketId of the market we want to fetch
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *MarketRequest) Reset() {
	*x = MarketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketRequest) ProtoMessage() {}

func (x *MarketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketRequest.ProtoReflect.Descriptor instead.
func (*MarketRequest) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{4}
}

func (x *MarketRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

type MarketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Info about particular spot market
	Market *SpotMarketInfo `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
}

func (x *MarketResponse) Reset() {
	*x = MarketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketResponse) ProtoMessage() {}

func (x *MarketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketResponse.ProtoReflect.Descriptor instead.
func (*MarketResponse) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{5}
}

func (x *MarketResponse) GetMarket() *SpotMarketInfo {
	if x != nil {
		return x.Market
	}
	return nil
}

type StreamMarketsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of market IDs for updates streaming, empty means 'ALL' spot markets
	MarketIds []string `protobuf:"bytes,1,rep,name=market_ids,json=marketIds,proto3" json:"market_ids,omitempty"`
}

func (x *StreamMarketsRequest) Reset() {
	*x = StreamMarketsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamMarketsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMarketsRequest) ProtoMessage() {}

func (x *StreamMarketsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMarketsRequest.ProtoReflect.Descriptor instead.
func (*StreamMarketsRequest) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{6}
}

func (x *StreamMarketsRequest) GetMarketIds() []string {
	if x != nil {
		return x.MarketIds
	}
	return nil
}

type StreamMarketsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Info about particular spot market
	Market *SpotMarketInfo `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	// Update type
	OperationType string `protobuf:"bytes,2,opt,name=operation_type,json=operationType,proto3" json:"operation_type,omitempty"`
	// Operation timestamp in UNIX millis.
	Timestamp int64 `protobuf:"zigzag64,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *StreamMarketsResponse) Reset() {
	*x = StreamMarketsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamMarketsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMarketsResponse) ProtoMessage() {}

func (x *StreamMarketsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMarketsResponse.ProtoReflect.Descriptor instead.
func (*StreamMarketsResponse) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{7}
}

func (x *StreamMarketsResponse) GetMarket() *SpotMarketInfo {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *StreamMarketsResponse) GetOperationType() string {
	if x != nil {
		return x.OperationType
	}
	return ""
}

func (x *StreamMarketsResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type OrderbookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MarketId of the market's orderbook we want to fetch
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *OrderbookRequest) Reset() {
	*x = OrderbookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderbookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderbookRequest) ProtoMessage() {}

func (x *OrderbookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderbookRequest.ProtoReflect.Descriptor instead.
func (*OrderbookRequest) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{8}
}

func (x *OrderbookRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

type OrderbookResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Orderbook of a particular spot market
	Orderbook *SpotLimitOrderbook `protobuf:"bytes,1,opt,name=orderbook,proto3" json:"orderbook,omitempty"`
}

func (x *OrderbookResponse) Reset() {
	*x = OrderbookResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderbookResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderbookResponse) ProtoMessage() {}

func (x *OrderbookResponse) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderbookResponse.ProtoReflect.Descriptor instead.
func (*OrderbookResponse) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{9}
}

func (x *OrderbookResponse) GetOrderbook() *SpotLimitOrderbook {
	if x != nil {
		return x.Orderbook
	}
	return nil
}

type SpotLimitOrderbook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array of price levels for buys
	Buys []*PriceLevel `protobuf:"bytes,1,rep,name=buys,proto3" json:"buys,omitempty"`
	// Array of price levels for sells
	Sells []*PriceLevel `protobuf:"bytes,2,rep,name=sells,proto3" json:"sells,omitempty"`
	// Last update timestamp in UNIX millis.
	Timestamp int64 `protobuf:"zigzag64,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *SpotLimitOrderbook) Reset() {
	*x = SpotLimitOrderbook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotLimitOrderbook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotLimitOrderbook) ProtoMessage() {}

func (x *SpotLimitOrderbook) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotLimitOrderbook.ProtoReflect.Descriptor instead.
func (*SpotLimitOrderbook) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{10}
}

func (x *SpotLimitOrderbook) GetBuys() []*PriceLevel {
	if x != nil {
		return x.Buys
	}
	return nil
}

func (x *SpotLimitOrderbook) GetSells() []*PriceLevel {
	if x != nil {
		return x.Sells
	}
	return nil
}

func (x *SpotLimitOrderbook) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type PriceLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Price number of the price level.
	Price string `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`
	// Quantity of the price level.
	Quantity string `protobuf:"bytes,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Price level last updated timestamp in UNIX millis.
	Timestamp int64 `protobuf:"zigzag64,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *PriceLevel) Reset() {
	*x = PriceLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceLevel) ProtoMessage() {}

func (x *PriceLevel) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceLevel.ProtoReflect.Descriptor instead.
func (*PriceLevel) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{11}
}

func (x *PriceLevel) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *PriceLevel) GetQuantity() string {
	if x != nil {
		return x.Quantity
	}
	return ""
}

func (x *PriceLevel) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type OrderbookV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MarketId of the market's orderbook we want to fetch
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *OrderbookV2Request) Reset() {
	*x = OrderbookV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderbookV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderbookV2Request) ProtoMessage() {}

func (x *OrderbookV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderbookV2Request.ProtoReflect.Descriptor instead.
func (*OrderbookV2Request) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{12}
}

func (x *OrderbookV2Request) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

type OrderbookV2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Orderbook of a particular spot market
	Orderbook *SpotLimitOrderbookV2 `protobuf:"bytes,1,opt,name=orderbook,proto3" json:"orderbook,omitempty"`
}

func (x *OrderbookV2Response) Reset() {
	*x = OrderbookV2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderbookV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderbookV2Response) ProtoMessage() {}

func (x *OrderbookV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderbookV2Response.ProtoReflect.Descriptor instead.
func (*OrderbookV2Response) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{13}
}

func (x *OrderbookV2Response) GetOrderbook() *SpotLimitOrderbookV2 {
	if x != nil {
		return x.Orderbook
	}
	return nil
}

type SpotLimitOrderbookV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array of price levels for buys
	Buys []*PriceLevel `protobuf:"bytes,1,rep,name=buys,proto3" json:"buys,omitempty"`
	// Array of price levels for sells
	Sells []*PriceLevel `protobuf:"bytes,2,rep,name=sells,proto3" json:"sells,omitempty"`
	// market orderbook sequence
	Sequence uint64 `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Last update timestamp in UNIX millis.
	Timestamp int64 `protobuf:"zigzag64,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *SpotLimitOrderbookV2) Reset() {
	*x = SpotLimitOrderbookV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotLimitOrderbookV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotLimitOrderbookV2) ProtoMessage() {}

func (x *SpotLimitOrderbookV2) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotLimitOrderbookV2.ProtoReflect.Descriptor instead.
func (*SpotLimitOrderbookV2) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{14}
}

func (x *SpotLimitOrderbookV2) GetBuys() []*PriceLevel {
	if x != nil {
		return x.Buys
	}
	return nil
}

func (x *SpotLimitOrderbookV2) GetSells() []*PriceLevel {
	if x != nil {
		return x.Sells
	}
	return nil
}

func (x *SpotLimitOrderbookV2) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *SpotLimitOrderbookV2) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type OrderbooksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MarketIds of the markets
	MarketIds []string `protobuf:"bytes,1,rep,name=market_ids,json=marketIds,proto3" json:"market_ids,omitempty"`
}

func (x *OrderbooksRequest) Reset() {
	*x = OrderbooksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderbooksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderbooksRequest) ProtoMessage() {}

func (x *OrderbooksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderbooksRequest.ProtoReflect.Descriptor instead.
func (*OrderbooksRequest) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{15}
}

func (x *OrderbooksRequest) GetMarketIds() []string {
	if x != nil {
		return x.MarketIds
	}
	return nil
}

type OrderbooksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orderbooks []*SingleSpotLimitOrderbook `protobuf:"bytes,1,rep,name=orderbooks,proto3" json:"orderbooks,omitempty"`
}

func (x *OrderbooksResponse) Reset() {
	*x = OrderbooksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderbooksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderbooksResponse) ProtoMessage() {}

func (x *OrderbooksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderbooksResponse.ProtoReflect.Descriptor instead.
func (*OrderbooksResponse) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{16}
}

func (x *OrderbooksResponse) GetOrderbooks() []*SingleSpotLimitOrderbook {
	if x != nil {
		return x.Orderbooks
	}
	return nil
}

type SingleSpotLimitOrderbook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// market's ID
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Orderbook of the market
	Orderbook *SpotLimitOrderbook `protobuf:"bytes,2,opt,name=orderbook,proto3" json:"orderbook,omitempty"`
}

func (x *SingleSpotLimitOrderbook) Reset() {
	*x = SingleSpotLimitOrderbook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleSpotLimitOrderbook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleSpotLimitOrderbook) ProtoMessage() {}

func (x *SingleSpotLimitOrderbook) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleSpotLimitOrderbook.ProtoReflect.Descriptor instead.
func (*SingleSpotLimitOrderbook) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{17}
}

func (x *SingleSpotLimitOrderbook) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *SingleSpotLimitOrderbook) GetOrderbook() *SpotLimitOrderbook {
	if x != nil {
		return x.Orderbook
	}
	return nil
}

type OrderbooksV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MarketIds of the markets
	MarketIds []string `protobuf:"bytes,1,rep,name=market_ids,json=marketIds,proto3" json:"market_ids,omitempty"`
}

func (x *OrderbooksV2Request) Reset() {
	*x = OrderbooksV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderbooksV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderbooksV2Request) ProtoMessage() {}

func (x *OrderbooksV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderbooksV2Request.ProtoReflect.Descriptor instead.
func (*OrderbooksV2Request) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{18}
}

func (x *OrderbooksV2Request) GetMarketIds() []string {
	if x != nil {
		return x.MarketIds
	}
	return nil
}

type OrderbooksV2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orderbooks []*SingleSpotLimitOrderbookV2 `protobuf:"bytes,1,rep,name=orderbooks,proto3" json:"orderbooks,omitempty"`
}

func (x *OrderbooksV2Response) Reset() {
	*x = OrderbooksV2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderbooksV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderbooksV2Response) ProtoMessage() {}

func (x *OrderbooksV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderbooksV2Response.ProtoReflect.Descriptor instead.
func (*OrderbooksV2Response) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{19}
}

func (x *OrderbooksV2Response) GetOrderbooks() []*SingleSpotLimitOrderbookV2 {
	if x != nil {
		return x.Orderbooks
	}
	return nil
}

type SingleSpotLimitOrderbookV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// market's ID
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Orderbook of the market
	Orderbook *SpotLimitOrderbookV2 `protobuf:"bytes,2,opt,name=orderbook,proto3" json:"orderbook,omitempty"`
}

func (x *SingleSpotLimitOrderbookV2) Reset() {
	*x = SingleSpotLimitOrderbookV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleSpotLimitOrderbookV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleSpotLimitOrderbookV2) ProtoMessage() {}

func (x *SingleSpotLimitOrderbookV2) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleSpotLimitOrderbookV2.ProtoReflect.Descriptor instead.
func (*SingleSpotLimitOrderbookV2) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{20}
}

func (x *SingleSpotLimitOrderbookV2) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *SingleSpotLimitOrderbookV2) GetOrderbook() *SpotLimitOrderbookV2 {
	if x != nil {
		return x.Orderbook
	}
	return nil
}

type StreamOrderbookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of market IDs for orderbook streaming, empty means 'ALL' spot markets
	MarketIds []string `protobuf:"bytes,1,rep,name=market_ids,json=marketIds,proto3" json:"market_ids,omitempty"`
}

func (x *StreamOrderbookRequest) Reset() {
	*x = StreamOrderbookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamOrderbookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamOrderbookRequest) ProtoMessage() {}

func (x *StreamOrderbookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamOrderbookRequest.ProtoReflect.Descriptor instead.
func (*StreamOrderbookRequest) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{21}
}

func (x *StreamOrderbookRequest) GetMarketIds() []string {
	if x != nil {
		return x.MarketIds
	}
	return nil
}

type StreamOrderbookResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Orderbook of a Spot Market
	Orderbook *SpotLimitOrderbook `protobuf:"bytes,1,opt,name=orderbook,proto3" json:"orderbook,omitempty"`
	// Order update type
	OperationType string `protobuf:"bytes,2,opt,name=operation_type,json=operationType,proto3" json:"operation_type,omitempty"`
	// Operation timestamp in UNIX millis.
	Timestamp int64 `protobuf:"zigzag64,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// MarketId of the market's orderbook
	MarketId string `protobuf:"bytes,4,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *StreamOrderbookResponse) Reset() {
	*x = StreamOrderbookResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamOrderbookResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamOrderbookResponse) ProtoMessage() {}

func (x *StreamOrderbookResponse) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamOrderbookResponse.ProtoReflect.Descriptor instead.
func (*StreamOrderbookResponse) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{22}
}

func (x *StreamOrderbookResponse) GetOrderbook() *SpotLimitOrderbook {
	if x != nil {
		return x.Orderbook
	}
	return nil
}

func (x *StreamOrderbookResponse) GetOperationType() string {
	if x != nil {
		return x.OperationType
	}
	return ""
}

func (x *StreamOrderbookResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *StreamOrderbookResponse) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

type StreamOrderbookV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of market IDs for orderbook streaming, empty means 'ALL' spot markets
	MarketIds []string `protobuf:"bytes,1,rep,name=market_ids,json=marketIds,proto3" json:"market_ids,omitempty"`
}

func (x *StreamOrderbookV2Request) Reset() {
	*x = StreamOrderbookV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamOrderbookV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamOrderbookV2Request) ProtoMessage() {}

func (x *StreamOrderbookV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamOrderbookV2Request.ProtoReflect.Descriptor instead.
func (*StreamOrderbookV2Request) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{23}
}

func (x *StreamOrderbookV2Request) GetMarketIds() []string {
	if x != nil {
		return x.MarketIds
	}
	return nil
}

type StreamOrderbookV2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Orderbook of a Spot Market
	Orderbook *SpotLimitOrderbookV2 `protobuf:"bytes,1,opt,name=orderbook,proto3" json:"orderbook,omitempty"`
	// Order update type
	OperationType string `protobuf:"bytes,2,opt,name=operation_type,json=operationType,proto3" json:"operation_type,omitempty"`
	// Operation timestamp in UNIX millis.
	Timestamp int64 `protobuf:"zigzag64,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// MarketId of the market's orderbook
	MarketId string `protobuf:"bytes,4,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *StreamOrderbookV2Response) Reset() {
	*x = StreamOrderbookV2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamOrderbookV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamOrderbookV2Response) ProtoMessage() {}

func (x *StreamOrderbookV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamOrderbookV2Response.ProtoReflect.Descriptor instead.
func (*StreamOrderbookV2Response) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{24}
}

func (x *StreamOrderbookV2Response) GetOrderbook() *SpotLimitOrderbookV2 {
	if x != nil {
		return x.Orderbook
	}
	return nil
}

func (x *StreamOrderbookV2Response) GetOperationType() string {
	if x != nil {
		return x.OperationType
	}
	return ""
}

func (x *StreamOrderbookV2Response) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *StreamOrderbookV2Response) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

type StreamOrderbookUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of market IDs for orderbook streaming, empty means 'ALL' spot markets
	MarketIds []string `protobuf:"bytes,1,rep,name=market_ids,json=marketIds,proto3" json:"market_ids,omitempty"`
}

func (x *StreamOrderbookUpdateRequest) Reset() {
	*x = StreamOrderbookUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamOrderbookUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamOrderbookUpdateRequest) ProtoMessage() {}

func (x *StreamOrderbookUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamOrderbookUpdateRequest.ProtoReflect.Descriptor instead.
func (*StreamOrderbookUpdateRequest) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{25}
}

func (x *StreamOrderbookUpdateRequest) GetMarketIds() []string {
	if x != nil {
		return x.MarketIds
	}
	return nil
}

type StreamOrderbookUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Orderbook level updates of a Spot Market
	OrderbookLevelUpdates *OrderbookLevelUpdates `protobuf:"bytes,1,opt,name=orderbook_level_updates,json=orderbookLevelUpdates,proto3" json:"orderbook_level_updates,omitempty"`
	// Order update type
	OperationType string `protobuf:"bytes,2,opt,name=operation_type,json=operationType,proto3" json:"operation_type,omitempty"`
	// Operation timestamp in UNIX millis.
	Timestamp int64 `protobuf:"zigzag64,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// MarketId of the market's orderbook
	MarketId string `protobuf:"bytes,4,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *StreamOrderbookUpdateResponse) Reset() {
	*x = StreamOrderbookUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamOrderbookUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamOrderbookUpdateResponse) ProtoMessage() {}

func (x *StreamOrderbookUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamOrderbookUpdateResponse.ProtoReflect.Descriptor instead.
func (*StreamOrderbookUpdateResponse) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{26}
}

func (x *StreamOrderbookUpdateResponse) GetOrderbookLevelUpdates() *OrderbookLevelUpdates {
	if x != nil {
		return x.OrderbookLevelUpdates
	}
	return nil
}

func (x *StreamOrderbookUpdateResponse) GetOperationType() string {
	if x != nil {
		return x.OperationType
	}
	return ""
}

func (x *StreamOrderbookUpdateResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *StreamOrderbookUpdateResponse) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

type OrderbookLevelUpdates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// market's ID
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// orderbook update sequence
	Sequence uint64 `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// buy levels
	Buys []*PriceLevelUpdate `protobuf:"bytes,3,rep,name=buys,proto3" json:"buys,omitempty"`
	// sell levels
	Sells []*PriceLevelUpdate `protobuf:"bytes,4,rep,name=sells,proto3" json:"sells,omitempty"`
	// updates timestamp
	UpdatedAt int64 `protobuf:"zigzag64,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *OrderbookLevelUpdates) Reset() {
	*x = OrderbookLevelUpdates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderbookLevelUpdates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderbookLevelUpdates) ProtoMessage() {}

func (x *OrderbookLevelUpdates) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderbookLevelUpdates.ProtoReflect.Descriptor instead.
func (*OrderbookLevelUpdates) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{27}
}

func (x *OrderbookLevelUpdates) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *OrderbookLevelUpdates) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *OrderbookLevelUpdates) GetBuys() []*PriceLevelUpdate {
	if x != nil {
		return x.Buys
	}
	return nil
}

func (x *OrderbookLevelUpdates) GetSells() []*PriceLevelUpdate {
	if x != nil {
		return x.Sells
	}
	return nil
}

func (x *OrderbookLevelUpdates) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type PriceLevelUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Price number of the price level.
	Price string `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`
	// Quantity of the price level.
	Quantity string `protobuf:"bytes,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Price level status.
	IsActive bool `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// Price level last updated timestamp in UNIX millis.
	Timestamp int64 `protobuf:"zigzag64,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *PriceLevelUpdate) Reset() {
	*x = PriceLevelUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceLevelUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceLevelUpdate) ProtoMessage() {}

func (x *PriceLevelUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceLevelUpdate.ProtoReflect.Descriptor instead.
func (*PriceLevelUpdate) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{28}
}

func (x *PriceLevelUpdate) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *PriceLevelUpdate) GetQuantity() string {
	if x != nil {
		return x.Quantity
	}
	return ""
}

func (x *PriceLevelUpdate) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *PriceLevelUpdate) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type OrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MarketId of the market's orderbook we want to fetch
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Look for specific order side
	OrderSide string `protobuf:"bytes,2,opt,name=order_side,json=orderSide,proto3" json:"order_side,omitempty"`
	// Look for specific subaccountId of an order
	SubaccountId string `protobuf:"bytes,3,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	// Skip will skip the first n item from the result
	Skip uint64 `protobuf:"varint,4,opt,name=skip,proto3" json:"skip,omitempty"`
	// Limit is used to specify the maximum number of items to be returned.
	Limit int32 `protobuf:"zigzag32,5,opt,name=limit,proto3" json:"limit,omitempty"`
	// The starting timestamp in UNIX milliseconds that the trades must be equal or
	// older than
	StartTime int64 `protobuf:"zigzag64,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The ending timestamp in UNIX milliseconds that the trades must be equal or
	// younger than
	EndTime int64 `protobuf:"zigzag64,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// MarketIds of the markets of which we want to get trades
	MarketIds []string `protobuf:"bytes,8,rep,name=market_ids,json=marketIds,proto3" json:"market_ids,omitempty"`
	// Should include inactive orders
	IncludeInactive bool `protobuf:"varint,9,opt,name=include_inactive,json=includeInactive,proto3" json:"include_inactive,omitempty"`
	// Choose to return subaccount total orders
	SubaccountTotalOrders bool `protobuf:"varint,10,opt,name=subaccount_total_orders,json=subaccountTotalOrders,proto3" json:"subaccount_total_orders,omitempty"`
}

func (x *OrdersRequest) Reset() {
	*x = OrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrdersRequest) ProtoMessage() {}

func (x *OrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrdersRequest.ProtoReflect.Descriptor instead.
func (*OrdersRequest) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{29}
}

func (x *OrdersRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *OrdersRequest) GetOrderSide() string {
	if x != nil {
		return x.OrderSide
	}
	return ""
}

func (x *OrdersRequest) GetSubaccountId() string {
	if x != nil {
		return x.SubaccountId
	}
	return ""
}

func (x *OrdersRequest) GetSkip() uint64 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *OrdersRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *OrdersRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *OrdersRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *OrdersRequest) GetMarketIds() []string {
	if x != nil {
		return x.MarketIds
	}
	return nil
}

func (x *OrdersRequest) GetIncludeInactive() bool {
	if x != nil {
		return x.IncludeInactive
	}
	return false
}

func (x *OrdersRequest) GetSubaccountTotalOrders() bool {
	if x != nil {
		return x.SubaccountTotalOrders
	}
	return false
}

type OrdersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orders []*SpotLimitOrder `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	Paging *Paging           `protobuf:"bytes,2,opt,name=paging,proto3" json:"paging,omitempty"`
}

func (x *OrdersResponse) Reset() {
	*x = OrdersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrdersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrdersResponse) ProtoMessage() {}

func (x *OrdersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrdersResponse.ProtoReflect.Descriptor instead.
func (*OrdersResponse) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{30}
}

func (x *OrdersResponse) GetOrders() []*SpotLimitOrder {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *OrdersResponse) GetPaging() *Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type SpotLimitOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hash of the order
	OrderHash string `protobuf:"bytes,1,opt,name=order_hash,json=orderHash,proto3" json:"order_hash,omitempty"`
	// The side of the order
	OrderSide string `protobuf:"bytes,2,opt,name=order_side,json=orderSide,proto3" json:"order_side,omitempty"`
	// Spot Market ID is keccak265(baseDenom + quoteDenom)
	MarketId string `protobuf:"bytes,3,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// The subaccountId that this order belongs to
	SubaccountId string `protobuf:"bytes,4,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	// Price of the order
	Price string `protobuf:"bytes,5,opt,name=price,proto3" json:"price,omitempty"`
	// Quantity of the order
	Quantity string `protobuf:"bytes,6,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// The amount of the quantity remaining unfilled
	UnfilledQuantity string `protobuf:"bytes,7,opt,name=unfilled_quantity,json=unfilledQuantity,proto3" json:"unfilled_quantity,omitempty"`
	// Trigger price is the trigger price used by stop/take orders. 0 if the
	// trigger price is not set.
	TriggerPrice string `protobuf:"bytes,8,opt,name=trigger_price,json=triggerPrice,proto3" json:"trigger_price,omitempty"`
	// Fee recipient address
	FeeRecipient string `protobuf:"bytes,9,opt,name=fee_recipient,json=feeRecipient,proto3" json:"fee_recipient,omitempty"`
	// Order state
	State string `protobuf:"bytes,10,opt,name=state,proto3" json:"state,omitempty"`
	// Order committed timestamp in UNIX millis.
	CreatedAt int64 `protobuf:"zigzag64,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Order updated timestamp in UNIX millis.
	UpdatedAt int64 `protobuf:"zigzag64,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *SpotLimitOrder) Reset() {
	*x = SpotLimitOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotLimitOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotLimitOrder) ProtoMessage() {}

func (x *SpotLimitOrder) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotLimitOrder.ProtoReflect.Descriptor instead.
func (*SpotLimitOrder) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{31}
}

func (x *SpotLimitOrder) GetOrderHash() string {
	if x != nil {
		return x.OrderHash
	}
	return ""
}

func (x *SpotLimitOrder) GetOrderSide() string {
	if x != nil {
		return x.OrderSide
	}
	return ""
}

func (x *SpotLimitOrder) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *SpotLimitOrder) GetSubaccountId() string {
	if x != nil {
		return x.SubaccountId
	}
	return ""
}

func (x *SpotLimitOrder) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *SpotLimitOrder) GetQuantity() string {
	if x != nil {
		return x.Quantity
	}
	return ""
}

func (x *SpotLimitOrder) GetUnfilledQuantity() string {
	if x != nil {
		return x.UnfilledQuantity
	}
	return ""
}

func (x *SpotLimitOrder) GetTriggerPrice() string {
	if x != nil {
		return x.TriggerPrice
	}
	return ""
}

func (x *SpotLimitOrder) GetFeeRecipient() string {
	if x != nil {
		return x.FeeRecipient
	}
	return ""
}

func (x *SpotLimitOrder) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *SpotLimitOrder) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *SpotLimitOrder) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

// Paging defines the structure for required params for handling pagination
type Paging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// total number of txs saved in database
	Total int64 `protobuf:"zigzag64,1,opt,name=total,proto3" json:"total,omitempty"`
	// can be either block height or index num
	From int32 `protobuf:"zigzag32,2,opt,name=from,proto3" json:"from,omitempty"`
	// can be either block height or index num
	To int32 `protobuf:"zigzag32,3,opt,name=to,proto3" json:"to,omitempty"`
	// count entries by subaccount, serving some places on helix
	CountBySubaccount int64 `protobuf:"zigzag64,4,opt,name=count_by_subaccount,json=countBySubaccount,proto3" json:"count_by_subaccount,omitempty"`
}

func (x *Paging) Reset() {
	*x = Paging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Paging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Paging) ProtoMessage() {}

func (x *Paging) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Paging.ProtoReflect.Descriptor instead.
func (*Paging) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{32}
}

func (x *Paging) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Paging) GetFrom() int32 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *Paging) GetTo() int32 {
	if x != nil {
		return x.To
	}
	return 0
}

func (x *Paging) GetCountBySubaccount() int64 {
	if x != nil {
		return x.CountBySubaccount
	}
	return 0
}

type StreamOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MarketId of the market's orderbook we want to fetch
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Look for specific order side
	OrderSide string `protobuf:"bytes,2,opt,name=order_side,json=orderSide,proto3" json:"order_side,omitempty"`
	// Look for specific subaccountId of an order
	SubaccountId string `protobuf:"bytes,3,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	// Skip will skip the first n item from the result
	Skip uint64 `protobuf:"varint,4,opt,name=skip,proto3" json:"skip,omitempty"`
	// Limit is used to specify the maximum number of items to be returned.
	Limit int32 `protobuf:"zigzag32,5,opt,name=limit,proto3" json:"limit,omitempty"`
	// The starting timestamp in UNIX milliseconds that the trades must be equal or
	// older than
	StartTime int64 `protobuf:"zigzag64,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The ending timestamp in UNIX milliseconds that the trades must be equal or
	// younger than
	EndTime int64 `protobuf:"zigzag64,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// MarketIds of the markets of which we want to get trades
	MarketIds []string `protobuf:"bytes,8,rep,name=market_ids,json=marketIds,proto3" json:"market_ids,omitempty"`
	// Should include inactive orders
	IncludeInactive bool `protobuf:"varint,9,opt,name=include_inactive,json=includeInactive,proto3" json:"include_inactive,omitempty"`
	// Choose to return subaccount total orders
	SubaccountTotalOrders bool `protobuf:"varint,10,opt,name=subaccount_total_orders,json=subaccountTotalOrders,proto3" json:"subaccount_total_orders,omitempty"`
}

func (x *StreamOrdersRequest) Reset() {
	*x = StreamOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamOrdersRequest) ProtoMessage() {}

func (x *StreamOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamOrdersRequest.ProtoReflect.Descriptor instead.
func (*StreamOrdersRequest) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{33}
}

func (x *StreamOrdersRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *StreamOrdersRequest) GetOrderSide() string {
	if x != nil {
		return x.OrderSide
	}
	return ""
}

func (x *StreamOrdersRequest) GetSubaccountId() string {
	if x != nil {
		return x.SubaccountId
	}
	return ""
}

func (x *StreamOrdersRequest) GetSkip() uint64 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *StreamOrdersRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *StreamOrdersRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *StreamOrdersRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *StreamOrdersRequest) GetMarketIds() []string {
	if x != nil {
		return x.MarketIds
	}
	return nil
}

func (x *StreamOrdersRequest) GetIncludeInactive() bool {
	if x != nil {
		return x.IncludeInactive
	}
	return false
}

func (x *StreamOrdersRequest) GetSubaccountTotalOrders() bool {
	if x != nil {
		return x.SubaccountTotalOrders
	}
	return false
}

type StreamOrdersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Updated market order
	Order *SpotLimitOrder `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	// Order update type
	OperationType string `protobuf:"bytes,2,opt,name=operation_type,json=operationType,proto3" json:"operation_type,omitempty"`
	// Operation timestamp in UNIX millis.
	Timestamp int64 `protobuf:"zigzag64,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *StreamOrdersResponse) Reset() {
	*x = StreamOrdersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamOrdersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamOrdersResponse) ProtoMessage() {}

func (x *StreamOrdersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamOrdersResponse.ProtoReflect.Descriptor instead.
func (*StreamOrdersResponse) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{34}
}

func (x *StreamOrdersResponse) GetOrder() *SpotLimitOrder {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *StreamOrdersResponse) GetOperationType() string {
	if x != nil {
		return x.OperationType
	}
	return ""
}

func (x *StreamOrdersResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type TradesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MarketId of the market's orderbook we want to fetch
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Filter by execution side of the trade
	ExecutionSide string `protobuf:"bytes,2,opt,name=execution_side,json=executionSide,proto3" json:"execution_side,omitempty"`
	// Filter by direction the trade
	Direction string `protobuf:"bytes,3,opt,name=direction,proto3" json:"direction,omitempty"`
	// SubaccountId of the trader we want to get the trades from
	SubaccountId string `protobuf:"bytes,4,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	// Skip will skip the first n item from the item result
	Skip uint64 `protobuf:"varint,5,opt,name=skip,proto3" json:"skip,omitempty"`
	// Limit is used to specify the maximum number of items to be returned.
	Limit int32 `protobuf:"zigzag32,6,opt,name=limit,proto3" json:"limit,omitempty"`
	// The starting timestamp in UNIX milliseconds that the trades must be equal or
	// older than
	StartTime int64 `protobuf:"zigzag64,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The ending timestamp in UNIX milliseconds that the trades must be equal or
	// younger than
	EndTime int64 `protobuf:"zigzag64,8,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// MarketIds of the markets of which we want to get trades
	MarketIds []string `protobuf:"bytes,9,rep,name=market_ids,json=marketIds,proto3" json:"market_ids,omitempty"`
	// Subaccount ids of traders we want to get trades
	SubaccountIds  []string `protobuf:"bytes,10,rep,name=subaccount_ids,json=subaccountIds,proto3" json:"subaccount_ids,omitempty"`
	ExecutionTypes []string `protobuf:"bytes,11,rep,name=execution_types,json=executionTypes,proto3" json:"execution_types,omitempty"`
}

func (x *TradesRequest) Reset() {
	*x = TradesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesRequest) ProtoMessage() {}

func (x *TradesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesRequest.ProtoReflect.Descriptor instead.
func (*TradesRequest) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{35}
}

func (x *TradesRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *TradesRequest) GetExecutionSide() string {
	if x != nil {
		return x.ExecutionSide
	}
	return ""
}

func (x *TradesRequest) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *TradesRequest) GetSubaccountId() string {
	if x != nil {
		return x.SubaccountId
	}
	return ""
}

func (x *TradesRequest) GetSkip() uint64 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *TradesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TradesRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *TradesRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *TradesRequest) GetMarketIds() []string {
	if x != nil {
		return x.MarketIds
	}
	return nil
}

func (x *TradesRequest) GetSubaccountIds() []string {
	if x != nil {
		return x.SubaccountIds
	}
	return nil
}

func (x *TradesRequest) GetExecutionTypes() []string {
	if x != nil {
		return x.ExecutionTypes
	}
	return nil
}

type TradesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trades of a Spot Market
	Trades []*SpotTrade `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
	// Paging indicates pages response is on
	Paging *Paging `protobuf:"bytes,2,opt,name=paging,proto3" json:"paging,omitempty"`
}

func (x *TradesResponse) Reset() {
	*x = TradesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesResponse) ProtoMessage() {}

func (x *TradesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesResponse.ProtoReflect.Descriptor instead.
func (*TradesResponse) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{36}
}

func (x *TradesResponse) GetTrades() []*SpotTrade {
	if x != nil {
		return x.Trades
	}
	return nil
}

func (x *TradesResponse) GetPaging() *Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type SpotTrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maker order hash.
	OrderHash string `protobuf:"bytes,1,opt,name=order_hash,json=orderHash,proto3" json:"order_hash,omitempty"`
	// The subaccountId that executed the trade
	SubaccountId string `protobuf:"bytes,2,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	// The ID of the market that this trade is in
	MarketId string `protobuf:"bytes,3,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// The execution type of the trade
	TradeExecutionType string `protobuf:"bytes,4,opt,name=trade_execution_type,json=tradeExecutionType,proto3" json:"trade_execution_type,omitempty"`
	// The direction the trade
	TradeDirection string `protobuf:"bytes,5,opt,name=trade_direction,json=tradeDirection,proto3" json:"trade_direction,omitempty"`
	// Price level at which trade has been executed
	Price *PriceLevel `protobuf:"bytes,6,opt,name=price,proto3" json:"price,omitempty"`
	// The fee associated with the trade (quote asset denom)
	Fee string `protobuf:"bytes,7,opt,name=fee,proto3" json:"fee,omitempty"`
	// Timestamp of trade execution in UNIX millis
	ExecutedAt int64 `protobuf:"zigzag64,8,opt,name=executed_at,json=executedAt,proto3" json:"executed_at,omitempty"`
	// Fee recipient address
	FeeRecipient string `protobuf:"bytes,9,opt,name=fee_recipient,json=feeRecipient,proto3" json:"fee_recipient,omitempty"`
	// A unique string that helps differentiate between trades
	TradeId string `protobuf:"bytes,10,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	// Trade's execution side, marker/taker
	ExecutionSide string `protobuf:"bytes,11,opt,name=execution_side,json=executionSide,proto3" json:"execution_side,omitempty"`
}

func (x *SpotTrade) Reset() {
	*x = SpotTrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotTrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotTrade) ProtoMessage() {}

func (x *SpotTrade) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotTrade.ProtoReflect.Descriptor instead.
func (*SpotTrade) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{37}
}

func (x *SpotTrade) GetOrderHash() string {
	if x != nil {
		return x.OrderHash
	}
	return ""
}

func (x *SpotTrade) GetSubaccountId() string {
	if x != nil {
		return x.SubaccountId
	}
	return ""
}

func (x *SpotTrade) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *SpotTrade) GetTradeExecutionType() string {
	if x != nil {
		return x.TradeExecutionType
	}
	return ""
}

func (x *SpotTrade) GetTradeDirection() string {
	if x != nil {
		return x.TradeDirection
	}
	return ""
}

func (x *SpotTrade) GetPrice() *PriceLevel {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *SpotTrade) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *SpotTrade) GetExecutedAt() int64 {
	if x != nil {
		return x.ExecutedAt
	}
	return 0
}

func (x *SpotTrade) GetFeeRecipient() string {
	if x != nil {
		return x.FeeRecipient
	}
	return ""
}

func (x *SpotTrade) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *SpotTrade) GetExecutionSide() string {
	if x != nil {
		return x.ExecutionSide
	}
	return ""
}

type StreamTradesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MarketId of the market's orderbook we want to fetch
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Filter by execution side of the trade
	ExecutionSide string `protobuf:"bytes,2,opt,name=execution_side,json=executionSide,proto3" json:"execution_side,omitempty"`
	// Filter by direction the trade
	Direction string `protobuf:"bytes,3,opt,name=direction,proto3" json:"direction,omitempty"`
	// SubaccountId of the trader we want to get the trades from
	SubaccountId string `protobuf:"bytes,4,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	// Skip will skip the first n item from the item result
	Skip uint64 `protobuf:"varint,5,opt,name=skip,proto3" json:"skip,omitempty"`
	// Limit is used to specify the maximum number of items to be returned.
	Limit int32 `protobuf:"zigzag32,6,opt,name=limit,proto3" json:"limit,omitempty"`
	// The starting timestamp in UNIX milliseconds that the trades must be equal or
	// older than
	StartTime int64 `protobuf:"zigzag64,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The ending timestamp in UNIX milliseconds that the trades must be equal or
	// younger than
	EndTime int64 `protobuf:"zigzag64,8,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// MarketIds of the markets of which we want to get trades
	MarketIds []string `protobuf:"bytes,9,rep,name=market_ids,json=marketIds,proto3" json:"market_ids,omitempty"`
	// Subaccount ids of traders we want to get trades
	SubaccountIds  []string `protobuf:"bytes,10,rep,name=subaccount_ids,json=subaccountIds,proto3" json:"subaccount_ids,omitempty"`
	ExecutionTypes []string `protobuf:"bytes,11,rep,name=execution_types,json=executionTypes,proto3" json:"execution_types,omitempty"`
}

func (x *StreamTradesRequest) Reset() {
	*x = StreamTradesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamTradesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamTradesRequest) ProtoMessage() {}

func (x *StreamTradesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamTradesRequest.ProtoReflect.Descriptor instead.
func (*StreamTradesRequest) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{38}
}

func (x *StreamTradesRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *StreamTradesRequest) GetExecutionSide() string {
	if x != nil {
		return x.ExecutionSide
	}
	return ""
}

func (x *StreamTradesRequest) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *StreamTradesRequest) GetSubaccountId() string {
	if x != nil {
		return x.SubaccountId
	}
	return ""
}

func (x *StreamTradesRequest) GetSkip() uint64 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *StreamTradesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *StreamTradesRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *StreamTradesRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *StreamTradesRequest) GetMarketIds() []string {
	if x != nil {
		return x.MarketIds
	}
	return nil
}

func (x *StreamTradesRequest) GetSubaccountIds() []string {
	if x != nil {
		return x.SubaccountIds
	}
	return nil
}

func (x *StreamTradesRequest) GetExecutionTypes() []string {
	if x != nil {
		return x.ExecutionTypes
	}
	return nil
}

type StreamTradesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// New spot market trade
	Trade *SpotTrade `protobuf:"bytes,1,opt,name=trade,proto3" json:"trade,omitempty"`
	// Executed trades update type
	OperationType string `protobuf:"bytes,2,opt,name=operation_type,json=operationType,proto3" json:"operation_type,omitempty"`
	// Operation timestamp in UNIX millis.
	Timestamp int64 `protobuf:"zigzag64,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *StreamTradesResponse) Reset() {
	*x = StreamTradesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamTradesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamTradesResponse) ProtoMessage() {}

func (x *StreamTradesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamTradesResponse.ProtoReflect.Descriptor instead.
func (*StreamTradesResponse) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{39}
}

func (x *StreamTradesResponse) GetTrade() *SpotTrade {
	if x != nil {
		return x.Trade
	}
	return nil
}

func (x *StreamTradesResponse) GetOperationType() string {
	if x != nil {
		return x.OperationType
	}
	return ""
}

func (x *StreamTradesResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type SubaccountOrdersListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// subaccount ID to filter orders for specific subaccount
	SubaccountId string `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	// Market ID to filter orders for specific market
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Skip will skip the first n item from the result
	Skip uint64 `protobuf:"varint,3,opt,name=skip,proto3" json:"skip,omitempty"`
	// Limit is used to specify the maximum number of items to be returned
	Limit int32 `protobuf:"zigzag32,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *SubaccountOrdersListRequest) Reset() {
	*x = SubaccountOrdersListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubaccountOrdersListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubaccountOrdersListRequest) ProtoMessage() {}

func (x *SubaccountOrdersListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubaccountOrdersListRequest.ProtoReflect.Descriptor instead.
func (*SubaccountOrdersListRequest) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{40}
}

func (x *SubaccountOrdersListRequest) GetSubaccountId() string {
	if x != nil {
		return x.SubaccountId
	}
	return ""
}

func (x *SubaccountOrdersListRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *SubaccountOrdersListRequest) GetSkip() uint64 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *SubaccountOrdersListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type SubaccountOrdersListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orders []*SpotLimitOrder `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	Paging *Paging           `protobuf:"bytes,2,opt,name=paging,proto3" json:"paging,omitempty"`
}

func (x *SubaccountOrdersListResponse) Reset() {
	*x = SubaccountOrdersListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubaccountOrdersListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubaccountOrdersListResponse) ProtoMessage() {}

func (x *SubaccountOrdersListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubaccountOrdersListResponse.ProtoReflect.Descriptor instead.
func (*SubaccountOrdersListResponse) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{41}
}

func (x *SubaccountOrdersListResponse) GetOrders() []*SpotLimitOrder {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *SubaccountOrdersListResponse) GetPaging() *Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type SubaccountTradesListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SubaccountId of the trader we want to get the trades from
	SubaccountId string `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	// Filter trades by market ID
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Filter by execution type of trades
	ExecutionType string `protobuf:"bytes,3,opt,name=execution_type,json=executionType,proto3" json:"execution_type,omitempty"`
	// Filter by direction trades
	Direction string `protobuf:"bytes,4,opt,name=direction,proto3" json:"direction,omitempty"`
	// Skip will skip the first n item from the result
	Skip uint64 `protobuf:"varint,5,opt,name=skip,proto3" json:"skip,omitempty"`
	// Limit is used to specify the maximum number of items to be returned
	Limit int32 `protobuf:"zigzag32,6,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *SubaccountTradesListRequest) Reset() {
	*x = SubaccountTradesListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubaccountTradesListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubaccountTradesListRequest) ProtoMessage() {}

func (x *SubaccountTradesListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubaccountTradesListRequest.ProtoReflect.Descriptor instead.
func (*SubaccountTradesListRequest) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{42}
}

func (x *SubaccountTradesListRequest) GetSubaccountId() string {
	if x != nil {
		return x.SubaccountId
	}
	return ""
}

func (x *SubaccountTradesListRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *SubaccountTradesListRequest) GetExecutionType() string {
	if x != nil {
		return x.ExecutionType
	}
	return ""
}

func (x *SubaccountTradesListRequest) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *SubaccountTradesListRequest) GetSkip() uint64 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *SubaccountTradesListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type SubaccountTradesListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of spot market trades
	Trades []*SpotTrade `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
}

func (x *SubaccountTradesListResponse) Reset() {
	*x = SubaccountTradesListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubaccountTradesListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubaccountTradesListResponse) ProtoMessage() {}

func (x *SubaccountTradesListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubaccountTradesListResponse.ProtoReflect.Descriptor instead.
func (*SubaccountTradesListResponse) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{43}
}

func (x *SubaccountTradesListResponse) GetTrades() []*SpotTrade {
	if x != nil {
		return x.Trades
	}
	return nil
}

type OrdersHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// subaccount ID to filter orders for specific subaccount
	SubaccountId string `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	// Market ID to filter orders for specific market
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Skip will skip the first n item from the result
	Skip uint64 `protobuf:"varint,3,opt,name=skip,proto3" json:"skip,omitempty"`
	// Limit is used to specify the maximum number of items to be returned
	Limit int32 `protobuf:"zigzag32,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// filter by order types
	OrderTypes []string `protobuf:"bytes,5,rep,name=order_types,json=orderTypes,proto3" json:"order_types,omitempty"`
	// order side filter
	Direction string `protobuf:"bytes,6,opt,name=direction,proto3" json:"direction,omitempty"`
	// Search for orders which createdAt >= startTime, time in millisecond
	StartTime int64 `protobuf:"zigzag64,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Search for orders which createdAt <= endTime, time in millisecond
	EndTime int64 `protobuf:"zigzag64,8,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Filter by order state
	State          string   `protobuf:"bytes,9,opt,name=state,proto3" json:"state,omitempty"`
	ExecutionTypes []string `protobuf:"bytes,10,rep,name=execution_types,json=executionTypes,proto3" json:"execution_types,omitempty"`
	MarketIds      []string `protobuf:"bytes,11,rep,name=market_ids,json=marketIds,proto3" json:"market_ids,omitempty"`
}

func (x *OrdersHistoryRequest) Reset() {
	*x = OrdersHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrdersHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrdersHistoryRequest) ProtoMessage() {}

func (x *OrdersHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrdersHistoryRequest.ProtoReflect.Descriptor instead.
func (*OrdersHistoryRequest) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{44}
}

func (x *OrdersHistoryRequest) GetSubaccountId() string {
	if x != nil {
		return x.SubaccountId
	}
	return ""
}

func (x *OrdersHistoryRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *OrdersHistoryRequest) GetSkip() uint64 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *OrdersHistoryRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *OrdersHistoryRequest) GetOrderTypes() []string {
	if x != nil {
		return x.OrderTypes
	}
	return nil
}

func (x *OrdersHistoryRequest) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *OrdersHistoryRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *OrdersHistoryRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *OrdersHistoryRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *OrdersHistoryRequest) GetExecutionTypes() []string {
	if x != nil {
		return x.ExecutionTypes
	}
	return nil
}

func (x *OrdersHistoryRequest) GetMarketIds() []string {
	if x != nil {
		return x.MarketIds
	}
	return nil
}

type OrdersHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of history spot orders
	Orders []*SpotOrderHistory `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	Paging *Paging             `protobuf:"bytes,2,opt,name=paging,proto3" json:"paging,omitempty"`
}

func (x *OrdersHistoryResponse) Reset() {
	*x = OrdersHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrdersHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrdersHistoryResponse) ProtoMessage() {}

func (x *OrdersHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrdersHistoryResponse.ProtoReflect.Descriptor instead.
func (*OrdersHistoryResponse) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{45}
}

func (x *OrdersHistoryResponse) GetOrders() []*SpotOrderHistory {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *OrdersHistoryResponse) GetPaging() *Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type SpotOrderHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hash of the order
	OrderHash string `protobuf:"bytes,1,opt,name=order_hash,json=orderHash,proto3" json:"order_hash,omitempty"`
	// Spot Market ID is keccak265(baseDenom + quoteDenom)
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// active state of the order
	IsActive bool `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// The subaccountId that this order belongs to
	SubaccountId string `protobuf:"bytes,4,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	// The execution type
	ExecutionType string `protobuf:"bytes,5,opt,name=execution_type,json=executionType,proto3" json:"execution_type,omitempty"`
	// The side of the order
	OrderType string `protobuf:"bytes,6,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`
	// Price of the order
	Price string `protobuf:"bytes,7,opt,name=price,proto3" json:"price,omitempty"`
	// Trigger price
	TriggerPrice string `protobuf:"bytes,8,opt,name=trigger_price,json=triggerPrice,proto3" json:"trigger_price,omitempty"`
	// Quantity of the order
	Quantity string `protobuf:"bytes,9,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Filled amount
	FilledQuantity string `protobuf:"bytes,10,opt,name=filled_quantity,json=filledQuantity,proto3" json:"filled_quantity,omitempty"`
	// Order state
	State string `protobuf:"bytes,11,opt,name=state,proto3" json:"state,omitempty"`
	// Order committed timestamp in UNIX millis.
	CreatedAt int64 `protobuf:"zigzag64,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Order updated timestamp in UNIX millis.
	UpdatedAt int64 `protobuf:"zigzag64,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Order direction (order side)
	Direction string `protobuf:"bytes,14,opt,name=direction,proto3" json:"direction,omitempty"`
}

func (x *SpotOrderHistory) Reset() {
	*x = SpotOrderHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotOrderHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotOrderHistory) ProtoMessage() {}

func (x *SpotOrderHistory) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotOrderHistory.ProtoReflect.Descriptor instead.
func (*SpotOrderHistory) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{46}
}

func (x *SpotOrderHistory) GetOrderHash() string {
	if x != nil {
		return x.OrderHash
	}
	return ""
}

func (x *SpotOrderHistory) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *SpotOrderHistory) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *SpotOrderHistory) GetSubaccountId() string {
	if x != nil {
		return x.SubaccountId
	}
	return ""
}

func (x *SpotOrderHistory) GetExecutionType() string {
	if x != nil {
		return x.ExecutionType
	}
	return ""
}

func (x *SpotOrderHistory) GetOrderType() string {
	if x != nil {
		return x.OrderType
	}
	return ""
}

func (x *SpotOrderHistory) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *SpotOrderHistory) GetTriggerPrice() string {
	if x != nil {
		return x.TriggerPrice
	}
	return ""
}

func (x *SpotOrderHistory) GetQuantity() string {
	if x != nil {
		return x.Quantity
	}
	return ""
}

func (x *SpotOrderHistory) GetFilledQuantity() string {
	if x != nil {
		return x.FilledQuantity
	}
	return ""
}

func (x *SpotOrderHistory) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *SpotOrderHistory) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *SpotOrderHistory) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *SpotOrderHistory) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

type StreamOrdersHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// subaccount ID to filter orders for specific subaccount
	SubaccountId string `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	// Market ID to filter orders for specific market
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// filter by order types
	OrderTypes []string `protobuf:"bytes,3,rep,name=order_types,json=orderTypes,proto3" json:"order_types,omitempty"`
	// order side filter
	Direction string `protobuf:"bytes,4,opt,name=direction,proto3" json:"direction,omitempty"`
	// Filter by order state
	State          string   `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	ExecutionTypes []string `protobuf:"bytes,6,rep,name=execution_types,json=executionTypes,proto3" json:"execution_types,omitempty"`
}

func (x *StreamOrdersHistoryRequest) Reset() {
	*x = StreamOrdersHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamOrdersHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamOrdersHistoryRequest) ProtoMessage() {}

func (x *StreamOrdersHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamOrdersHistoryRequest.ProtoReflect.Descriptor instead.
func (*StreamOrdersHistoryRequest) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{47}
}

func (x *StreamOrdersHistoryRequest) GetSubaccountId() string {
	if x != nil {
		return x.SubaccountId
	}
	return ""
}

func (x *StreamOrdersHistoryRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *StreamOrdersHistoryRequest) GetOrderTypes() []string {
	if x != nil {
		return x.OrderTypes
	}
	return nil
}

func (x *StreamOrdersHistoryRequest) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *StreamOrdersHistoryRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *StreamOrdersHistoryRequest) GetExecutionTypes() []string {
	if x != nil {
		return x.ExecutionTypes
	}
	return nil
}

type StreamOrdersHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Updated order
	Order *SpotOrderHistory `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	// Order update type
	OperationType string `protobuf:"bytes,2,opt,name=operation_type,json=operationType,proto3" json:"operation_type,omitempty"`
	// Operation timestamp in UNIX millis.
	Timestamp int64 `protobuf:"zigzag64,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *StreamOrdersHistoryResponse) Reset() {
	*x = StreamOrdersHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injective_spot_exchange_rpc_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamOrdersHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamOrdersHistoryResponse) ProtoMessage() {}

func (x *StreamOrdersHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_injective_spot_exchange_rpc_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamOrdersHistoryResponse.ProtoReflect.Descriptor instead.
func (*StreamOrdersHistoryResponse) Descriptor() ([]byte, []int) {
	return file_injective_spot_exchange_rpc_proto_rawDescGZIP(), []int{48}
}

func (x *StreamOrdersHistoryResponse) GetOrder() *SpotOrderHistory {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *StreamOrdersHistoryResponse) GetOperationType() string {
	if x != nil {
		return x.OperationType
	}
	return ""
}

func (x *StreamOrdersHistoryResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

var File_injective_spot_exchange_rpc_proto protoreflect.FileDescriptor

var file_injective_spot_exchange_rpc_proto_rawDesc = []byte{
	0x0a, 0x21, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74,
	0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73,
	0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63,
	0x22, 0x75, 0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x73,
	0x65, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f,
	0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x22, 0x58, 0x0a, 0x0f, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x73, 0x22, 0xae, 0x04, 0x0a, 0x0e, 0x53, 0x70, 0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x4e, 0x0a,
	0x0f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0d,
	0x62, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1f, 0x0a,
	0x0b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x50,
	0x0a, 0x10, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x0e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x46,
	0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f,
	0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x46, 0x65, 0x65, 0x12, 0x2d,
	0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x63, 0x6b,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x69, 0x6e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x33, 0x0a,
	0x16, 0x6d, 0x69, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x69,
	0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d,
	0x69, 0x6e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x64, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x12, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x2c, 0x0a, 0x0d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x22, 0x35, 0x0a, 0x14, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64,
	0x73, 0x22, 0xa1, 0x01, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x12, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x2f, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x09, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x70, 0x6f,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x52,
	0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x22, 0xae, 0x01, 0x0a, 0x12, 0x53,
	0x70, 0x6f, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f,
	0x6b, 0x12, 0x3b, 0x0a, 0x04, 0x62, 0x75, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74,
	0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x04, 0x62, 0x75, 0x79, 0x73, 0x12, 0x3d,
	0x0a, 0x05, 0x73, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x73, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x5c, 0x0a, 0x0a, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x12, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x31, 0x0a, 0x12, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x13,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x56, 0x32, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x6f, 0x6b, 0x22, 0xcc, 0x01, 0x0a, 0x14, 0x53, 0x70, 0x6f, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x56, 0x32, 0x12, 0x3b, 0x0a,
	0x04, 0x62, 0x75, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6e,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x04, 0x62, 0x75, 0x79, 0x73, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x65,
	0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6e, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x05, 0x73, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x12, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0x32, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x73, 0x22, 0x6b, 0x0a, 0x12, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a,
	0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70,
	0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x6f, 0x6b, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x18, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53,
	0x70, 0x6f, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f,
	0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x4d,
	0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70,
	0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x70, 0x6f, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x6f, 0x6b, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x22, 0x34, 0x0a,
	0x13, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x56, 0x32, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x73, 0x22, 0x6f, 0x0a, 0x14, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b,
	0x73, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0a, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74,
	0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x56, 0x32, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x6f, 0x6b, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x1a, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53,
	0x70, 0x6f, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f,
	0x6b, 0x56, 0x32, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x4f, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x6f, 0x6b, 0x56, 0x32, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f,
	0x6b, 0x22, 0x37, 0x0a, 0x16, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x17, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6e, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x18, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49,
	0x64, 0x73, 0x22, 0xce, 0x01, 0x0a, 0x19, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4f, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x6f, 0x6b, 0x56, 0x32, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f,
	0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x12, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x1c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49,
	0x64, 0x73, 0x22, 0xed, 0x01, 0x0a, 0x1d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x17, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f,
	0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x15, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x6f, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x12, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x22, 0xf7, 0x01, 0x0a, 0x15, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x62, 0x75, 0x79, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x04, 0x62, 0x75, 0x79, 0x73, 0x12, 0x43, 0x0a, 0x05, 0x73, 0x65, 0x6c, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x12, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x7f, 0x0a, 0x10,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xd6, 0x02,
	0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x73, 0x6b, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x12, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x12, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x36,
	0x0a, 0x17, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x3b,
	0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x22, 0x8d, 0x03, 0x0a, 0x0e,
	0x53, 0x70, 0x6f, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a,
	0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x2b, 0x0a, 0x11, 0x75, 0x6e, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x6e, 0x66,
	0x69, 0x6c, 0x6c, 0x65, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x65, 0x65, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x12, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x72, 0x0a, 0x06, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x02, 0x74, 0x6f, 0x12,
	0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x12, 0x52, 0x11, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x79, 0x53, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xdc, 0x02, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x69, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x12, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x12, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0x9e,
	0x01, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0xe9, 0x02, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x69, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x12, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x12, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x0e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e,
	0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x70, 0x6f,
	0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x3b,
	0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x22, 0xa0, 0x03, 0x0a, 0x09,
	0x53, 0x70, 0x6f, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x64, 0x65, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0a, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x65, 0x65, 0x5f, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x66, 0x65, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x65, 0x22, 0xef,
	0x02, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6b, 0x69,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x12, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x12, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x22, 0x99, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x12, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x89, 0x01, 0x0a,
	0x1b, 0x53, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6b,
	0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xa0, 0x01, 0x0a, 0x1c, 0x53, 0x75, 0x62,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x3b,
	0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x22, 0xce, 0x01, 0x0a, 0x1b,
	0x53, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x5e, 0x0a, 0x1c,
	0x53, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x06,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69,
	0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x22, 0xd9, 0x02, 0x0a,
	0x14, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75,
	0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x12, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x15, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73,
	0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x70, 0x6f, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x06,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x22, 0xc8, 0x03, 0x0a, 0x10, 0x53, 0x70, 0x6f, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64,
	0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x12, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x12, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xdc, 0x01, 0x0a, 0x1a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x22, 0xa7, 0x01, 0x0a, 0x1b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x43, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74,
	0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x70,
	0x6f, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x32, 0x8e, 0x11, 0x0a, 0x18, 0x49,
	0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x50, 0x43, 0x12, 0x64, 0x0a, 0x07, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x2b, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73,
	0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74,
	0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a,
	0x06, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x2a, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x78, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x31, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70,
	0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x6a, 0x0a, 0x09, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x2d, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x6f, 0x6b, 0x56, 0x32, 0x12, 0x2f, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x56, 0x32, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x56, 0x32,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x2e, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x56, 0x32, 0x12, 0x30, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x73,
	0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x69, 0x6e, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f,
	0x6b, 0x73, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e, 0x0a, 0x0f,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x12,
	0x33, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74,
	0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x84, 0x01, 0x0a,
	0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b,
	0x56, 0x32, 0x12, 0x35, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73,
	0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b,
	0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x69, 0x6e, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x30, 0x01, 0x12, 0x90, 0x01, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x39, 0x2e,
	0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x61, 0x0a, 0x06, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x2a, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f,
	0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x69,
	0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x0c, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x30, 0x2e, 0x69, 0x6e, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x69, 0x6e,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x12, 0x61, 0x0a, 0x06, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x69, 0x6e, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x8b, 0x01, 0x0a, 0x14, 0x53,
	0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x38, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e,
	0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x14, 0x53, 0x75, 0x62,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x38, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70,
	0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x69, 0x6e,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x31, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x69, 0x6e, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a,
	0x01, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x37, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x38, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74,
	0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x20, 0x5a, 0x1e, 0x2f,
	0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_injective_spot_exchange_rpc_proto_rawDescOnce sync.Once
	file_injective_spot_exchange_rpc_proto_rawDescData = file_injective_spot_exchange_rpc_proto_rawDesc
)

func file_injective_spot_exchange_rpc_proto_rawDescGZIP() []byte {
	file_injective_spot_exchange_rpc_proto_rawDescOnce.Do(func() {
		file_injective_spot_exchange_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_injective_spot_exchange_rpc_proto_rawDescData)
	})
	return file_injective_spot_exchange_rpc_proto_rawDescData
}

var file_injective_spot_exchange_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 49)
var file_injective_spot_exchange_rpc_proto_goTypes = []interface{}{
	(*MarketsRequest)(nil),                // 0: injective_spot_exchange_rpc.MarketsRequest
	(*MarketsResponse)(nil),               // 1: injective_spot_exchange_rpc.MarketsResponse
	(*SpotMarketInfo)(nil),                // 2: injective_spot_exchange_rpc.SpotMarketInfo
	(*TokenMeta)(nil),                     // 3: injective_spot_exchange_rpc.TokenMeta
	(*MarketRequest)(nil),                 // 4: injective_spot_exchange_rpc.MarketRequest
	(*MarketResponse)(nil),                // 5: injective_spot_exchange_rpc.MarketResponse
	(*StreamMarketsRequest)(nil),          // 6: injective_spot_exchange_rpc.StreamMarketsRequest
	(*StreamMarketsResponse)(nil),         // 7: injective_spot_exchange_rpc.StreamMarketsResponse
	(*OrderbookRequest)(nil),              // 8: injective_spot_exchange_rpc.OrderbookRequest
	(*OrderbookResponse)(nil),             // 9: injective_spot_exchange_rpc.OrderbookResponse
	(*SpotLimitOrderbook)(nil),            // 10: injective_spot_exchange_rpc.SpotLimitOrderbook
	(*PriceLevel)(nil),                    // 11: injective_spot_exchange_rpc.PriceLevel
	(*OrderbookV2Request)(nil),            // 12: injective_spot_exchange_rpc.OrderbookV2Request
	(*OrderbookV2Response)(nil),           // 13: injective_spot_exchange_rpc.OrderbookV2Response
	(*SpotLimitOrderbookV2)(nil),          // 14: injective_spot_exchange_rpc.SpotLimitOrderbookV2
	(*OrderbooksRequest)(nil),             // 15: injective_spot_exchange_rpc.OrderbooksRequest
	(*OrderbooksResponse)(nil),            // 16: injective_spot_exchange_rpc.OrderbooksResponse
	(*SingleSpotLimitOrderbook)(nil),      // 17: injective_spot_exchange_rpc.SingleSpotLimitOrderbook
	(*OrderbooksV2Request)(nil),           // 18: injective_spot_exchange_rpc.OrderbooksV2Request
	(*OrderbooksV2Response)(nil),          // 19: injective_spot_exchange_rpc.OrderbooksV2Response
	(*SingleSpotLimitOrderbookV2)(nil),    // 20: injective_spot_exchange_rpc.SingleSpotLimitOrderbookV2
	(*StreamOrderbookRequest)(nil),        // 21: injective_spot_exchange_rpc.StreamOrderbookRequest
	(*StreamOrderbookResponse)(nil),       // 22: injective_spot_exchange_rpc.StreamOrderbookResponse
	(*StreamOrderbookV2Request)(nil),      // 23: injective_spot_exchange_rpc.StreamOrderbookV2Request
	(*StreamOrderbookV2Response)(nil),     // 24: injective_spot_exchange_rpc.StreamOrderbookV2Response
	(*StreamOrderbookUpdateRequest)(nil),  // 25: injective_spot_exchange_rpc.StreamOrderbookUpdateRequest
	(*StreamOrderbookUpdateResponse)(nil), // 26: injective_spot_exchange_rpc.StreamOrderbookUpdateResponse
	(*OrderbookLevelUpdates)(nil),         // 27: injective_spot_exchange_rpc.OrderbookLevelUpdates
	(*PriceLevelUpdate)(nil),              // 28: injective_spot_exchange_rpc.PriceLevelUpdate
	(*OrdersRequest)(nil),                 // 29: injective_spot_exchange_rpc.OrdersRequest
	(*OrdersResponse)(nil),                // 30: injective_spot_exchange_rpc.OrdersResponse
	(*SpotLimitOrder)(nil),                // 31: injective_spot_exchange_rpc.SpotLimitOrder
	(*Paging)(nil),                        // 32: injective_spot_exchange_rpc.Paging
	(*StreamOrdersRequest)(nil),           // 33: injective_spot_exchange_rpc.StreamOrdersRequest
	(*StreamOrdersResponse)(nil),          // 34: injective_spot_exchange_rpc.StreamOrdersResponse
	(*TradesRequest)(nil),                 // 35: injective_spot_exchange_rpc.TradesRequest
	(*TradesResponse)(nil),                // 36: injective_spot_exchange_rpc.TradesResponse
	(*SpotTrade)(nil),                     // 37: injective_spot_exchange_rpc.SpotTrade
	(*StreamTradesRequest)(nil),           // 38: injective_spot_exchange_rpc.StreamTradesRequest
	(*StreamTradesResponse)(nil),          // 39: injective_spot_exchange_rpc.StreamTradesResponse
	(*SubaccountOrdersListRequest)(nil),   // 40: injective_spot_exchange_rpc.SubaccountOrdersListRequest
	(*SubaccountOrdersListResponse)(nil),  // 41: injective_spot_exchange_rpc.SubaccountOrdersListResponse
	(*SubaccountTradesListRequest)(nil),   // 42: injective_spot_exchange_rpc.SubaccountTradesListRequest
	(*SubaccountTradesListResponse)(nil),  // 43: injective_spot_exchange_rpc.SubaccountTradesListResponse
	(*OrdersHistoryRequest)(nil),          // 44: injective_spot_exchange_rpc.OrdersHistoryRequest
	(*OrdersHistoryResponse)(nil),         // 45: injective_spot_exchange_rpc.OrdersHistoryResponse
	(*SpotOrderHistory)(nil),              // 46: injective_spot_exchange_rpc.SpotOrderHistory
	(*StreamOrdersHistoryRequest)(nil),    // 47: injective_spot_exchange_rpc.StreamOrdersHistoryRequest
	(*StreamOrdersHistoryResponse)(nil),   // 48: injective_spot_exchange_rpc.StreamOrdersHistoryResponse
}
var file_injective_spot_exchange_rpc_proto_depIdxs = []int32{
	2,  // 0: injective_spot_exchange_rpc.MarketsResponse.markets:type_name -> injective_spot_exchange_rpc.SpotMarketInfo
	3,  // 1: injective_spot_exchange_rpc.SpotMarketInfo.base_token_meta:type_name -> injective_spot_exchange_rpc.TokenMeta
	3,  // 2: injective_spot_exchange_rpc.SpotMarketInfo.quote_token_meta:type_name -> injective_spot_exchange_rpc.TokenMeta
	2,  // 3: injective_spot_exchange_rpc.MarketResponse.market:type_name -> injective_spot_exchange_rpc.SpotMarketInfo
	2,  // 4: injective_spot_exchange_rpc.StreamMarketsResponse.market:type_name -> injective_spot_exchange_rpc.SpotMarketInfo
	10, // 5: injective_spot_exchange_rpc.OrderbookResponse.orderbook:type_name -> injective_spot_exchange_rpc.SpotLimitOrderbook
	11, // 6: injective_spot_exchange_rpc.SpotLimitOrderbook.buys:type_name -> injective_spot_exchange_rpc.PriceLevel
	11, // 7: injective_spot_exchange_rpc.SpotLimitOrderbook.sells:type_name -> injective_spot_exchange_rpc.PriceLevel
	14, // 8: injective_spot_exchange_rpc.OrderbookV2Response.orderbook:type_name -> injective_spot_exchange_rpc.SpotLimitOrderbookV2
	11, // 9: injective_spot_exchange_rpc.SpotLimitOrderbookV2.buys:type_name -> injective_spot_exchange_rpc.PriceLevel
	11, // 10: injective_spot_exchange_rpc.SpotLimitOrderbookV2.sells:type_name -> injective_spot_exchange_rpc.PriceLevel
	17, // 11: injective_spot_exchange_rpc.OrderbooksResponse.orderbooks:type_name -> injective_spot_exchange_rpc.SingleSpotLimitOrderbook
	10, // 12: injective_spot_exchange_rpc.SingleSpotLimitOrderbook.orderbook:type_name -> injective_spot_exchange_rpc.SpotLimitOrderbook
	20, // 13: injective_spot_exchange_rpc.OrderbooksV2Response.orderbooks:type_name -> injective_spot_exchange_rpc.SingleSpotLimitOrderbookV2
	14, // 14: injective_spot_exchange_rpc.SingleSpotLimitOrderbookV2.orderbook:type_name -> injective_spot_exchange_rpc.SpotLimitOrderbookV2
	10, // 15: injective_spot_exchange_rpc.StreamOrderbookResponse.orderbook:type_name -> injective_spot_exchange_rpc.SpotLimitOrderbook
	14, // 16: injective_spot_exchange_rpc.StreamOrderbookV2Response.orderbook:type_name -> injective_spot_exchange_rpc.SpotLimitOrderbookV2
	27, // 17: injective_spot_exchange_rpc.StreamOrderbookUpdateResponse.orderbook_level_updates:type_name -> injective_spot_exchange_rpc.OrderbookLevelUpdates
	28, // 18: injective_spot_exchange_rpc.OrderbookLevelUpdates.buys:type_name -> injective_spot_exchange_rpc.PriceLevelUpdate
	28, // 19: injective_spot_exchange_rpc.OrderbookLevelUpdates.sells:type_name -> injective_spot_exchange_rpc.PriceLevelUpdate
	31, // 20: injective_spot_exchange_rpc.OrdersResponse.orders:type_name -> injective_spot_exchange_rpc.SpotLimitOrder
	32, // 21: injective_spot_exchange_rpc.OrdersResponse.paging:type_name -> injective_spot_exchange_rpc.Paging
	31, // 22: injective_spot_exchange_rpc.StreamOrdersResponse.order:type_name -> injective_spot_exchange_rpc.SpotLimitOrder
	37, // 23: injective_spot_exchange_rpc.TradesResponse.trades:type_name -> injective_spot_exchange_rpc.SpotTrade
	32, // 24: injective_spot_exchange_rpc.TradesResponse.paging:type_name -> injective_spot_exchange_rpc.Paging
	11, // 25: injective_spot_exchange_rpc.SpotTrade.price:type_name -> injective_spot_exchange_rpc.PriceLevel
	37, // 26: injective_spot_exchange_rpc.StreamTradesResponse.trade:type_name -> injective_spot_exchange_rpc.SpotTrade
	31, // 27: injective_spot_exchange_rpc.SubaccountOrdersListResponse.orders:type_name -> injective_spot_exchange_rpc.SpotLimitOrder
	32, // 28: injective_spot_exchange_rpc.SubaccountOrdersListResponse.paging:type_name -> injective_spot_exchange_rpc.Paging
	37, // 29: injective_spot_exchange_rpc.SubaccountTradesListResponse.trades:type_name -> injective_spot_exchange_rpc.SpotTrade
	46, // 30: injective_spot_exchange_rpc.OrdersHistoryResponse.orders:type_name -> injective_spot_exchange_rpc.SpotOrderHistory
	32, // 31: injective_spot_exchange_rpc.OrdersHistoryResponse.paging:type_name -> injective_spot_exchange_rpc.Paging
	46, // 32: injective_spot_exchange_rpc.StreamOrdersHistoryResponse.order:type_name -> injective_spot_exchange_rpc.SpotOrderHistory
	0,  // 33: injective_spot_exchange_rpc.InjectiveSpotExchangeRPC.Markets:input_type -> injective_spot_exchange_rpc.MarketsRequest
	4,  // 34: injective_spot_exchange_rpc.InjectiveSpotExchangeRPC.Market:input_type -> injective_spot_exchange_rpc.MarketRequest
	6,  // 35: injective_spot_exchange_rpc.InjectiveSpotExchangeRPC.StreamMarkets:input_type -> injective_spot_exchange_rpc.StreamMarketsRequest
	8,  // 36: injective_spot_exchange_rpc.InjectiveSpotExchangeRPC.Orderbook:input_type -> injective_spot_exchange_rpc.OrderbookRequest
	12, // 37: injective_spot_exchange_rpc.InjectiveSpotExchangeRPC.OrderbookV2:input_type -> injective_spot_exchange_rpc.OrderbookV2Request
	15, // 38: injective_spot_exchange_rpc.InjectiveSpotExchangeRPC.Orderbooks:input_type -> injective_spot_exchange_rpc.OrderbooksRequest
	18, // 39: injective_spot_exchange_rpc.InjectiveSpotExchangeRPC.OrderbooksV2:input_type -> injective_spot_exchange_rpc.OrderbooksV2Request
	21, // 40: injective_spot_exchange_rpc.InjectiveSpotExchangeRPC.StreamOrderbook:input_type -> injective_spot_exchange_rpc.StreamOrderbookRequest
	23, // 41: injective_spot_exchange_rpc.InjectiveSpotExchangeRPC.StreamOrderbookV2:input_type -> injective_spot_exchange_rpc.StreamOrderbookV2Request
	25, // 42: injective_spot_exchange_rpc.InjectiveSpotExchangeRPC.StreamOrderbookUpdate:input_type -> injective_spot_exchange_rpc.StreamOrderbookUpdateRequest
	29, // 43: injective_spot_exchange_rpc.InjectiveSpotExchangeRPC.Orders:input_type -> injective_spot_exchange_rpc.OrdersRequest
	33, // 44: injective_spot_exchange_rpc.InjectiveSpotExchangeRPC.StreamOrders:input_type -> injective_spot_exchange_rpc.StreamOrdersRequest
	35, // 45: injective_spot_exchange_rpc.InjectiveSpotExchangeRPC.Trades:input_type -> injective_spot_exchange_rpc.TradesRequest
	38, // 46: injective_spot_exchange_rpc.InjectiveSpotExchangeRPC.StreamTrades:input_type -> injective_spot_exchange_rpc.StreamTradesRequest
	40, // 47: injective_spot_exchange_rpc.InjectiveSpotExchangeRPC.SubaccountOrdersList:input_type -> injective_spot_exchange_rpc.SubaccountOrdersListRequest
	42, // 48: injective_spot_exchange_rpc.InjectiveSpotExchangeRPC.SubaccountTradesList:input_type -> injective_spot_exchange_rpc.SubaccountTradesListRequest
	44, // 49: injective_spot_exchange_rpc.InjectiveSpotExchangeRPC.OrdersHistory:input_type -> injective_spot_exchange_rpc.OrdersHistoryRequest
	47, // 50: injective_spot_exchange_rpc.InjectiveSpotExchangeRPC.StreamOrdersHistory:input_type -> injective_spot_exchange_rpc.StreamOrdersHistoryRequest
	1,  // 51: injective_spot_exchange_rpc.InjectiveSpotExchangeRPC.Markets:output_type -> injective_spot_exchange_rpc.MarketsResponse
	5,  // 52: injective_spot_exchange_rpc.InjectiveSpotExchangeRPC.Market:output_type -> injective_spot_exchange_rpc.MarketResponse
	7,  // 53: injective_spot_exchange_rpc.InjectiveSpotExchangeRPC.StreamMarkets:output_type -> injective_spot_exchange_rpc.StreamMarketsResponse
	9,  // 54: injective_spot_exchange_rpc.InjectiveSpotExchangeRPC.Orderbook:output_type -> injective_spot_exchange_rpc.OrderbookResponse
	13, // 55: injective_spot_exchange_rpc.InjectiveSpotExchangeRPC.OrderbookV2:output_type -> injective_spot_exchange_rpc.OrderbookV2Response
	16, // 56: injective_spot_exchange_rpc.InjectiveSpotExchangeRPC.Orderbooks:output_type -> injective_spot_exchange_rpc.OrderbooksResponse
	19, // 57: injective_spot_exchange_rpc.InjectiveSpotExchangeRPC.OrderbooksV2:output_type -> injective_spot_exchange_rpc.OrderbooksV2Response
	22, // 58: injective_spot_exchange_rpc.InjectiveSpotExchangeRPC.StreamOrderbook:output_type -> injective_spot_exchange_rpc.StreamOrderbookResponse
	24, // 59: injective_spot_exchange_rpc.InjectiveSpotExchangeRPC.StreamOrderbookV2:output_type -> injective_spot_exchange_rpc.StreamOrderbookV2Response
	26, // 60: injective_spot_exchange_rpc.InjectiveSpotExchangeRPC.StreamOrderbookUpdate:output_type -> injective_spot_exchange_rpc.StreamOrderbookUpdateResponse
	30, // 61: injective_spot_exchange_rpc.InjectiveSpotExchangeRPC.Orders:output_type -> injective_spot_exchange_rpc.OrdersResponse
	34, // 62: injective_spot_exchange_rpc.InjectiveSpotExchangeRPC.StreamOrders:output_type -> injective_spot_exchange_rpc.StreamOrdersResponse
	36, // 63: injective_spot_exchange_rpc.InjectiveSpotExchangeRPC.Trades:output_type -> injective_spot_exchange_rpc.TradesResponse
	39, // 64: injective_spot_exchange_rpc.InjectiveSpotExchangeRPC.StreamTrades:output_type -> injective_spot_exchange_rpc.StreamTradesResponse
	41, // 65: injective_spot_exchange_rpc.InjectiveSpotExchangeRPC.SubaccountOrdersList:output_type -> injective_spot_exchange_rpc.SubaccountOrdersListResponse
	43, // 66: injective_spot_exchange_rpc.InjectiveSpotExchangeRPC.SubaccountTradesList:output_type -> injective_spot_exchange_rpc.SubaccountTradesListResponse
	45, // 67: injective_spot_exchange_rpc.InjectiveSpotExchangeRPC.OrdersHistory:output_type -> injective_spot_exchange_rpc.OrdersHistoryResponse
	48, // 68: injective_spot_exchange_rpc.InjectiveSpotExchangeRPC.StreamOrdersHistory:output_type -> injective_spot_exchange_rpc.StreamOrdersHistoryResponse
	51, // [51:69] is the sub-list for method output_type
	33, // [33:51] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_injective_spot_exchange_rpc_proto_init() }
func file_injective_spot_exchange_rpc_proto_init() {
	if File_injective_spot_exchange_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_injective_spot_exchange_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotMarketInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamMarketsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamMarketsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderbookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderbookResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotLimitOrderbook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderbookV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderbookV2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotLimitOrderbookV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderbooksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderbooksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleSpotLimitOrderbook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderbooksV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderbooksV2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleSpotLimitOrderbookV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamOrderbookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamOrderbookResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamOrderbookV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamOrderbookV2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamOrderbookUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamOrderbookUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderbookLevelUpdates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceLevelUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrdersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotLimitOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Paging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamOrdersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotTrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamTradesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamTradesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubaccountOrdersListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubaccountOrdersListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubaccountTradesListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubaccountTradesListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrdersHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrdersHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotOrderHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamOrdersHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injective_spot_exchange_rpc_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamOrdersHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_injective_spot_exchange_rpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   49,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_injective_spot_exchange_rpc_proto_goTypes,
		DependencyIndexes: file_injective_spot_exchange_rpc_proto_depIdxs,
		MessageInfos:      file_injective_spot_exchange_rpc_proto_msgTypes,
	}.Build()
	File_injective_spot_exchange_rpc_proto = out.File
	file_injective_spot_exchange_rpc_proto_rawDesc = nil
	file_injective_spot_exchange_rpc_proto_goTypes = nil
	file_injective_spot_exchange_rpc_proto_depIdxs = nil
}
