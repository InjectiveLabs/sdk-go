// Code generated with goa v3.5.2, DO NOT EDIT.
//
// InjectiveExplorerRPC protocol buffer definition
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-exchange/api/design -o ../

syntax = "proto3";

package injective_explorer_rpc;

option go_package = "/injective_explorer_rpcpb";

// ExplorerRPC defines gRPC API of explorer data for e.g. Blockchain Explorer
service InjectiveExplorerRPC {
	// GetAccountTxs returns tranctions involving in an account based upon params.
	rpc GetAccountTxs (GetAccountTxsRequest) returns (GetAccountTxsResponse);
	// GetBlocks returns blocks based upon the request params
	rpc GetBlocks (GetBlocksRequest) returns (GetBlocksResponse);
	// GetBlock returns block based upon the height or hash
	rpc GetBlock (GetBlockRequest) returns (GetBlockResponse);
	// GetValidator returns validator information on the active chain
	rpc GetValidator (GetValidatorRequest) returns (GetValidatorResponse);
	// GetValidatorUptime returns validator uptime information on the active chain
	rpc GetValidatorUptime (GetValidatorUptimeRequest) returns (GetValidatorUptimeResponse);
	// GetCoinPriceData returns price data from CoinGecko API
	rpc GetCoinPriceData (GetCoinPriceDataRequest) returns (GetCoinPriceDataResponse);
	// GetTxs returns transactions based upon the request params
	rpc GetTxs (GetTxsRequest) returns (GetTxsResponse);
	// GetTxByTxHash returns certain transaction information by its tx hash.
	rpc GetTxByTxHash (GetTxByTxHashRequest) returns (GetTxByTxHashResponse);
	// StreamTxs returns transactions based upon the request params
	rpc StreamTxs (StreamTxsRequest) returns (stream StreamTxsResponse);
	// StreamBlocks returns the latest blocks
	rpc StreamBlocks (StreamBlocksRequest) returns (stream StreamBlocksResponse);
	// GetPeggyDepositTxs returns the peggy deposit transactions based upon the
// request params
	rpc GetPeggyDepositTxs (GetPeggyDepositTxsRequest) returns (GetPeggyDepositTxsResponse);
	// GetPeggyWithdrawalTxs returns the peggy withdrawal transactions based upon
// the request params
	rpc GetPeggyWithdrawalTxs (GetPeggyWithdrawalTxsRequest) returns (GetPeggyWithdrawalTxsResponse);
	// GetIBCTransferTxs returns the ibc transfer transactions based upon the
// request params
	rpc GetIBCTransferTxs (GetIBCTransferTxsRequest) returns (GetIBCTransferTxsResponse);
}

message GetAccountTxsRequest {
	string address = 1;
	uint64 before = 2;
	uint64 after = 3;
	sint32 limit = 4;
	uint64 skip = 5;
	string type = 6;
	string module = 7;
}

message GetAccountTxsResponse {
	Paging paging = 1;
	repeated TxData data = 2;
}
// Paging defines the structure for required params for handling pagination
message Paging {
	// total number of txs saved in database
	sint64 total = 1;
	// can be either block height or index num
	sint32 from = 2;
	// can be either block height or index num
	sint32 to = 3;
}
// TxData wraps tx data
message TxData {
	string id = 1;
	uint64 block_number = 2;
	string block_timestamp = 3;
	string hash = 4;
	uint32 code = 5;
	bytes data = 6;
	string info = 8;
	sint64 gas_wanted = 9;
	sint64 gas_used = 10;
	GasFee gas_fee = 11;
	string codespace = 12;
	repeated Event events = 13;
	string tx_type = 14;
	string messages = 15;
	repeated Signature signatures = 16;
	string memo = 17;
}

message GasFee {
	repeated CosmosCoin amount = 1;
	uint64 gas_limit = 2;
	string payer = 3;
	string granter = 4;
}

message CosmosCoin {
	// Coin denominator
	string denom = 1;
	// Coin amount (big int)
	string amount = 2;
}

message Event {
	string type = 1;
	map<string, string> attributes = 2;
}
// Signature wraps tx signature
message Signature {
	string pubkey = 1;
	string address = 2;
	uint64 sequence = 3;
	string signature = 4;
}

message GetBlocksRequest {
	uint64 before = 1;
	uint64 after = 2;
	sint32 limit = 3;
}

message GetBlocksResponse {
	Paging paging = 1;
	repeated BlockInfo data = 2;
}

message BlockInfo {
	uint64 height = 1;
	string proposer = 2;
	string moniker = 3;
	string block_hash = 4;
	string parent_hash = 5;
	sint64 num_pre_commits = 6;
	sint64 num_txs = 7;
	repeated TxData txs = 8;
	string timestamp = 9;
}

message GetBlockRequest {
	string id = 1;
}

message GetBlockResponse {
	uint64 height = 1;
	string proposer = 2;
	string moniker = 3;
	string block_hash = 4;
	string parent_hash = 5;
	sint64 num_pre_commits = 6;
	sint64 num_txs = 7;
	repeated TxData txs = 8;
	string timestamp = 9;
}

message GetValidatorRequest {
	string address = 1;
}

message GetValidatorResponse {
	string id = 1;
	string moniker = 2;
	string operator_address = 3;
	string consensus_address = 4;
	bool jailed = 5;
	sint32 status = 6;
	string tokens = 7;
	string delegator_shares = 8;
	ValidatorDescription description = 9;
	sint64 unbonding_height = 10;
	string unbonding_time = 11;
	string commission_rate = 12;
	string commission_max_rate = 13;
	string commission_max_change_rate = 14;
	string commission_update_time = 15;
	uint64 proposed = 16;
	uint64 signed = 17;
	uint64 missed = 18;
	string timestamp = 19;
	repeated ValidatorUptime uptimes = 20;
	repeated SlashingEvent slashing_events = 21;
}

message ValidatorDescription {
	string moniker = 1;
	string identity = 2;
	string website = 3;
	string security_contact = 4;
	string details = 5;
}

message ValidatorUptime {
	uint64 block_number = 1;
	string status = 2;
}

message SlashingEvent {
	uint64 block_number = 1;
	string block_timestamp = 2;
	string address = 3;
	uint64 power = 4;
	string reason = 5;
	string jailed = 6;
	uint64 missed_blocks = 7;
}

message GetValidatorUptimeRequest {
	string address = 1;
}

message GetValidatorUptimeResponse {
	repeated ValidatorUptime field = 1;
}

message GetCoinPriceDataRequest {
	string coin_ids = 1;
	string currency = 2;
}

message GetCoinPriceDataResponse {
	repeated CoinGeckoMarket field = 1;
}
// CoinGeckoMarket defines the structure for coin markets api
message CoinGeckoMarket {
	string id = 1;
	string symbol = 2;
	string name = 3;
	string image = 4;
	double current_price = 5;
	double market_cap = 6;
	sint32 market_cap_rank = 7;
	double total_volume = 8;
	double high24_h = 9;
	double low24_h = 10;
	double price_change24_h = 11;
	double price_change_percentage24_h = 12;
	double market_cap_change24_h = 13;
	double market_cap_change_percentage24_h = 14;
	double circulating_supply = 15;
	double total_supply = 16;
	double max_supply = 17;
	double ath = 18;
	double ath_change_percentage = 19;
	string ath_date = 20;
	double atl = 21;
	double atl_change_percentage = 22;
	string atl_date = 23;
	ROIItem roi = 24;
	string last_updated = 25;
}
// ROIItem ROI Item
message ROIItem {
	double times = 1;
	string currency = 2;
	double percentage = 3;
}

message GetTxsRequest {
	uint64 before = 1;
	uint64 after = 2;
	sint32 limit = 3;
	uint64 skip = 4;
	string type = 5;
	string module = 6;
}

message GetTxsResponse {
	Paging paging = 1;
	repeated TxData data = 2;
}

message GetTxByTxHashRequest {
	string hash = 1;
}

message GetTxByTxHashResponse {
	string id = 1;
	uint64 block_number = 2;
	string block_timestamp = 3;
	string hash = 4;
	uint32 code = 5;
	bytes data = 6;
	string info = 8;
	sint64 gas_wanted = 9;
	sint64 gas_used = 10;
	GasFee gas_fee = 11;
	string codespace = 12;
	repeated Event events = 13;
	string tx_type = 14;
	string messages = 15;
	repeated Signature signatures = 16;
	string memo = 17;
}

message StreamTxsRequest {
}

message StreamTxsResponse {
	string id = 1;
	uint64 block_number = 2;
	string block_timestamp = 3;
	string hash = 4;
	uint32 code = 5;
	bytes data = 6;
	string info = 8;
	sint64 gas_wanted = 9;
	sint64 gas_used = 10;
	GasFee gas_fee = 11;
	string codespace = 12;
	repeated Event events = 13;
	string tx_type = 14;
	string messages = 15;
	repeated Signature signatures = 16;
	string memo = 17;
}

message StreamBlocksRequest {
}

message StreamBlocksResponse {
	uint64 height = 1;
	string proposer = 2;
	string moniker = 3;
	string block_hash = 4;
	string parent_hash = 5;
	sint64 num_pre_commits = 6;
	sint64 num_txs = 7;
	repeated TxData txs = 8;
	string timestamp = 9;
}

message GetPeggyDepositTxsRequest {
	// Sender address of deposit request
	string sender = 1;
	// Address of receiveer upon deposit
	string receiver = 2;
	sint32 limit = 3;
	uint64 skip = 4;
}

message GetPeggyDepositTxsResponse {
	repeated PeggyDepositTx field = 1;
}
// PeggyDepositTx wraps tx data includes peggy deposit tx details information
message PeggyDepositTx {
	// Sender address of deposit request
	string sender = 1;
	// Address of receiveer upon deposit
	string receiver = 2;
	// The event nonce of WithdrawalClaim event emitted by Ethereum chain upon
// deposit
	uint64 event_nonce = 3;
	// The block height of WithdrawalClaim event emitted by Ethereum chain upon
// deposit
	uint64 event_height = 4;
	// Amount of tokens being deposited
	string amount = 5;
	// Denom of tokens being deposited
	string denom = 6;
	// orchestratorAddress who created batch request
	string orchestrator_address = 7;
	string state = 8;
	// The claimType will be DepoistClaim for Deposits
	sint32 claim_type = 9;
	repeated string tx_hashes = 10;
	string created_at = 11;
	string updated_at = 12;
}

message GetPeggyWithdrawalTxsRequest {
	// Sender address of withdrawal request
	string sender = 1;
	// Address of receiveer upon withdrawal
	string receiver = 2;
	sint32 limit = 3;
	uint64 skip = 4;
}

message GetPeggyWithdrawalTxsResponse {
	repeated PeggyWithdrawalTx field = 1;
}
// PeggyWithdrawalTx wraps tx data includes peggy withdrawal tx details
// information
message PeggyWithdrawalTx {
	// Sender address of withdrawal request
	string sender = 1;
	// Address of receiveer upon withdrawal
	string receiver = 2;
	// Amount of tokens being withdrawan
	string amount = 3;
	// Denom of tokens being withdrawan
	string denom = 4;
	// The bridge fee paid by sender for withdrawal
	string bridge_fee = 5;
	// A auto incremented unique ID representing the withdrawal request
	uint64 outgoing_tx_id = 6;
	// The timestamp after which Batch request will be discarded if not processed
// already
	uint64 batch_timeout = 7;
	// A auto incremented unique ID representing the Withdrawal Batches
	uint64 batch_nonce = 8;
	// orchestratorAddress who created batch request
	string orchestrator_address = 9;
	// The event nonce of WithdrawalClaim event emitted by Ethereum chain upon
// batch withdrawal
	uint64 event_nonce = 10;
	// The block height of WithdrawalClaim event emitted by Ethereum chain upon
// batch withdrawal
	uint64 event_height = 11;
	string state = 12;
	// The claimType will be WithdrawalClaim for Batch Withdrawals
	sint32 claim_type = 13;
	repeated string tx_hashes = 14;
	string created_at = 15;
	string updated_at = 16;
}

message GetIBCTransferTxsRequest {
	string sender = 1;
	string receiver = 2;
	string src_channel = 3;
	string src_port = 4;
	string dest_channel = 5;
	string dest_port = 6;
	sint32 limit = 7;
	uint64 skip = 8;
}

message GetIBCTransferTxsResponse {
	repeated IBCTransferTx field = 1;
}
// IBCTransferTx wraps tx data includes ibc transfer tx details information
message IBCTransferTx {
	// the sender address
	string sender = 1;
	// the recipient address on the destination chain
	string receiver = 2;
	// the port on which the packet will be sent
	string source_port = 3;
	// the channel by which the packet will be sent
	string source_channel = 4;
	// identifies the port on the receiving chain
	string destination_port = 5;
	// identifies the channel end on the receiving chain
	string destination_channel = 6;
	// transfer amount
	string amount = 7;
	// transafer denom
	string denom = 8;
	// Timeout height relative to the current block height. The timeout is disabled
// when set to 0
	string timeout_height = 9;
	// Timeout timestamp (in nanoseconds) relative to the current block timestamp
	uint64 timeout_timestamp = 10;
	// number corresponds to the order of sends and receives, where a Packet with
// an earlier sequence number must be sent and received before a Packet with a
// later sequence number
	uint64 packet_sequence = 11;
	bytes data_hex = 12;
	string state = 13;
	// it's injective chain tx hash array
	repeated string tx_hashes = 14;
	string created_at = 15;
	string updated_at = 16;
}
