// Code generated with goa v3.7.0, DO NOT EDIT.
//
// InjectiveOracleRPC protocol buffer definition
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-indexer/api/design -o ../

syntax = "proto3";

package injective_oracle_rpc;

option go_package = "/injective_oracle_rpcpb";

// InjectiveOracleRPC defines gRPC API of Exchange Oracle provider.
service InjectiveOracleRPC {
	// List all oracles
	rpc OracleList (OracleListRequest) returns (OracleListResponse);
	// Gets the price of the oracle
	rpc Price (PriceRequest) returns (PriceResponse);
	// StreamPrices streams new price changes for a specified oracle. If no oracles
// are provided, all price changes are streamed.
	rpc StreamPrices (StreamPricesRequest) returns (stream StreamPricesResponse);
	// StreamPrices streams new price changes markets
	rpc StreamPricesByMarkets (StreamPricesByMarketsRequest) returns (stream StreamPricesByMarketsResponse);
}

message OracleListRequest {
}

message OracleListResponse {
	repeated Oracle oracles = 1;
}

message Oracle {
	// The symbol of the oracle asset.
	string symbol = 1;
	// Oracle base currency
	string base_symbol = 2;
	// Oracle quote currency
	string quote_symbol = 3;
	// Oracle Type
	string oracle_type = 4;
	// The price of the oracle asset
	string price = 5;
}

message PriceRequest {
	// Oracle base currency
	string base_symbol = 1;
	// Oracle quote currency
	string quote_symbol = 2;
	// Oracle Type
	string oracle_type = 3;
	// OracleScaleFactor
	uint32 oracle_scale_factor = 4;
}

message PriceResponse {
	// The price of the oracle asset
	string price = 1;
}

message StreamPricesRequest {
	// Oracle base currency
	string base_symbol = 1;
	// Oracle quote currency
	string quote_symbol = 2;
	// Oracle Type
	string oracle_type = 3;
}

message StreamPricesResponse {
	// The price of the oracle asset
	string price = 1;
	// Operation timestamp in UNIX millis.
	sint64 timestamp = 2;
}

message StreamPricesByMarketsRequest {
	// marketIDs to stream price for, empty to listen for all prices
	repeated string market_ids = 1;
}

message StreamPricesByMarketsResponse {
	// The price of the oracle asset
	string price = 1;
	// Operation timestamp in UNIX millis.
	sint64 timestamp = 2;
	// marketID that the price has been updated
	string market_id = 3;
}
