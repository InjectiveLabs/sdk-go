// Code generated with goa v3.7.0, DO NOT EDIT.
//
// InjectiveAccountsRPC protocol buffer definition
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-indexer/api/design -o ../

syntax = "proto3";

package injective_accounts_rpc;

option go_package = "/injective_accounts_rpcpb";

// InjectiveAccountsRPC defines API of Exchange Accounts provider.
service InjectiveAccountsRPC {
	// Provide the account's portfolio value in USD.
	rpc Portfolio (PortfolioRequest) returns (PortfolioResponse);
	// List order states by order hashes
	rpc OrderStates (OrderStatesRequest) returns (OrderStatesResponse);
	// List all subaccounts IDs of an account address
	rpc SubaccountsList (SubaccountsListRequest) returns (SubaccountsListResponse);
	// List subaccount balances for the provided denoms.
	rpc SubaccountBalancesList (SubaccountBalancesListRequest) returns (SubaccountBalancesListResponse);
	// Gets a balance for specific coin denom
	rpc SubaccountBalanceEndpoint (SubaccountBalanceEndpointRequest) returns (SubaccountBalanceEndpointResponse);
	// StreamSubaccountBalance streams new balance changes for a specified
// subaccount and denoms. If no denoms are provided, all denom changes are
// streamed.
	rpc StreamSubaccountBalance (StreamSubaccountBalanceRequest) returns (stream StreamSubaccountBalanceResponse);
	// Get subaccount's deposits and withdrawals history
	rpc SubaccountHistory (SubaccountHistoryRequest) returns (SubaccountHistoryResponse);
	// Get subaccount's orders summary
	rpc SubaccountOrderSummary (SubaccountOrderSummaryRequest) returns (SubaccountOrderSummaryResponse);
	// Provide historical trading rewards
	rpc Rewards (RewardsRequest) returns (RewardsResponse);
	// Stream live data for an account and respective data
	rpc StreamAccountData (StreamAccountDataRequest) returns (stream StreamAccountDataResponse);
}

message PortfolioRequest {
	// Account address
	string account_address = 1;
}

message PortfolioResponse {
	// The portfolio of this account
	AccountPortfolio portfolio = 1;
}

message AccountPortfolio {
	// The account's portfolio value in USD.
	string portfolio_value = 1;
	// The account's available balance value in USD.
	string available_balance = 2;
	// The account's locked balance value in USD.
	string locked_balance = 3;
	// The account's total unrealized PnL value in USD.
	string unrealized_pnl = 4;
	// List of all subaccounts' portfolio
	repeated SubaccountPortfolio subaccounts = 5;
}

message SubaccountPortfolio {
	// The ID of this subaccount
	string subaccount_id = 1;
	// The subaccount's available balance value in USD.
	string available_balance = 2;
	// The subaccount's locked balance value in USD.
	string locked_balance = 3;
	// The subaccount's total unrealized PnL value in USD.
	string unrealized_pnl = 4;
}

message OrderStatesRequest {
	repeated string spot_order_hashes = 1;
	repeated string derivative_order_hashes = 2;
}

message OrderStatesResponse {
	// List of the spot order state records
	repeated OrderStateRecord spot_order_states = 1;
	// List of the derivative order state records
	repeated OrderStateRecord derivative_order_states = 2;
}

message OrderStateRecord {
	// Hash of the order
	string order_hash = 1;
	// The subaccountId that this order belongs to
	string subaccount_id = 2;
	// The Market ID of the order
	string market_id = 3;
	// The type of the order
	string order_type = 4;
	// The side of the order
	string order_side = 5;
	// The state (status) of the order
	string state = 6;
	// The filled quantity of the order
	string quantity_filled = 7;
	// The filled quantity of the order
	string quantity_remaining = 8;
	// Order committed timestamp in UNIX millis.
	sint64 created_at = 9;
	// Order updated timestamp in UNIX millis.
	sint64 updated_at = 10;
	// Order prices
	string price = 11;
	// Margin for derivative order
	string margin = 12;
}

message SubaccountsListRequest {
	// Account address, the subaccounts owner
	string account_address = 1;
}

message SubaccountsListResponse {
	repeated string subaccounts = 1;
}

message SubaccountBalancesListRequest {
	// SubaccountId of the trader we want to get the trades from
	string subaccount_id = 1;
	// Filter balances by denoms. If not set, the balances of all the denoms for
// the subaccount are provided.
	repeated string denoms = 2;
}

message SubaccountBalancesListResponse {
	// List of subaccount balances
	repeated SubaccountBalance balances = 1;
}

message SubaccountBalance {
	// Related subaccount ID
	string subaccount_id = 1;
	// Account address, owner of this subaccount
	string account_address = 2;
	// Coin denom on the chain.
	string denom = 3;
	SubaccountDeposit deposit = 4;
}

message SubaccountDeposit {
	string total_balance = 1;
	string available_balance = 2;
}

message SubaccountBalanceEndpointRequest {
	// SubaccountId of the trader we want to get the trades from
	string subaccount_id = 1;
	// Specify denom to get balance
	string denom = 2;
}

message SubaccountBalanceEndpointResponse {
	// Subaccount balance
	SubaccountBalance balance = 1;
}

message StreamSubaccountBalanceRequest {
	// SubaccountId of the trader we want to get the trades from
	string subaccount_id = 1;
	// Filter balances by denoms. If not set, the balances of all the denoms for
// the subaccount are provided.
	repeated string denoms = 2;
}

message StreamSubaccountBalanceResponse {
	// Subaccount balance
	SubaccountBalance balance = 1;
	// Operation timestamp in UNIX millis.
	sint64 timestamp = 2;
}

message SubaccountHistoryRequest {
	// SubaccountId of the trader we want to get the history from
	string subaccount_id = 1;
	// Filter history by denom
	string denom = 2;
	// Filter history by transfer type
	repeated string transfer_types = 3;
	// Skip will skip the first n item from the result
	uint64 skip = 4;
	// Limit is used to specify the maximum number of items to be returned
	sint32 limit = 5;
	// Upper bound of account transfer history's executedAt
	sint64 end_time = 6;
}

message SubaccountHistoryResponse {
	// List of subaccount transfers
	repeated SubaccountBalanceTransfer transfers = 1;
	Paging paging = 2;
}

message SubaccountBalanceTransfer {
	// Type of the subaccount balance transfer
	string transfer_type = 1;
	// Subaccount ID of the sending side
	string src_subaccount_id = 2;
	// Account address of the sending side
	string src_account_address = 3;
	// Subaccount ID of the receiving side
	string dst_subaccount_id = 4;
	// Account address of the receiving side
	string dst_account_address = 5;
	// Coin amount of the transfer
	CosmosCoin amount = 6;
	// Timestamp of the transfer in UNIX millis
	sint64 executed_at = 7;
}

message CosmosCoin {
	// Coin denominator
	string denom = 1;
	// Coin amount (big int)
	string amount = 2;
}
// Paging defines the structure for required params for handling pagination
message Paging {
	// total number of txs saved in database
	sint64 total = 1;
	// can be either block height or index num
	sint32 from = 2;
	// can be either block height or index num
	sint32 to = 3;
	// count entries by subaccount, serving some places on helix
	sint64 count_by_subaccount = 4;
	// array of tokens to navigate to the next pages
	repeated string next = 5;
}

message SubaccountOrderSummaryRequest {
	// SubaccountId of the trader we want to get the summary from
	string subaccount_id = 1;
	// MarketId is limiting order summary to specific market only
	string market_id = 2;
	// Filter by direction of the orders
	string order_direction = 3;
}

message SubaccountOrderSummaryResponse {
	// Total count of subaccount's spot orders in given market and direction
	sint64 spot_orders_total = 1;
	// Total count of subaccount's derivative orders in given market and direction
	sint64 derivative_orders_total = 2;
}

message RewardsRequest {
	// The distribution epoch sequence number. -1 for latest.
	sint64 epoch = 1;
	// Account address for the rewards distribution
	string account_address = 2;
}

message RewardsResponse {
	// The trading rewards distributed
	repeated Reward rewards = 1;
}

message Reward {
	// Account address
	string account_address = 1;
	// Reward coins distributed
	repeated Coin rewards = 2;
	// Rewards distribution timestamp in UNIX millis.
	sint64 distributed_at = 3;
}

message Coin {
	// Denom of the coin
	string denom = 1;
	string amount = 2;
}

message StreamAccountDataRequest {
	// account address
	string account_address = 1;
}

message StreamAccountDataResponse {
	SubaccountBalanceResult subaccount_balance = 1;
	PositionsResult position = 2;
	TradeResult trade = 3;
	OrderResult order = 4;
	OrderHistoryResult order_history = 5;
	FundingPaymentResult funding_payment = 6;
}

message SubaccountBalanceResult {
	// Subaccount balance
	SubaccountBalance balance = 1;
	// Operation timestamp in UNIX millis.
	sint64 timestamp = 2;
}

message PositionsResult {
	// Updated derivative Position
	Position position = 1;
	// Operation timestamp in UNIX millis.
	sint64 timestamp = 2;
}

message Position {
	// Ticker of the derivative market
	string ticker = 1;
	// Derivative Market ID
	string market_id = 2;
	// The subaccountId that the position belongs to
	string subaccount_id = 3;
	// Direction of the position
	string direction = 4;
	// Quantity of the position
	string quantity = 5;
	// Price of the position
	string entry_price = 6;
	// Margin of the position
	string margin = 7;
	// LiquidationPrice of the position
	string liquidation_price = 8;
	// MarkPrice of the position
	string mark_price = 9;
	// Position updated timestamp in UNIX millis.
	sint64 updated_at = 10;
	// Position created timestamp in UNIX millis.
	sint64 created_at = 11;
}

message TradeResult {
	oneof trade {
		// New spot market trade
	SpotTrade spot_trade = 1;
		// New derivative market trade
	DerivativeTrade derivative_trade = 2;
	}
	// Executed trades update type
	string operation_type = 3;
	// Operation timestamp in UNIX millis.
	sint64 timestamp = 4;
}

message SpotTrade {
	// Maker order hash.
	string order_hash = 1;
	// The subaccountId that executed the trade
	string subaccount_id = 2;
	// The ID of the market that this trade is in
	string market_id = 3;
	// The execution type of the trade
	string trade_execution_type = 4;
	// The direction the trade
	string trade_direction = 5;
	// Price level at which trade has been executed
	PriceLevel price = 6;
	// The fee associated with the trade (quote asset denom)
	string fee = 7;
	// Timestamp of trade execution in UNIX millis
	sint64 executed_at = 8;
	// Fee recipient address
	string fee_recipient = 9;
	// A unique string that helps differentiate between trades
	string trade_id = 10;
	// Trade's execution side, marker/taker
	string execution_side = 11;
	// Custom client order ID
	string cid = 12;
}

message PriceLevel {
	// Price number of the price level.
	string price = 1;
	// Quantity of the price level.
	string quantity = 2;
	// Price level last updated timestamp in UNIX millis.
	sint64 timestamp = 3;
}

message DerivativeTrade {
	// Order hash.
	string order_hash = 1;
	// The subaccountId that executed the trade
	string subaccount_id = 2;
	// The ID of the market that this trade is in
	string market_id = 3;
	// The execution type of the trade
	string trade_execution_type = 4;
	// True if the trade is a liquidation
	bool is_liquidation = 5;
	// Position Delta from the trade
	PositionDelta position_delta = 6;
	// The payout associated with the trade
	string payout = 7;
	// The fee associated with the trade
	string fee = 8;
	// Timestamp of trade execution in UNIX millis
	sint64 executed_at = 9;
	// Fee recipient address
	string fee_recipient = 10;
	// A unique string that helps differentiate between trades
	string trade_id = 11;
	// Trade's execution side, marker/taker
	string execution_side = 12;
	// Custom client order ID
	string cid = 13;
}

message PositionDelta {
	// The direction the trade
	string trade_direction = 1;
	// Execution Price of the trade.
	string execution_price = 2;
	// Execution Quantity of the trade.
	string execution_quantity = 3;
	// Execution Margin of the trade.
	string execution_margin = 4;
}

message OrderResult {
	oneof order {
		// Updated spot market order
	SpotLimitOrder spot_order = 1;
		// Updated derivative market order
	DerivativeLimitOrder derivative_order = 2;
	}
	// Executed orders update type
	string operation_type = 3;
	// Operation timestamp in UNIX millis.
	sint64 timestamp = 4;
}

message SpotLimitOrder {
	// Hash of the order
	string order_hash = 1;
	// The side of the order
	string order_side = 2;
	// Spot Market ID is keccak265(baseDenom + quoteDenom)
	string market_id = 3;
	// The subaccountId that this order belongs to
	string subaccount_id = 4;
	// Price of the order
	string price = 5;
	// Quantity of the order
	string quantity = 6;
	// The amount of the quantity remaining unfilled
	string unfilled_quantity = 7;
	// Trigger price is the trigger price used by stop/take orders. 0 if the
// trigger price is not set.
	string trigger_price = 8;
	// Fee recipient address
	string fee_recipient = 9;
	// Order state
	string state = 10;
	// Order committed timestamp in UNIX millis.
	sint64 created_at = 11;
	// Order updated timestamp in UNIX millis.
	sint64 updated_at = 12;
	// Transaction Hash where order is created. Not all orders have this field
	string tx_hash = 13;
	// Custom client order ID
	string cid = 14;
}

message DerivativeLimitOrder {
	// Hash of the order
	string order_hash = 1;
	// The side of the order
	string order_side = 2;
	// Derivative Market ID
	string market_id = 3;
	// The subaccountId that this order belongs to
	string subaccount_id = 4;
	// True if the order is a reduce-only order
	bool is_reduce_only = 5;
	// Margin of the order
	string margin = 6;
	// Price of the order
	string price = 7;
	// Quantity of the order
	string quantity = 8;
	// The amount of the quantity remaining unfilled
	string unfilled_quantity = 9;
	// Trigger price is the trigger price used by stop/take orders
	string trigger_price = 10;
	// Fee recipient address
	string fee_recipient = 11;
	// Order state
	string state = 12;
	// Order committed timestamp in UNIX millis.
	sint64 created_at = 13;
	// Order updated timestamp in UNIX millis.
	sint64 updated_at = 14;
	// Order number of subaccount
	sint64 order_number = 15;
	// Order type
	string order_type = 16;
	// Order type
	bool is_conditional = 17;
	// Trigger timestamp, only exists for conditional orders
	uint64 trigger_at = 18;
	// OrderHash of order that is triggered by this conditional order
	string placed_order_hash = 19;
	// Execution type of conditional order
	string execution_type = 20;
	// Transaction Hash where order is created. Not all orders have this field
	string tx_hash = 21;
	// Custom client order ID
	string cid = 22;
}

message OrderHistoryResult {
	oneof order_history {
		// Spot order history
	SpotOrderHistory spot_order_history = 1;
		// Derivative order history
	DerivativeOrderHistory derivative_order_history = 2;
	}
	// Order update type
	string operation_type = 3;
	// Operation timestamp in UNIX millis.
	sint64 timestamp = 4;
}

message SpotOrderHistory {
	// Hash of the order
	string order_hash = 1;
	// Spot Market ID is keccak265(baseDenom + quoteDenom)
	string market_id = 2;
	// active state of the order
	bool is_active = 3;
	// The subaccountId that this order belongs to
	string subaccount_id = 4;
	// The execution type
	string execution_type = 5;
	// The side of the order
	string order_type = 6;
	// Price of the order
	string price = 7;
	// Trigger price
	string trigger_price = 8;
	// Quantity of the order
	string quantity = 9;
	// Filled amount
	string filled_quantity = 10;
	// Order state
	string state = 11;
	// Order committed timestamp in UNIX millis.
	sint64 created_at = 12;
	// Order updated timestamp in UNIX millis.
	sint64 updated_at = 13;
	// Order direction (order side)
	string direction = 14;
	// Transaction Hash where order is created. Not all orders have this field
	string tx_hash = 15;
	// Custom client order ID
	string cid = 16;
}

message DerivativeOrderHistory {
	// Hash of the order
	string order_hash = 1;
	// Spot Market ID is keccak265(baseDenom + quoteDenom)
	string market_id = 2;
	// active state of the order
	bool is_active = 3;
	// The subaccountId that this order belongs to
	string subaccount_id = 4;
	// The execution type
	string execution_type = 5;
	// The side of the order
	string order_type = 6;
	// Price of the order
	string price = 7;
	// Trigger price
	string trigger_price = 8;
	// Quantity of the order
	string quantity = 9;
	// Filled amount
	string filled_quantity = 10;
	// Order state
	string state = 11;
	// Order committed timestamp in UNIX millis.
	sint64 created_at = 12;
	// Order updated timestamp in UNIX millis.
	sint64 updated_at = 13;
	// True if an order is reduce only
	bool is_reduce_only = 14;
	// Order direction (order side)
	string direction = 15;
	// True if this is conditional order, otherwise false
	bool is_conditional = 16;
	// Trigger timestamp in unix milli
	uint64 trigger_at = 17;
	// Order hash placed when this triggers
	string placed_order_hash = 18;
	// Order's margin
	string margin = 19;
	// Transaction Hash where order is created. Not all orders have this field
	string tx_hash = 20;
	// Custom client order ID
	string cid = 21;
}

message FundingPaymentResult {
	// Funding payments of the account
	FundingPayment funding_payments = 1;
	// Funding payments type
	string operation_type = 2;
	// Operation timestamp in UNIX millis.
	sint64 timestamp = 4;
}

message FundingPayment {
	// Derivative Market ID
	string market_id = 1;
	// The subaccountId that the position belongs to
	string subaccount_id = 2;
	// Amount of the funding payment
	string amount = 3;
	// Timestamp of funding payment in UNIX millis
	sint64 timestamp = 4;
}
