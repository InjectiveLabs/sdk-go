// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: goadesign_goagen_injective_campaign_rpc.proto

package injective_campaign_rpcpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InjectiveCampaignRPCClient is the client API for InjectiveCampaignRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InjectiveCampaignRPCClient interface {
	// Lists all participants in campaign
	Ranking(ctx context.Context, in *RankingRequest, opts ...grpc.CallOption) (*RankingResponse, error)
	// List current round active campaigns
	Campaigns(ctx context.Context, in *CampaignsRequest, opts ...grpc.CallOption) (*CampaignsResponse, error)
	// List guilds by campaign
	ListGuilds(ctx context.Context, in *ListGuildsRequest, opts ...grpc.CallOption) (*ListGuildsResponse, error)
	// List guild members of given campaign and guildId
	ListGuildMembers(ctx context.Context, in *ListGuildMembersRequest, opts ...grpc.CallOption) (*ListGuildMembersResponse, error)
	// Get single member guild info
	GetGuildMember(ctx context.Context, in *GetGuildMemberRequest, opts ...grpc.CallOption) (*GetGuildMemberResponse, error)
}

type injectiveCampaignRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewInjectiveCampaignRPCClient(cc grpc.ClientConnInterface) InjectiveCampaignRPCClient {
	return &injectiveCampaignRPCClient{cc}
}

func (c *injectiveCampaignRPCClient) Ranking(ctx context.Context, in *RankingRequest, opts ...grpc.CallOption) (*RankingResponse, error) {
	out := new(RankingResponse)
	err := c.cc.Invoke(ctx, "/injective_campaign_rpc.InjectiveCampaignRPC/Ranking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *injectiveCampaignRPCClient) Campaigns(ctx context.Context, in *CampaignsRequest, opts ...grpc.CallOption) (*CampaignsResponse, error) {
	out := new(CampaignsResponse)
	err := c.cc.Invoke(ctx, "/injective_campaign_rpc.InjectiveCampaignRPC/Campaigns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *injectiveCampaignRPCClient) ListGuilds(ctx context.Context, in *ListGuildsRequest, opts ...grpc.CallOption) (*ListGuildsResponse, error) {
	out := new(ListGuildsResponse)
	err := c.cc.Invoke(ctx, "/injective_campaign_rpc.InjectiveCampaignRPC/ListGuilds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *injectiveCampaignRPCClient) ListGuildMembers(ctx context.Context, in *ListGuildMembersRequest, opts ...grpc.CallOption) (*ListGuildMembersResponse, error) {
	out := new(ListGuildMembersResponse)
	err := c.cc.Invoke(ctx, "/injective_campaign_rpc.InjectiveCampaignRPC/ListGuildMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *injectiveCampaignRPCClient) GetGuildMember(ctx context.Context, in *GetGuildMemberRequest, opts ...grpc.CallOption) (*GetGuildMemberResponse, error) {
	out := new(GetGuildMemberResponse)
	err := c.cc.Invoke(ctx, "/injective_campaign_rpc.InjectiveCampaignRPC/GetGuildMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InjectiveCampaignRPCServer is the server API for InjectiveCampaignRPC service.
// All implementations must embed UnimplementedInjectiveCampaignRPCServer
// for forward compatibility
type InjectiveCampaignRPCServer interface {
	// Lists all participants in campaign
	Ranking(context.Context, *RankingRequest) (*RankingResponse, error)
	// List current round active campaigns
	Campaigns(context.Context, *CampaignsRequest) (*CampaignsResponse, error)
	// List guilds by campaign
	ListGuilds(context.Context, *ListGuildsRequest) (*ListGuildsResponse, error)
	// List guild members of given campaign and guildId
	ListGuildMembers(context.Context, *ListGuildMembersRequest) (*ListGuildMembersResponse, error)
	// Get single member guild info
	GetGuildMember(context.Context, *GetGuildMemberRequest) (*GetGuildMemberResponse, error)
	mustEmbedUnimplementedInjectiveCampaignRPCServer()
}

// UnimplementedInjectiveCampaignRPCServer must be embedded to have forward compatible implementations.
type UnimplementedInjectiveCampaignRPCServer struct {
}

func (UnimplementedInjectiveCampaignRPCServer) Ranking(context.Context, *RankingRequest) (*RankingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ranking not implemented")
}
func (UnimplementedInjectiveCampaignRPCServer) Campaigns(context.Context, *CampaignsRequest) (*CampaignsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Campaigns not implemented")
}
func (UnimplementedInjectiveCampaignRPCServer) ListGuilds(context.Context, *ListGuildsRequest) (*ListGuildsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGuilds not implemented")
}
func (UnimplementedInjectiveCampaignRPCServer) ListGuildMembers(context.Context, *ListGuildMembersRequest) (*ListGuildMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGuildMembers not implemented")
}
func (UnimplementedInjectiveCampaignRPCServer) GetGuildMember(context.Context, *GetGuildMemberRequest) (*GetGuildMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuildMember not implemented")
}
func (UnimplementedInjectiveCampaignRPCServer) mustEmbedUnimplementedInjectiveCampaignRPCServer() {}

// UnsafeInjectiveCampaignRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InjectiveCampaignRPCServer will
// result in compilation errors.
type UnsafeInjectiveCampaignRPCServer interface {
	mustEmbedUnimplementedInjectiveCampaignRPCServer()
}

func RegisterInjectiveCampaignRPCServer(s grpc.ServiceRegistrar, srv InjectiveCampaignRPCServer) {
	s.RegisterService(&InjectiveCampaignRPC_ServiceDesc, srv)
}

func _InjectiveCampaignRPC_Ranking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RankingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InjectiveCampaignRPCServer).Ranking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective_campaign_rpc.InjectiveCampaignRPC/Ranking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InjectiveCampaignRPCServer).Ranking(ctx, req.(*RankingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InjectiveCampaignRPC_Campaigns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CampaignsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InjectiveCampaignRPCServer).Campaigns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective_campaign_rpc.InjectiveCampaignRPC/Campaigns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InjectiveCampaignRPCServer).Campaigns(ctx, req.(*CampaignsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InjectiveCampaignRPC_ListGuilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGuildsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InjectiveCampaignRPCServer).ListGuilds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective_campaign_rpc.InjectiveCampaignRPC/ListGuilds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InjectiveCampaignRPCServer).ListGuilds(ctx, req.(*ListGuildsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InjectiveCampaignRPC_ListGuildMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGuildMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InjectiveCampaignRPCServer).ListGuildMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective_campaign_rpc.InjectiveCampaignRPC/ListGuildMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InjectiveCampaignRPCServer).ListGuildMembers(ctx, req.(*ListGuildMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InjectiveCampaignRPC_GetGuildMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGuildMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InjectiveCampaignRPCServer).GetGuildMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective_campaign_rpc.InjectiveCampaignRPC/GetGuildMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InjectiveCampaignRPCServer).GetGuildMember(ctx, req.(*GetGuildMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InjectiveCampaignRPC_ServiceDesc is the grpc.ServiceDesc for InjectiveCampaignRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InjectiveCampaignRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "injective_campaign_rpc.InjectiveCampaignRPC",
	HandlerType: (*InjectiveCampaignRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ranking",
			Handler:    _InjectiveCampaignRPC_Ranking_Handler,
		},
		{
			MethodName: "Campaigns",
			Handler:    _InjectiveCampaignRPC_Campaigns_Handler,
		},
		{
			MethodName: "ListGuilds",
			Handler:    _InjectiveCampaignRPC_ListGuilds_Handler,
		},
		{
			MethodName: "ListGuildMembers",
			Handler:    _InjectiveCampaignRPC_ListGuildMembers_Handler,
		},
		{
			MethodName: "GetGuildMember",
			Handler:    _InjectiveCampaignRPC_GetGuildMember_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goadesign_goagen_injective_campaign_rpc.proto",
}
