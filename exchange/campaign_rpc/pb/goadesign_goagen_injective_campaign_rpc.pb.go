// Code generated with goa v3.7.0, DO NOT EDIT.
//
// InjectiveCampaignRPC protocol buffer definition
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-indexer/api/design -o ../

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.19.4
// source: goadesign_goagen_injective_campaign_rpc.proto

package injective_campaign_rpcpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RankingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Campaign ID
	CampaignId string `protobuf:"bytes,1,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	// MarketId of the campaign
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Account address
	AccountAddress string `protobuf:"bytes,3,opt,name=account_address,json=accountAddress,proto3" json:"account_address,omitempty"`
	Limit          int32  `protobuf:"zigzag32,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Skip           uint64 `protobuf:"varint,5,opt,name=skip,proto3" json:"skip,omitempty"`
	// Contract address that manages the round and reward
	ContractAddress string `protobuf:"bytes,6,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (x *RankingRequest) Reset() {
	*x = RankingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankingRequest) ProtoMessage() {}

func (x *RankingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankingRequest.ProtoReflect.Descriptor instead.
func (*RankingRequest) Descriptor() ([]byte, []int) {
	return file_goadesign_goagen_injective_campaign_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *RankingRequest) GetCampaignId() string {
	if x != nil {
		return x.CampaignId
	}
	return ""
}

func (x *RankingRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *RankingRequest) GetAccountAddress() string {
	if x != nil {
		return x.AccountAddress
	}
	return ""
}

func (x *RankingRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *RankingRequest) GetSkip() uint64 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *RankingRequest) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

type RankingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The campaign information
	Campaign *Campaign `protobuf:"bytes,1,opt,name=campaign,proto3" json:"campaign,omitempty"`
	// The campaign users
	Users  []*CampaignUser `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
	Paging *Paging         `protobuf:"bytes,3,opt,name=paging,proto3" json:"paging,omitempty"`
}

func (x *RankingResponse) Reset() {
	*x = RankingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankingResponse) ProtoMessage() {}

func (x *RankingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankingResponse.ProtoReflect.Descriptor instead.
func (*RankingResponse) Descriptor() ([]byte, []int) {
	return file_goadesign_goagen_injective_campaign_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *RankingResponse) GetCampaign() *Campaign {
	if x != nil {
		return x.Campaign
	}
	return nil
}

func (x *RankingResponse) GetUsers() []*CampaignUser {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *RankingResponse) GetPaging() *Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type Campaign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CampaignId string `protobuf:"bytes,1,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	// MarketId of the trading strategy
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Total campaign score
	TotalScore string `protobuf:"bytes,4,opt,name=total_score,json=totalScore,proto3" json:"total_score,omitempty"`
	// Last time the campaign score has been updated.
	LastUpdated int64 `protobuf:"zigzag64,5,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	// Campaign start date in UNIX millis.
	StartDate int64 `protobuf:"zigzag64,6,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// Campaign end date in UNIX millis.
	EndDate int64 `protobuf:"zigzag64,7,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// Whether the campaign rewards can be claimed.
	IsClaimable bool `protobuf:"varint,8,opt,name=is_claimable,json=isClaimable,proto3" json:"is_claimable,omitempty"`
	// Campaigns round ID
	RoundId int32 `protobuf:"zigzag32,9,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	// Contract address that controls this campaign
	ManagerContract string `protobuf:"bytes,10,opt,name=manager_contract,json=managerContract,proto3" json:"manager_contract,omitempty"`
	// Reward tokens of this campaign
	Rewards []*Coin `protobuf:"bytes,11,rep,name=rewards,proto3" json:"rewards,omitempty"`
	// Total user score if accountAddress is passed, this is useful to estimate
	// account's reward
	UserScore string `protobuf:"bytes,12,opt,name=user_score,json=userScore,proto3" json:"user_score,omitempty"`
	// Return true if user claimed the reward of this campaign
	UserClaimed bool `protobuf:"varint,13,opt,name=user_claimed,json=userClaimed,proto3" json:"user_claimed,omitempty"`
	// Suffix of the subaccount that eligible for volume score
	SubaccountIdSuffix string `protobuf:"bytes,14,opt,name=subaccount_id_suffix,json=subaccountIdSuffix,proto3" json:"subaccount_id_suffix,omitempty"`
	// Contract that manage users reward
	RewardContract string `protobuf:"bytes,15,opt,name=reward_contract,json=rewardContract,proto3" json:"reward_contract,omitempty"`
	// Version of reward contract, UI use this to determine the message that need
	// to be sent
	Version string `protobuf:"bytes,16,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Campaign) Reset() {
	*x = Campaign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Campaign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Campaign) ProtoMessage() {}

func (x *Campaign) ProtoReflect() protoreflect.Message {
	mi := &file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Campaign.ProtoReflect.Descriptor instead.
func (*Campaign) Descriptor() ([]byte, []int) {
	return file_goadesign_goagen_injective_campaign_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *Campaign) GetCampaignId() string {
	if x != nil {
		return x.CampaignId
	}
	return ""
}

func (x *Campaign) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *Campaign) GetTotalScore() string {
	if x != nil {
		return x.TotalScore
	}
	return ""
}

func (x *Campaign) GetLastUpdated() int64 {
	if x != nil {
		return x.LastUpdated
	}
	return 0
}

func (x *Campaign) GetStartDate() int64 {
	if x != nil {
		return x.StartDate
	}
	return 0
}

func (x *Campaign) GetEndDate() int64 {
	if x != nil {
		return x.EndDate
	}
	return 0
}

func (x *Campaign) GetIsClaimable() bool {
	if x != nil {
		return x.IsClaimable
	}
	return false
}

func (x *Campaign) GetRoundId() int32 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *Campaign) GetManagerContract() string {
	if x != nil {
		return x.ManagerContract
	}
	return ""
}

func (x *Campaign) GetRewards() []*Coin {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *Campaign) GetUserScore() string {
	if x != nil {
		return x.UserScore
	}
	return ""
}

func (x *Campaign) GetUserClaimed() bool {
	if x != nil {
		return x.UserClaimed
	}
	return false
}

func (x *Campaign) GetSubaccountIdSuffix() string {
	if x != nil {
		return x.SubaccountIdSuffix
	}
	return ""
}

func (x *Campaign) GetRewardContract() string {
	if x != nil {
		return x.RewardContract
	}
	return ""
}

func (x *Campaign) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Coin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Denom of the coin
	Denom  string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *Coin) Reset() {
	*x = Coin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coin) ProtoMessage() {}

func (x *Coin) ProtoReflect() protoreflect.Message {
	mi := &file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coin.ProtoReflect.Descriptor instead.
func (*Coin) Descriptor() ([]byte, []int) {
	return file_goadesign_goagen_injective_campaign_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *Coin) GetDenom() string {
	if x != nil {
		return x.Denom
	}
	return ""
}

func (x *Coin) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type CampaignUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CampaignId string `protobuf:"bytes,1,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	// MarketId of the trading strategy
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Account address
	AccountAddress string `protobuf:"bytes,3,opt,name=account_address,json=accountAddress,proto3" json:"account_address,omitempty"`
	// Campaign score
	Score string `protobuf:"bytes,4,opt,name=score,proto3" json:"score,omitempty"`
	// Whether the distribution contract has been updated with the latest score
	ContractUpdated bool `protobuf:"varint,5,opt,name=contract_updated,json=contractUpdated,proto3" json:"contract_updated,omitempty"`
	// Block height when the score has been updated.
	BlockHeight int64 `protobuf:"zigzag64,6,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// Block time timestamp in UNIX millis.
	BlockTime int64 `protobuf:"zigzag64,7,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
	// Amount swapped but only count base denom of the market
	PurchasedAmount string `protobuf:"bytes,8,opt,name=purchased_amount,json=purchasedAmount,proto3" json:"purchased_amount,omitempty"`
	// True if this user is updated to be in Galxe Campain list, only eligible
	// address are added
	GalxeUpdated bool `protobuf:"varint,9,opt,name=galxe_updated,json=galxeUpdated,proto3" json:"galxe_updated,omitempty"`
	// True if this user claimed the reward
	RewardClaimed bool `protobuf:"varint,10,opt,name=reward_claimed,json=rewardClaimed,proto3" json:"reward_claimed,omitempty"`
}

func (x *CampaignUser) Reset() {
	*x = CampaignUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CampaignUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CampaignUser) ProtoMessage() {}

func (x *CampaignUser) ProtoReflect() protoreflect.Message {
	mi := &file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CampaignUser.ProtoReflect.Descriptor instead.
func (*CampaignUser) Descriptor() ([]byte, []int) {
	return file_goadesign_goagen_injective_campaign_rpc_proto_rawDescGZIP(), []int{4}
}

func (x *CampaignUser) GetCampaignId() string {
	if x != nil {
		return x.CampaignId
	}
	return ""
}

func (x *CampaignUser) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *CampaignUser) GetAccountAddress() string {
	if x != nil {
		return x.AccountAddress
	}
	return ""
}

func (x *CampaignUser) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

func (x *CampaignUser) GetContractUpdated() bool {
	if x != nil {
		return x.ContractUpdated
	}
	return false
}

func (x *CampaignUser) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *CampaignUser) GetBlockTime() int64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

func (x *CampaignUser) GetPurchasedAmount() string {
	if x != nil {
		return x.PurchasedAmount
	}
	return ""
}

func (x *CampaignUser) GetGalxeUpdated() bool {
	if x != nil {
		return x.GalxeUpdated
	}
	return false
}

func (x *CampaignUser) GetRewardClaimed() bool {
	if x != nil {
		return x.RewardClaimed
	}
	return false
}

// Paging defines the structure for required params for handling pagination
type Paging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// total number of txs saved in database
	Total int64 `protobuf:"zigzag64,1,opt,name=total,proto3" json:"total,omitempty"`
	// can be either block height or index num
	From int32 `protobuf:"zigzag32,2,opt,name=from,proto3" json:"from,omitempty"`
	// can be either block height or index num
	To int32 `protobuf:"zigzag32,3,opt,name=to,proto3" json:"to,omitempty"`
	// count entries by subaccount, serving some places on helix
	CountBySubaccount int64 `protobuf:"zigzag64,4,opt,name=count_by_subaccount,json=countBySubaccount,proto3" json:"count_by_subaccount,omitempty"`
	// array of tokens to navigate to the next pages
	Next []string `protobuf:"bytes,5,rep,name=next,proto3" json:"next,omitempty"`
}

func (x *Paging) Reset() {
	*x = Paging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Paging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Paging) ProtoMessage() {}

func (x *Paging) ProtoReflect() protoreflect.Message {
	mi := &file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Paging.ProtoReflect.Descriptor instead.
func (*Paging) Descriptor() ([]byte, []int) {
	return file_goadesign_goagen_injective_campaign_rpc_proto_rawDescGZIP(), []int{5}
}

func (x *Paging) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Paging) GetFrom() int32 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *Paging) GetTo() int32 {
	if x != nil {
		return x.To
	}
	return 0
}

func (x *Paging) GetCountBySubaccount() int64 {
	if x != nil {
		return x.CountBySubaccount
	}
	return 0
}

func (x *Paging) GetNext() []string {
	if x != nil {
		return x.Next
	}
	return nil
}

type CampaignsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Round ID, if not specified, it will return latest roundId
	RoundId int64 `protobuf:"zigzag64,1,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	// Address of login account, if not specified it will return no user rewards
	AccountAddress string `protobuf:"bytes,2,opt,name=account_address,json=accountAddress,proto3" json:"account_address,omitempty"`
	// This will return campaign x where x.roundId <= toRoundId. Useful for listing
	// multiple rounds
	ToRoundId int32 `protobuf:"zigzag32,3,opt,name=to_round_id,json=toRoundId,proto3" json:"to_round_id,omitempty"`
	// Contract address that manages the round and reward
	ContractAddress string `protobuf:"bytes,4,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (x *CampaignsRequest) Reset() {
	*x = CampaignsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CampaignsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CampaignsRequest) ProtoMessage() {}

func (x *CampaignsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CampaignsRequest.ProtoReflect.Descriptor instead.
func (*CampaignsRequest) Descriptor() ([]byte, []int) {
	return file_goadesign_goagen_injective_campaign_rpc_proto_rawDescGZIP(), []int{6}
}

func (x *CampaignsRequest) GetRoundId() int64 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *CampaignsRequest) GetAccountAddress() string {
	if x != nil {
		return x.AccountAddress
	}
	return ""
}

func (x *CampaignsRequest) GetToRoundId() int32 {
	if x != nil {
		return x.ToRoundId
	}
	return 0
}

func (x *CampaignsRequest) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

type CampaignsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Campaigns          []*Campaign `protobuf:"bytes,1,rep,name=campaigns,proto3" json:"campaigns,omitempty"`
	AccumulatedRewards []*Coin     `protobuf:"bytes,2,rep,name=accumulated_rewards,json=accumulatedRewards,proto3" json:"accumulated_rewards,omitempty"`
	RewardCount        int32       `protobuf:"zigzag32,3,opt,name=reward_count,json=rewardCount,proto3" json:"reward_count,omitempty"`
}

func (x *CampaignsResponse) Reset() {
	*x = CampaignsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CampaignsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CampaignsResponse) ProtoMessage() {}

func (x *CampaignsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CampaignsResponse.ProtoReflect.Descriptor instead.
func (*CampaignsResponse) Descriptor() ([]byte, []int) {
	return file_goadesign_goagen_injective_campaign_rpc_proto_rawDescGZIP(), []int{7}
}

func (x *CampaignsResponse) GetCampaigns() []*Campaign {
	if x != nil {
		return x.Campaigns
	}
	return nil
}

func (x *CampaignsResponse) GetAccumulatedRewards() []*Coin {
	if x != nil {
		return x.AccumulatedRewards
	}
	return nil
}

func (x *CampaignsResponse) GetRewardCount() int32 {
	if x != nil {
		return x.RewardCount
	}
	return 0
}

type ListGuildsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Campaign contract address
	CampaignContract string `protobuf:"bytes,1,opt,name=campaign_contract,json=campaignContract,proto3" json:"campaign_contract,omitempty"`
	// Limit number of returned guilds
	Limit int32 `protobuf:"zigzag32,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Skip some first guilds in the list for next page
	Skip int32 `protobuf:"zigzag32,3,opt,name=skip,proto3" json:"skip,omitempty"`
	// Sort by some metrics
	SortBy string `protobuf:"bytes,4,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
}

func (x *ListGuildsRequest) Reset() {
	*x = ListGuildsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGuildsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGuildsRequest) ProtoMessage() {}

func (x *ListGuildsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGuildsRequest.ProtoReflect.Descriptor instead.
func (*ListGuildsRequest) Descriptor() ([]byte, []int) {
	return file_goadesign_goagen_injective_campaign_rpc_proto_rawDescGZIP(), []int{8}
}

func (x *ListGuildsRequest) GetCampaignContract() string {
	if x != nil {
		return x.CampaignContract
	}
	return ""
}

func (x *ListGuildsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListGuildsRequest) GetSkip() int32 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *ListGuildsRequest) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

type ListGuildsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guilds []*Guild `protobuf:"bytes,1,rep,name=guilds,proto3" json:"guilds,omitempty"`
	Paging *Paging  `protobuf:"bytes,2,opt,name=paging,proto3" json:"paging,omitempty"`
	// Snapshot updated at time in UNIX milli
	UpdatedAt int64 `protobuf:"zigzag64,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Summary of the campaign
	CampaignSummary *CampaignSummary `protobuf:"bytes,4,opt,name=campaign_summary,json=campaignSummary,proto3" json:"campaign_summary,omitempty"`
}

func (x *ListGuildsResponse) Reset() {
	*x = ListGuildsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGuildsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGuildsResponse) ProtoMessage() {}

func (x *ListGuildsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGuildsResponse.ProtoReflect.Descriptor instead.
func (*ListGuildsResponse) Descriptor() ([]byte, []int) {
	return file_goadesign_goagen_injective_campaign_rpc_proto_rawDescGZIP(), []int{9}
}

func (x *ListGuildsResponse) GetGuilds() []*Guild {
	if x != nil {
		return x.Guilds
	}
	return nil
}

func (x *ListGuildsResponse) GetPaging() *Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

func (x *ListGuildsResponse) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *ListGuildsResponse) GetCampaignSummary() *CampaignSummary {
	if x != nil {
		return x.CampaignSummary
	}
	return nil
}

type Guild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CampaignContract string `protobuf:"bytes,1,opt,name=campaign_contract,json=campaignContract,proto3" json:"campaign_contract,omitempty"`
	// Guild ID
	GuildId string `protobuf:"bytes,2,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	// Guild's master address
	MasterAddress string `protobuf:"bytes,3,opt,name=master_address,json=masterAddress,proto3" json:"master_address,omitempty"`
	// Guild creation date (in UNIX milliseconds)
	CreatedAt int64 `protobuf:"zigzag64,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Average TVL score
	TvlScore string `protobuf:"bytes,5,opt,name=tvl_score,json=tvlScore,proto3" json:"tvl_score,omitempty"`
	// Total volume score
	VolumeScore string `protobuf:"bytes,6,opt,name=volume_score,json=volumeScore,proto3" json:"volume_score,omitempty"`
	// guild's rank by volume
	RankByVolume int32 `protobuf:"zigzag32,7,opt,name=rank_by_volume,json=rankByVolume,proto3" json:"rank_by_volume,omitempty"`
	// guild's rank by TVL
	RankByTvl int32 `protobuf:"zigzag32,8,opt,name=rank_by_tvl,json=rankByTvl,proto3" json:"rank_by_tvl,omitempty"`
	// guild's logo, at the moment it supports numberic string (i.e '1', '2' and so
	// on) not a random URL because of front end limitation
	Logo string `protobuf:"bytes,9,opt,name=logo,proto3" json:"logo,omitempty"`
	// guild's total TVL
	TotalTvl string `protobuf:"bytes,10,opt,name=total_tvl,json=totalTvl,proto3" json:"total_tvl,omitempty"`
	// Snapshot updated at time in UNIX milli
	UpdatedAt int64 `protobuf:"zigzag64,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Guild name
	Name string `protobuf:"bytes,14,opt,name=name,proto3" json:"name,omitempty"`
	// Active status of guild, true when master total tvl meets the minimum
	// requirements
	IsActive bool `protobuf:"varint,13,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// Master balance (in current campaigns denom)
	MasterBalance string `protobuf:"bytes,15,opt,name=master_balance,json=masterBalance,proto3" json:"master_balance,omitempty"`
	// Guild description, set by master of the guild
	Description string `protobuf:"bytes,16,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Guild) Reset() {
	*x = Guild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Guild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Guild) ProtoMessage() {}

func (x *Guild) ProtoReflect() protoreflect.Message {
	mi := &file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Guild.ProtoReflect.Descriptor instead.
func (*Guild) Descriptor() ([]byte, []int) {
	return file_goadesign_goagen_injective_campaign_rpc_proto_rawDescGZIP(), []int{10}
}

func (x *Guild) GetCampaignContract() string {
	if x != nil {
		return x.CampaignContract
	}
	return ""
}

func (x *Guild) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *Guild) GetMasterAddress() string {
	if x != nil {
		return x.MasterAddress
	}
	return ""
}

func (x *Guild) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Guild) GetTvlScore() string {
	if x != nil {
		return x.TvlScore
	}
	return ""
}

func (x *Guild) GetVolumeScore() string {
	if x != nil {
		return x.VolumeScore
	}
	return ""
}

func (x *Guild) GetRankByVolume() int32 {
	if x != nil {
		return x.RankByVolume
	}
	return 0
}

func (x *Guild) GetRankByTvl() int32 {
	if x != nil {
		return x.RankByTvl
	}
	return 0
}

func (x *Guild) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *Guild) GetTotalTvl() string {
	if x != nil {
		return x.TotalTvl
	}
	return ""
}

func (x *Guild) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Guild) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Guild) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *Guild) GetMasterBalance() string {
	if x != nil {
		return x.MasterBalance
	}
	return ""
}

func (x *Guild) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type CampaignSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Campaign id
	CampaignId string `protobuf:"bytes,1,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	// Guild manager contract address
	CampaignContract string `protobuf:"bytes,2,opt,name=campaign_contract,json=campaignContract,proto3" json:"campaign_contract,omitempty"`
	// Number of guild in the campaign
	TotalGuildsCount int32 `protobuf:"zigzag32,3,opt,name=total_guilds_count,json=totalGuildsCount,proto3" json:"total_guilds_count,omitempty"`
	// Total TVL
	TotalTvl string `protobuf:"bytes,4,opt,name=total_tvl,json=totalTvl,proto3" json:"total_tvl,omitempty"`
	// Sum average TVL of all guilds
	TotalAverageTvl string `protobuf:"bytes,5,opt,name=total_average_tvl,json=totalAverageTvl,proto3" json:"total_average_tvl,omitempty"`
	// Total volume across all guilds (in market quote denom, often USDT)
	TotalVolume string `protobuf:"bytes,6,opt,name=total_volume,json=totalVolume,proto3" json:"total_volume,omitempty"`
	// Snapshot updated at time in UNIX milli
	UpdatedAt int64 `protobuf:"zigzag64,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Total member joined the campaign (include guild masters)
	TotalMembersCount int32 `protobuf:"zigzag32,8,opt,name=total_members_count,json=totalMembersCount,proto3" json:"total_members_count,omitempty"`
	// Campaign start time
	StartTime int64 `protobuf:"zigzag64,9,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Campaign end time
	EndTime int64 `protobuf:"zigzag64,10,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *CampaignSummary) Reset() {
	*x = CampaignSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CampaignSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CampaignSummary) ProtoMessage() {}

func (x *CampaignSummary) ProtoReflect() protoreflect.Message {
	mi := &file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CampaignSummary.ProtoReflect.Descriptor instead.
func (*CampaignSummary) Descriptor() ([]byte, []int) {
	return file_goadesign_goagen_injective_campaign_rpc_proto_rawDescGZIP(), []int{11}
}

func (x *CampaignSummary) GetCampaignId() string {
	if x != nil {
		return x.CampaignId
	}
	return ""
}

func (x *CampaignSummary) GetCampaignContract() string {
	if x != nil {
		return x.CampaignContract
	}
	return ""
}

func (x *CampaignSummary) GetTotalGuildsCount() int32 {
	if x != nil {
		return x.TotalGuildsCount
	}
	return 0
}

func (x *CampaignSummary) GetTotalTvl() string {
	if x != nil {
		return x.TotalTvl
	}
	return ""
}

func (x *CampaignSummary) GetTotalAverageTvl() string {
	if x != nil {
		return x.TotalAverageTvl
	}
	return ""
}

func (x *CampaignSummary) GetTotalVolume() string {
	if x != nil {
		return x.TotalVolume
	}
	return ""
}

func (x *CampaignSummary) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *CampaignSummary) GetTotalMembersCount() int32 {
	if x != nil {
		return x.TotalMembersCount
	}
	return 0
}

func (x *CampaignSummary) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *CampaignSummary) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type ListGuildMembersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Campaign contract address
	CampaignContract string `protobuf:"bytes,1,opt,name=campaign_contract,json=campaignContract,proto3" json:"campaign_contract,omitempty"`
	// ID of guild, inside campaign
	GuildId string `protobuf:"bytes,2,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	// Limit number of returned guild members
	Limit int32 `protobuf:"zigzag32,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// Skip some first guild members in the list for next page
	Skip int32 `protobuf:"zigzag32,4,opt,name=skip,proto3" json:"skip,omitempty"`
	// whether to include guild summary info, it's better to use this in terms of
	// latency, instead of sending 2 requests we just need once
	IncludeGuildInfo bool `protobuf:"varint,5,opt,name=include_guild_info,json=includeGuildInfo,proto3" json:"include_guild_info,omitempty"`
	// Sort by some metrics
	SortBy string `protobuf:"bytes,6,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
}

func (x *ListGuildMembersRequest) Reset() {
	*x = ListGuildMembersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGuildMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGuildMembersRequest) ProtoMessage() {}

func (x *ListGuildMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGuildMembersRequest.ProtoReflect.Descriptor instead.
func (*ListGuildMembersRequest) Descriptor() ([]byte, []int) {
	return file_goadesign_goagen_injective_campaign_rpc_proto_rawDescGZIP(), []int{12}
}

func (x *ListGuildMembersRequest) GetCampaignContract() string {
	if x != nil {
		return x.CampaignContract
	}
	return ""
}

func (x *ListGuildMembersRequest) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *ListGuildMembersRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListGuildMembersRequest) GetSkip() int32 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *ListGuildMembersRequest) GetIncludeGuildInfo() bool {
	if x != nil {
		return x.IncludeGuildInfo
	}
	return false
}

func (x *ListGuildMembersRequest) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

type ListGuildMembersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Members   []*GuildMember `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty"`
	Paging    *Paging        `protobuf:"bytes,2,opt,name=paging,proto3" json:"paging,omitempty"`
	GuildInfo *Guild         `protobuf:"bytes,3,opt,name=guild_info,json=guildInfo,proto3" json:"guild_info,omitempty"`
}

func (x *ListGuildMembersResponse) Reset() {
	*x = ListGuildMembersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGuildMembersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGuildMembersResponse) ProtoMessage() {}

func (x *ListGuildMembersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGuildMembersResponse.ProtoReflect.Descriptor instead.
func (*ListGuildMembersResponse) Descriptor() ([]byte, []int) {
	return file_goadesign_goagen_injective_campaign_rpc_proto_rawDescGZIP(), []int{13}
}

func (x *ListGuildMembersResponse) GetMembers() []*GuildMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *ListGuildMembersResponse) GetPaging() *Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

func (x *ListGuildMembersResponse) GetGuildInfo() *Guild {
	if x != nil {
		return x.GuildInfo
	}
	return nil
}

type GuildMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Guild manager contract address
	CampaignContract string `protobuf:"bytes,1,opt,name=campaign_contract,json=campaignContract,proto3" json:"campaign_contract,omitempty"`
	// Guild ID
	GuildId string `protobuf:"bytes,2,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	// Guild member address
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// Guild enrollment date (in UNIX milliseconds)
	JoinedAt int64 `protobuf:"zigzag64,4,opt,name=joined_at,json=joinedAt,proto3" json:"joined_at,omitempty"`
	// Average TVL score
	TvlScore string `protobuf:"bytes,5,opt,name=tvl_score,json=tvlScore,proto3" json:"tvl_score,omitempty"`
	// Total volume score
	VolumeScore string `protobuf:"bytes,6,opt,name=volume_score,json=volumeScore,proto3" json:"volume_score,omitempty"`
	// Total volume score
	TotalTvl string `protobuf:"bytes,7,opt,name=total_tvl,json=totalTvl,proto3" json:"total_tvl,omitempty"`
	// Volume percentage out of guilds total volume
	VolumeScorePercentage float64 `protobuf:"fixed64,8,opt,name=volume_score_percentage,json=volumeScorePercentage,proto3" json:"volume_score_percentage,omitempty"`
	// TVL percentage out of guilds total TVL score
	TvlScorePercentage float64 `protobuf:"fixed64,9,opt,name=tvl_score_percentage,json=tvlScorePercentage,proto3" json:"tvl_score_percentage,omitempty"`
	// Rewards for volume campaign (amount+denom)
	TvlReward []*Coin `protobuf:"bytes,10,rep,name=tvl_reward,json=tvlReward,proto3" json:"tvl_reward,omitempty"`
	// Rewards for TVL campaign (amount+denom)
	VolumeReward []*Coin `protobuf:"bytes,11,rep,name=volume_reward,json=volumeReward,proto3" json:"volume_reward,omitempty"`
}

func (x *GuildMember) Reset() {
	*x = GuildMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildMember) ProtoMessage() {}

func (x *GuildMember) ProtoReflect() protoreflect.Message {
	mi := &file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildMember.ProtoReflect.Descriptor instead.
func (*GuildMember) Descriptor() ([]byte, []int) {
	return file_goadesign_goagen_injective_campaign_rpc_proto_rawDescGZIP(), []int{14}
}

func (x *GuildMember) GetCampaignContract() string {
	if x != nil {
		return x.CampaignContract
	}
	return ""
}

func (x *GuildMember) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *GuildMember) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GuildMember) GetJoinedAt() int64 {
	if x != nil {
		return x.JoinedAt
	}
	return 0
}

func (x *GuildMember) GetTvlScore() string {
	if x != nil {
		return x.TvlScore
	}
	return ""
}

func (x *GuildMember) GetVolumeScore() string {
	if x != nil {
		return x.VolumeScore
	}
	return ""
}

func (x *GuildMember) GetTotalTvl() string {
	if x != nil {
		return x.TotalTvl
	}
	return ""
}

func (x *GuildMember) GetVolumeScorePercentage() float64 {
	if x != nil {
		return x.VolumeScorePercentage
	}
	return 0
}

func (x *GuildMember) GetTvlScorePercentage() float64 {
	if x != nil {
		return x.TvlScorePercentage
	}
	return 0
}

func (x *GuildMember) GetTvlReward() []*Coin {
	if x != nil {
		return x.TvlReward
	}
	return nil
}

func (x *GuildMember) GetVolumeReward() []*Coin {
	if x != nil {
		return x.VolumeReward
	}
	return nil
}

type GetGuildMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Campaign contract address
	CampaignContract string `protobuf:"bytes,1,opt,name=campaign_contract,json=campaignContract,proto3" json:"campaign_contract,omitempty"`
	// User address
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *GetGuildMemberRequest) Reset() {
	*x = GetGuildMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGuildMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGuildMemberRequest) ProtoMessage() {}

func (x *GetGuildMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGuildMemberRequest.ProtoReflect.Descriptor instead.
func (*GetGuildMemberRequest) Descriptor() ([]byte, []int) {
	return file_goadesign_goagen_injective_campaign_rpc_proto_rawDescGZIP(), []int{15}
}

func (x *GetGuildMemberRequest) GetCampaignContract() string {
	if x != nil {
		return x.CampaignContract
	}
	return ""
}

func (x *GetGuildMemberRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type GetGuildMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GuildMember `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *GetGuildMemberResponse) Reset() {
	*x = GetGuildMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGuildMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGuildMemberResponse) ProtoMessage() {}

func (x *GetGuildMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGuildMemberResponse.ProtoReflect.Descriptor instead.
func (*GetGuildMemberResponse) Descriptor() ([]byte, []int) {
	return file_goadesign_goagen_injective_campaign_rpc_proto_rawDescGZIP(), []int{16}
}

func (x *GetGuildMemberResponse) GetInfo() *GuildMember {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_goadesign_goagen_injective_campaign_rpc_proto protoreflect.FileDescriptor

var file_goadesign_goagen_injective_campaign_rpc_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x67, 0x6f, 0x61, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x67, 0x6f, 0x61, 0x67,
	0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x16, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x5f, 0x72, 0x70, 0x63, 0x22, 0xcc, 0x01, 0x0a, 0x0e, 0x52, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xc3, 0x01, 0x0a, 0x0f, 0x52, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x63, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69,
	0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x08,
	0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x3a, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x22, 0x9e, 0x04, 0x0a,
	0x08, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0b,
	0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x12, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x11, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x36,
	0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x07, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x75, 0x62, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x34, 0x0a,
	0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xef, 0x02, 0x0a, 0x0c, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x12, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x61, 0x6c,
	0x78, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x67, 0x61, 0x6c, 0x78, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x65, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x06, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x12, 0x52, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79,
	0x53, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65,
	0x78, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x22, 0xa1,
	0x01, 0x0a, 0x10, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x6f, 0x5f, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x74, 0x6f,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x11, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x63, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6e,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x09, 0x63,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x75,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x12, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0b, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2b, 0x0a, 0x11, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f,
	0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79,
	0x22, 0xf6, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x06, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x12, 0x36,
	0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x06,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x12, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x52, 0x0a, 0x10, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0xe5, 0x03, 0x0a, 0x05, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x12, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x76, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x76, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x79, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0c, 0x72, 0x61, 0x6e, 0x6b, 0x42,
	0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x6b, 0x5f,
	0x62, 0x79, 0x5f, 0x74, 0x76, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x61,
	0x6e, 0x6b, 0x42, 0x79, 0x54, 0x76, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x76, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x76, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x12, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x82, 0x03, 0x0a, 0x0f, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x76, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x76, 0x6c, 0x12, 0x2a,
	0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x76, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x76, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x12, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2e, 0x0a, 0x13,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x11, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x12, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd2, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x04,
	0x73, 0x6b, 0x69, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x22, 0xcf, 0x01, 0x0a, 0x18,
	0x4c, 0x69, 0x73, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12,
	0x3c, 0x0a, 0x0a, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xd3, 0x03,
	0x0a, 0x0b, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2b, 0x0a,
	0x11, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x76, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x76, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x76, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x76, 0x6c, 0x12, 0x36, 0x0a, 0x17, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x76, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x12, 0x74, 0x76, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x74, 0x76, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x09, 0x74, 0x76, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x41, 0x0a, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x22, 0x5e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11,
	0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x51, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x32, 0xa1, 0x04, 0x0a, 0x14, 0x49, 0x6e, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x50, 0x43, 0x12,
	0x5a, 0x0a, 0x07, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x2e, 0x69, 0x6e, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x09, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x73, 0x12, 0x28, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a,
	0x0a, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x12, 0x29, 0x2e, 0x69, 0x6e,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x75, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2d, 0x2e, 0x69, 0x6e,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x69, 0x6e, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1b, 0x5a, 0x19, 0x2f, 0x69,
	0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x5f, 0x72, 0x70, 0x63, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_goadesign_goagen_injective_campaign_rpc_proto_rawDescOnce sync.Once
	file_goadesign_goagen_injective_campaign_rpc_proto_rawDescData = file_goadesign_goagen_injective_campaign_rpc_proto_rawDesc
)

func file_goadesign_goagen_injective_campaign_rpc_proto_rawDescGZIP() []byte {
	file_goadesign_goagen_injective_campaign_rpc_proto_rawDescOnce.Do(func() {
		file_goadesign_goagen_injective_campaign_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_goadesign_goagen_injective_campaign_rpc_proto_rawDescData)
	})
	return file_goadesign_goagen_injective_campaign_rpc_proto_rawDescData
}

var file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_goadesign_goagen_injective_campaign_rpc_proto_goTypes = []interface{}{
	(*RankingRequest)(nil),           // 0: injective_campaign_rpc.RankingRequest
	(*RankingResponse)(nil),          // 1: injective_campaign_rpc.RankingResponse
	(*Campaign)(nil),                 // 2: injective_campaign_rpc.Campaign
	(*Coin)(nil),                     // 3: injective_campaign_rpc.Coin
	(*CampaignUser)(nil),             // 4: injective_campaign_rpc.CampaignUser
	(*Paging)(nil),                   // 5: injective_campaign_rpc.Paging
	(*CampaignsRequest)(nil),         // 6: injective_campaign_rpc.CampaignsRequest
	(*CampaignsResponse)(nil),        // 7: injective_campaign_rpc.CampaignsResponse
	(*ListGuildsRequest)(nil),        // 8: injective_campaign_rpc.ListGuildsRequest
	(*ListGuildsResponse)(nil),       // 9: injective_campaign_rpc.ListGuildsResponse
	(*Guild)(nil),                    // 10: injective_campaign_rpc.Guild
	(*CampaignSummary)(nil),          // 11: injective_campaign_rpc.CampaignSummary
	(*ListGuildMembersRequest)(nil),  // 12: injective_campaign_rpc.ListGuildMembersRequest
	(*ListGuildMembersResponse)(nil), // 13: injective_campaign_rpc.ListGuildMembersResponse
	(*GuildMember)(nil),              // 14: injective_campaign_rpc.GuildMember
	(*GetGuildMemberRequest)(nil),    // 15: injective_campaign_rpc.GetGuildMemberRequest
	(*GetGuildMemberResponse)(nil),   // 16: injective_campaign_rpc.GetGuildMemberResponse
}
var file_goadesign_goagen_injective_campaign_rpc_proto_depIdxs = []int32{
	2,  // 0: injective_campaign_rpc.RankingResponse.campaign:type_name -> injective_campaign_rpc.Campaign
	4,  // 1: injective_campaign_rpc.RankingResponse.users:type_name -> injective_campaign_rpc.CampaignUser
	5,  // 2: injective_campaign_rpc.RankingResponse.paging:type_name -> injective_campaign_rpc.Paging
	3,  // 3: injective_campaign_rpc.Campaign.rewards:type_name -> injective_campaign_rpc.Coin
	2,  // 4: injective_campaign_rpc.CampaignsResponse.campaigns:type_name -> injective_campaign_rpc.Campaign
	3,  // 5: injective_campaign_rpc.CampaignsResponse.accumulated_rewards:type_name -> injective_campaign_rpc.Coin
	10, // 6: injective_campaign_rpc.ListGuildsResponse.guilds:type_name -> injective_campaign_rpc.Guild
	5,  // 7: injective_campaign_rpc.ListGuildsResponse.paging:type_name -> injective_campaign_rpc.Paging
	11, // 8: injective_campaign_rpc.ListGuildsResponse.campaign_summary:type_name -> injective_campaign_rpc.CampaignSummary
	14, // 9: injective_campaign_rpc.ListGuildMembersResponse.members:type_name -> injective_campaign_rpc.GuildMember
	5,  // 10: injective_campaign_rpc.ListGuildMembersResponse.paging:type_name -> injective_campaign_rpc.Paging
	10, // 11: injective_campaign_rpc.ListGuildMembersResponse.guild_info:type_name -> injective_campaign_rpc.Guild
	3,  // 12: injective_campaign_rpc.GuildMember.tvl_reward:type_name -> injective_campaign_rpc.Coin
	3,  // 13: injective_campaign_rpc.GuildMember.volume_reward:type_name -> injective_campaign_rpc.Coin
	14, // 14: injective_campaign_rpc.GetGuildMemberResponse.info:type_name -> injective_campaign_rpc.GuildMember
	0,  // 15: injective_campaign_rpc.InjectiveCampaignRPC.Ranking:input_type -> injective_campaign_rpc.RankingRequest
	6,  // 16: injective_campaign_rpc.InjectiveCampaignRPC.Campaigns:input_type -> injective_campaign_rpc.CampaignsRequest
	8,  // 17: injective_campaign_rpc.InjectiveCampaignRPC.ListGuilds:input_type -> injective_campaign_rpc.ListGuildsRequest
	12, // 18: injective_campaign_rpc.InjectiveCampaignRPC.ListGuildMembers:input_type -> injective_campaign_rpc.ListGuildMembersRequest
	15, // 19: injective_campaign_rpc.InjectiveCampaignRPC.GetGuildMember:input_type -> injective_campaign_rpc.GetGuildMemberRequest
	1,  // 20: injective_campaign_rpc.InjectiveCampaignRPC.Ranking:output_type -> injective_campaign_rpc.RankingResponse
	7,  // 21: injective_campaign_rpc.InjectiveCampaignRPC.Campaigns:output_type -> injective_campaign_rpc.CampaignsResponse
	9,  // 22: injective_campaign_rpc.InjectiveCampaignRPC.ListGuilds:output_type -> injective_campaign_rpc.ListGuildsResponse
	13, // 23: injective_campaign_rpc.InjectiveCampaignRPC.ListGuildMembers:output_type -> injective_campaign_rpc.ListGuildMembersResponse
	16, // 24: injective_campaign_rpc.InjectiveCampaignRPC.GetGuildMember:output_type -> injective_campaign_rpc.GetGuildMemberResponse
	20, // [20:25] is the sub-list for method output_type
	15, // [15:20] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_goadesign_goagen_injective_campaign_rpc_proto_init() }
func file_goadesign_goagen_injective_campaign_rpc_proto_init() {
	if File_goadesign_goagen_injective_campaign_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Campaign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CampaignUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Paging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CampaignsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CampaignsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGuildsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGuildsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Guild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CampaignSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGuildMembersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGuildMembersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGuildMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGuildMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_goadesign_goagen_injective_campaign_rpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_goadesign_goagen_injective_campaign_rpc_proto_goTypes,
		DependencyIndexes: file_goadesign_goagen_injective_campaign_rpc_proto_depIdxs,
		MessageInfos:      file_goadesign_goagen_injective_campaign_rpc_proto_msgTypes,
	}.Build()
	File_goadesign_goagen_injective_campaign_rpc_proto = out.File
	file_goadesign_goagen_injective_campaign_rpc_proto_rawDesc = nil
	file_goadesign_goagen_injective_campaign_rpc_proto_goTypes = nil
	file_goadesign_goagen_injective_campaign_rpc_proto_depIdxs = nil
}
