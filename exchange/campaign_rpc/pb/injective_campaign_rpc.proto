// Code generated with goa v3.7.0, DO NOT EDIT.
//
// InjectiveCampaignRPC protocol buffer definition
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-indexer/api/design -o ../

syntax = "proto3";

package injective_campaign_rpc;

option go_package = "/injective_campaign_rpcpb";

// InjectiveCampaignRPC defined a gRPC service for Injective Campaigns.
service InjectiveCampaignRPC {
	// Lists all participants in campaign
	rpc Ranking (RankingRequest) returns (RankingResponse);
	// List current round active campaigns
	rpc Campaigns (CampaignsRequest) returns (CampaignsResponse);
	// List guilds by campaign
	rpc ListGuilds (ListGuildsRequest) returns (ListGuildsResponse);
	// List guild members of given campaign and guildId
	rpc ListGuildMembers (ListGuildMembersRequest) returns (ListGuildMembersResponse);
	// Get single member guild info
	rpc GetGuildMember (GetGuildMemberRequest) returns (GetGuildMemberResponse);
}

message RankingRequest {
	// Campaign ID
	string campaign_id = 1;
	// MarketId of the campaign
	string market_id = 2;
	// Account address
	string account_address = 3;
	sint32 limit = 4;
	uint64 skip = 5;
	// Contract address that manages the round and reward
	string contract_address = 6;
}

message RankingResponse {
	// The campaign information
	Campaign campaign = 1;
	// The campaign users
	repeated CampaignUser users = 2;
	Paging paging = 3;
}

message Campaign {
	string campaign_id = 1;
	// MarketId of the trading strategy
	string market_id = 2;
	// Total campaign score
	string total_score = 4;
	// Last time the campaign score has been updated.
	sint64 last_updated = 5;
	// Campaign start date in UNIX millis.
	sint64 start_date = 6;
	// Campaign end date in UNIX millis.
	sint64 end_date = 7;
	// Whether the campaign rewards can be claimed.
	bool is_claimable = 8;
	// Campaigns round ID
	sint32 round_id = 9;
	// Contract address that controls this campaign
	string manager_contract = 10;
	// Reward tokens of this campaign
	repeated Coin rewards = 11;
	// Total user score if accountAddress is passed, this is useful to estimate
// account's reward
	string user_score = 12;
	// Return true if user claimed the reward of this campaign
	bool user_claimed = 13;
	// Suffix of the subaccount that eligible for volume score
	string subaccount_id_suffix = 14;
	// Contract that manage users reward
	string reward_contract = 15;
	// Version of reward contract, UI use this to determine the message that need
// to be sent
	string version = 16;
}

message Coin {
	// Denom of the coin
	string denom = 1;
	string amount = 2;
}

message CampaignUser {
	string campaign_id = 1;
	// MarketId of the trading strategy
	string market_id = 2;
	// Account address
	string account_address = 3;
	// Campaign score
	string score = 4;
	// Whether the distribution contract has been updated with the latest score
	bool contract_updated = 5;
	// Block height when the score has been updated.
	sint64 block_height = 6;
	// Block time timestamp in UNIX millis.
	sint64 block_time = 7;
	// Amount swapped but only count base denom of the market
	string purchased_amount = 8;
	// True if this user is updated to be in Galxe Campain list, only eligible
// address are added
	bool galxe_updated = 9;
	// True if this user claimed the reward
	bool reward_claimed = 10;
}
// Paging defines the structure for required params for handling pagination
message Paging {
	// total number of txs saved in database
	sint64 total = 1;
	// can be either block height or index num
	sint32 from = 2;
	// can be either block height or index num
	sint32 to = 3;
	// count entries by subaccount, serving some places on helix
	sint64 count_by_subaccount = 4;
	// array of tokens to navigate to the next pages
	repeated string next = 5;
}

message CampaignsRequest {
	// Round ID, if not specified, it will return latest roundId
	sint64 round_id = 1;
	// Address of login account, if not specified it will return no user rewards
	string account_address = 2;
	// This will return campaign x where x.roundId <= toRoundId. Useful for listing
// multiple rounds
	sint32 to_round_id = 3;
	// Contract address that manages the round and reward
	string contract_address = 4;
}

message CampaignsResponse {
	repeated Campaign campaigns = 1;
	repeated Coin accumulated_rewards = 2;
	sint32 reward_count = 3;
}

message ListGuildsRequest {
	// Campaign contract address
	string campaign_contract = 1;
	// Limit number of returned guilds
	sint32 limit = 2;
	// Skip some first guilds in the list for next page
	sint32 skip = 3;
	// Sort by some metrics
	string sort_by = 4;
}

message ListGuildsResponse {
	repeated Guild guilds = 1;
	Paging paging = 2;
	// Snapshot updated at time in UNIX milli
	sint64 updated_at = 3;
	// Summary of the campaign
	CampaignSummary campaign_summary = 4;
}

message Guild {
	string campaign_contract = 1;
	// Guild ID
	string guild_id = 2;
	// Guild's master address
	string master_address = 3;
	// Guild creation date (in UNIX milliseconds)
	sint64 created_at = 4;
	// Average TVL score
	string tvl_score = 5;
	// Total volume score
	string volume_score = 6;
	// guild's rank by volume
	sint32 rank_by_volume = 7;
	// guild's rank by TVL
	sint32 rank_by_tvl = 8;
	// guild's logo, at the moment it supports numberic string (i.e '1', '2' and so
// on) not a random URL because of front end limitation
	string logo = 9;
	// guild's total TVL
	string total_tvl = 10;
	// Snapshot updated at time in UNIX milli
	sint64 updated_at = 11;
	// Guild name
	string name = 14;
	// Active status of guild, true when master total tvl meets the minimum
// requirements
	bool is_active = 13;
	// Master balance (in current campaigns denom)
	string master_balance = 15;
	// Guild description, set by master of the guild
	string description = 16;
}

message CampaignSummary {
	// Campaign id
	string campaign_id = 1;
	// Guild manager contract address
	string campaign_contract = 2;
	// Number of guild in the campaign
	sint32 total_guilds_count = 3;
	// Total TVL
	string total_tvl = 4;
	// Sum average TVL of all guilds
	string total_average_tvl = 5;
	// Total volume across all guilds (in market quote denom, often USDT)
	string total_volume = 6;
	// Snapshot updated at time in UNIX milli
	sint64 updated_at = 7;
	// Total member joined the campaign (include guild masters)
	sint32 total_members_count = 8;
	// Campaign start time
	sint64 start_time = 9;
	// Campaign end time
	sint64 end_time = 10;
}

message ListGuildMembersRequest {
	// Campaign contract address
	string campaign_contract = 1;
	// ID of guild, inside campaign
	string guild_id = 2;
	// Limit number of returned guild members
	sint32 limit = 3;
	// Skip some first guild members in the list for next page
	sint32 skip = 4;
	// whether to include guild summary info, it's better to use this in terms of
// latency, instead of sending 2 requests we just need once
	bool include_guild_info = 5;
	// Sort by some metrics
	string sort_by = 6;
}

message ListGuildMembersResponse {
	repeated GuildMember members = 1;
	Paging paging = 2;
	Guild guild_info = 3;
}

message GuildMember {
	// Guild manager contract address
	string campaign_contract = 1;
	// Guild ID
	string guild_id = 2;
	// Guild member address
	string address = 3;
	// Guild enrollment date (in UNIX milliseconds)
	sint64 joined_at = 4;
	// Average TVL score
	string tvl_score = 5;
	// Total volume score
	string volume_score = 6;
	// Total volume score
	string total_tvl = 7;
	// Volume percentage out of guilds total volume
	double volume_score_percentage = 8;
	// TVL percentage out of guilds total TVL score
	double tvl_score_percentage = 9;
	// Rewards for volume campaign (amount+denom)
	repeated Coin tvl_reward = 10;
	// Rewards for TVL campaign (amount+denom)
	repeated Coin volume_reward = 11;
}

message GetGuildMemberRequest {
	// Campaign contract address
	string campaign_contract = 1;
	// User address
	string address = 2;
}

message GetGuildMemberResponse {
	GuildMember info = 1;
}
