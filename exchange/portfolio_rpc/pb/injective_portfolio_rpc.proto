// Code generated with goa v3.5.2, DO NOT EDIT.
//
// InjectivePortfolioRPC protocol buffer definition
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-indexer/api/design -o ../

syntax = "proto3";

package injective_portfolio_rpc;

option go_package = "/injective_portfolio_rpcpb";

// InjectivePortfolioRPC defines gRPC API of Exchange Portfolio provider.
service InjectivePortfolioRPC {
	// Provide the account's portfolio
	rpc AccountPortfolio (AccountPortfolioRequest) returns (AccountPortfolioResponse);
	// Stream the account's portfolio
	rpc StreamAccountPortfolio (StreamAccountPortfolioRequest) returns (stream StreamAccountPortfolioResponse);
}

message AccountPortfolioRequest {
	// Account address
	string account_address = 1;
}

message AccountPortfolioResponse {
	// The portfolio of this account
	Portfolio portfolio = 1;
}

message Portfolio {
	// The account's portfolio address
	string account_address = 1;
	// Account available bank balances
	repeated Coin bank_balances = 2;
	// Subaccounts list
	repeated SubaccountBalanceV2 subaccounts = 3;
	// All positions for all subaccounts, with unrealized PNL
	repeated PositionsWithUPNL positions_with_upnl = 4;
}

message Coin {
	// Denom of the coin
	string denom = 1;
	string amount = 2;
}

message SubaccountBalanceV2 {
	// Related subaccount ID
	string subaccount_id = 1;
	// Coin denom on the chain.
	string denom = 2;
	SubaccountDeposit deposit = 3;
}

message SubaccountDeposit {
	string total_balance = 1;
	string available_balance = 2;
}

message PositionsWithUPNL {
	DerivativePosition position = 1;
	// Unrealized PNL
	string unrealized_pnl = 2;
}

message DerivativePosition {
	// Ticker of the derivative market
	string ticker = 1;
	// Derivative Market ID
	string market_id = 2;
	// The subaccountId that the position belongs to
	string subaccount_id = 3;
	// Direction of the position
	string direction = 4;
	// Quantity of the position
	string quantity = 5;
	// Price of the position
	string entry_price = 6;
	// Margin of the position
	string margin = 7;
	// LiquidationPrice of the position
	string liquidation_price = 8;
	// MarkPrice of the position
	string mark_price = 9;
	// Aggregate Quantity of the Reduce Only orders associated with the position
	string aggregate_reduce_only_quantity = 11;
	// Position updated timestamp in UNIX millis.
	sint64 updated_at = 12;
	// Position created timestamp in UNIX millis.
	sint64 created_at = 13;
}

message StreamAccountPortfolioRequest {
	// The account's portfolio address
	string account_address = 1;
	// Related subaccount ID
	string subaccount_id = 2;
	string type = 3;
}

message StreamAccountPortfolioResponse {
	// type of portfolio entry
	string type = 1;
	// denom of portfolio entry
	string denom = 2;
	// amount of portfolio entry
	string amount = 3;
	// subaccount id of portfolio entry
	string subaccount_id = 4;
}
