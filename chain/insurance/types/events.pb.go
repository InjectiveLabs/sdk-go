// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: injective/insurance/v1beta1/events.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventInsuranceFundUpdate struct {
	Fund *InsuranceFund `protobuf:"bytes,1,opt,name=fund,proto3" json:"fund,omitempty"`
}

func (m *EventInsuranceFundUpdate) Reset()         { *m = EventInsuranceFundUpdate{} }
func (m *EventInsuranceFundUpdate) String() string { return proto.CompactTextString(m) }
func (*EventInsuranceFundUpdate) ProtoMessage()    {}
func (*EventInsuranceFundUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_238c43c591e30770, []int{0}
}
func (m *EventInsuranceFundUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventInsuranceFundUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventInsuranceFundUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventInsuranceFundUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventInsuranceFundUpdate.Merge(m, src)
}
func (m *EventInsuranceFundUpdate) XXX_Size() int {
	return m.Size()
}
func (m *EventInsuranceFundUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_EventInsuranceFundUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_EventInsuranceFundUpdate proto.InternalMessageInfo

func (m *EventInsuranceFundUpdate) GetFund() *InsuranceFund {
	if m != nil {
		return m.Fund
	}
	return nil
}

type EventRequestRedemption struct {
	Schedule *RedemptionSchedule `protobuf:"bytes,1,opt,name=schedule,proto3" json:"schedule,omitempty"`
}

func (m *EventRequestRedemption) Reset()         { *m = EventRequestRedemption{} }
func (m *EventRequestRedemption) String() string { return proto.CompactTextString(m) }
func (*EventRequestRedemption) ProtoMessage()    {}
func (*EventRequestRedemption) Descriptor() ([]byte, []int) {
	return fileDescriptor_238c43c591e30770, []int{1}
}
func (m *EventRequestRedemption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRequestRedemption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRequestRedemption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRequestRedemption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRequestRedemption.Merge(m, src)
}
func (m *EventRequestRedemption) XXX_Size() int {
	return m.Size()
}
func (m *EventRequestRedemption) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRequestRedemption.DiscardUnknown(m)
}

var xxx_messageInfo_EventRequestRedemption proto.InternalMessageInfo

func (m *EventRequestRedemption) GetSchedule() *RedemptionSchedule {
	if m != nil {
		return m.Schedule
	}
	return nil
}

type EventWithdrawRedemption struct {
	// redemption schedule triggered withdraw
	Schedule *RedemptionSchedule `protobuf:"bytes,1,opt,name=schedule,proto3" json:"schedule,omitempty"`
	// redeem coin amount in base_currency
	RedeemCoin types.Coin `protobuf:"bytes,2,opt,name=redeem_coin,json=redeemCoin,proto3" json:"redeem_coin"`
}

func (m *EventWithdrawRedemption) Reset()         { *m = EventWithdrawRedemption{} }
func (m *EventWithdrawRedemption) String() string { return proto.CompactTextString(m) }
func (*EventWithdrawRedemption) ProtoMessage()    {}
func (*EventWithdrawRedemption) Descriptor() ([]byte, []int) {
	return fileDescriptor_238c43c591e30770, []int{2}
}
func (m *EventWithdrawRedemption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventWithdrawRedemption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventWithdrawRedemption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventWithdrawRedemption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventWithdrawRedemption.Merge(m, src)
}
func (m *EventWithdrawRedemption) XXX_Size() int {
	return m.Size()
}
func (m *EventWithdrawRedemption) XXX_DiscardUnknown() {
	xxx_messageInfo_EventWithdrawRedemption.DiscardUnknown(m)
}

var xxx_messageInfo_EventWithdrawRedemption proto.InternalMessageInfo

func (m *EventWithdrawRedemption) GetSchedule() *RedemptionSchedule {
	if m != nil {
		return m.Schedule
	}
	return nil
}

func (m *EventWithdrawRedemption) GetRedeemCoin() types.Coin {
	if m != nil {
		return m.RedeemCoin
	}
	return types.Coin{}
}

type EventUnderwrite struct {
	// address of the underwriter
	Underwriter string `protobuf:"bytes,1,opt,name=underwriter,proto3" json:"underwriter,omitempty"`
	// marketId of insurance fund for the redemption
	MarketId string `protobuf:"bytes,2,opt,name=marketId,proto3" json:"marketId,omitempty"`
	// deposit coin amount
	Deposit types.Coin `protobuf:"bytes,3,opt,name=deposit,proto3" json:"deposit"`
	// share coin amount
	Shares types.Coin `protobuf:"bytes,4,opt,name=shares,proto3" json:"shares"`
}

func (m *EventUnderwrite) Reset()         { *m = EventUnderwrite{} }
func (m *EventUnderwrite) String() string { return proto.CompactTextString(m) }
func (*EventUnderwrite) ProtoMessage()    {}
func (*EventUnderwrite) Descriptor() ([]byte, []int) {
	return fileDescriptor_238c43c591e30770, []int{3}
}
func (m *EventUnderwrite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUnderwrite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUnderwrite.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUnderwrite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUnderwrite.Merge(m, src)
}
func (m *EventUnderwrite) XXX_Size() int {
	return m.Size()
}
func (m *EventUnderwrite) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUnderwrite.DiscardUnknown(m)
}

var xxx_messageInfo_EventUnderwrite proto.InternalMessageInfo

func (m *EventUnderwrite) GetUnderwriter() string {
	if m != nil {
		return m.Underwriter
	}
	return ""
}

func (m *EventUnderwrite) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *EventUnderwrite) GetDeposit() types.Coin {
	if m != nil {
		return m.Deposit
	}
	return types.Coin{}
}

func (m *EventUnderwrite) GetShares() types.Coin {
	if m != nil {
		return m.Shares
	}
	return types.Coin{}
}

type EventInsuranceWithdraw struct {
	MarketId     string     `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	MarketTicker string     `protobuf:"bytes,2,opt,name=market_ticker,json=marketTicker,proto3" json:"market_ticker,omitempty"`
	Withdrawal   types.Coin `protobuf:"bytes,3,opt,name=withdrawal,proto3" json:"withdrawal"`
}

func (m *EventInsuranceWithdraw) Reset()         { *m = EventInsuranceWithdraw{} }
func (m *EventInsuranceWithdraw) String() string { return proto.CompactTextString(m) }
func (*EventInsuranceWithdraw) ProtoMessage()    {}
func (*EventInsuranceWithdraw) Descriptor() ([]byte, []int) {
	return fileDescriptor_238c43c591e30770, []int{4}
}
func (m *EventInsuranceWithdraw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventInsuranceWithdraw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventInsuranceWithdraw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventInsuranceWithdraw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventInsuranceWithdraw.Merge(m, src)
}
func (m *EventInsuranceWithdraw) XXX_Size() int {
	return m.Size()
}
func (m *EventInsuranceWithdraw) XXX_DiscardUnknown() {
	xxx_messageInfo_EventInsuranceWithdraw.DiscardUnknown(m)
}

var xxx_messageInfo_EventInsuranceWithdraw proto.InternalMessageInfo

func (m *EventInsuranceWithdraw) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *EventInsuranceWithdraw) GetMarketTicker() string {
	if m != nil {
		return m.MarketTicker
	}
	return ""
}

func (m *EventInsuranceWithdraw) GetWithdrawal() types.Coin {
	if m != nil {
		return m.Withdrawal
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*EventInsuranceFundUpdate)(nil), "injective.insurance.v1beta1.EventInsuranceFundUpdate")
	proto.RegisterType((*EventRequestRedemption)(nil), "injective.insurance.v1beta1.EventRequestRedemption")
	proto.RegisterType((*EventWithdrawRedemption)(nil), "injective.insurance.v1beta1.EventWithdrawRedemption")
	proto.RegisterType((*EventUnderwrite)(nil), "injective.insurance.v1beta1.EventUnderwrite")
	proto.RegisterType((*EventInsuranceWithdraw)(nil), "injective.insurance.v1beta1.EventInsuranceWithdraw")
}

func init() {
	proto.RegisterFile("injective/insurance/v1beta1/events.proto", fileDescriptor_238c43c591e30770)
}

var fileDescriptor_238c43c591e30770 = []byte{
	// 471 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0x41, 0x8b, 0xd4, 0x4c,
	0x10, 0x9d, 0x7c, 0xdf, 0xb0, 0xee, 0xd4, 0x28, 0x42, 0x23, 0x1a, 0x67, 0x21, 0x2e, 0xf1, 0xb2,
	0x28, 0xa6, 0x59, 0x3d, 0x88, 0x17, 0x95, 0x15, 0x85, 0x41, 0x41, 0x88, 0x2e, 0xc2, 0x5e, 0x96,
	0x4e, 0xba, 0x9c, 0xb4, 0xbb, 0xe9, 0x8e, 0xdd, 0x9d, 0x19, 0xfc, 0x17, 0xde, 0xfd, 0x03, 0xfe,
	0x0f, 0x2f, 0x7b, 0xdc, 0xa3, 0x27, 0x91, 0x99, 0x3f, 0x22, 0xe9, 0xf4, 0x64, 0xc6, 0xcb, 0x30,
	0x17, 0x6f, 0xa9, 0xca, 0x7b, 0xaf, 0x5e, 0xf5, 0xeb, 0x86, 0x03, 0x21, 0x3f, 0x61, 0x6e, 0xc5,
	0x14, 0xa9, 0x90, 0xa6, 0xd6, 0x4c, 0xe6, 0x48, 0xa7, 0x87, 0x19, 0x5a, 0x76, 0x48, 0x71, 0x8a,
	0xd2, 0x9a, 0xa4, 0xd2, 0xca, 0x2a, 0xb2, 0xd7, 0x21, 0x93, 0x0e, 0x99, 0x78, 0xe4, 0xe8, 0xc6,
	0x44, 0x4d, 0x94, 0xc3, 0xd1, 0xe6, 0xab, 0xa5, 0x8c, 0xa2, 0x5c, 0x99, 0x52, 0x19, 0x9a, 0x31,
	0xb3, 0x12, 0xcd, 0x95, 0x90, 0xfe, 0xff, 0xfd, 0x4d, 0xc3, 0x57, 0x43, 0x1c, 0x38, 0x3e, 0x81,
	0xf0, 0x65, 0xe3, 0x67, 0xbc, 0xec, 0xbf, 0xaa, 0x25, 0x3f, 0xae, 0x38, 0xb3, 0x48, 0x9e, 0x42,
	0xff, 0x63, 0x2d, 0x79, 0x18, 0xec, 0x07, 0x07, 0xc3, 0x87, 0xf7, 0x92, 0x0d, 0x56, 0x93, 0xbf,
	0xf8, 0xa9, 0xe3, 0xc5, 0x08, 0x37, 0x9d, 0x76, 0x8a, 0x9f, 0x6b, 0x34, 0x36, 0x45, 0x8e, 0x65,
	0x65, 0x85, 0x92, 0xe4, 0x35, 0xec, 0x9a, 0xbc, 0x40, 0x5e, 0x9f, 0xa3, 0x57, 0xa7, 0x1b, 0xd5,
	0x57, 0xd4, 0x77, 0x9e, 0x96, 0x76, 0x02, 0xf1, 0xf7, 0x00, 0x6e, 0xb9, 0x39, 0x1f, 0x84, 0x2d,
	0xb8, 0x66, 0xb3, 0x7f, 0x34, 0x88, 0x3c, 0x87, 0xa1, 0x46, 0x8e, 0x58, 0x9e, 0x36, 0xa7, 0x1d,
	0xfe, 0xe7, 0xf4, 0x6e, 0x27, 0x6d, 0x1c, 0x49, 0x13, 0x47, 0xa7, 0xf3, 0x42, 0x09, 0x79, 0xd4,
	0xbf, 0xf8, 0x75, 0xa7, 0x97, 0x42, 0xcb, 0x69, 0x3a, 0xf1, 0x8f, 0x00, 0xae, 0x3b, 0xab, 0xc7,
	0x92, 0xa3, 0x9e, 0x69, 0x61, 0x91, 0xec, 0xc3, 0xb0, 0xee, 0x2a, 0xed, 0x5c, 0x0e, 0xd2, 0xf5,
	0x16, 0x19, 0xc1, 0x6e, 0xc9, 0xf4, 0x19, 0xda, 0x31, 0x77, 0x43, 0x07, 0x69, 0x57, 0x93, 0x27,
	0x70, 0x85, 0x63, 0xa5, 0x8c, 0xb0, 0xe1, 0xff, 0xdb, 0xf9, 0x59, 0xe2, 0xc9, 0x63, 0xd8, 0x31,
	0x05, 0xd3, 0x68, 0xc2, 0xfe, 0x76, 0x4c, 0x0f, 0x8f, 0xbf, 0x05, 0x3e, 0xd8, 0x2e, 0xf4, 0xe5,
	0xc9, 0x93, 0x3d, 0x18, 0xb4, 0xd6, 0x4e, 0x05, 0xf7, 0xab, 0xac, 0xbc, 0xde, 0x85, 0x6b, 0xfe,
	0xa7, 0x15, 0xf9, 0x19, 0x6a, 0xbf, 0xcc, 0xd5, 0xb6, 0xf9, 0xde, 0xf5, 0xc8, 0x33, 0x80, 0x99,
	0x57, 0x63, 0xe7, 0xdb, 0xee, 0xb4, 0x46, 0x39, 0x12, 0x17, 0xf3, 0x28, 0xb8, 0x9c, 0x47, 0xc1,
	0xef, 0x79, 0x14, 0x7c, 0x5d, 0x44, 0xbd, 0xcb, 0x45, 0xd4, 0xfb, 0xb9, 0x88, 0x7a, 0x27, 0x6f,
	0x27, 0xc2, 0x16, 0x75, 0x96, 0xe4, 0xaa, 0xa4, 0xe3, 0xe5, 0x25, 0x78, 0xc3, 0x32, 0x43, 0xbb,
	0x2b, 0xf1, 0x20, 0x57, 0x1a, 0xd7, 0xcb, 0x82, 0x09, 0x49, 0x4b, 0xd5, 0xe4, 0x6f, 0xd6, 0x9e,
	0x93, 0xfd, 0x52, 0xa1, 0xc9, 0x76, 0xdc, 0x1b, 0x7a, 0xf4, 0x27, 0x00, 0x00, 0xff, 0xff, 0xdf,
	0x1c, 0x0d, 0x6e, 0xef, 0x03, 0x00, 0x00,
}

func (m *EventInsuranceFundUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventInsuranceFundUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventInsuranceFundUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fund != nil {
		{
			size, err := m.Fund.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventRequestRedemption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRequestRedemption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRequestRedemption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Schedule != nil {
		{
			size, err := m.Schedule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventWithdrawRedemption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventWithdrawRedemption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventWithdrawRedemption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RedeemCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Schedule != nil {
		{
			size, err := m.Schedule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventUnderwrite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUnderwrite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUnderwrite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Shares.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Deposit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Underwriter) > 0 {
		i -= len(m.Underwriter)
		copy(dAtA[i:], m.Underwriter)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Underwriter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventInsuranceWithdraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventInsuranceWithdraw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventInsuranceWithdraw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Withdrawal.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.MarketTicker) > 0 {
		i -= len(m.MarketTicker)
		copy(dAtA[i:], m.MarketTicker)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MarketTicker)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventInsuranceFundUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fund != nil {
		l = m.Fund.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventRequestRedemption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Schedule != nil {
		l = m.Schedule.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventWithdrawRedemption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Schedule != nil {
		l = m.Schedule.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.RedeemCoin.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventUnderwrite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Underwriter)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.Deposit.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.Shares.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventInsuranceWithdraw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.MarketTicker)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.Withdrawal.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventInsuranceFundUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventInsuranceFundUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventInsuranceFundUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fund", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fund == nil {
				m.Fund = &InsuranceFund{}
			}
			if err := m.Fund.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRequestRedemption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRequestRedemption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRequestRedemption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Schedule == nil {
				m.Schedule = &RedemptionSchedule{}
			}
			if err := m.Schedule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventWithdrawRedemption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventWithdrawRedemption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventWithdrawRedemption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Schedule == nil {
				m.Schedule = &RedemptionSchedule{}
			}
			if err := m.Schedule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedeemCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RedeemCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUnderwrite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUnderwrite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUnderwrite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Underwriter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Underwriter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventInsuranceWithdraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventInsuranceWithdraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventInsuranceWithdraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketTicker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketTicker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdrawal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Withdrawal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
