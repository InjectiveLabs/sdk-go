// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: injective/insurance/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryInsuranceParamsRequest is the request type for the Query/InsuranceParams
// RPC method.
type QueryInsuranceParamsRequest struct {
}

func (m *QueryInsuranceParamsRequest) Reset()         { *m = QueryInsuranceParamsRequest{} }
func (m *QueryInsuranceParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryInsuranceParamsRequest) ProtoMessage()    {}
func (*QueryInsuranceParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_74cebfe4cd18bca2, []int{0}
}
func (m *QueryInsuranceParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInsuranceParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInsuranceParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInsuranceParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInsuranceParamsRequest.Merge(m, src)
}
func (m *QueryInsuranceParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInsuranceParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInsuranceParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInsuranceParamsRequest proto.InternalMessageInfo

// QueryInsuranceParamsRequest is the response type for the
// Query/InsuranceParams RPC method.
type QueryInsuranceParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryInsuranceParamsResponse) Reset()         { *m = QueryInsuranceParamsResponse{} }
func (m *QueryInsuranceParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInsuranceParamsResponse) ProtoMessage()    {}
func (*QueryInsuranceParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74cebfe4cd18bca2, []int{1}
}
func (m *QueryInsuranceParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInsuranceParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInsuranceParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInsuranceParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInsuranceParamsResponse.Merge(m, src)
}
func (m *QueryInsuranceParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInsuranceParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInsuranceParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInsuranceParamsResponse proto.InternalMessageInfo

func (m *QueryInsuranceParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryInsuranceFundRequest is the request type for the Query/InsuranceFunds
// RPC method.
type QueryInsuranceFundRequest struct {
	// Market ID for the market
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QueryInsuranceFundRequest) Reset()         { *m = QueryInsuranceFundRequest{} }
func (m *QueryInsuranceFundRequest) String() string { return proto.CompactTextString(m) }
func (*QueryInsuranceFundRequest) ProtoMessage()    {}
func (*QueryInsuranceFundRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_74cebfe4cd18bca2, []int{2}
}
func (m *QueryInsuranceFundRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInsuranceFundRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInsuranceFundRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInsuranceFundRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInsuranceFundRequest.Merge(m, src)
}
func (m *QueryInsuranceFundRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInsuranceFundRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInsuranceFundRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInsuranceFundRequest proto.InternalMessageInfo

func (m *QueryInsuranceFundRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

// QueryInsuranceFundResponse is the response type for the Query/InsuranceFund
// RPC method.
type QueryInsuranceFundResponse struct {
	Fund *InsuranceFund `protobuf:"bytes,1,opt,name=fund,proto3" json:"fund,omitempty"`
}

func (m *QueryInsuranceFundResponse) Reset()         { *m = QueryInsuranceFundResponse{} }
func (m *QueryInsuranceFundResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInsuranceFundResponse) ProtoMessage()    {}
func (*QueryInsuranceFundResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74cebfe4cd18bca2, []int{3}
}
func (m *QueryInsuranceFundResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInsuranceFundResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInsuranceFundResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInsuranceFundResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInsuranceFundResponse.Merge(m, src)
}
func (m *QueryInsuranceFundResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInsuranceFundResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInsuranceFundResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInsuranceFundResponse proto.InternalMessageInfo

func (m *QueryInsuranceFundResponse) GetFund() *InsuranceFund {
	if m != nil {
		return m.Fund
	}
	return nil
}

// QueryInsuranceFundsRequest is the request type for the Query/InsuranceFunds
// RPC method.
type QueryInsuranceFundsRequest struct {
}

func (m *QueryInsuranceFundsRequest) Reset()         { *m = QueryInsuranceFundsRequest{} }
func (m *QueryInsuranceFundsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryInsuranceFundsRequest) ProtoMessage()    {}
func (*QueryInsuranceFundsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_74cebfe4cd18bca2, []int{4}
}
func (m *QueryInsuranceFundsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInsuranceFundsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInsuranceFundsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInsuranceFundsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInsuranceFundsRequest.Merge(m, src)
}
func (m *QueryInsuranceFundsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInsuranceFundsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInsuranceFundsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInsuranceFundsRequest proto.InternalMessageInfo

// QueryInsuranceFundsResponse is the response type for the Query/InsuranceFunds
// RPC method.
type QueryInsuranceFundsResponse struct {
	Funds []InsuranceFund `protobuf:"bytes,1,rep,name=funds,proto3" json:"funds"`
}

func (m *QueryInsuranceFundsResponse) Reset()         { *m = QueryInsuranceFundsResponse{} }
func (m *QueryInsuranceFundsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInsuranceFundsResponse) ProtoMessage()    {}
func (*QueryInsuranceFundsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74cebfe4cd18bca2, []int{5}
}
func (m *QueryInsuranceFundsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInsuranceFundsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInsuranceFundsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInsuranceFundsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInsuranceFundsResponse.Merge(m, src)
}
func (m *QueryInsuranceFundsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInsuranceFundsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInsuranceFundsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInsuranceFundsResponse proto.InternalMessageInfo

func (m *QueryInsuranceFundsResponse) GetFunds() []InsuranceFund {
	if m != nil {
		return m.Funds
	}
	return nil
}

// QueryEstimatedRedemptionsRequest is the request type for the
// Query/EstimatedRedemptions RPC method.
type QueryEstimatedRedemptionsRequest struct {
	MarketId string `protobuf:"bytes,1,opt,name=marketId,proto3" json:"marketId,omitempty"`
	Address  string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryEstimatedRedemptionsRequest) Reset()         { *m = QueryEstimatedRedemptionsRequest{} }
func (m *QueryEstimatedRedemptionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEstimatedRedemptionsRequest) ProtoMessage()    {}
func (*QueryEstimatedRedemptionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_74cebfe4cd18bca2, []int{6}
}
func (m *QueryEstimatedRedemptionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimatedRedemptionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimatedRedemptionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimatedRedemptionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimatedRedemptionsRequest.Merge(m, src)
}
func (m *QueryEstimatedRedemptionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimatedRedemptionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimatedRedemptionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimatedRedemptionsRequest proto.InternalMessageInfo

func (m *QueryEstimatedRedemptionsRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *QueryEstimatedRedemptionsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryEstimatedRedemptionsResponse is the response type for the
// Query/EstimatedRedemptions RPC method.
type QueryEstimatedRedemptionsResponse struct {
	Amount []types.Coin `protobuf:"bytes,1,rep,name=amount,proto3" json:"amount"`
}

func (m *QueryEstimatedRedemptionsResponse) Reset()         { *m = QueryEstimatedRedemptionsResponse{} }
func (m *QueryEstimatedRedemptionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEstimatedRedemptionsResponse) ProtoMessage()    {}
func (*QueryEstimatedRedemptionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74cebfe4cd18bca2, []int{7}
}
func (m *QueryEstimatedRedemptionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimatedRedemptionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimatedRedemptionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimatedRedemptionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimatedRedemptionsResponse.Merge(m, src)
}
func (m *QueryEstimatedRedemptionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimatedRedemptionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimatedRedemptionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimatedRedemptionsResponse proto.InternalMessageInfo

func (m *QueryEstimatedRedemptionsResponse) GetAmount() []types.Coin {
	if m != nil {
		return m.Amount
	}
	return nil
}

// QueryPendingRedemptionsRequest is the request type for the
// Query/PendingRedemptions RPC method.
type QueryPendingRedemptionsRequest struct {
	MarketId string `protobuf:"bytes,1,opt,name=marketId,proto3" json:"marketId,omitempty"`
	Address  string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryPendingRedemptionsRequest) Reset()         { *m = QueryPendingRedemptionsRequest{} }
func (m *QueryPendingRedemptionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPendingRedemptionsRequest) ProtoMessage()    {}
func (*QueryPendingRedemptionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_74cebfe4cd18bca2, []int{8}
}
func (m *QueryPendingRedemptionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingRedemptionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingRedemptionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingRedemptionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingRedemptionsRequest.Merge(m, src)
}
func (m *QueryPendingRedemptionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingRedemptionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingRedemptionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingRedemptionsRequest proto.InternalMessageInfo

func (m *QueryPendingRedemptionsRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *QueryPendingRedemptionsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryPendingRedemptionsResponse is the response type for the
// Query/PendingRedemptions RPC method.
type QueryPendingRedemptionsResponse struct {
	Amount []types.Coin `protobuf:"bytes,1,rep,name=amount,proto3" json:"amount"`
}

func (m *QueryPendingRedemptionsResponse) Reset()         { *m = QueryPendingRedemptionsResponse{} }
func (m *QueryPendingRedemptionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPendingRedemptionsResponse) ProtoMessage()    {}
func (*QueryPendingRedemptionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74cebfe4cd18bca2, []int{9}
}
func (m *QueryPendingRedemptionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingRedemptionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingRedemptionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingRedemptionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingRedemptionsResponse.Merge(m, src)
}
func (m *QueryPendingRedemptionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingRedemptionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingRedemptionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingRedemptionsResponse proto.InternalMessageInfo

func (m *QueryPendingRedemptionsResponse) GetAmount() []types.Coin {
	if m != nil {
		return m.Amount
	}
	return nil
}

// QueryModuleStateRequest is the request type for the
// Query/InsuranceModuleState RPC method.
type QueryModuleStateRequest struct {
}

func (m *QueryModuleStateRequest) Reset()         { *m = QueryModuleStateRequest{} }
func (m *QueryModuleStateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryModuleStateRequest) ProtoMessage()    {}
func (*QueryModuleStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_74cebfe4cd18bca2, []int{10}
}
func (m *QueryModuleStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryModuleStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryModuleStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryModuleStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryModuleStateRequest.Merge(m, src)
}
func (m *QueryModuleStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryModuleStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryModuleStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryModuleStateRequest proto.InternalMessageInfo

// QueryModuleStateResponse is the response type for the
// Query/InsuranceModuleState RPC method.
type QueryModuleStateResponse struct {
	State *GenesisState `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *QueryModuleStateResponse) Reset()         { *m = QueryModuleStateResponse{} }
func (m *QueryModuleStateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryModuleStateResponse) ProtoMessage()    {}
func (*QueryModuleStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74cebfe4cd18bca2, []int{11}
}
func (m *QueryModuleStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryModuleStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryModuleStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryModuleStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryModuleStateResponse.Merge(m, src)
}
func (m *QueryModuleStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryModuleStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryModuleStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryModuleStateResponse proto.InternalMessageInfo

func (m *QueryModuleStateResponse) GetState() *GenesisState {
	if m != nil {
		return m.State
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryInsuranceParamsRequest)(nil), "injective.insurance.v1beta1.QueryInsuranceParamsRequest")
	proto.RegisterType((*QueryInsuranceParamsResponse)(nil), "injective.insurance.v1beta1.QueryInsuranceParamsResponse")
	proto.RegisterType((*QueryInsuranceFundRequest)(nil), "injective.insurance.v1beta1.QueryInsuranceFundRequest")
	proto.RegisterType((*QueryInsuranceFundResponse)(nil), "injective.insurance.v1beta1.QueryInsuranceFundResponse")
	proto.RegisterType((*QueryInsuranceFundsRequest)(nil), "injective.insurance.v1beta1.QueryInsuranceFundsRequest")
	proto.RegisterType((*QueryInsuranceFundsResponse)(nil), "injective.insurance.v1beta1.QueryInsuranceFundsResponse")
	proto.RegisterType((*QueryEstimatedRedemptionsRequest)(nil), "injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest")
	proto.RegisterType((*QueryEstimatedRedemptionsResponse)(nil), "injective.insurance.v1beta1.QueryEstimatedRedemptionsResponse")
	proto.RegisterType((*QueryPendingRedemptionsRequest)(nil), "injective.insurance.v1beta1.QueryPendingRedemptionsRequest")
	proto.RegisterType((*QueryPendingRedemptionsResponse)(nil), "injective.insurance.v1beta1.QueryPendingRedemptionsResponse")
	proto.RegisterType((*QueryModuleStateRequest)(nil), "injective.insurance.v1beta1.QueryModuleStateRequest")
	proto.RegisterType((*QueryModuleStateResponse)(nil), "injective.insurance.v1beta1.QueryModuleStateResponse")
}

func init() {
	proto.RegisterFile("injective/insurance/v1beta1/query.proto", fileDescriptor_74cebfe4cd18bca2)
}

var fileDescriptor_74cebfe4cd18bca2 = []byte{
	// 727 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xdf, 0x4b, 0x14, 0x41,
	0x1c, 0xbf, 0x35, 0xb5, 0x9c, 0xa8, 0x60, 0x10, 0x3a, 0x57, 0x5b, 0x6d, 0x25, 0xca, 0xac, 0xdd,
	0xbc, 0x2c, 0xcf, 0x7e, 0x28, 0x19, 0x19, 0x42, 0x91, 0x5d, 0x10, 0x61, 0xc2, 0x31, 0x77, 0x3b,
	0xad, 0x53, 0xee, 0xcc, 0xb9, 0x33, 0x2b, 0x48, 0xf4, 0xd2, 0x5f, 0x10, 0x04, 0xfd, 0x23, 0x41,
	0xd0, 0x63, 0x6f, 0xf6, 0x66, 0xf4, 0xd2, 0x53, 0x84, 0xf6, 0x87, 0xc4, 0xce, 0xce, 0xae, 0x77,
	0x7a, 0x8e, 0xed, 0xd5, 0xdb, 0xed, 0xcc, 0x7c, 0x7e, 0x7d, 0x67, 0xbe, 0x5f, 0x0e, 0x9c, 0x27,
	0xf4, 0x25, 0xae, 0x0b, 0xb2, 0x8e, 0x5d, 0x42, 0x79, 0x14, 0x22, 0x5a, 0xc7, 0xee, 0xfa, 0x44,
	0x0d, 0x0b, 0x34, 0xe1, 0xae, 0x45, 0x38, 0xdc, 0x70, 0x1a, 0x21, 0x13, 0x0c, 0x0e, 0x66, 0x07,
	0x9d, 0xec, 0xa0, 0xa3, 0x0e, 0x9a, 0x43, 0x3e, 0x63, 0xfe, 0x2a, 0x76, 0x51, 0x83, 0xb8, 0x88,
	0x52, 0x26, 0x90, 0x20, 0x8c, 0xf2, 0x04, 0x6a, 0x8e, 0xeb, 0x34, 0x76, 0xc9, 0x92, 0xc3, 0xfd,
	0x3e, 0xf3, 0x99, 0xfc, 0xe9, 0xc6, 0xbf, 0xd4, 0xaa, 0x55, 0x67, 0x3c, 0x60, 0xdc, 0xad, 0x21,
	0xbe, 0x0b, 0xad, 0x33, 0x42, 0xd5, 0xfe, 0x98, 0x4e, 0xc2, 0xc7, 0x14, 0x73, 0xa2, 0xdc, 0xd8,
	0x67, 0xc0, 0xe0, 0xe3, 0x38, 0xd7, 0x42, 0x7a, 0x6e, 0x11, 0x85, 0x28, 0xe0, 0x15, 0xbc, 0x16,
	0x61, 0x2e, 0x6c, 0x04, 0x86, 0xda, 0x6f, 0xf3, 0x06, 0xa3, 0x1c, 0xc3, 0x3b, 0xa0, 0xb7, 0x21,
	0x57, 0x8a, 0xc6, 0x88, 0x71, 0xe1, 0x78, 0x69, 0xd4, 0xd1, 0x14, 0xc6, 0x49, 0xc0, 0x73, 0xdd,
	0x9b, 0x3f, 0x87, 0x0b, 0x15, 0x05, 0xb4, 0xcb, 0x60, 0xa0, 0x55, 0x62, 0x3e, 0xa2, 0x9e, 0xd2,
	0x87, 0x83, 0xa0, 0x2f, 0x40, 0xe1, 0x2b, 0x2c, 0xaa, 0xc4, 0x93, 0x12, 0x7d, 0x95, 0x63, 0xc9,
	0xc2, 0x82, 0x67, 0x2f, 0x03, 0xb3, 0x1d, 0x52, 0x59, 0x9b, 0x01, 0xdd, 0x2f, 0x22, 0xea, 0x29,
	0x63, 0x17, 0xb5, 0xc6, 0x5a, 0x19, 0x24, 0xce, 0x1e, 0x6a, 0xc7, 0x9e, 0x15, 0x06, 0xef, 0xad,
	0x9b, 0xda, 0x55, 0xe2, 0xf3, 0xa0, 0x27, 0x26, 0x89, 0xcb, 0x72, 0x24, 0x9f, 0xba, 0xaa, 0x4e,
	0x02, 0xb7, 0x9f, 0x81, 0x11, 0x29, 0x73, 0x8f, 0x0b, 0x12, 0x20, 0x81, 0xbd, 0x0a, 0xf6, 0x70,
	0xd0, 0x90, 0xef, 0x29, 0xad, 0x91, 0x09, 0xb2, 0x92, 0xec, 0x2d, 0x11, 0x2c, 0x82, 0xa3, 0xc8,
	0xf3, 0x42, 0xcc, 0x79, 0xb1, 0x4b, 0x6e, 0xa5, 0x9f, 0xf6, 0x32, 0x38, 0xab, 0x61, 0x56, 0x31,
	0xa6, 0x40, 0x2f, 0x0a, 0x58, 0x44, 0x85, 0xca, 0x31, 0xe0, 0x24, 0x2f, 0xcf, 0x89, 0x5f, 0x5e,
	0xe6, 0xff, 0x2e, 0x23, 0x34, 0xbd, 0xd4, 0xe4, 0xb8, 0xfd, 0x14, 0x58, 0x92, 0x7d, 0x11, 0x53,
	0x8f, 0x50, 0xff, 0xbf, 0xb9, 0x5e, 0x02, 0xc3, 0x07, 0xf2, 0xfe, 0xab, 0xe7, 0x01, 0x70, 0x5a,
	0x72, 0x3f, 0x64, 0x5e, 0xb4, 0x8a, 0x9f, 0x08, 0x24, 0x70, 0x7a, 0xdb, 0xcf, 0x41, 0x71, 0xff,
	0x96, 0xd2, 0x9b, 0x05, 0x3d, 0x3c, 0x5e, 0x50, 0x0f, 0x6d, 0x4c, 0x7b, 0xd5, 0xf7, 0x93, 0xe6,
	0x4b, 0x18, 0x12, 0x5c, 0xe9, 0x43, 0x1f, 0xe8, 0x91, 0xec, 0xf0, 0xa3, 0x01, 0x4e, 0xed, 0xe9,
	0x34, 0x58, 0xd6, 0xf2, 0x69, 0x7a, 0xd7, 0x9c, 0xee, 0x00, 0x99, 0x64, 0xb2, 0xc7, 0xdf, 0x7e,
	0xff, 0xfd, 0xbe, 0xeb, 0x1c, 0x1c, 0x75, 0x75, 0x93, 0x24, 0x69, 0x60, 0xf8, 0xc5, 0x00, 0x27,
	0x5a, 0x9e, 0x30, 0xbc, 0x9e, 0x43, 0xb9, 0xa9, 0xdb, 0xcd, 0xa9, 0xdc, 0x38, 0xe5, 0x77, 0x56,
	0xfa, 0x9d, 0x86, 0x53, 0xee, 0x5f, 0x0d, 0xd7, 0x6a, 0xdc, 0x5c, 0xee, 0xeb, 0x6c, 0xb2, 0xbc,
	0x81, 0x9f, 0x0d, 0x70, 0xb2, 0xb5, 0x95, 0x61, 0x5e, 0x33, 0x59, 0xdd, 0xcb, 0xf9, 0x81, 0x2a,
	0xc6, 0xa4, 0x8c, 0xe1, 0xc0, 0x4b, 0x39, 0x62, 0x70, 0xf8, 0xcd, 0x00, 0xfd, 0xed, 0xba, 0x18,
	0xde, 0x3e, 0xdc, 0x88, 0x66, 0xae, 0x98, 0x33, 0x9d, 0xc2, 0x55, 0x9a, 0x1b, 0x32, 0xcd, 0x24,
	0x2c, 0x69, 0xd3, 0xe0, 0x94, 0xa2, 0x1a, 0x36, 0x59, 0xff, 0x6a, 0x00, 0xb8, 0xbf, 0xc7, 0xe1,
	0xcd, 0xc3, 0x2d, 0x1d, 0x38, 0x71, 0xcc, 0x5b, 0x9d, 0x81, 0x55, 0x9a, 0xb2, 0x4c, 0x53, 0x82,
	0x57, 0xf4, 0x2d, 0x91, 0x10, 0xb4, 0x64, 0xf9, 0x64, 0x80, 0xfe, 0xec, 0xc2, 0x9b, 0x26, 0x08,
	0x9c, 0x3c, 0xdc, 0xd0, 0xfe, 0x59, 0x64, 0x5e, 0xcb, 0x89, 0x52, 0xfe, 0x27, 0xa4, 0xff, 0x71,
	0x38, 0xa6, 0xf5, 0x1f, 0x48, 0x64, 0x55, 0x0e, 0xa6, 0x39, 0xb2, 0xb9, 0x6d, 0x19, 0x5b, 0xdb,
	0x96, 0xf1, 0x6b, 0xdb, 0x32, 0xde, 0xed, 0x58, 0x85, 0xad, 0x1d, 0xab, 0xf0, 0x63, 0xc7, 0x2a,
	0x2c, 0x3d, 0xf2, 0x89, 0x58, 0x89, 0x6a, 0x4e, 0x9d, 0x05, 0xee, 0x42, 0x4a, 0xf7, 0x00, 0xd5,
	0xf8, 0x2e, 0xf9, 0xe5, 0x3a, 0x0b, 0x71, 0xf3, 0xe7, 0x0a, 0x22, 0x54, 0xf1, 0xf3, 0x26, 0x65,
	0xb1, 0xd1, 0xc0, 0xbc, 0xd6, 0x2b, 0xff, 0x8d, 0x5c, 0xfd, 0x13, 0x00, 0x00, 0xff, 0xff, 0x23,
	0x60, 0x60, 0x91, 0x81, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Retrieves insurance params
	InsuranceParams(ctx context.Context, in *QueryInsuranceParamsRequest, opts ...grpc.CallOption) (*QueryInsuranceParamsResponse, error)
	// Retrieves individual insurance fund information from market id
	InsuranceFund(ctx context.Context, in *QueryInsuranceFundRequest, opts ...grpc.CallOption) (*QueryInsuranceFundResponse, error)
	// Retrieves all insurance funds
	InsuranceFunds(ctx context.Context, in *QueryInsuranceFundsRequest, opts ...grpc.CallOption) (*QueryInsuranceFundsResponse, error)
	// Retrives the value of insurance fund share token at current price (not
	// pending redemption)
	EstimatedRedemptions(ctx context.Context, in *QueryEstimatedRedemptionsRequest, opts ...grpc.CallOption) (*QueryEstimatedRedemptionsResponse, error)
	// Retrieves pending redemptions' share token at current price
	PendingRedemptions(ctx context.Context, in *QueryPendingRedemptionsRequest, opts ...grpc.CallOption) (*QueryPendingRedemptionsResponse, error)
	// Retrieves the entire insurance module's state
	InsuranceModuleState(ctx context.Context, in *QueryModuleStateRequest, opts ...grpc.CallOption) (*QueryModuleStateResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) InsuranceParams(ctx context.Context, in *QueryInsuranceParamsRequest, opts ...grpc.CallOption) (*QueryInsuranceParamsResponse, error) {
	out := new(QueryInsuranceParamsResponse)
	err := c.cc.Invoke(ctx, "/injective.insurance.v1beta1.Query/InsuranceParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InsuranceFund(ctx context.Context, in *QueryInsuranceFundRequest, opts ...grpc.CallOption) (*QueryInsuranceFundResponse, error) {
	out := new(QueryInsuranceFundResponse)
	err := c.cc.Invoke(ctx, "/injective.insurance.v1beta1.Query/InsuranceFund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InsuranceFunds(ctx context.Context, in *QueryInsuranceFundsRequest, opts ...grpc.CallOption) (*QueryInsuranceFundsResponse, error) {
	out := new(QueryInsuranceFundsResponse)
	err := c.cc.Invoke(ctx, "/injective.insurance.v1beta1.Query/InsuranceFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EstimatedRedemptions(ctx context.Context, in *QueryEstimatedRedemptionsRequest, opts ...grpc.CallOption) (*QueryEstimatedRedemptionsResponse, error) {
	out := new(QueryEstimatedRedemptionsResponse)
	err := c.cc.Invoke(ctx, "/injective.insurance.v1beta1.Query/EstimatedRedemptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingRedemptions(ctx context.Context, in *QueryPendingRedemptionsRequest, opts ...grpc.CallOption) (*QueryPendingRedemptionsResponse, error) {
	out := new(QueryPendingRedemptionsResponse)
	err := c.cc.Invoke(ctx, "/injective.insurance.v1beta1.Query/PendingRedemptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InsuranceModuleState(ctx context.Context, in *QueryModuleStateRequest, opts ...grpc.CallOption) (*QueryModuleStateResponse, error) {
	out := new(QueryModuleStateResponse)
	err := c.cc.Invoke(ctx, "/injective.insurance.v1beta1.Query/InsuranceModuleState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Retrieves insurance params
	InsuranceParams(context.Context, *QueryInsuranceParamsRequest) (*QueryInsuranceParamsResponse, error)
	// Retrieves individual insurance fund information from market id
	InsuranceFund(context.Context, *QueryInsuranceFundRequest) (*QueryInsuranceFundResponse, error)
	// Retrieves all insurance funds
	InsuranceFunds(context.Context, *QueryInsuranceFundsRequest) (*QueryInsuranceFundsResponse, error)
	// Retrives the value of insurance fund share token at current price (not
	// pending redemption)
	EstimatedRedemptions(context.Context, *QueryEstimatedRedemptionsRequest) (*QueryEstimatedRedemptionsResponse, error)
	// Retrieves pending redemptions' share token at current price
	PendingRedemptions(context.Context, *QueryPendingRedemptionsRequest) (*QueryPendingRedemptionsResponse, error)
	// Retrieves the entire insurance module's state
	InsuranceModuleState(context.Context, *QueryModuleStateRequest) (*QueryModuleStateResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) InsuranceParams(ctx context.Context, req *QueryInsuranceParamsRequest) (*QueryInsuranceParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsuranceParams not implemented")
}
func (*UnimplementedQueryServer) InsuranceFund(ctx context.Context, req *QueryInsuranceFundRequest) (*QueryInsuranceFundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsuranceFund not implemented")
}
func (*UnimplementedQueryServer) InsuranceFunds(ctx context.Context, req *QueryInsuranceFundsRequest) (*QueryInsuranceFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsuranceFunds not implemented")
}
func (*UnimplementedQueryServer) EstimatedRedemptions(ctx context.Context, req *QueryEstimatedRedemptionsRequest) (*QueryEstimatedRedemptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimatedRedemptions not implemented")
}
func (*UnimplementedQueryServer) PendingRedemptions(ctx context.Context, req *QueryPendingRedemptionsRequest) (*QueryPendingRedemptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingRedemptions not implemented")
}
func (*UnimplementedQueryServer) InsuranceModuleState(ctx context.Context, req *QueryModuleStateRequest) (*QueryModuleStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsuranceModuleState not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_InsuranceParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInsuranceParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InsuranceParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.insurance.v1beta1.Query/InsuranceParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InsuranceParams(ctx, req.(*QueryInsuranceParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InsuranceFund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInsuranceFundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InsuranceFund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.insurance.v1beta1.Query/InsuranceFund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InsuranceFund(ctx, req.(*QueryInsuranceFundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InsuranceFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInsuranceFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InsuranceFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.insurance.v1beta1.Query/InsuranceFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InsuranceFunds(ctx, req.(*QueryInsuranceFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EstimatedRedemptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEstimatedRedemptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EstimatedRedemptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.insurance.v1beta1.Query/EstimatedRedemptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EstimatedRedemptions(ctx, req.(*QueryEstimatedRedemptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingRedemptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingRedemptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingRedemptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.insurance.v1beta1.Query/PendingRedemptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingRedemptions(ctx, req.(*QueryPendingRedemptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InsuranceModuleState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryModuleStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InsuranceModuleState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.insurance.v1beta1.Query/InsuranceModuleState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InsuranceModuleState(ctx, req.(*QueryModuleStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "injective.insurance.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsuranceParams",
			Handler:    _Query_InsuranceParams_Handler,
		},
		{
			MethodName: "InsuranceFund",
			Handler:    _Query_InsuranceFund_Handler,
		},
		{
			MethodName: "InsuranceFunds",
			Handler:    _Query_InsuranceFunds_Handler,
		},
		{
			MethodName: "EstimatedRedemptions",
			Handler:    _Query_EstimatedRedemptions_Handler,
		},
		{
			MethodName: "PendingRedemptions",
			Handler:    _Query_PendingRedemptions_Handler,
		},
		{
			MethodName: "InsuranceModuleState",
			Handler:    _Query_InsuranceModuleState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "injective/insurance/v1beta1/query.proto",
}

func (m *QueryInsuranceParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInsuranceParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInsuranceParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryInsuranceParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInsuranceParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInsuranceParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryInsuranceFundRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInsuranceFundRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInsuranceFundRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryInsuranceFundResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInsuranceFundResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInsuranceFundResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fund != nil {
		{
			size, err := m.Fund.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryInsuranceFundsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInsuranceFundsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInsuranceFundsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryInsuranceFundsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInsuranceFundsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInsuranceFundsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Funds) > 0 {
		for iNdEx := len(m.Funds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Funds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryEstimatedRedemptionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimatedRedemptionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimatedRedemptionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEstimatedRedemptionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimatedRedemptionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimatedRedemptionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingRedemptionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingRedemptionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingRedemptionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingRedemptionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingRedemptionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingRedemptionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryModuleStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryModuleStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryModuleStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryModuleStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryModuleStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryModuleStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryInsuranceParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryInsuranceParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryInsuranceFundRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryInsuranceFundResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fund != nil {
		l = m.Fund.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryInsuranceFundsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryInsuranceFundsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Funds) > 0 {
		for _, e := range m.Funds {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryEstimatedRedemptionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEstimatedRedemptionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPendingRedemptionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPendingRedemptionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryModuleStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryModuleStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryInsuranceParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInsuranceParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInsuranceParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInsuranceParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInsuranceParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInsuranceParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInsuranceFundRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInsuranceFundRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInsuranceFundRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInsuranceFundResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInsuranceFundResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInsuranceFundResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fund", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fund == nil {
				m.Fund = &InsuranceFund{}
			}
			if err := m.Fund.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInsuranceFundsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInsuranceFundsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInsuranceFundsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInsuranceFundsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInsuranceFundsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInsuranceFundsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Funds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Funds = append(m.Funds, InsuranceFund{})
			if err := m.Funds[len(m.Funds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimatedRedemptionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimatedRedemptionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimatedRedemptionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimatedRedemptionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimatedRedemptionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimatedRedemptionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingRedemptionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingRedemptionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingRedemptionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingRedemptionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingRedemptionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingRedemptionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryModuleStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryModuleStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryModuleStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryModuleStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryModuleStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryModuleStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &GenesisState{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
