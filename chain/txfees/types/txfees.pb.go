// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: injective/txfees/v1beta1/txfees.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	golang_proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Params struct {
	MaxGasWantedPerTx                    uint64                      `protobuf:"varint,1,opt,name=max_gas_wanted_per_tx,json=maxGasWantedPerTx,proto3" json:"max_gas_wanted_per_tx,omitempty" yaml:"max_gas_wanted_per_tx"`
	HighGasTxThreshold                   uint64                      `protobuf:"varint,2,opt,name=high_gas_tx_threshold,json=highGasTxThreshold,proto3" json:"high_gas_tx_threshold,omitempty" yaml:"high_gas_tx_threshold"`
	MinGasPriceForHighGasTx              cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=min_gas_price_for_high_gas_tx,json=minGasPriceForHighGasTx,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"min_gas_price_for_high_gas_tx" yaml:"min_gas_price_for_high_gas_tx"`
	Mempool1559Enabled                   bool                        `protobuf:"varint,4,opt,name=mempool1559_enabled,json=mempool1559Enabled,proto3" json:"mempool1559_enabled,omitempty" yaml:"mempool1559_enabled"`
	MinGasPrice                          cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=min_gas_price,json=minGasPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"min_gas_price" yaml:"min_gas_price"`
	DefaultBaseFeeMultiplier             cosmossdk_io_math.LegacyDec `protobuf:"bytes,6,opt,name=default_base_fee_multiplier,json=defaultBaseFeeMultiplier,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"default_base_fee_multiplier" yaml:"default_base_fee_multiplier"`
	MaxBaseFeeMultiplier                 cosmossdk_io_math.LegacyDec `protobuf:"bytes,7,opt,name=max_base_fee_multiplier,json=maxBaseFeeMultiplier,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"max_base_fee_multiplier" yaml:"max_base_fee_multiplier"`
	ResetInterval                        int64                       `protobuf:"varint,8,opt,name=reset_interval,json=resetInterval,proto3" json:"reset_interval,omitempty" yaml:"reset_interval"`
	MaxBlockChangeRate                   cosmossdk_io_math.LegacyDec `protobuf:"bytes,9,opt,name=max_block_change_rate,json=maxBlockChangeRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"max_block_change_rate" yaml:"max_block_change_rate"`
	TargetBlockSpacePercentRate          cosmossdk_io_math.LegacyDec `protobuf:"bytes,10,opt,name=target_block_space_percent_rate,json=targetBlockSpacePercentRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"target_block_space_percent_rate" yaml:"target_block_space_percent_rate"`
	RecheckFeeLowBaseFee                 cosmossdk_io_math.LegacyDec `protobuf:"bytes,11,opt,name=recheck_fee_low_base_fee,json=recheckFeeLowBaseFee,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"recheck_fee_low_base_fee" yaml:"recheck_fee_low_base_fee"`
	RecheckFeeHighBaseFee                cosmossdk_io_math.LegacyDec `protobuf:"bytes,12,opt,name=recheck_fee_high_base_fee,json=recheckFeeHighBaseFee,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"recheck_fee_high_base_fee" yaml:"recheck_fee_high_base_fee"`
	RecheckFeeBaseFeeThresholdMultiplier cosmossdk_io_math.LegacyDec `protobuf:"bytes,13,opt,name=recheck_fee_base_fee_threshold_multiplier,json=recheckFeeBaseFeeThresholdMultiplier,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"recheck_fee_base_fee_threshold_multiplier" yaml:"recheck_fee_base_fee_threshold_multiplier"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_43abc7238d07d36b, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMaxGasWantedPerTx() uint64 {
	if m != nil {
		return m.MaxGasWantedPerTx
	}
	return 0
}

func (m *Params) GetHighGasTxThreshold() uint64 {
	if m != nil {
		return m.HighGasTxThreshold
	}
	return 0
}

func (m *Params) GetMempool1559Enabled() bool {
	if m != nil {
		return m.Mempool1559Enabled
	}
	return false
}

func (m *Params) GetResetInterval() int64 {
	if m != nil {
		return m.ResetInterval
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "injective.txfees.v1beta1.Params")
	golang_proto.RegisterType((*Params)(nil), "injective.txfees.v1beta1.Params")
}

func init() {
	proto.RegisterFile("injective/txfees/v1beta1/txfees.proto", fileDescriptor_43abc7238d07d36b)
}
func init() {
	golang_proto.RegisterFile("injective/txfees/v1beta1/txfees.proto", fileDescriptor_43abc7238d07d36b)
}

var fileDescriptor_43abc7238d07d36b = []byte{
	// 791 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x95, 0xcf, 0x6b, 0xe3, 0x46,
	0x14, 0xc7, 0xad, 0x26, 0x4d, 0x13, 0x25, 0x2e, 0x44, 0xb5, 0x1b, 0xe5, 0x47, 0x25, 0x23, 0xd2,
	0xe2, 0x16, 0x6a, 0x35, 0x94, 0x1c, 0x9a, 0x5e, 0x8a, 0xd3, 0xd8, 0x0d, 0x75, 0xa8, 0x51, 0x02,
	0x81, 0x5e, 0xc4, 0x58, 0x7e, 0x96, 0x94, 0x48, 0x1a, 0xa1, 0x19, 0x3b, 0x0a, 0x94, 0x42, 0x6f,
	0x65, 0xf7, 0xb2, 0xb0, 0xa7, 0xbd, 0xed, 0x9f, 0x90, 0x3f, 0x61, 0x8f, 0x39, 0xe6, 0xb8, 0xec,
	0xc1, 0x2c, 0xf1, 0x61, 0xf7, 0xec, 0xbf, 0x60, 0xd1, 0x48, 0x96, 0x95, 0xb5, 0xc9, 0xea, 0x62,
	0x34, 0xdf, 0xf7, 0xe6, 0x3b, 0x9f, 0xf1, 0xcc, 0x9b, 0xc7, 0x7f, 0x6b, 0x7b, 0x17, 0x60, 0x50,
	0x7b, 0x00, 0x2a, 0x0d, 0x7b, 0x00, 0x44, 0x1d, 0xec, 0x75, 0x80, 0xa2, 0xbd, 0x64, 0x58, 0xf3,
	0x03, 0x4c, 0xb1, 0x20, 0xa6, 0x69, 0xb5, 0x44, 0x4f, 0xd2, 0xb6, 0xd6, 0x91, 0x6b, 0x7b, 0x58,
	0x65, 0xbf, 0x71, 0xf2, 0x56, 0xc9, 0xc4, 0x26, 0x66, 0x9f, 0x6a, 0xf4, 0x95, 0xa8, 0x3b, 0x26,
	0xc6, 0xa6, 0x03, 0x2a, 0xf2, 0x6d, 0x15, 0x79, 0x1e, 0xa6, 0x88, 0xda, 0xd8, 0x4b, 0x16, 0x50,
	0x5e, 0xac, 0xf1, 0x4b, 0x6d, 0x14, 0x20, 0x97, 0x08, 0x1a, 0x5f, 0x76, 0x51, 0xa8, 0x9b, 0x88,
	0xe8, 0x57, 0xc8, 0xa3, 0xd0, 0xd5, 0x7d, 0x08, 0x74, 0x1a, 0x8a, 0x5c, 0x85, 0xab, 0x2e, 0xd6,
	0x2b, 0xe3, 0xa1, 0xbc, 0x73, 0x8d, 0x5c, 0xe7, 0x40, 0x99, 0x9b, 0xa6, 0x68, 0xeb, 0x2e, 0x0a,
	0x9b, 0x88, 0x9c, 0x33, 0xb5, 0x0d, 0xc1, 0x59, 0x28, 0x9c, 0xf2, 0x65, 0xcb, 0x36, 0x2d, 0x96,
	0x4d, 0x43, 0x9d, 0x5a, 0x01, 0x10, 0x0b, 0x3b, 0x5d, 0xf1, 0xb3, 0x8f, 0x3d, 0xe7, 0xa6, 0x29,
	0x9a, 0x10, 0xe9, 0x4d, 0x44, 0xce, 0xc2, 0xb3, 0x89, 0x28, 0x3c, 0xe5, 0xf8, 0x6f, 0x5c, 0xdb,
	0x63, 0xd9, 0x7e, 0x60, 0x1b, 0xa0, 0xf7, 0x70, 0xa0, 0x67, 0x0c, 0xc4, 0x85, 0x0a, 0x57, 0x5d,
	0xa9, 0xff, 0x79, 0x3b, 0x94, 0x0b, 0x6f, 0x86, 0xf2, 0xb6, 0x81, 0x89, 0x8b, 0x09, 0xe9, 0x5e,
	0xd6, 0x6c, 0xac, 0xba, 0x88, 0x5a, 0xb5, 0x16, 0x98, 0xc8, 0xb8, 0xfe, 0x1d, 0x8c, 0xf1, 0x50,
	0xde, 0x4d, 0x36, 0xf5, 0x98, 0xa3, 0xa2, 0x6d, 0xb8, 0xb6, 0xd7, 0x44, 0xa4, 0x1d, 0x45, 0x1b,
	0x38, 0xf8, 0x63, 0x82, 0x25, 0xfc, 0xc5, 0x7f, 0xe5, 0x82, 0xeb, 0x63, 0xec, 0xec, 0xed, 0xef,
	0xff, 0xa2, 0x83, 0x87, 0x3a, 0x0e, 0x74, 0xc5, 0xc5, 0x0a, 0x57, 0x5d, 0xae, 0x4b, 0xe3, 0xa1,
	0xbc, 0x95, 0xf8, 0xcf, 0x26, 0x29, 0x9a, 0x90, 0x51, 0x8f, 0x62, 0x51, 0xd0, 0xf9, 0xe2, 0x03,
	0x16, 0xf1, 0x73, 0xb6, 0x9b, 0x5f, 0xf3, 0xed, 0xa6, 0x34, 0x67, 0x37, 0x8a, 0xb6, 0x9a, 0xa1,
	0x17, 0xfe, 0xe7, 0xf8, 0xed, 0x2e, 0xf4, 0x50, 0xdf, 0xa1, 0x7a, 0x07, 0x11, 0xd0, 0x7b, 0x00,
	0xba, 0xdb, 0x77, 0xa8, 0xed, 0x3b, 0x36, 0x04, 0xe2, 0x12, 0x5b, 0xef, 0x38, 0xdf, 0x7a, 0x4a,
	0xbc, 0xde, 0x23, 0x7e, 0x8a, 0x26, 0x26, 0xd1, 0x3a, 0x22, 0xd0, 0x00, 0x38, 0x49, 0x43, 0xc2,
	0x3f, 0xfc, 0x46, 0x74, 0x99, 0xe6, 0x51, 0x7c, 0xc1, 0x28, 0x8e, 0xf2, 0x51, 0x48, 0xd3, 0x8b,
	0x39, 0x97, 0xa0, 0xe4, 0xa2, 0x70, 0x76, 0xf5, 0xdf, 0xf8, 0x2f, 0x03, 0x20, 0x40, 0x75, 0xdb,
	0xa3, 0x10, 0x0c, 0x90, 0x23, 0x2e, 0x57, 0xb8, 0xea, 0x42, 0x7d, 0x73, 0x3c, 0x94, 0xcb, 0xb1,
	0xe3, 0xc3, 0xb8, 0xa2, 0x15, 0x99, 0x70, 0x9c, 0x8c, 0x85, 0x41, 0x5c, 0x33, 0x1d, 0x07, 0x1b,
	0x97, 0xba, 0x61, 0x21, 0xcf, 0x04, 0x3d, 0x40, 0x14, 0xc4, 0x15, 0x46, 0x7f, 0x98, 0x8f, 0x3e,
	0x53, 0x56, 0x33, 0x4e, 0xd1, 0x1d, 0x41, 0x61, 0x3d, 0x92, 0x0f, 0x99, 0xaa, 0x21, 0x0a, 0xc2,
	0x73, 0x8e, 0x97, 0x29, 0x0a, 0x4c, 0xa0, 0xc9, 0x0c, 0xe2, 0x23, 0x03, 0xa2, 0x4a, 0x34, 0xc0,
	0xa3, 0x31, 0x02, 0xcf, 0x10, 0x4e, 0xf2, 0x21, 0x7c, 0x17, 0x23, 0x7c, 0xc2, 0x53, 0xd1, 0xb6,
	0xe3, 0x0c, 0xc6, 0x73, 0x1a, 0xc5, 0xdb, 0x71, 0x98, 0x51, 0xfd, 0xcb, 0x8b, 0x01, 0x18, 0x16,
	0x18, 0x97, 0xec, 0x00, 0x1c, 0x7c, 0x95, 0x9e, 0x86, 0xb8, 0xca, 0x68, 0x1a, 0xf9, 0x68, 0xe4,
	0xc9, 0x9f, 0x3f, 0xdf, 0x4c, 0xd1, 0x4a, 0x49, 0xa8, 0x01, 0xd0, 0xc2, 0x57, 0xc9, 0xc9, 0x0a,
	0xff, 0x71, 0xfc, 0x66, 0x76, 0x0e, 0x2b, 0xe0, 0x94, 0x60, 0x8d, 0x11, 0x34, 0xf3, 0x11, 0x54,
	0x66, 0x09, 0x1e, 0xb8, 0x29, 0x5a, 0x79, 0x8a, 0x10, 0x3d, 0x06, 0x13, 0x86, 0x1b, 0x8e, 0xff,
	0x3e, 0x3b, 0x2b, 0xbd, 0x8e, 0xe9, 0xa3, 0x96, 0xbd, 0xe4, 0x45, 0xc6, 0x74, 0x9e, 0x8f, 0xe9,
	0xa7, 0x59, 0xa6, 0x47, 0xdd, 0x15, 0x6d, 0x77, 0xca, 0x98, 0xf0, 0xa5, 0xaf, 0xe8, 0xb4, 0x0c,
	0x0e, 0xbe, 0x7e, 0xff, 0x52, 0xe6, 0x9e, 0xbc, 0xbb, 0xf9, 0xa1, 0x98, 0xb4, 0xa2, 0xb8, 0x21,
	0xd4, 0x2f, 0x6e, 0xef, 0x25, 0xee, 0xee, 0x5e, 0xe2, 0xde, 0xde, 0x4b, 0xdc, 0xb3, 0x91, 0x54,
	0x78, 0x35, 0x92, 0xb8, 0xbb, 0x91, 0x54, 0x78, 0x3d, 0x92, 0x0a, 0x7f, 0xb7, 0x4c, 0x9b, 0x5a,
	0xfd, 0x4e, 0xcd, 0xc0, 0xae, 0x7a, 0x3c, 0xe9, 0x52, 0x2d, 0xd4, 0x21, 0x6a, 0xda, 0xb3, 0x7e,
	0x34, 0x70, 0x00, 0xd9, 0xa1, 0x85, 0x6c, 0x4f, 0x75, 0x71, 0xb7, 0xef, 0x00, 0x99, 0xf4, 0x3d,
	0x7a, 0xed, 0x03, 0xe9, 0x2c, 0xb1, 0x76, 0xf4, 0xf3, 0x87, 0x00, 0x00, 0x00, 0xff, 0xff, 0x37,
	0x32, 0xb4, 0xd8, 0x18, 0x07, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxGasWantedPerTx != that1.MaxGasWantedPerTx {
		return false
	}
	if this.HighGasTxThreshold != that1.HighGasTxThreshold {
		return false
	}
	if !this.MinGasPriceForHighGasTx.Equal(that1.MinGasPriceForHighGasTx) {
		return false
	}
	if this.Mempool1559Enabled != that1.Mempool1559Enabled {
		return false
	}
	if !this.MinGasPrice.Equal(that1.MinGasPrice) {
		return false
	}
	if !this.DefaultBaseFeeMultiplier.Equal(that1.DefaultBaseFeeMultiplier) {
		return false
	}
	if !this.MaxBaseFeeMultiplier.Equal(that1.MaxBaseFeeMultiplier) {
		return false
	}
	if this.ResetInterval != that1.ResetInterval {
		return false
	}
	if !this.MaxBlockChangeRate.Equal(that1.MaxBlockChangeRate) {
		return false
	}
	if !this.TargetBlockSpacePercentRate.Equal(that1.TargetBlockSpacePercentRate) {
		return false
	}
	if !this.RecheckFeeLowBaseFee.Equal(that1.RecheckFeeLowBaseFee) {
		return false
	}
	if !this.RecheckFeeHighBaseFee.Equal(that1.RecheckFeeHighBaseFee) {
		return false
	}
	if !this.RecheckFeeBaseFeeThresholdMultiplier.Equal(that1.RecheckFeeBaseFeeThresholdMultiplier) {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.RecheckFeeBaseFeeThresholdMultiplier.Size()
		i -= size
		if _, err := m.RecheckFeeBaseFeeThresholdMultiplier.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTxfees(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size := m.RecheckFeeHighBaseFee.Size()
		i -= size
		if _, err := m.RecheckFeeHighBaseFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTxfees(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size := m.RecheckFeeLowBaseFee.Size()
		i -= size
		if _, err := m.RecheckFeeLowBaseFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTxfees(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.TargetBlockSpacePercentRate.Size()
		i -= size
		if _, err := m.TargetBlockSpacePercentRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTxfees(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.MaxBlockChangeRate.Size()
		i -= size
		if _, err := m.MaxBlockChangeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTxfees(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.ResetInterval != 0 {
		i = encodeVarintTxfees(dAtA, i, uint64(m.ResetInterval))
		i--
		dAtA[i] = 0x40
	}
	{
		size := m.MaxBaseFeeMultiplier.Size()
		i -= size
		if _, err := m.MaxBaseFeeMultiplier.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTxfees(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.DefaultBaseFeeMultiplier.Size()
		i -= size
		if _, err := m.DefaultBaseFeeMultiplier.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTxfees(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.MinGasPrice.Size()
		i -= size
		if _, err := m.MinGasPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTxfees(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.Mempool1559Enabled {
		i--
		if m.Mempool1559Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.MinGasPriceForHighGasTx.Size()
		i -= size
		if _, err := m.MinGasPriceForHighGasTx.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTxfees(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.HighGasTxThreshold != 0 {
		i = encodeVarintTxfees(dAtA, i, uint64(m.HighGasTxThreshold))
		i--
		dAtA[i] = 0x10
	}
	if m.MaxGasWantedPerTx != 0 {
		i = encodeVarintTxfees(dAtA, i, uint64(m.MaxGasWantedPerTx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxfees(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxfees(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxGasWantedPerTx != 0 {
		n += 1 + sovTxfees(uint64(m.MaxGasWantedPerTx))
	}
	if m.HighGasTxThreshold != 0 {
		n += 1 + sovTxfees(uint64(m.HighGasTxThreshold))
	}
	l = m.MinGasPriceForHighGasTx.Size()
	n += 1 + l + sovTxfees(uint64(l))
	if m.Mempool1559Enabled {
		n += 2
	}
	l = m.MinGasPrice.Size()
	n += 1 + l + sovTxfees(uint64(l))
	l = m.DefaultBaseFeeMultiplier.Size()
	n += 1 + l + sovTxfees(uint64(l))
	l = m.MaxBaseFeeMultiplier.Size()
	n += 1 + l + sovTxfees(uint64(l))
	if m.ResetInterval != 0 {
		n += 1 + sovTxfees(uint64(m.ResetInterval))
	}
	l = m.MaxBlockChangeRate.Size()
	n += 1 + l + sovTxfees(uint64(l))
	l = m.TargetBlockSpacePercentRate.Size()
	n += 1 + l + sovTxfees(uint64(l))
	l = m.RecheckFeeLowBaseFee.Size()
	n += 1 + l + sovTxfees(uint64(l))
	l = m.RecheckFeeHighBaseFee.Size()
	n += 1 + l + sovTxfees(uint64(l))
	l = m.RecheckFeeBaseFeeThresholdMultiplier.Size()
	n += 1 + l + sovTxfees(uint64(l))
	return n
}

func sovTxfees(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxfees(x uint64) (n int) {
	return sovTxfees(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxfees
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxGasWantedPerTx", wireType)
			}
			m.MaxGasWantedPerTx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxfees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxGasWantedPerTx |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighGasTxThreshold", wireType)
			}
			m.HighGasTxThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxfees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HighGasTxThreshold |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinGasPriceForHighGasTx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxfees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxfees
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxfees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinGasPriceForHighGasTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mempool1559Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxfees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mempool1559Enabled = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinGasPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxfees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxfees
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxfees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinGasPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBaseFeeMultiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxfees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxfees
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxfees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultBaseFeeMultiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBaseFeeMultiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxfees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxfees
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxfees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxBaseFeeMultiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetInterval", wireType)
			}
			m.ResetInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxfees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResetInterval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBlockChangeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxfees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxfees
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxfees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxBlockChangeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetBlockSpacePercentRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxfees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxfees
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxfees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TargetBlockSpacePercentRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecheckFeeLowBaseFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxfees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxfees
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxfees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RecheckFeeLowBaseFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecheckFeeHighBaseFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxfees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxfees
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxfees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RecheckFeeHighBaseFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecheckFeeBaseFeeThresholdMultiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxfees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxfees
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxfees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RecheckFeeBaseFeeThresholdMultiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxfees(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxfees
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxfees(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxfees
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxfees
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxfees
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxfees
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxfees
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxfees
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxfees        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxfees          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxfees = fmt.Errorf("proto: unexpected end of group")
)
