// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: injective/oracle/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryPythPriceRequest struct {
	PriceId string `protobuf:"bytes,1,opt,name=price_id,json=priceId,proto3" json:"price_id,omitempty"`
}

func (m *QueryPythPriceRequest) Reset()         { *m = QueryPythPriceRequest{} }
func (m *QueryPythPriceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPythPriceRequest) ProtoMessage()    {}
func (*QueryPythPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52f5d6f9962923ad, []int{0}
}
func (m *QueryPythPriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPythPriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPythPriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPythPriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPythPriceRequest.Merge(m, src)
}
func (m *QueryPythPriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPythPriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPythPriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPythPriceRequest proto.InternalMessageInfo

func (m *QueryPythPriceRequest) GetPriceId() string {
	if m != nil {
		return m.PriceId
	}
	return ""
}

type QueryPythPriceResponse struct {
	PriceState *PythPriceState `protobuf:"bytes,1,opt,name=price_state,json=priceState,proto3" json:"price_state,omitempty"`
}

func (m *QueryPythPriceResponse) Reset()         { *m = QueryPythPriceResponse{} }
func (m *QueryPythPriceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPythPriceResponse) ProtoMessage()    {}
func (*QueryPythPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52f5d6f9962923ad, []int{1}
}
func (m *QueryPythPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPythPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPythPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPythPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPythPriceResponse.Merge(m, src)
}
func (m *QueryPythPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPythPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPythPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPythPriceResponse proto.InternalMessageInfo

func (m *QueryPythPriceResponse) GetPriceState() *PythPriceState {
	if m != nil {
		return m.PriceState
	}
	return nil
}

// QueryOracleParamsRequest is the request type for the Query/OracleParams RPC
// method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52f5d6f9962923ad, []int{2}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryOracleParamsResponse is the response type for the Query/OracleParams RPC
// method.
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52f5d6f9962923ad, []int{3}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryBandRelayersRequest is the request type for the Query/BandRelayers RPC
// method.
type QueryBandRelayersRequest struct {
}

func (m *QueryBandRelayersRequest) Reset()         { *m = QueryBandRelayersRequest{} }
func (m *QueryBandRelayersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBandRelayersRequest) ProtoMessage()    {}
func (*QueryBandRelayersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52f5d6f9962923ad, []int{4}
}
func (m *QueryBandRelayersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBandRelayersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBandRelayersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBandRelayersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBandRelayersRequest.Merge(m, src)
}
func (m *QueryBandRelayersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBandRelayersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBandRelayersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBandRelayersRequest proto.InternalMessageInfo

// QueryBandRelayersResponse is the response type for the Query/BandRelayers RPC
// method.
type QueryBandRelayersResponse struct {
	Relayers []string `protobuf:"bytes,1,rep,name=relayers,proto3" json:"relayers,omitempty"`
}

func (m *QueryBandRelayersResponse) Reset()         { *m = QueryBandRelayersResponse{} }
func (m *QueryBandRelayersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBandRelayersResponse) ProtoMessage()    {}
func (*QueryBandRelayersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52f5d6f9962923ad, []int{5}
}
func (m *QueryBandRelayersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBandRelayersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBandRelayersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBandRelayersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBandRelayersResponse.Merge(m, src)
}
func (m *QueryBandRelayersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBandRelayersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBandRelayersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBandRelayersResponse proto.InternalMessageInfo

func (m *QueryBandRelayersResponse) GetRelayers() []string {
	if m != nil {
		return m.Relayers
	}
	return nil
}

// QueryBandPriceStatesRequest is the request type for the Query/BandPriceStates
// RPC method.
type QueryBandPriceStatesRequest struct {
}

func (m *QueryBandPriceStatesRequest) Reset()         { *m = QueryBandPriceStatesRequest{} }
func (m *QueryBandPriceStatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBandPriceStatesRequest) ProtoMessage()    {}
func (*QueryBandPriceStatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52f5d6f9962923ad, []int{6}
}
func (m *QueryBandPriceStatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBandPriceStatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBandPriceStatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBandPriceStatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBandPriceStatesRequest.Merge(m, src)
}
func (m *QueryBandPriceStatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBandPriceStatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBandPriceStatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBandPriceStatesRequest proto.InternalMessageInfo

// QueryBandPriceStatesResponse is the response type for the
// Query/BandPriceStates RPC method.
type QueryBandPriceStatesResponse struct {
	PriceStates []*BandPriceState `protobuf:"bytes,1,rep,name=price_states,json=priceStates,proto3" json:"price_states,omitempty"`
}

func (m *QueryBandPriceStatesResponse) Reset()         { *m = QueryBandPriceStatesResponse{} }
func (m *QueryBandPriceStatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBandPriceStatesResponse) ProtoMessage()    {}
func (*QueryBandPriceStatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52f5d6f9962923ad, []int{7}
}
func (m *QueryBandPriceStatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBandPriceStatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBandPriceStatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBandPriceStatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBandPriceStatesResponse.Merge(m, src)
}
func (m *QueryBandPriceStatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBandPriceStatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBandPriceStatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBandPriceStatesResponse proto.InternalMessageInfo

func (m *QueryBandPriceStatesResponse) GetPriceStates() []*BandPriceState {
	if m != nil {
		return m.PriceStates
	}
	return nil
}

// QueryBandIBCPriceStatesRequest is the request type for the
// Query/BandIBCPriceStates RPC method.
type QueryBandIBCPriceStatesRequest struct {
}

func (m *QueryBandIBCPriceStatesRequest) Reset()         { *m = QueryBandIBCPriceStatesRequest{} }
func (m *QueryBandIBCPriceStatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBandIBCPriceStatesRequest) ProtoMessage()    {}
func (*QueryBandIBCPriceStatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52f5d6f9962923ad, []int{8}
}
func (m *QueryBandIBCPriceStatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBandIBCPriceStatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBandIBCPriceStatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBandIBCPriceStatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBandIBCPriceStatesRequest.Merge(m, src)
}
func (m *QueryBandIBCPriceStatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBandIBCPriceStatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBandIBCPriceStatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBandIBCPriceStatesRequest proto.InternalMessageInfo

// QueryBandIBCPriceStatesResponse is the response type for the
// Query/BandIBCPriceStates RPC method.
type QueryBandIBCPriceStatesResponse struct {
	PriceStates []*BandPriceState `protobuf:"bytes,1,rep,name=price_states,json=priceStates,proto3" json:"price_states,omitempty"`
}

func (m *QueryBandIBCPriceStatesResponse) Reset()         { *m = QueryBandIBCPriceStatesResponse{} }
func (m *QueryBandIBCPriceStatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBandIBCPriceStatesResponse) ProtoMessage()    {}
func (*QueryBandIBCPriceStatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52f5d6f9962923ad, []int{9}
}
func (m *QueryBandIBCPriceStatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBandIBCPriceStatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBandIBCPriceStatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBandIBCPriceStatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBandIBCPriceStatesResponse.Merge(m, src)
}
func (m *QueryBandIBCPriceStatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBandIBCPriceStatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBandIBCPriceStatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBandIBCPriceStatesResponse proto.InternalMessageInfo

func (m *QueryBandIBCPriceStatesResponse) GetPriceStates() []*BandPriceState {
	if m != nil {
		return m.PriceStates
	}
	return nil
}

// QueryPriceFeedPriceStatesRequest is the request type for the
// Query/PriceFeedPriceStates RPC method.
type QueryPriceFeedPriceStatesRequest struct {
}

func (m *QueryPriceFeedPriceStatesRequest) Reset()         { *m = QueryPriceFeedPriceStatesRequest{} }
func (m *QueryPriceFeedPriceStatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPriceFeedPriceStatesRequest) ProtoMessage()    {}
func (*QueryPriceFeedPriceStatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52f5d6f9962923ad, []int{10}
}
func (m *QueryPriceFeedPriceStatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPriceFeedPriceStatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPriceFeedPriceStatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPriceFeedPriceStatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPriceFeedPriceStatesRequest.Merge(m, src)
}
func (m *QueryPriceFeedPriceStatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPriceFeedPriceStatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPriceFeedPriceStatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPriceFeedPriceStatesRequest proto.InternalMessageInfo

// QueryPriceFeedPriceStatesResponse is the response type for the
// Query/PriceFeedPriceStates RPC method.
type QueryPriceFeedPriceStatesResponse struct {
	PriceStates []*PriceFeedState `protobuf:"bytes,1,rep,name=price_states,json=priceStates,proto3" json:"price_states,omitempty"`
}

func (m *QueryPriceFeedPriceStatesResponse) Reset()         { *m = QueryPriceFeedPriceStatesResponse{} }
func (m *QueryPriceFeedPriceStatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPriceFeedPriceStatesResponse) ProtoMessage()    {}
func (*QueryPriceFeedPriceStatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52f5d6f9962923ad, []int{11}
}
func (m *QueryPriceFeedPriceStatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPriceFeedPriceStatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPriceFeedPriceStatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPriceFeedPriceStatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPriceFeedPriceStatesResponse.Merge(m, src)
}
func (m *QueryPriceFeedPriceStatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPriceFeedPriceStatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPriceFeedPriceStatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPriceFeedPriceStatesResponse proto.InternalMessageInfo

func (m *QueryPriceFeedPriceStatesResponse) GetPriceStates() []*PriceFeedState {
	if m != nil {
		return m.PriceStates
	}
	return nil
}

// QueryCoinbasePriceStatesRequest is the request type for the
// Query/CoinbasePriceStates RPC method.
type QueryCoinbasePriceStatesRequest struct {
}

func (m *QueryCoinbasePriceStatesRequest) Reset()         { *m = QueryCoinbasePriceStatesRequest{} }
func (m *QueryCoinbasePriceStatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCoinbasePriceStatesRequest) ProtoMessage()    {}
func (*QueryCoinbasePriceStatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52f5d6f9962923ad, []int{12}
}
func (m *QueryCoinbasePriceStatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCoinbasePriceStatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCoinbasePriceStatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCoinbasePriceStatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCoinbasePriceStatesRequest.Merge(m, src)
}
func (m *QueryCoinbasePriceStatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCoinbasePriceStatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCoinbasePriceStatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCoinbasePriceStatesRequest proto.InternalMessageInfo

// QueryCoinbasePriceStatesResponse is the response type for the
// Query/CoinbasePriceStates RPC method.
type QueryCoinbasePriceStatesResponse struct {
	PriceStates []*CoinbasePriceState `protobuf:"bytes,1,rep,name=price_states,json=priceStates,proto3" json:"price_states,omitempty"`
}

func (m *QueryCoinbasePriceStatesResponse) Reset()         { *m = QueryCoinbasePriceStatesResponse{} }
func (m *QueryCoinbasePriceStatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCoinbasePriceStatesResponse) ProtoMessage()    {}
func (*QueryCoinbasePriceStatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52f5d6f9962923ad, []int{13}
}
func (m *QueryCoinbasePriceStatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCoinbasePriceStatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCoinbasePriceStatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCoinbasePriceStatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCoinbasePriceStatesResponse.Merge(m, src)
}
func (m *QueryCoinbasePriceStatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCoinbasePriceStatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCoinbasePriceStatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCoinbasePriceStatesResponse proto.InternalMessageInfo

func (m *QueryCoinbasePriceStatesResponse) GetPriceStates() []*CoinbasePriceState {
	if m != nil {
		return m.PriceStates
	}
	return nil
}

// QueryPythPriceStatesRequest is the request type for the
// Query/CoinbasePriceStates RPC method.
type QueryPythPriceStatesRequest struct {
}

func (m *QueryPythPriceStatesRequest) Reset()         { *m = QueryPythPriceStatesRequest{} }
func (m *QueryPythPriceStatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPythPriceStatesRequest) ProtoMessage()    {}
func (*QueryPythPriceStatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52f5d6f9962923ad, []int{14}
}
func (m *QueryPythPriceStatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPythPriceStatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPythPriceStatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPythPriceStatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPythPriceStatesRequest.Merge(m, src)
}
func (m *QueryPythPriceStatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPythPriceStatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPythPriceStatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPythPriceStatesRequest proto.InternalMessageInfo

// QueryPythPriceStatesResponse is the response type for the
// Query/CoinbasePriceStates RPC method.
type QueryPythPriceStatesResponse struct {
	PriceStates []*PythPriceState `protobuf:"bytes,1,rep,name=price_states,json=priceStates,proto3" json:"price_states,omitempty"`
}

func (m *QueryPythPriceStatesResponse) Reset()         { *m = QueryPythPriceStatesResponse{} }
func (m *QueryPythPriceStatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPythPriceStatesResponse) ProtoMessage()    {}
func (*QueryPythPriceStatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52f5d6f9962923ad, []int{15}
}
func (m *QueryPythPriceStatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPythPriceStatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPythPriceStatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPythPriceStatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPythPriceStatesResponse.Merge(m, src)
}
func (m *QueryPythPriceStatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPythPriceStatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPythPriceStatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPythPriceStatesResponse proto.InternalMessageInfo

func (m *QueryPythPriceStatesResponse) GetPriceStates() []*PythPriceState {
	if m != nil {
		return m.PriceStates
	}
	return nil
}

// QueryProviderPriceStateRequest is the request type for the
// Query/ProviderPriceState RPC method.
type QueryProviderPriceStateRequest struct {
	Provider string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	Symbol   string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (m *QueryProviderPriceStateRequest) Reset()         { *m = QueryProviderPriceStateRequest{} }
func (m *QueryProviderPriceStateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProviderPriceStateRequest) ProtoMessage()    {}
func (*QueryProviderPriceStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52f5d6f9962923ad, []int{16}
}
func (m *QueryProviderPriceStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProviderPriceStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProviderPriceStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProviderPriceStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProviderPriceStateRequest.Merge(m, src)
}
func (m *QueryProviderPriceStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProviderPriceStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProviderPriceStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProviderPriceStateRequest proto.InternalMessageInfo

func (m *QueryProviderPriceStateRequest) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *QueryProviderPriceStateRequest) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

// QueryProviderPriceStatesResponse is the response type for the
// Query/ProviderPriceStates RPC method.
type QueryProviderPriceStateResponse struct {
	PriceState *PriceState `protobuf:"bytes,1,opt,name=price_state,json=priceState,proto3" json:"price_state,omitempty"`
}

func (m *QueryProviderPriceStateResponse) Reset()         { *m = QueryProviderPriceStateResponse{} }
func (m *QueryProviderPriceStateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProviderPriceStateResponse) ProtoMessage()    {}
func (*QueryProviderPriceStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52f5d6f9962923ad, []int{17}
}
func (m *QueryProviderPriceStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProviderPriceStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProviderPriceStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProviderPriceStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProviderPriceStateResponse.Merge(m, src)
}
func (m *QueryProviderPriceStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProviderPriceStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProviderPriceStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProviderPriceStateResponse proto.InternalMessageInfo

func (m *QueryProviderPriceStateResponse) GetPriceState() *PriceState {
	if m != nil {
		return m.PriceState
	}
	return nil
}

// QueryModuleStateRequest is the request type for the Query/OracleModuleState
// RPC method.
type QueryModuleStateRequest struct {
}

func (m *QueryModuleStateRequest) Reset()         { *m = QueryModuleStateRequest{} }
func (m *QueryModuleStateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryModuleStateRequest) ProtoMessage()    {}
func (*QueryModuleStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52f5d6f9962923ad, []int{18}
}
func (m *QueryModuleStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryModuleStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryModuleStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryModuleStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryModuleStateRequest.Merge(m, src)
}
func (m *QueryModuleStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryModuleStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryModuleStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryModuleStateRequest proto.InternalMessageInfo

// QueryModuleStateResponse is the response type for the Query/OracleModuleState
// RPC method.
type QueryModuleStateResponse struct {
	State *GenesisState `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *QueryModuleStateResponse) Reset()         { *m = QueryModuleStateResponse{} }
func (m *QueryModuleStateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryModuleStateResponse) ProtoMessage()    {}
func (*QueryModuleStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52f5d6f9962923ad, []int{19}
}
func (m *QueryModuleStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryModuleStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryModuleStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryModuleStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryModuleStateResponse.Merge(m, src)
}
func (m *QueryModuleStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryModuleStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryModuleStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryModuleStateResponse proto.InternalMessageInfo

func (m *QueryModuleStateResponse) GetState() *GenesisState {
	if m != nil {
		return m.State
	}
	return nil
}

type QueryHistoricalPriceRecordsRequest struct {
	Oracle   OracleType `protobuf:"varint,1,opt,name=oracle,proto3,enum=injective.oracle.v1beta1.OracleType" json:"oracle,omitempty"`
	SymbolId string     `protobuf:"bytes,2,opt,name=symbol_id,json=symbolId,proto3" json:"symbol_id,omitempty"`
}

func (m *QueryHistoricalPriceRecordsRequest) Reset()         { *m = QueryHistoricalPriceRecordsRequest{} }
func (m *QueryHistoricalPriceRecordsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryHistoricalPriceRecordsRequest) ProtoMessage()    {}
func (*QueryHistoricalPriceRecordsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52f5d6f9962923ad, []int{20}
}
func (m *QueryHistoricalPriceRecordsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHistoricalPriceRecordsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHistoricalPriceRecordsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHistoricalPriceRecordsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHistoricalPriceRecordsRequest.Merge(m, src)
}
func (m *QueryHistoricalPriceRecordsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHistoricalPriceRecordsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHistoricalPriceRecordsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHistoricalPriceRecordsRequest proto.InternalMessageInfo

func (m *QueryHistoricalPriceRecordsRequest) GetOracle() OracleType {
	if m != nil {
		return m.Oracle
	}
	return OracleType_Unspecified
}

func (m *QueryHistoricalPriceRecordsRequest) GetSymbolId() string {
	if m != nil {
		return m.SymbolId
	}
	return ""
}

type QueryHistoricalPriceRecordsResponse struct {
	PriceRecords []*PriceRecords `protobuf:"bytes,1,rep,name=price_records,json=priceRecords,proto3" json:"price_records,omitempty"`
}

func (m *QueryHistoricalPriceRecordsResponse) Reset()         { *m = QueryHistoricalPriceRecordsResponse{} }
func (m *QueryHistoricalPriceRecordsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryHistoricalPriceRecordsResponse) ProtoMessage()    {}
func (*QueryHistoricalPriceRecordsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52f5d6f9962923ad, []int{21}
}
func (m *QueryHistoricalPriceRecordsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHistoricalPriceRecordsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHistoricalPriceRecordsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHistoricalPriceRecordsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHistoricalPriceRecordsResponse.Merge(m, src)
}
func (m *QueryHistoricalPriceRecordsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryHistoricalPriceRecordsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHistoricalPriceRecordsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHistoricalPriceRecordsResponse proto.InternalMessageInfo

func (m *QueryHistoricalPriceRecordsResponse) GetPriceRecords() []*PriceRecords {
	if m != nil {
		return m.PriceRecords
	}
	return nil
}

type OracleHistoryOptions struct {
	// MaxAge restricts the oracle price records oldest age in seconds from the
	// current block time to consider. A value of 0 means use all the records
	// present on the chain.
	MaxAge uint64 `protobuf:"varint,1,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
	// If IncludeRawHistory is true, the raw underlying data used for the
	// computation is included in the response
	IncludeRawHistory bool `protobuf:"varint,2,opt,name=include_raw_history,json=includeRawHistory,proto3" json:"include_raw_history,omitempty"`
	// If IncludeMetadata is true, metadata on the computation is included in the
	// response
	IncludeMetadata bool `protobuf:"varint,3,opt,name=include_metadata,json=includeMetadata,proto3" json:"include_metadata,omitempty"`
}

func (m *OracleHistoryOptions) Reset()         { *m = OracleHistoryOptions{} }
func (m *OracleHistoryOptions) String() string { return proto.CompactTextString(m) }
func (*OracleHistoryOptions) ProtoMessage()    {}
func (*OracleHistoryOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_52f5d6f9962923ad, []int{22}
}
func (m *OracleHistoryOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OracleHistoryOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OracleHistoryOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OracleHistoryOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleHistoryOptions.Merge(m, src)
}
func (m *OracleHistoryOptions) XXX_Size() int {
	return m.Size()
}
func (m *OracleHistoryOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleHistoryOptions.DiscardUnknown(m)
}

var xxx_messageInfo_OracleHistoryOptions proto.InternalMessageInfo

func (m *OracleHistoryOptions) GetMaxAge() uint64 {
	if m != nil {
		return m.MaxAge
	}
	return 0
}

func (m *OracleHistoryOptions) GetIncludeRawHistory() bool {
	if m != nil {
		return m.IncludeRawHistory
	}
	return false
}

func (m *OracleHistoryOptions) GetIncludeMetadata() bool {
	if m != nil {
		return m.IncludeMetadata
	}
	return false
}

// QueryOracleVolatilityRequest is the request type for Query/OracleVolatility
// RPC method.
type QueryOracleVolatilityRequest struct {
	BaseInfo             *OracleInfo           `protobuf:"bytes,1,opt,name=base_info,json=baseInfo,proto3" json:"base_info,omitempty"`
	QuoteInfo            *OracleInfo           `protobuf:"bytes,2,opt,name=quote_info,json=quoteInfo,proto3" json:"quote_info,omitempty"`
	OracleHistoryOptions *OracleHistoryOptions `protobuf:"bytes,3,opt,name=oracle_history_options,json=oracleHistoryOptions,proto3" json:"oracle_history_options,omitempty"`
}

func (m *QueryOracleVolatilityRequest) Reset()         { *m = QueryOracleVolatilityRequest{} }
func (m *QueryOracleVolatilityRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOracleVolatilityRequest) ProtoMessage()    {}
func (*QueryOracleVolatilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52f5d6f9962923ad, []int{23}
}
func (m *QueryOracleVolatilityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleVolatilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleVolatilityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleVolatilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleVolatilityRequest.Merge(m, src)
}
func (m *QueryOracleVolatilityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleVolatilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleVolatilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleVolatilityRequest proto.InternalMessageInfo

func (m *QueryOracleVolatilityRequest) GetBaseInfo() *OracleInfo {
	if m != nil {
		return m.BaseInfo
	}
	return nil
}

func (m *QueryOracleVolatilityRequest) GetQuoteInfo() *OracleInfo {
	if m != nil {
		return m.QuoteInfo
	}
	return nil
}

func (m *QueryOracleVolatilityRequest) GetOracleHistoryOptions() *OracleHistoryOptions {
	if m != nil {
		return m.OracleHistoryOptions
	}
	return nil
}

// QueryOracleVolatilityResponse is the response type for Query/OracleVolatility
// RPC method.
type QueryOracleVolatilityResponse struct {
	Volatility      *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=volatility,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"volatility,omitempty"`
	HistoryMetadata *MetadataStatistics                     `protobuf:"bytes,2,opt,name=history_metadata,json=historyMetadata,proto3" json:"history_metadata,omitempty"`
	RawHistory      []*PriceRecord                          `protobuf:"bytes,3,rep,name=raw_history,json=rawHistory,proto3" json:"raw_history,omitempty"`
}

func (m *QueryOracleVolatilityResponse) Reset()         { *m = QueryOracleVolatilityResponse{} }
func (m *QueryOracleVolatilityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOracleVolatilityResponse) ProtoMessage()    {}
func (*QueryOracleVolatilityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52f5d6f9962923ad, []int{24}
}
func (m *QueryOracleVolatilityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleVolatilityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleVolatilityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleVolatilityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleVolatilityResponse.Merge(m, src)
}
func (m *QueryOracleVolatilityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleVolatilityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleVolatilityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleVolatilityResponse proto.InternalMessageInfo

func (m *QueryOracleVolatilityResponse) GetHistoryMetadata() *MetadataStatistics {
	if m != nil {
		return m.HistoryMetadata
	}
	return nil
}

func (m *QueryOracleVolatilityResponse) GetRawHistory() []*PriceRecord {
	if m != nil {
		return m.RawHistory
	}
	return nil
}

type QueryOracleProvidersInfoRequest struct {
}

func (m *QueryOracleProvidersInfoRequest) Reset()         { *m = QueryOracleProvidersInfoRequest{} }
func (m *QueryOracleProvidersInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOracleProvidersInfoRequest) ProtoMessage()    {}
func (*QueryOracleProvidersInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52f5d6f9962923ad, []int{25}
}
func (m *QueryOracleProvidersInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleProvidersInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleProvidersInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleProvidersInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleProvidersInfoRequest.Merge(m, src)
}
func (m *QueryOracleProvidersInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleProvidersInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleProvidersInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleProvidersInfoRequest proto.InternalMessageInfo

type QueryOracleProvidersInfoResponse struct {
	Providers []*ProviderInfo `protobuf:"bytes,1,rep,name=providers,proto3" json:"providers,omitempty"`
}

func (m *QueryOracleProvidersInfoResponse) Reset()         { *m = QueryOracleProvidersInfoResponse{} }
func (m *QueryOracleProvidersInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOracleProvidersInfoResponse) ProtoMessage()    {}
func (*QueryOracleProvidersInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52f5d6f9962923ad, []int{26}
}
func (m *QueryOracleProvidersInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleProvidersInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleProvidersInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleProvidersInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleProvidersInfoResponse.Merge(m, src)
}
func (m *QueryOracleProvidersInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleProvidersInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleProvidersInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleProvidersInfoResponse proto.InternalMessageInfo

func (m *QueryOracleProvidersInfoResponse) GetProviders() []*ProviderInfo {
	if m != nil {
		return m.Providers
	}
	return nil
}

type QueryOracleProviderPricesRequest struct {
	Provider string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (m *QueryOracleProviderPricesRequest) Reset()         { *m = QueryOracleProviderPricesRequest{} }
func (m *QueryOracleProviderPricesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOracleProviderPricesRequest) ProtoMessage()    {}
func (*QueryOracleProviderPricesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52f5d6f9962923ad, []int{27}
}
func (m *QueryOracleProviderPricesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleProviderPricesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleProviderPricesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleProviderPricesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleProviderPricesRequest.Merge(m, src)
}
func (m *QueryOracleProviderPricesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleProviderPricesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleProviderPricesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleProviderPricesRequest proto.InternalMessageInfo

func (m *QueryOracleProviderPricesRequest) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

type QueryOracleProviderPricesResponse struct {
	ProviderState []*ProviderState `protobuf:"bytes,1,rep,name=providerState,proto3" json:"providerState,omitempty"`
}

func (m *QueryOracleProviderPricesResponse) Reset()         { *m = QueryOracleProviderPricesResponse{} }
func (m *QueryOracleProviderPricesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOracleProviderPricesResponse) ProtoMessage()    {}
func (*QueryOracleProviderPricesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52f5d6f9962923ad, []int{28}
}
func (m *QueryOracleProviderPricesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleProviderPricesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleProviderPricesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleProviderPricesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleProviderPricesResponse.Merge(m, src)
}
func (m *QueryOracleProviderPricesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleProviderPricesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleProviderPricesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleProviderPricesResponse proto.InternalMessageInfo

func (m *QueryOracleProviderPricesResponse) GetProviderState() []*ProviderState {
	if m != nil {
		return m.ProviderState
	}
	return nil
}

// QueryOraclePriceRequest is the request type for the Query/OraclePrice RPC
// method.
type QueryOraclePriceRequest struct {
	OracleType OracleType `protobuf:"varint,1,opt,name=oracle_type,json=oracleType,proto3,enum=injective.oracle.v1beta1.OracleType" json:"oracle_type,omitempty"`
	Base       string     `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`
	Quote      string     `protobuf:"bytes,3,opt,name=quote,proto3" json:"quote,omitempty"`
}

func (m *QueryOraclePriceRequest) Reset()         { *m = QueryOraclePriceRequest{} }
func (m *QueryOraclePriceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOraclePriceRequest) ProtoMessage()    {}
func (*QueryOraclePriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52f5d6f9962923ad, []int{29}
}
func (m *QueryOraclePriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOraclePriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOraclePriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOraclePriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOraclePriceRequest.Merge(m, src)
}
func (m *QueryOraclePriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOraclePriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOraclePriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOraclePriceRequest proto.InternalMessageInfo

func (m *QueryOraclePriceRequest) GetOracleType() OracleType {
	if m != nil {
		return m.OracleType
	}
	return OracleType_Unspecified
}

func (m *QueryOraclePriceRequest) GetBase() string {
	if m != nil {
		return m.Base
	}
	return ""
}

func (m *QueryOraclePriceRequest) GetQuote() string {
	if m != nil {
		return m.Quote
	}
	return ""
}

type PricePairState struct {
	PairPrice            github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=pair_price,json=pairPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"pair_price"`
	BasePrice            github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=base_price,json=basePrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"base_price"`
	QuotePrice           github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=quote_price,json=quotePrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"quote_price"`
	BaseCumulativePrice  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=base_cumulative_price,json=baseCumulativePrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"base_cumulative_price"`
	QuoteCumulativePrice github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=quote_cumulative_price,json=quoteCumulativePrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"quote_cumulative_price"`
	BaseTimestamp        int64                                  `protobuf:"varint,6,opt,name=base_timestamp,json=baseTimestamp,proto3" json:"base_timestamp,omitempty"`
	QuoteTimestamp       int64                                  `protobuf:"varint,7,opt,name=quote_timestamp,json=quoteTimestamp,proto3" json:"quote_timestamp,omitempty"`
}

func (m *PricePairState) Reset()         { *m = PricePairState{} }
func (m *PricePairState) String() string { return proto.CompactTextString(m) }
func (*PricePairState) ProtoMessage()    {}
func (*PricePairState) Descriptor() ([]byte, []int) {
	return fileDescriptor_52f5d6f9962923ad, []int{30}
}
func (m *PricePairState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PricePairState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PricePairState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PricePairState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PricePairState.Merge(m, src)
}
func (m *PricePairState) XXX_Size() int {
	return m.Size()
}
func (m *PricePairState) XXX_DiscardUnknown() {
	xxx_messageInfo_PricePairState.DiscardUnknown(m)
}

var xxx_messageInfo_PricePairState proto.InternalMessageInfo

func (m *PricePairState) GetBaseTimestamp() int64 {
	if m != nil {
		return m.BaseTimestamp
	}
	return 0
}

func (m *PricePairState) GetQuoteTimestamp() int64 {
	if m != nil {
		return m.QuoteTimestamp
	}
	return 0
}

// QueryOraclePriceResponse is the response type for the Query/OraclePrice RPC
// method.
type QueryOraclePriceResponse struct {
	PricePairState *PricePairState `protobuf:"bytes,1,opt,name=price_pair_state,json=pricePairState,proto3" json:"price_pair_state,omitempty"`
}

func (m *QueryOraclePriceResponse) Reset()         { *m = QueryOraclePriceResponse{} }
func (m *QueryOraclePriceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOraclePriceResponse) ProtoMessage()    {}
func (*QueryOraclePriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52f5d6f9962923ad, []int{31}
}
func (m *QueryOraclePriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOraclePriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOraclePriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOraclePriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOraclePriceResponse.Merge(m, src)
}
func (m *QueryOraclePriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOraclePriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOraclePriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOraclePriceResponse proto.InternalMessageInfo

func (m *QueryOraclePriceResponse) GetPricePairState() *PricePairState {
	if m != nil {
		return m.PricePairState
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryPythPriceRequest)(nil), "injective.oracle.v1beta1.QueryPythPriceRequest")
	proto.RegisterType((*QueryPythPriceResponse)(nil), "injective.oracle.v1beta1.QueryPythPriceResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "injective.oracle.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "injective.oracle.v1beta1.QueryParamsResponse")
	proto.RegisterType((*QueryBandRelayersRequest)(nil), "injective.oracle.v1beta1.QueryBandRelayersRequest")
	proto.RegisterType((*QueryBandRelayersResponse)(nil), "injective.oracle.v1beta1.QueryBandRelayersResponse")
	proto.RegisterType((*QueryBandPriceStatesRequest)(nil), "injective.oracle.v1beta1.QueryBandPriceStatesRequest")
	proto.RegisterType((*QueryBandPriceStatesResponse)(nil), "injective.oracle.v1beta1.QueryBandPriceStatesResponse")
	proto.RegisterType((*QueryBandIBCPriceStatesRequest)(nil), "injective.oracle.v1beta1.QueryBandIBCPriceStatesRequest")
	proto.RegisterType((*QueryBandIBCPriceStatesResponse)(nil), "injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse")
	proto.RegisterType((*QueryPriceFeedPriceStatesRequest)(nil), "injective.oracle.v1beta1.QueryPriceFeedPriceStatesRequest")
	proto.RegisterType((*QueryPriceFeedPriceStatesResponse)(nil), "injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse")
	proto.RegisterType((*QueryCoinbasePriceStatesRequest)(nil), "injective.oracle.v1beta1.QueryCoinbasePriceStatesRequest")
	proto.RegisterType((*QueryCoinbasePriceStatesResponse)(nil), "injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse")
	proto.RegisterType((*QueryPythPriceStatesRequest)(nil), "injective.oracle.v1beta1.QueryPythPriceStatesRequest")
	proto.RegisterType((*QueryPythPriceStatesResponse)(nil), "injective.oracle.v1beta1.QueryPythPriceStatesResponse")
	proto.RegisterType((*QueryProviderPriceStateRequest)(nil), "injective.oracle.v1beta1.QueryProviderPriceStateRequest")
	proto.RegisterType((*QueryProviderPriceStateResponse)(nil), "injective.oracle.v1beta1.QueryProviderPriceStateResponse")
	proto.RegisterType((*QueryModuleStateRequest)(nil), "injective.oracle.v1beta1.QueryModuleStateRequest")
	proto.RegisterType((*QueryModuleStateResponse)(nil), "injective.oracle.v1beta1.QueryModuleStateResponse")
	proto.RegisterType((*QueryHistoricalPriceRecordsRequest)(nil), "injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest")
	proto.RegisterType((*QueryHistoricalPriceRecordsResponse)(nil), "injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse")
	proto.RegisterType((*OracleHistoryOptions)(nil), "injective.oracle.v1beta1.OracleHistoryOptions")
	proto.RegisterType((*QueryOracleVolatilityRequest)(nil), "injective.oracle.v1beta1.QueryOracleVolatilityRequest")
	proto.RegisterType((*QueryOracleVolatilityResponse)(nil), "injective.oracle.v1beta1.QueryOracleVolatilityResponse")
	proto.RegisterType((*QueryOracleProvidersInfoRequest)(nil), "injective.oracle.v1beta1.QueryOracleProvidersInfoRequest")
	proto.RegisterType((*QueryOracleProvidersInfoResponse)(nil), "injective.oracle.v1beta1.QueryOracleProvidersInfoResponse")
	proto.RegisterType((*QueryOracleProviderPricesRequest)(nil), "injective.oracle.v1beta1.QueryOracleProviderPricesRequest")
	proto.RegisterType((*QueryOracleProviderPricesResponse)(nil), "injective.oracle.v1beta1.QueryOracleProviderPricesResponse")
	proto.RegisterType((*QueryOraclePriceRequest)(nil), "injective.oracle.v1beta1.QueryOraclePriceRequest")
	proto.RegisterType((*PricePairState)(nil), "injective.oracle.v1beta1.PricePairState")
	proto.RegisterType((*QueryOraclePriceResponse)(nil), "injective.oracle.v1beta1.QueryOraclePriceResponse")
}

func init() {
	proto.RegisterFile("injective/oracle/v1beta1/query.proto", fileDescriptor_52f5d6f9962923ad)
}

var fileDescriptor_52f5d6f9962923ad = []byte{
	// 1657 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x59, 0xdf, 0x6f, 0xd3, 0xd6,
	0x17, 0xaf, 0xfb, 0x8b, 0xe6, 0x04, 0xda, 0x72, 0x1b, 0x4a, 0x31, 0x90, 0x06, 0x43, 0x7f, 0xf0,
	0x85, 0xc6, 0x34, 0x7c, 0x37, 0x18, 0x63, 0x48, 0xb4, 0xc0, 0x56, 0x46, 0xd5, 0xce, 0xb0, 0x1f,
	0xda, 0x4b, 0x74, 0xe3, 0xdc, 0x26, 0x1e, 0x89, 0xaf, 0xb1, 0x9d, 0x42, 0x84, 0xd0, 0xa4, 0x3d,
	0x4e, 0x93, 0x36, 0x69, 0x4f, 0x93, 0xb6, 0xf7, 0x69, 0x6f, 0x7b, 0xd8, 0xc3, 0x5e, 0x27, 0x4d,
	0x62, 0x6f, 0x4c, 0xd3, 0xa4, 0x89, 0x07, 0x34, 0xc1, 0xfe, 0x90, 0xc9, 0xf7, 0x5e, 0xbb, 0x76,
	0x63, 0xc7, 0x49, 0xa4, 0x3d, 0x35, 0xbe, 0x3e, 0xe7, 0x73, 0x3e, 0xe7, 0xf8, 0x9c, 0x63, 0x7f,
	0x54, 0x38, 0x63, 0x98, 0x9f, 0x10, 0xdd, 0x35, 0x76, 0x89, 0x4a, 0x6d, 0xac, 0x37, 0x88, 0xba,
	0xbb, 0x5a, 0x21, 0x2e, 0x5e, 0x55, 0x1f, 0xb4, 0x88, 0xdd, 0x2e, 0x5a, 0x36, 0x75, 0x29, 0x9a,
	0x0b, 0xac, 0x8a, 0xdc, 0xaa, 0x28, 0xac, 0xe4, 0x13, 0x35, 0x4a, 0x6b, 0x0d, 0xa2, 0x62, 0xcb,
	0x50, 0xb1, 0x69, 0x52, 0x17, 0xbb, 0x06, 0x35, 0x1d, 0xee, 0x27, 0x2f, 0x24, 0xa2, 0x0b, 0x18,
	0x6e, 0xb6, 0x98, 0x68, 0x56, 0x23, 0x26, 0x71, 0x0c, 0x1f, 0x2e, 0x57, 0xa3, 0x35, 0xca, 0x7e,
	0xaa, 0xde, 0x2f, 0x7e, 0xaa, 0x94, 0xe0, 0xc8, 0x7b, 0x1e, 0xd7, 0xed, 0xb6, 0x5b, 0xdf, 0xb6,
	0x0d, 0x9d, 0x68, 0xe4, 0x41, 0x8b, 0x38, 0x2e, 0x3a, 0x06, 0x13, 0x96, 0x77, 0x5d, 0x36, 0xaa,
	0x73, 0x52, 0x41, 0x5a, 0xce, 0x68, 0x07, 0xd8, 0xf5, 0x46, 0x55, 0xd1, 0x61, 0x76, 0xbf, 0x8f,
	0x63, 0x51, 0xd3, 0x21, 0x68, 0x03, 0xb2, 0xdc, 0xc9, 0x71, 0xb1, 0x4b, 0x98, 0x5f, 0xb6, 0xb4,
	0x5c, 0x4c, 0x2a, 0x40, 0x31, 0x40, 0xb8, 0xeb, 0xd9, 0x6b, 0x60, 0x05, 0xbf, 0x95, 0x1c, 0x20,
	0x1e, 0x04, 0xdb, 0xb8, 0xe9, 0x08, 0x56, 0xca, 0xfb, 0x30, 0x13, 0x39, 0x15, 0x71, 0xaf, 0xc1,
	0xb8, 0xc5, 0x4e, 0x44, 0xc8, 0x42, 0x97, 0x90, 0xcc, 0x6e, 0x6d, 0xf4, 0xe9, 0x8b, 0xf9, 0x21,
	0x4d, 0x78, 0x29, 0x32, 0xcc, 0x31, 0xd8, 0x35, 0x6c, 0x56, 0x35, 0xd2, 0xc0, 0x6d, 0x62, 0x07,
	0x21, 0x2f, 0xc1, 0xb1, 0x98, 0x7b, 0x22, 0xb0, 0x0c, 0x13, 0xb6, 0x38, 0x9b, 0x93, 0x0a, 0x23,
	0xcb, 0x19, 0x2d, 0xb8, 0x56, 0x4e, 0xc2, 0xf1, 0xc0, 0x71, 0x2f, 0xc9, 0x00, 0xf7, 0x3e, 0x9c,
	0x88, 0xbf, 0x2d, 0xa0, 0xdf, 0x85, 0x83, 0xa1, 0x5a, 0x72, 0xf8, 0xae, 0xc5, 0x8c, 0x02, 0x69,
	0xd9, 0xbd, 0x62, 0x3a, 0x4a, 0x01, 0xf2, 0x41, 0xb0, 0x8d, 0xb5, 0xf5, 0x18, 0x3a, 0x26, 0xcc,
	0x27, 0x5a, 0xfc, 0x17, 0x8c, 0x14, 0x28, 0xf0, 0x27, 0xe9, 0x9d, 0xdd, 0x22, 0x24, 0xae, 0x44,
	0x16, 0x9c, 0xea, 0x62, 0x33, 0x28, 0xab, 0x00, 0x2d, 0x86, 0xd5, 0x29, 0x51, 0x85, 0x75, 0x6a,
	0x98, 0x15, 0xec, 0x90, 0x18, 0x52, 0x8e, 0x20, 0x1e, 0x6b, 0x22, 0x38, 0x6d, 0xc5, 0x72, 0x3a,
	0x9f, 0xcc, 0xa9, 0x13, 0x2c, 0xca, 0xcb, 0xef, 0xa5, 0xe8, 0xc0, 0x74, 0xf4, 0x52, 0xc7, 0xed,
	0x81, 0x6b, 0x14, 0x1d, 0xcc, 0x08, 0x97, 0x7b, 0xa2, 0x97, 0xb6, 0x6d, 0xba, 0x6b, 0x54, 0x89,
	0x1d, 0xb2, 0x13, 0xbb, 0x43, 0xf6, 0x76, 0x07, 0xbf, 0x29, 0x76, 0x47, 0x70, 0x8d, 0x66, 0x61,
	0xdc, 0x69, 0x37, 0x2b, 0xb4, 0x31, 0x37, 0xcc, 0xee, 0x88, 0x2b, 0xa5, 0x2e, 0x2a, 0x1f, 0x87,
	0x2a, 0xb2, 0xb8, 0x19, 0xb7, 0x5d, 0xce, 0xa4, 0x3c, 0xe8, 0xce, 0xcd, 0x72, 0x0c, 0x8e, 0xb2,
	0x48, 0x9b, 0xb4, 0xda, 0x6a, 0x44, 0x88, 0x2b, 0x1f, 0x89, 0x3d, 0x10, 0xb9, 0x25, 0xa2, 0x5f,
	0x85, 0xb1, 0x70, 0xdc, 0xc5, 0xe4, 0xb8, 0x6f, 0xf3, 0xbd, 0xcb, 0xdd, 0xb9, 0x93, 0xf2, 0x29,
	0x28, 0x0c, 0xf9, 0x1d, 0xc3, 0x71, 0xa9, 0x6d, 0xe8, 0xb8, 0x21, 0x36, 0xa7, 0x4e, 0xed, 0xaa,
	0xff, 0x1c, 0xd1, 0x55, 0x18, 0xe7, 0x58, 0x2c, 0xc8, 0x64, 0xb7, 0xe4, 0xb6, 0xd8, 0xe5, 0xbd,
	0xb6, 0x45, 0x34, 0xe1, 0x83, 0x8e, 0x43, 0x86, 0x17, 0xd3, 0xdb, 0xd9, 0xbc, 0xba, 0x13, 0xfc,
	0x60, 0xa3, 0xaa, 0xd8, 0x70, 0xba, 0x2b, 0x81, 0xa0, 0x53, 0x0e, 0xf1, 0x1a, 0xdb, 0xfc, 0x86,
	0x68, 0x95, 0xc5, 0x94, 0x2a, 0xfb, 0x30, 0xbc, 0xcd, 0xc4, 0x95, 0xf2, 0xb9, 0x04, 0x39, 0xce,
	0x93, 0x47, 0x6d, 0x6f, 0x59, 0xec, 0x05, 0x87, 0x8e, 0xc2, 0x81, 0x26, 0x7e, 0x54, 0xc6, 0x35,
	0x9e, 0xe8, 0xa8, 0x36, 0xde, 0xc4, 0x8f, 0xae, 0xd7, 0x08, 0x2a, 0xc2, 0x8c, 0x61, 0xea, 0x8d,
	0x56, 0x95, 0x94, 0x6d, 0xfc, 0xb0, 0x5c, 0xe7, 0x6e, 0x2c, 0x99, 0x09, 0xed, 0xb0, 0xb8, 0xa5,
	0xe1, 0x87, 0x02, 0x0f, 0x9d, 0x85, 0x69, 0xdf, 0xbe, 0x49, 0x5c, 0x5c, 0xc5, 0x2e, 0x9e, 0x1b,
	0x61, 0xc6, 0x53, 0xe2, 0x7c, 0x53, 0x1c, 0x2b, 0x5f, 0x0c, 0x8b, 0x21, 0xe1, 0x8c, 0x3e, 0xa0,
	0x0d, 0xec, 0x1a, 0x0d, 0xc3, 0x6d, 0xfb, 0xc5, 0xbf, 0x0e, 0x19, 0x6f, 0x04, 0xcb, 0x86, 0xb9,
	0x43, 0xd3, 0x9b, 0x8b, 0xa3, 0x6c, 0x98, 0x3b, 0x54, 0x9b, 0xf0, 0xdc, 0xbc, 0x5f, 0x68, 0x1d,
	0xe0, 0x41, 0x8b, 0xba, 0x02, 0x63, 0xb8, 0x0f, 0x8c, 0x0c, 0xf3, 0x63, 0x20, 0x55, 0x98, 0xe5,
	0x76, 0x7e, 0xfa, 0x65, 0xca, 0xcb, 0xc6, 0x32, 0xcb, 0x96, 0x8a, 0x69, 0x80, 0xd1, 0x62, 0x6b,
	0x39, 0x1a, 0x73, 0xea, 0x95, 0xe3, 0x64, 0x42, 0x39, 0x44, 0x2b, 0xdc, 0x06, 0xd8, 0x0d, 0x4e,
	0xf9, 0x1c, 0xaf, 0xfd, 0xef, 0xf9, 0x8b, 0xf9, 0xc5, 0x9a, 0xe1, 0xd6, 0x5b, 0x95, 0xa2, 0x4e,
	0x9b, 0xaa, 0x4e, 0x9d, 0x26, 0x75, 0xc4, 0x9f, 0x15, 0xa7, 0x7a, 0x5f, 0x75, 0xdb, 0x16, 0x71,
	0x8a, 0x37, 0x88, 0xae, 0x85, 0xbc, 0xd1, 0x87, 0x30, 0xed, 0x27, 0x13, 0x3c, 0x27, 0x5e, 0x9e,
	0x2e, 0x4b, 0xd1, 0x7f, 0x74, 0xde, 0x20, 0x19, 0x8e, 0x6b, 0xe8, 0x8e, 0x36, 0x25, 0x50, 0xfc,
	0x5b, 0xe8, 0x16, 0x64, 0xc3, 0x8d, 0x32, 0xc2, 0xba, 0x75, 0xa1, 0xa7, 0x6e, 0xd5, 0xc0, 0x0e,
	0x1a, 0x29, 0x58, 0xfc, 0xbc, 0x1a, 0xfe, 0x12, 0x72, 0xd8, 0xb3, 0x11, 0xcb, 0xa1, 0x2e, 0x16,
	0x7f, 0xac, 0x89, 0xa8, 0xd9, 0x0d, 0xc8, 0xf8, 0x9b, 0xae, 0xa7, 0xd1, 0xe1, 0xa6, 0xbc, 0x03,
	0x02, 0x47, 0xe5, 0x5a, 0x6c, 0x24, 0x46, 0xdd, 0xe9, 0x61, 0xc7, 0x2a, 0xb6, 0x78, 0x6f, 0xc6,
	0xfb, 0x0b, 0xaa, 0x9b, 0xde, 0xa4, 0xf3, 0x3b, 0x77, 0xc5, 0x5e, 0xf3, 0xe8, 0x2e, 0xa5, 0xd3,
	0xe5, 0x8b, 0x2d, 0xea, 0xed, 0xcd, 0xfa, 0xd1, 0x48, 0xd0, 0xd0, 0xb7, 0xe4, 0x4d, 0xc8, 0x8a,
	0x8e, 0xf6, 0xba, 0xa3, 0xaf, 0xdd, 0x06, 0x34, 0xf8, 0x8d, 0x10, 0x8c, 0x7a, 0x93, 0x26, 0x56,
	0x1b, 0xfb, 0x8d, 0x72, 0x30, 0xc6, 0x26, 0x87, 0xcd, 0x46, 0x46, 0xe3, 0x17, 0xca, 0x37, 0xa3,
	0x30, 0xc9, 0x18, 0x6c, 0x63, 0x83, 0xf3, 0x43, 0x9b, 0x00, 0x16, 0x36, 0xec, 0x32, 0x5b, 0x50,
	0xa2, 0x9b, 0x8b, 0xde, 0x47, 0x60, 0x1f, 0x1d, 0x9d, 0xf1, 0x10, 0x18, 0xae, 0x07, 0xc7, 0x96,
	0x05, 0x87, 0x1b, 0x1e, 0x0c, 0x2e, 0x78, 0xe3, 0xa3, 0x2d, 0xc8, 0xf2, 0xc5, 0xc1, 0xf1, 0x46,
	0x06, 0xc2, 0xe3, 0xbb, 0x87, 0x03, 0x56, 0xe0, 0x08, 0xe3, 0xa7, 0xb7, 0x9a, 0x2d, 0x6f, 0x0a,
	0x77, 0x7d, 0xe8, 0xd1, 0x81, 0xa0, 0x67, 0x3c, 0xb0, 0xf5, 0x00, 0x8b, 0xc7, 0xa8, 0xc2, 0x2c,
	0x27, 0xdd, 0x11, 0x64, 0x6c, 0xa0, 0x20, 0x39, 0x86, 0xb6, 0x3f, 0xca, 0x02, 0x4c, 0xb2, 0x4c,
	0x5c, 0xa3, 0x49, 0x1c, 0x17, 0x37, 0xad, 0xb9, 0xf1, 0x82, 0xb4, 0x3c, 0xa2, 0x1d, 0xf2, 0x4e,
	0xef, 0xf9, 0x87, 0x68, 0x09, 0xa6, 0x38, 0x99, 0x3d, 0xbb, 0x03, 0xcc, 0x6e, 0x92, 0x1d, 0x07,
	0x86, 0x8a, 0x29, 0xde, 0xf1, 0x91, 0x3e, 0x15, 0x33, 0xa1, 0xc1, 0x34, 0x7f, 0xfb, 0xb1, 0x56,
	0xe9, 0x55, 0xc4, 0x44, 0x1a, 0x4d, 0x9b, 0xb4, 0x22, 0xd7, 0xa5, 0xe7, 0x47, 0x60, 0x8c, 0x05,
	0x44, 0x5f, 0x4a, 0x30, 0xce, 0xe5, 0x07, 0xea, 0xb2, 0xf5, 0x3a, 0x55, 0x8f, 0xbc, 0xd2, 0xa3,
	0x35, 0xcf, 0x42, 0x59, 0xfe, 0xec, 0x8f, 0x7f, 0xbe, 0x1e, 0x56, 0x50, 0x41, 0x4d, 0x94, 0x86,
	0x5c, 0xf7, 0xa0, 0xef, 0x25, 0x38, 0x18, 0xd6, 0x35, 0xa8, 0x94, 0x12, 0x29, 0x46, 0x20, 0xc9,
	0x17, 0xfb, 0xf2, 0x11, 0x1c, 0x55, 0xc6, 0xf1, 0x2c, 0x5a, 0x4a, 0xe6, 0x58, 0xc1, 0x66, 0xb5,
	0xec, 0xab, 0x29, 0xf4, 0x93, 0x04, 0x53, 0xfb, 0xa4, 0x12, 0x7a, 0xad, 0x87, 0xc8, 0x9d, 0x5f,
	0xcb, 0xf2, 0xeb, 0xfd, 0xba, 0x09, 0xce, 0x17, 0x19, 0xe7, 0x15, 0x74, 0x2e, 0x85, 0x73, 0xf8,
	0x53, 0x1b, 0xfd, 0x22, 0x01, 0xea, 0xd4, 0x54, 0xe8, 0x72, 0x0f, 0x1c, 0x62, 0x85, 0x9a, 0xfc,
	0xc6, 0x00, 0x9e, 0x22, 0x81, 0x4b, 0x2c, 0x81, 0x55, 0xa4, 0xa6, 0x24, 0x60, 0x54, 0xf4, 0x68,
	0x12, 0xbf, 0x49, 0x90, 0x8b, 0x13, 0x61, 0xe8, 0x4a, 0x5a, 0x67, 0x26, 0xab, 0x3b, 0xf9, 0xcd,
	0x81, 0x7c, 0x45, 0x2a, 0x97, 0x59, 0x2a, 0x25, 0x74, 0xa1, 0x4b, 0x8f, 0x7b, 0x6e, 0x3b, 0x84,
	0xec, 0x7b, 0x20, 0xbf, 0x4a, 0x30, 0x13, 0xa3, 0xdd, 0x50, 0x5a, 0x5d, 0x93, 0x25, 0xa1, 0x7c,
	0x65, 0x10, 0xd7, 0xde, 0x9f, 0x89, 0x2e, 0xdc, 0xa3, 0x79, 0x78, 0x03, 0xb1, 0x4f, 0xef, 0xa5,
	0x0e, 0x44, 0xbc, 0x7c, 0x4c, 0x1d, 0x88, 0x04, 0x59, 0xd9, 0xcb, 0x40, 0x58, 0x6d, 0xb7, 0x1e,
	0xe5, 0xfd, 0xa7, 0x04, 0xa8, 0x53, 0xe4, 0xa5, 0x0e, 0x44, 0xa2, 0xda, 0x4c, 0x1d, 0x88, 0x64,
	0x45, 0xa9, 0xdc, 0x66, 0x09, 0xdc, 0x40, 0x6b, 0xdd, 0xba, 0x88, 0x7b, 0x87, 0x93, 0x50, 0x1f,
	0xfb, 0xa7, 0x4f, 0xd4, 0xc7, 0x5c, 0x61, 0x3d, 0x41, 0x3f, 0x48, 0x70, 0x98, 0xbf, 0x53, 0x42,
	0xea, 0x11, 0xad, 0xa6, 0x90, 0xeb, 0x14, 0xa1, 0x72, 0xa9, 0x1f, 0x17, 0x91, 0x48, 0x91, 0x25,
	0xb2, 0x8c, 0x16, 0x93, 0x13, 0x69, 0x32, 0x37, 0x9e, 0x00, 0xfa, 0x5d, 0x82, 0xd9, 0x78, 0x25,
	0x88, 0xae, 0xa6, 0x84, 0xef, 0xaa, 0x60, 0xe5, 0xb7, 0x06, 0xf4, 0x16, 0x79, 0x5c, 0x61, 0x79,
	0xfc, 0x1f, 0x95, 0x92, 0xf3, 0xa8, 0x07, 0x08, 0xe5, 0x88, 0x52, 0x45, 0x3f, 0x4a, 0x30, 0xbd,
	0x5f, 0xcc, 0xa0, 0xb4, 0xd6, 0x4e, 0x10, 0x83, 0xf2, 0xa5, 0xbe, 0xfd, 0x44, 0x06, 0xe7, 0x59,
	0x06, 0x8b, 0xe8, 0x4c, 0x72, 0x06, 0x21, 0x5d, 0xf4, 0xb3, 0x04, 0x33, 0x31, 0x7a, 0x22, 0x75,
	0x19, 0x25, 0xcb, 0x94, 0xd4, 0x65, 0xd4, 0x45, 0xbe, 0x28, 0xe7, 0x18, 0xf9, 0x05, 0x74, 0x3a,
	0x7d, 0x1e, 0xd8, 0x9b, 0x2d, 0x17, 0xa7, 0x30, 0x50, 0x7f, 0x0c, 0x22, 0xb2, 0x26, 0xf5, 0xa5,
	0xd0, 0x4d, 0xd2, 0x28, 0xab, 0x8c, 0xfe, 0x39, 0x74, 0xb6, 0xd7, 0x71, 0x76, 0xd0, 0x77, 0x12,
	0x64, 0x43, 0x5f, 0x82, 0xa9, 0xf3, 0xda, 0xa9, 0x6e, 0x52, 0xe7, 0x35, 0xe6, 0x43, 0x53, 0x59,
	0x62, 0x4c, 0x4f, 0xa1, 0xf9, 0x94, 0xd7, 0x17, 0xfa, 0x56, 0x82, 0x4c, 0xb0, 0x7e, 0x91, 0xda,
	0xeb, 0xa2, 0xf6, 0xb9, 0x5d, 0xe8, 0xdd, 0xa1, 0xf7, 0xfe, 0xdd, 0xdb, 0xe9, 0x6b, 0x3b, 0x4f,
	0x5f, 0xe6, 0xa5, 0x67, 0x2f, 0xf3, 0xd2, 0xdf, 0x2f, 0xf3, 0xd2, 0x57, 0xaf, 0xf2, 0x43, 0xcf,
	0x5e, 0xe5, 0x87, 0xfe, 0x7a, 0x95, 0x1f, 0xfa, 0xf8, 0x4e, 0xe8, 0xa3, 0x7f, 0xc3, 0x47, 0xba,
	0x83, 0x2b, 0xce, 0x1e, 0xee, 0x8a, 0x4e, 0x6d, 0x12, 0xbe, 0xac, 0x63, 0xc3, 0x14, 0x7b, 0xca,
	0xf1, 0x83, 0x32, 0x79, 0x50, 0x19, 0x67, 0xff, 0xad, 0xb8, 0xf8, 0x6f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xe1, 0xe8, 0xd9, 0x82, 0x72, 0x19, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Retrieves oracle params
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Retrieves the band relayers
	BandRelayers(ctx context.Context, in *QueryBandRelayersRequest, opts ...grpc.CallOption) (*QueryBandRelayersResponse, error)
	// Retrieves the state for all band price feeds
	BandPriceStates(ctx context.Context, in *QueryBandPriceStatesRequest, opts ...grpc.CallOption) (*QueryBandPriceStatesResponse, error)
	// Retrieves the state for all band ibc price feeds
	BandIBCPriceStates(ctx context.Context, in *QueryBandIBCPriceStatesRequest, opts ...grpc.CallOption) (*QueryBandIBCPriceStatesResponse, error)
	// Retrieves the state for all price feeds
	PriceFeedPriceStates(ctx context.Context, in *QueryPriceFeedPriceStatesRequest, opts ...grpc.CallOption) (*QueryPriceFeedPriceStatesResponse, error)
	// Retrieves the state for all coinbase price feeds
	CoinbasePriceStates(ctx context.Context, in *QueryCoinbasePriceStatesRequest, opts ...grpc.CallOption) (*QueryCoinbasePriceStatesResponse, error)
	// Retrieves the state for all pyth price feeds
	PythPriceStates(ctx context.Context, in *QueryPythPriceStatesRequest, opts ...grpc.CallOption) (*QueryPythPriceStatesResponse, error)
	// Retrieves the state for all provider price feeds
	ProviderPriceState(ctx context.Context, in *QueryProviderPriceStateRequest, opts ...grpc.CallOption) (*QueryProviderPriceStateResponse, error)
	// Retrieves the entire oracle module's state
	OracleModuleState(ctx context.Context, in *QueryModuleStateRequest, opts ...grpc.CallOption) (*QueryModuleStateResponse, error)
	// Retrieves historical price records for a given OracleType and Symbol
	HistoricalPriceRecords(ctx context.Context, in *QueryHistoricalPriceRecordsRequest, opts ...grpc.CallOption) (*QueryHistoricalPriceRecordsResponse, error)
	// Retrieves mixed volatility value for the specified pair of base/quote
	OracleVolatility(ctx context.Context, in *QueryOracleVolatilityRequest, opts ...grpc.CallOption) (*QueryOracleVolatilityResponse, error)
	OracleProvidersInfo(ctx context.Context, in *QueryOracleProvidersInfoRequest, opts ...grpc.CallOption) (*QueryOracleProvidersInfoResponse, error)
	OracleProviderPrices(ctx context.Context, in *QueryOracleProviderPricesRequest, opts ...grpc.CallOption) (*QueryOracleProviderPricesResponse, error)
	OraclePrice(ctx context.Context, in *QueryOraclePriceRequest, opts ...grpc.CallOption) (*QueryOraclePriceResponse, error)
	PythPrice(ctx context.Context, in *QueryPythPriceRequest, opts ...grpc.CallOption) (*QueryPythPriceResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/injective.oracle.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BandRelayers(ctx context.Context, in *QueryBandRelayersRequest, opts ...grpc.CallOption) (*QueryBandRelayersResponse, error) {
	out := new(QueryBandRelayersResponse)
	err := c.cc.Invoke(ctx, "/injective.oracle.v1beta1.Query/BandRelayers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BandPriceStates(ctx context.Context, in *QueryBandPriceStatesRequest, opts ...grpc.CallOption) (*QueryBandPriceStatesResponse, error) {
	out := new(QueryBandPriceStatesResponse)
	err := c.cc.Invoke(ctx, "/injective.oracle.v1beta1.Query/BandPriceStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BandIBCPriceStates(ctx context.Context, in *QueryBandIBCPriceStatesRequest, opts ...grpc.CallOption) (*QueryBandIBCPriceStatesResponse, error) {
	out := new(QueryBandIBCPriceStatesResponse)
	err := c.cc.Invoke(ctx, "/injective.oracle.v1beta1.Query/BandIBCPriceStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PriceFeedPriceStates(ctx context.Context, in *QueryPriceFeedPriceStatesRequest, opts ...grpc.CallOption) (*QueryPriceFeedPriceStatesResponse, error) {
	out := new(QueryPriceFeedPriceStatesResponse)
	err := c.cc.Invoke(ctx, "/injective.oracle.v1beta1.Query/PriceFeedPriceStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CoinbasePriceStates(ctx context.Context, in *QueryCoinbasePriceStatesRequest, opts ...grpc.CallOption) (*QueryCoinbasePriceStatesResponse, error) {
	out := new(QueryCoinbasePriceStatesResponse)
	err := c.cc.Invoke(ctx, "/injective.oracle.v1beta1.Query/CoinbasePriceStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PythPriceStates(ctx context.Context, in *QueryPythPriceStatesRequest, opts ...grpc.CallOption) (*QueryPythPriceStatesResponse, error) {
	out := new(QueryPythPriceStatesResponse)
	err := c.cc.Invoke(ctx, "/injective.oracle.v1beta1.Query/PythPriceStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProviderPriceState(ctx context.Context, in *QueryProviderPriceStateRequest, opts ...grpc.CallOption) (*QueryProviderPriceStateResponse, error) {
	out := new(QueryProviderPriceStateResponse)
	err := c.cc.Invoke(ctx, "/injective.oracle.v1beta1.Query/ProviderPriceState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OracleModuleState(ctx context.Context, in *QueryModuleStateRequest, opts ...grpc.CallOption) (*QueryModuleStateResponse, error) {
	out := new(QueryModuleStateResponse)
	err := c.cc.Invoke(ctx, "/injective.oracle.v1beta1.Query/OracleModuleState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HistoricalPriceRecords(ctx context.Context, in *QueryHistoricalPriceRecordsRequest, opts ...grpc.CallOption) (*QueryHistoricalPriceRecordsResponse, error) {
	out := new(QueryHistoricalPriceRecordsResponse)
	err := c.cc.Invoke(ctx, "/injective.oracle.v1beta1.Query/HistoricalPriceRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OracleVolatility(ctx context.Context, in *QueryOracleVolatilityRequest, opts ...grpc.CallOption) (*QueryOracleVolatilityResponse, error) {
	out := new(QueryOracleVolatilityResponse)
	err := c.cc.Invoke(ctx, "/injective.oracle.v1beta1.Query/OracleVolatility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OracleProvidersInfo(ctx context.Context, in *QueryOracleProvidersInfoRequest, opts ...grpc.CallOption) (*QueryOracleProvidersInfoResponse, error) {
	out := new(QueryOracleProvidersInfoResponse)
	err := c.cc.Invoke(ctx, "/injective.oracle.v1beta1.Query/OracleProvidersInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OracleProviderPrices(ctx context.Context, in *QueryOracleProviderPricesRequest, opts ...grpc.CallOption) (*QueryOracleProviderPricesResponse, error) {
	out := new(QueryOracleProviderPricesResponse)
	err := c.cc.Invoke(ctx, "/injective.oracle.v1beta1.Query/OracleProviderPrices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OraclePrice(ctx context.Context, in *QueryOraclePriceRequest, opts ...grpc.CallOption) (*QueryOraclePriceResponse, error) {
	out := new(QueryOraclePriceResponse)
	err := c.cc.Invoke(ctx, "/injective.oracle.v1beta1.Query/OraclePrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PythPrice(ctx context.Context, in *QueryPythPriceRequest, opts ...grpc.CallOption) (*QueryPythPriceResponse, error) {
	out := new(QueryPythPriceResponse)
	err := c.cc.Invoke(ctx, "/injective.oracle.v1beta1.Query/PythPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Retrieves oracle params
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Retrieves the band relayers
	BandRelayers(context.Context, *QueryBandRelayersRequest) (*QueryBandRelayersResponse, error)
	// Retrieves the state for all band price feeds
	BandPriceStates(context.Context, *QueryBandPriceStatesRequest) (*QueryBandPriceStatesResponse, error)
	// Retrieves the state for all band ibc price feeds
	BandIBCPriceStates(context.Context, *QueryBandIBCPriceStatesRequest) (*QueryBandIBCPriceStatesResponse, error)
	// Retrieves the state for all price feeds
	PriceFeedPriceStates(context.Context, *QueryPriceFeedPriceStatesRequest) (*QueryPriceFeedPriceStatesResponse, error)
	// Retrieves the state for all coinbase price feeds
	CoinbasePriceStates(context.Context, *QueryCoinbasePriceStatesRequest) (*QueryCoinbasePriceStatesResponse, error)
	// Retrieves the state for all pyth price feeds
	PythPriceStates(context.Context, *QueryPythPriceStatesRequest) (*QueryPythPriceStatesResponse, error)
	// Retrieves the state for all provider price feeds
	ProviderPriceState(context.Context, *QueryProviderPriceStateRequest) (*QueryProviderPriceStateResponse, error)
	// Retrieves the entire oracle module's state
	OracleModuleState(context.Context, *QueryModuleStateRequest) (*QueryModuleStateResponse, error)
	// Retrieves historical price records for a given OracleType and Symbol
	HistoricalPriceRecords(context.Context, *QueryHistoricalPriceRecordsRequest) (*QueryHistoricalPriceRecordsResponse, error)
	// Retrieves mixed volatility value for the specified pair of base/quote
	OracleVolatility(context.Context, *QueryOracleVolatilityRequest) (*QueryOracleVolatilityResponse, error)
	OracleProvidersInfo(context.Context, *QueryOracleProvidersInfoRequest) (*QueryOracleProvidersInfoResponse, error)
	OracleProviderPrices(context.Context, *QueryOracleProviderPricesRequest) (*QueryOracleProviderPricesResponse, error)
	OraclePrice(context.Context, *QueryOraclePriceRequest) (*QueryOraclePriceResponse, error)
	PythPrice(context.Context, *QueryPythPriceRequest) (*QueryPythPriceResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) BandRelayers(ctx context.Context, req *QueryBandRelayersRequest) (*QueryBandRelayersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BandRelayers not implemented")
}
func (*UnimplementedQueryServer) BandPriceStates(ctx context.Context, req *QueryBandPriceStatesRequest) (*QueryBandPriceStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BandPriceStates not implemented")
}
func (*UnimplementedQueryServer) BandIBCPriceStates(ctx context.Context, req *QueryBandIBCPriceStatesRequest) (*QueryBandIBCPriceStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BandIBCPriceStates not implemented")
}
func (*UnimplementedQueryServer) PriceFeedPriceStates(ctx context.Context, req *QueryPriceFeedPriceStatesRequest) (*QueryPriceFeedPriceStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PriceFeedPriceStates not implemented")
}
func (*UnimplementedQueryServer) CoinbasePriceStates(ctx context.Context, req *QueryCoinbasePriceStatesRequest) (*QueryCoinbasePriceStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoinbasePriceStates not implemented")
}
func (*UnimplementedQueryServer) PythPriceStates(ctx context.Context, req *QueryPythPriceStatesRequest) (*QueryPythPriceStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PythPriceStates not implemented")
}
func (*UnimplementedQueryServer) ProviderPriceState(ctx context.Context, req *QueryProviderPriceStateRequest) (*QueryProviderPriceStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProviderPriceState not implemented")
}
func (*UnimplementedQueryServer) OracleModuleState(ctx context.Context, req *QueryModuleStateRequest) (*QueryModuleStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OracleModuleState not implemented")
}
func (*UnimplementedQueryServer) HistoricalPriceRecords(ctx context.Context, req *QueryHistoricalPriceRecordsRequest) (*QueryHistoricalPriceRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoricalPriceRecords not implemented")
}
func (*UnimplementedQueryServer) OracleVolatility(ctx context.Context, req *QueryOracleVolatilityRequest) (*QueryOracleVolatilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OracleVolatility not implemented")
}
func (*UnimplementedQueryServer) OracleProvidersInfo(ctx context.Context, req *QueryOracleProvidersInfoRequest) (*QueryOracleProvidersInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OracleProvidersInfo not implemented")
}
func (*UnimplementedQueryServer) OracleProviderPrices(ctx context.Context, req *QueryOracleProviderPricesRequest) (*QueryOracleProviderPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OracleProviderPrices not implemented")
}
func (*UnimplementedQueryServer) OraclePrice(ctx context.Context, req *QueryOraclePriceRequest) (*QueryOraclePriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OraclePrice not implemented")
}
func (*UnimplementedQueryServer) PythPrice(ctx context.Context, req *QueryPythPriceRequest) (*QueryPythPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PythPrice not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.oracle.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BandRelayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBandRelayersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BandRelayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.oracle.v1beta1.Query/BandRelayers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BandRelayers(ctx, req.(*QueryBandRelayersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BandPriceStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBandPriceStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BandPriceStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.oracle.v1beta1.Query/BandPriceStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BandPriceStates(ctx, req.(*QueryBandPriceStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BandIBCPriceStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBandIBCPriceStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BandIBCPriceStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.oracle.v1beta1.Query/BandIBCPriceStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BandIBCPriceStates(ctx, req.(*QueryBandIBCPriceStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PriceFeedPriceStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPriceFeedPriceStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PriceFeedPriceStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.oracle.v1beta1.Query/PriceFeedPriceStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PriceFeedPriceStates(ctx, req.(*QueryPriceFeedPriceStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CoinbasePriceStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCoinbasePriceStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CoinbasePriceStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.oracle.v1beta1.Query/CoinbasePriceStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CoinbasePriceStates(ctx, req.(*QueryCoinbasePriceStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PythPriceStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPythPriceStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PythPriceStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.oracle.v1beta1.Query/PythPriceStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PythPriceStates(ctx, req.(*QueryPythPriceStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProviderPriceState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProviderPriceStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProviderPriceState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.oracle.v1beta1.Query/ProviderPriceState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProviderPriceState(ctx, req.(*QueryProviderPriceStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OracleModuleState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryModuleStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OracleModuleState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.oracle.v1beta1.Query/OracleModuleState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OracleModuleState(ctx, req.(*QueryModuleStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HistoricalPriceRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHistoricalPriceRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HistoricalPriceRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.oracle.v1beta1.Query/HistoricalPriceRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HistoricalPriceRecords(ctx, req.(*QueryHistoricalPriceRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OracleVolatility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleVolatilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OracleVolatility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.oracle.v1beta1.Query/OracleVolatility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OracleVolatility(ctx, req.(*QueryOracleVolatilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OracleProvidersInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleProvidersInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OracleProvidersInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.oracle.v1beta1.Query/OracleProvidersInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OracleProvidersInfo(ctx, req.(*QueryOracleProvidersInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OracleProviderPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleProviderPricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OracleProviderPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.oracle.v1beta1.Query/OracleProviderPrices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OracleProviderPrices(ctx, req.(*QueryOracleProviderPricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OraclePrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOraclePriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OraclePrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.oracle.v1beta1.Query/OraclePrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OraclePrice(ctx, req.(*QueryOraclePriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PythPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPythPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PythPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.oracle.v1beta1.Query/PythPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PythPrice(ctx, req.(*QueryPythPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "injective.oracle.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "BandRelayers",
			Handler:    _Query_BandRelayers_Handler,
		},
		{
			MethodName: "BandPriceStates",
			Handler:    _Query_BandPriceStates_Handler,
		},
		{
			MethodName: "BandIBCPriceStates",
			Handler:    _Query_BandIBCPriceStates_Handler,
		},
		{
			MethodName: "PriceFeedPriceStates",
			Handler:    _Query_PriceFeedPriceStates_Handler,
		},
		{
			MethodName: "CoinbasePriceStates",
			Handler:    _Query_CoinbasePriceStates_Handler,
		},
		{
			MethodName: "PythPriceStates",
			Handler:    _Query_PythPriceStates_Handler,
		},
		{
			MethodName: "ProviderPriceState",
			Handler:    _Query_ProviderPriceState_Handler,
		},
		{
			MethodName: "OracleModuleState",
			Handler:    _Query_OracleModuleState_Handler,
		},
		{
			MethodName: "HistoricalPriceRecords",
			Handler:    _Query_HistoricalPriceRecords_Handler,
		},
		{
			MethodName: "OracleVolatility",
			Handler:    _Query_OracleVolatility_Handler,
		},
		{
			MethodName: "OracleProvidersInfo",
			Handler:    _Query_OracleProvidersInfo_Handler,
		},
		{
			MethodName: "OracleProviderPrices",
			Handler:    _Query_OracleProviderPrices_Handler,
		},
		{
			MethodName: "OraclePrice",
			Handler:    _Query_OraclePrice_Handler,
		},
		{
			MethodName: "PythPrice",
			Handler:    _Query_PythPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "injective/oracle/v1beta1/query.proto",
}

func (m *QueryPythPriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPythPriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPythPriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PriceId) > 0 {
		i -= len(m.PriceId)
		copy(dAtA[i:], m.PriceId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PriceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPythPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPythPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPythPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PriceState != nil {
		{
			size, err := m.PriceState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryBandRelayersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBandRelayersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBandRelayersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryBandRelayersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBandRelayersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBandRelayersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Relayers) > 0 {
		for iNdEx := len(m.Relayers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Relayers[iNdEx])
			copy(dAtA[i:], m.Relayers[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Relayers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBandPriceStatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBandPriceStatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBandPriceStatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryBandPriceStatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBandPriceStatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBandPriceStatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PriceStates) > 0 {
		for iNdEx := len(m.PriceStates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PriceStates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBandIBCPriceStatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBandIBCPriceStatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBandIBCPriceStatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryBandIBCPriceStatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBandIBCPriceStatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBandIBCPriceStatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PriceStates) > 0 {
		for iNdEx := len(m.PriceStates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PriceStates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPriceFeedPriceStatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPriceFeedPriceStatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPriceFeedPriceStatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPriceFeedPriceStatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPriceFeedPriceStatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPriceFeedPriceStatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PriceStates) > 0 {
		for iNdEx := len(m.PriceStates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PriceStates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCoinbasePriceStatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCoinbasePriceStatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCoinbasePriceStatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCoinbasePriceStatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCoinbasePriceStatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCoinbasePriceStatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PriceStates) > 0 {
		for iNdEx := len(m.PriceStates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PriceStates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPythPriceStatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPythPriceStatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPythPriceStatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPythPriceStatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPythPriceStatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPythPriceStatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PriceStates) > 0 {
		for iNdEx := len(m.PriceStates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PriceStates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryProviderPriceStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProviderPriceStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProviderPriceStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryProviderPriceStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProviderPriceStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProviderPriceStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PriceState != nil {
		{
			size, err := m.PriceState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryModuleStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryModuleStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryModuleStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryModuleStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryModuleStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryModuleStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHistoricalPriceRecordsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHistoricalPriceRecordsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHistoricalPriceRecordsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SymbolId) > 0 {
		i -= len(m.SymbolId)
		copy(dAtA[i:], m.SymbolId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SymbolId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Oracle != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Oracle))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryHistoricalPriceRecordsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHistoricalPriceRecordsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHistoricalPriceRecordsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PriceRecords) > 0 {
		for iNdEx := len(m.PriceRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PriceRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OracleHistoryOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OracleHistoryOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OracleHistoryOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeMetadata {
		i--
		if m.IncludeMetadata {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.IncludeRawHistory {
		i--
		if m.IncludeRawHistory {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.MaxAge != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MaxAge))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleVolatilityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleVolatilityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleVolatilityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OracleHistoryOptions != nil {
		{
			size, err := m.OracleHistoryOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.QuoteInfo != nil {
		{
			size, err := m.QuoteInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BaseInfo != nil {
		{
			size, err := m.BaseInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleVolatilityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleVolatilityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleVolatilityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RawHistory) > 0 {
		for iNdEx := len(m.RawHistory) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RawHistory[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.HistoryMetadata != nil {
		{
			size, err := m.HistoryMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Volatility != nil {
		{
			size := m.Volatility.Size()
			i -= size
			if _, err := m.Volatility.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleProvidersInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleProvidersInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleProvidersInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryOracleProvidersInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleProvidersInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleProvidersInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Providers) > 0 {
		for iNdEx := len(m.Providers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Providers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleProviderPricesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleProviderPricesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleProviderPricesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleProviderPricesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleProviderPricesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleProviderPricesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProviderState) > 0 {
		for iNdEx := len(m.ProviderState) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProviderState[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOraclePriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOraclePriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOraclePriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Quote) > 0 {
		i -= len(m.Quote)
		copy(dAtA[i:], m.Quote)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Quote)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Base) > 0 {
		i -= len(m.Base)
		copy(dAtA[i:], m.Base)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Base)))
		i--
		dAtA[i] = 0x12
	}
	if m.OracleType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.OracleType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PricePairState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PricePairState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PricePairState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QuoteTimestamp != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.QuoteTimestamp))
		i--
		dAtA[i] = 0x38
	}
	if m.BaseTimestamp != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BaseTimestamp))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.QuoteCumulativePrice.Size()
		i -= size
		if _, err := m.QuoteCumulativePrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.BaseCumulativePrice.Size()
		i -= size
		if _, err := m.BaseCumulativePrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.QuotePrice.Size()
		i -= size
		if _, err := m.QuotePrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.BasePrice.Size()
		i -= size
		if _, err := m.BasePrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.PairPrice.Size()
		i -= size
		if _, err := m.PairPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryOraclePriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOraclePriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOraclePriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PricePairState != nil {
		{
			size, err := m.PricePairState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryPythPriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PriceId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPythPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PriceState != nil {
		l = m.PriceState.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBandRelayersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryBandRelayersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Relayers) > 0 {
		for _, s := range m.Relayers {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryBandPriceStatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryBandPriceStatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PriceStates) > 0 {
		for _, e := range m.PriceStates {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryBandIBCPriceStatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryBandIBCPriceStatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PriceStates) > 0 {
		for _, e := range m.PriceStates {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPriceFeedPriceStatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPriceFeedPriceStatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PriceStates) > 0 {
		for _, e := range m.PriceStates {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryCoinbasePriceStatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCoinbasePriceStatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PriceStates) > 0 {
		for _, e := range m.PriceStates {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPythPriceStatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPythPriceStatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PriceStates) > 0 {
		for _, e := range m.PriceStates {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryProviderPriceStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProviderPriceStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PriceState != nil {
		l = m.PriceState.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryModuleStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryModuleStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHistoricalPriceRecordsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Oracle != 0 {
		n += 1 + sovQuery(uint64(m.Oracle))
	}
	l = len(m.SymbolId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHistoricalPriceRecordsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PriceRecords) > 0 {
		for _, e := range m.PriceRecords {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *OracleHistoryOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxAge != 0 {
		n += 1 + sovQuery(uint64(m.MaxAge))
	}
	if m.IncludeRawHistory {
		n += 2
	}
	if m.IncludeMetadata {
		n += 2
	}
	return n
}

func (m *QueryOracleVolatilityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseInfo != nil {
		l = m.BaseInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.QuoteInfo != nil {
		l = m.QuoteInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.OracleHistoryOptions != nil {
		l = m.OracleHistoryOptions.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOracleVolatilityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Volatility != nil {
		l = m.Volatility.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.HistoryMetadata != nil {
		l = m.HistoryMetadata.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.RawHistory) > 0 {
		for _, e := range m.RawHistory {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryOracleProvidersInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryOracleProvidersInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Providers) > 0 {
		for _, e := range m.Providers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryOracleProviderPricesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOracleProviderPricesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProviderState) > 0 {
		for _, e := range m.ProviderState {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryOraclePriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OracleType != 0 {
		n += 1 + sovQuery(uint64(m.OracleType))
	}
	l = len(m.Base)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Quote)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *PricePairState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PairPrice.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.BasePrice.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.QuotePrice.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.BaseCumulativePrice.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.QuoteCumulativePrice.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.BaseTimestamp != 0 {
		n += 1 + sovQuery(uint64(m.BaseTimestamp))
	}
	if m.QuoteTimestamp != 0 {
		n += 1 + sovQuery(uint64(m.QuoteTimestamp))
	}
	return n
}

func (m *QueryOraclePriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PricePairState != nil {
		l = m.PricePairState.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryPythPriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPythPriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPythPriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPythPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPythPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPythPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PriceState == nil {
				m.PriceState = &PythPriceState{}
			}
			if err := m.PriceState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBandRelayersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBandRelayersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBandRelayersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBandRelayersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBandRelayersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBandRelayersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relayers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relayers = append(m.Relayers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBandPriceStatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBandPriceStatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBandPriceStatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBandPriceStatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBandPriceStatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBandPriceStatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceStates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceStates = append(m.PriceStates, &BandPriceState{})
			if err := m.PriceStates[len(m.PriceStates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBandIBCPriceStatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBandIBCPriceStatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBandIBCPriceStatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBandIBCPriceStatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBandIBCPriceStatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBandIBCPriceStatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceStates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceStates = append(m.PriceStates, &BandPriceState{})
			if err := m.PriceStates[len(m.PriceStates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPriceFeedPriceStatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPriceFeedPriceStatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPriceFeedPriceStatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPriceFeedPriceStatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPriceFeedPriceStatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPriceFeedPriceStatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceStates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceStates = append(m.PriceStates, &PriceFeedState{})
			if err := m.PriceStates[len(m.PriceStates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCoinbasePriceStatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCoinbasePriceStatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCoinbasePriceStatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCoinbasePriceStatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCoinbasePriceStatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCoinbasePriceStatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceStates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceStates = append(m.PriceStates, &CoinbasePriceState{})
			if err := m.PriceStates[len(m.PriceStates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPythPriceStatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPythPriceStatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPythPriceStatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPythPriceStatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPythPriceStatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPythPriceStatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceStates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceStates = append(m.PriceStates, &PythPriceState{})
			if err := m.PriceStates[len(m.PriceStates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProviderPriceStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProviderPriceStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProviderPriceStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProviderPriceStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProviderPriceStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProviderPriceStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PriceState == nil {
				m.PriceState = &PriceState{}
			}
			if err := m.PriceState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryModuleStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryModuleStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryModuleStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryModuleStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryModuleStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryModuleStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &GenesisState{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHistoricalPriceRecordsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHistoricalPriceRecordsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHistoricalPriceRecordsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oracle", wireType)
			}
			m.Oracle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oracle |= OracleType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SymbolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SymbolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHistoricalPriceRecordsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHistoricalPriceRecordsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHistoricalPriceRecordsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceRecords = append(m.PriceRecords, &PriceRecords{})
			if err := m.PriceRecords[len(m.PriceRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OracleHistoryOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OracleHistoryOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OracleHistoryOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAge", wireType)
			}
			m.MaxAge = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAge |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeRawHistory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeRawHistory = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeMetadata", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeMetadata = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleVolatilityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleVolatilityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleVolatilityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseInfo == nil {
				m.BaseInfo = &OracleInfo{}
			}
			if err := m.BaseInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QuoteInfo == nil {
				m.QuoteInfo = &OracleInfo{}
			}
			if err := m.QuoteInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleHistoryOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OracleHistoryOptions == nil {
				m.OracleHistoryOptions = &OracleHistoryOptions{}
			}
			if err := m.OracleHistoryOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleVolatilityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleVolatilityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleVolatilityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volatility", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.Volatility = &v
			if err := m.Volatility.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HistoryMetadata == nil {
				m.HistoryMetadata = &MetadataStatistics{}
			}
			if err := m.HistoryMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawHistory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawHistory = append(m.RawHistory, &PriceRecord{})
			if err := m.RawHistory[len(m.RawHistory)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleProvidersInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleProvidersInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleProvidersInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleProvidersInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleProvidersInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleProvidersInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Providers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Providers = append(m.Providers, &ProviderInfo{})
			if err := m.Providers[len(m.Providers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleProviderPricesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleProviderPricesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleProviderPricesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleProviderPricesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleProviderPricesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleProviderPricesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderState = append(m.ProviderState, &ProviderState{})
			if err := m.ProviderState[len(m.ProviderState)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOraclePriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOraclePriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOraclePriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleType", wireType)
			}
			m.OracleType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OracleType |= OracleType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Base = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Quote = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PricePairState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PricePairState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PricePairState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PairPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BasePrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuotePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.QuotePrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseCumulativePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseCumulativePrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteCumulativePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.QuoteCumulativePrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseTimestamp", wireType)
			}
			m.BaseTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteTimestamp", wireType)
			}
			m.QuoteTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuoteTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOraclePriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOraclePriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOraclePriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PricePairState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PricePairState == nil {
				m.PricePairState = &PricePairState{}
			}
			if err := m.PricePairState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
