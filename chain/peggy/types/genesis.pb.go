// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: injective/peggy/v1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState struct
type GenesisState struct {
	Params                     *Params                        `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	LastObservedNonce          uint64                         `protobuf:"varint,2,opt,name=last_observed_nonce,json=lastObservedNonce,proto3" json:"last_observed_nonce,omitempty"`
	Valsets                    []*Valset                      `protobuf:"bytes,3,rep,name=valsets,proto3" json:"valsets,omitempty"`
	ValsetConfirms             []*MsgValsetConfirm            `protobuf:"bytes,4,rep,name=valset_confirms,json=valsetConfirms,proto3" json:"valset_confirms,omitempty"`
	Batches                    []*OutgoingTxBatch             `protobuf:"bytes,5,rep,name=batches,proto3" json:"batches,omitempty"`
	BatchConfirms              []*MsgConfirmBatch             `protobuf:"bytes,6,rep,name=batch_confirms,json=batchConfirms,proto3" json:"batch_confirms,omitempty"`
	Attestations               []*Attestation                 `protobuf:"bytes,7,rep,name=attestations,proto3" json:"attestations,omitempty"`
	OrchestratorAddresses      []*MsgSetOrchestratorAddresses `protobuf:"bytes,8,rep,name=orchestrator_addresses,json=orchestratorAddresses,proto3" json:"orchestrator_addresses,omitempty"`
	Erc20ToDenoms              []*ERC20ToDenom                `protobuf:"bytes,9,rep,name=erc20_to_denoms,json=erc20ToDenoms,proto3" json:"erc20_to_denoms,omitempty"`
	UnbatchedTransfers         []*OutgoingTransferTx          `protobuf:"bytes,10,rep,name=unbatched_transfers,json=unbatchedTransfers,proto3" json:"unbatched_transfers,omitempty"`
	LastObservedEthereumHeight uint64                         `protobuf:"varint,11,opt,name=last_observed_ethereum_height,json=lastObservedEthereumHeight,proto3" json:"last_observed_ethereum_height,omitempty"`
	LastOutgoingBatchId        uint64                         `protobuf:"varint,12,opt,name=last_outgoing_batch_id,json=lastOutgoingBatchId,proto3" json:"last_outgoing_batch_id,omitempty"`
	LastOutgoingPoolId         uint64                         `protobuf:"varint,13,opt,name=last_outgoing_pool_id,json=lastOutgoingPoolId,proto3" json:"last_outgoing_pool_id,omitempty"`
	LastObservedValset         Valset                         `protobuf:"bytes,14,opt,name=last_observed_valset,json=lastObservedValset,proto3" json:"last_observed_valset"`
	EthereumBlacklist          []string                       `protobuf:"bytes,15,rep,name=ethereum_blacklist,json=ethereumBlacklist,proto3" json:"ethereum_blacklist,omitempty"`
	RateLimits                 []*RateLimit                   `protobuf:"bytes,16,rep,name=rate_limits,json=rateLimits,proto3" json:"rate_limits,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b8a70f18b346efa, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *GenesisState) GetLastObservedNonce() uint64 {
	if m != nil {
		return m.LastObservedNonce
	}
	return 0
}

func (m *GenesisState) GetValsets() []*Valset {
	if m != nil {
		return m.Valsets
	}
	return nil
}

func (m *GenesisState) GetValsetConfirms() []*MsgValsetConfirm {
	if m != nil {
		return m.ValsetConfirms
	}
	return nil
}

func (m *GenesisState) GetBatches() []*OutgoingTxBatch {
	if m != nil {
		return m.Batches
	}
	return nil
}

func (m *GenesisState) GetBatchConfirms() []*MsgConfirmBatch {
	if m != nil {
		return m.BatchConfirms
	}
	return nil
}

func (m *GenesisState) GetAttestations() []*Attestation {
	if m != nil {
		return m.Attestations
	}
	return nil
}

func (m *GenesisState) GetOrchestratorAddresses() []*MsgSetOrchestratorAddresses {
	if m != nil {
		return m.OrchestratorAddresses
	}
	return nil
}

func (m *GenesisState) GetErc20ToDenoms() []*ERC20ToDenom {
	if m != nil {
		return m.Erc20ToDenoms
	}
	return nil
}

func (m *GenesisState) GetUnbatchedTransfers() []*OutgoingTransferTx {
	if m != nil {
		return m.UnbatchedTransfers
	}
	return nil
}

func (m *GenesisState) GetLastObservedEthereumHeight() uint64 {
	if m != nil {
		return m.LastObservedEthereumHeight
	}
	return 0
}

func (m *GenesisState) GetLastOutgoingBatchId() uint64 {
	if m != nil {
		return m.LastOutgoingBatchId
	}
	return 0
}

func (m *GenesisState) GetLastOutgoingPoolId() uint64 {
	if m != nil {
		return m.LastOutgoingPoolId
	}
	return 0
}

func (m *GenesisState) GetLastObservedValset() Valset {
	if m != nil {
		return m.LastObservedValset
	}
	return Valset{}
}

func (m *GenesisState) GetEthereumBlacklist() []string {
	if m != nil {
		return m.EthereumBlacklist
	}
	return nil
}

func (m *GenesisState) GetRateLimits() []*RateLimit {
	if m != nil {
		return m.RateLimits
	}
	return nil
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "injective.peggy.v1.GenesisState")
}

func init() { proto.RegisterFile("injective/peggy/v1/genesis.proto", fileDescriptor_3b8a70f18b346efa) }

var fileDescriptor_3b8a70f18b346efa = []byte{
	// 690 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0x5d, 0x4f, 0xdb, 0x3e,
	0x14, 0xc6, 0xdb, 0x3f, 0xfc, 0x79, 0x31, 0x6f, 0xc3, 0xbc, 0x28, 0xaa, 0x44, 0xa9, 0x06, 0x9a,
	0xb8, 0xa1, 0xa1, 0x65, 0xb7, 0x9b, 0x44, 0x19, 0x1a, 0x6c, 0x30, 0x50, 0x40, 0x9b, 0xb4, 0x9b,
	0xc8, 0x49, 0x0e, 0xa9, 0xb7, 0x24, 0xae, 0x7c, 0xdc, 0x08, 0xbe, 0xc5, 0x3e, 0xd2, 0x2e, 0xb9,
	0xe4, 0x72, 0x57, 0xd3, 0x04, 0x5f, 0x64, 0x8a, 0xe3, 0x94, 0x56, 0x4b, 0xb9, 0xb3, 0xf3, 0xfc,
	0x9e, 0xe7, 0x9c, 0xda, 0xa7, 0x26, 0x0d, 0x9e, 0x7c, 0x03, 0x5f, 0xf1, 0x14, 0xec, 0x1e, 0x84,
	0xe1, 0xad, 0x9d, 0xb6, 0xec, 0x10, 0x12, 0x40, 0x8e, 0xcd, 0x9e, 0x14, 0x4a, 0x50, 0x3a, 0x20,
	0x9a, 0x9a, 0x68, 0xa6, 0xad, 0xda, 0x6a, 0x28, 0x42, 0xa1, 0x65, 0x3b, 0x5b, 0xe5, 0x64, 0xad,
	0x5e, 0x92, 0xa5, 0x6e, 0x7b, 0x60, 0x92, 0x6a, 0x1b, 0x25, 0x7a, 0x8c, 0x21, 0x3e, 0x63, 0xf7,
	0x98, 0xf2, 0xbb, 0x46, 0xdf, 0x2e, 0xd1, 0x99, 0x52, 0x80, 0x8a, 0x29, 0x2e, 0x12, 0x43, 0x6d,
	0x96, 0x50, 0x3d, 0x26, 0x59, 0x5c, 0x94, 0xd9, 0x2a, 0x01, 0x24, 0x53, 0xe0, 0x46, 0x3c, 0xe6,
	0xaa, 0xe8, 0xc5, 0x17, 0x18, 0x0b, 0xb4, 0x3d, 0x86, 0x60, 0xa7, 0x2d, 0x0f, 0x14, 0x6b, 0xd9,
	0xbe, 0xe0, 0xa6, 0xca, 0xcb, 0x9f, 0x33, 0x64, 0xfe, 0x7d, 0x7e, 0x4c, 0x97, 0x8a, 0x29, 0xa0,
	0x6d, 0x32, 0x95, 0x57, 0xb1, 0xaa, 0x8d, 0xea, 0xce, 0x5c, 0xbb, 0xd6, 0xfc, 0xf7, 0xd8, 0x9a,
	0x17, 0x9a, 0x70, 0x0c, 0x49, 0x9b, 0x64, 0x25, 0x62, 0xa8, 0x5c, 0xe1, 0x21, 0xc8, 0x14, 0x02,
	0x37, 0x11, 0x89, 0x0f, 0xd6, 0x7f, 0x8d, 0xea, 0xce, 0xa4, 0xb3, 0x9c, 0x49, 0xe7, 0x46, 0xf9,
	0x94, 0x09, 0xf4, 0x35, 0x99, 0x4e, 0x59, 0x84, 0xa0, 0xd0, 0x9a, 0x68, 0x4c, 0x8c, 0x2b, 0xf2,
	0x59, 0x23, 0x4e, 0x81, 0xd2, 0x33, 0xb2, 0x94, 0x2f, 0x5d, 0x5f, 0x24, 0xd7, 0x5c, 0xc6, 0x68,
	0x4d, 0x6a, 0xf7, 0x76, 0x99, 0xfb, 0x0c, 0xc3, 0x3c, 0xe0, 0x30, 0x87, 0x9d, 0xc5, 0x74, 0x78,
	0x8b, 0xf4, 0x0d, 0x99, 0xd6, 0x97, 0x02, 0x68, 0xfd, 0xaf, 0x63, 0xb6, 0xca, 0x62, 0xce, 0xfb,
	0x2a, 0x14, 0x3c, 0x09, 0xaf, 0x6e, 0x3a, 0x19, 0xec, 0x14, 0x1e, 0xfa, 0x81, 0x2c, 0xea, 0xe5,
	0x53, 0x33, 0x53, 0xe3, 0x53, 0xce, 0x30, 0x34, 0x75, 0xf3, 0x94, 0x05, 0x6d, 0x1d, 0xb4, 0x72,
	0x48, 0xe6, 0x87, 0xee, 0x1f, 0xad, 0x69, 0x9d, 0xb4, 0x59, 0x96, 0x74, 0xf0, 0xc4, 0x39, 0x23,
	0x26, 0x7a, 0x4d, 0xd6, 0x85, 0xcc, 0x5a, 0x53, 0x92, 0x29, 0x21, 0x5d, 0x16, 0x04, 0x12, 0x10,
	0x01, 0xad, 0x19, 0x1d, 0x67, 0x8f, 0x69, 0xec, 0x12, 0xd4, 0xf9, 0x90, 0xef, 0xa0, 0xb0, 0x39,
	0x6b, 0xa2, 0xec, 0x33, 0x3d, 0x26, 0x4b, 0x20, 0xfd, 0xf6, 0x9e, 0xab, 0x84, 0x1b, 0x40, 0x22,
	0x62, 0xb4, 0x66, 0x75, 0x81, 0x46, 0x59, 0x81, 0x23, 0xe7, 0xb0, 0xbd, 0x77, 0x25, 0xde, 0x65,
	0xa0, 0xb3, 0xa0, 0x8d, 0x66, 0x87, 0xf4, 0x0b, 0x59, 0xe9, 0x27, 0xf9, 0x79, 0x06, 0xae, 0x92,
	0x2c, 0xc1, 0x6b, 0x90, 0x68, 0x11, 0x9d, 0xf6, 0xea, 0xd9, 0xdb, 0x30, 0xf0, 0xd5, 0x8d, 0x43,
	0x07, 0x11, 0xc5, 0x47, 0xa4, 0x07, 0x64, 0x63, 0x74, 0x1e, 0x41, 0x75, 0x41, 0x42, 0x3f, 0x76,
	0xbb, 0xc0, 0xc3, 0xae, 0xb2, 0xe6, 0xf4, 0x64, 0xd6, 0x86, 0x27, 0xf3, 0xc8, 0x20, 0xc7, 0x9a,
	0xa0, 0xfb, 0x64, 0x3d, 0x8f, 0x30, 0x15, 0xdd, 0xfc, 0xb2, 0x79, 0x60, 0xcd, 0x6b, 0xaf, 0x1e,
	0xf8, 0xa2, 0x1d, 0x7d, 0xa9, 0x27, 0x01, 0x6d, 0x91, 0xb5, 0x51, 0x53, 0x4f, 0x88, 0x28, 0xf3,
	0x2c, 0x68, 0x0f, 0x1d, 0xf6, 0x5c, 0x08, 0x11, 0x9d, 0x04, 0xd4, 0x21, 0xab, 0xa3, 0xad, 0xe6,
	0x53, 0x6a, 0x2d, 0x8e, 0xff, 0xf3, 0xe5, 0x63, 0xdd, 0x99, 0xbc, 0xfb, 0xbd, 0x59, 0x31, 0x99,
	0xc6, 0x9c, 0x2b, 0x74, 0x97, 0xd0, 0xc1, 0x0f, 0xf6, 0x22, 0xe6, 0x7f, 0x8f, 0x38, 0x2a, 0x6b,
	0xa9, 0x31, 0xb1, 0x33, 0xeb, 0x2c, 0x17, 0x4a, 0xa7, 0x10, 0xe8, 0x5b, 0x32, 0xf7, 0xf4, 0x6c,
	0xa0, 0xf5, 0x42, 0x1f, 0xff, 0x46, 0x59, 0x65, 0x87, 0x29, 0x38, 0xcd, 0x28, 0x87, 0xc8, 0x62,
	0x89, 0x1d, 0xb8, 0x7b, 0xa8, 0x57, 0xef, 0x1f, 0xea, 0xd5, 0x3f, 0x0f, 0xf5, 0xea, 0x8f, 0xc7,
	0x7a, 0xe5, 0xfe, 0xb1, 0x5e, 0xf9, 0xf5, 0x58, 0xaf, 0x7c, 0xfd, 0x18, 0x72, 0xd5, 0xed, 0x7b,
	0x4d, 0x5f, 0xc4, 0xf6, 0x49, 0x11, 0x77, 0xca, 0x3c, 0xb4, 0x07, 0xe1, 0xbb, 0xbe, 0x90, 0x30,
	0xbc, 0xed, 0x32, 0x9e, 0xd8, 0xb1, 0x08, 0xfa, 0x11, 0xa0, 0x79, 0xd7, 0xf4, 0xd3, 0xeb, 0x4d,
	0xe9, 0x07, 0x6b, 0xff, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x47, 0x8f, 0x99, 0x54, 0xe9, 0x05,
	0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RateLimits) > 0 {
		for iNdEx := len(m.RateLimits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RateLimits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.EthereumBlacklist) > 0 {
		for iNdEx := len(m.EthereumBlacklist) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EthereumBlacklist[iNdEx])
			copy(dAtA[i:], m.EthereumBlacklist[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.EthereumBlacklist[iNdEx])))
			i--
			dAtA[i] = 0x7a
		}
	}
	{
		size, err := m.LastObservedValset.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	if m.LastOutgoingPoolId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LastOutgoingPoolId))
		i--
		dAtA[i] = 0x68
	}
	if m.LastOutgoingBatchId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LastOutgoingBatchId))
		i--
		dAtA[i] = 0x60
	}
	if m.LastObservedEthereumHeight != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LastObservedEthereumHeight))
		i--
		dAtA[i] = 0x58
	}
	if len(m.UnbatchedTransfers) > 0 {
		for iNdEx := len(m.UnbatchedTransfers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnbatchedTransfers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Erc20ToDenoms) > 0 {
		for iNdEx := len(m.Erc20ToDenoms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Erc20ToDenoms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.OrchestratorAddresses) > 0 {
		for iNdEx := len(m.OrchestratorAddresses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrchestratorAddresses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Attestations) > 0 {
		for iNdEx := len(m.Attestations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attestations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.BatchConfirms) > 0 {
		for iNdEx := len(m.BatchConfirms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BatchConfirms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Batches) > 0 {
		for iNdEx := len(m.Batches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Batches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ValsetConfirms) > 0 {
		for iNdEx := len(m.ValsetConfirms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValsetConfirms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Valsets) > 0 {
		for iNdEx := len(m.Valsets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Valsets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.LastObservedNonce != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LastObservedNonce))
		i--
		dAtA[i] = 0x10
	}
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.LastObservedNonce != 0 {
		n += 1 + sovGenesis(uint64(m.LastObservedNonce))
	}
	if len(m.Valsets) > 0 {
		for _, e := range m.Valsets {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ValsetConfirms) > 0 {
		for _, e := range m.ValsetConfirms {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Batches) > 0 {
		for _, e := range m.Batches {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.BatchConfirms) > 0 {
		for _, e := range m.BatchConfirms {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Attestations) > 0 {
		for _, e := range m.Attestations {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.OrchestratorAddresses) > 0 {
		for _, e := range m.OrchestratorAddresses {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Erc20ToDenoms) > 0 {
		for _, e := range m.Erc20ToDenoms {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.UnbatchedTransfers) > 0 {
		for _, e := range m.UnbatchedTransfers {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.LastObservedEthereumHeight != 0 {
		n += 1 + sovGenesis(uint64(m.LastObservedEthereumHeight))
	}
	if m.LastOutgoingBatchId != 0 {
		n += 1 + sovGenesis(uint64(m.LastOutgoingBatchId))
	}
	if m.LastOutgoingPoolId != 0 {
		n += 1 + sovGenesis(uint64(m.LastOutgoingPoolId))
	}
	l = m.LastObservedValset.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.EthereumBlacklist) > 0 {
		for _, s := range m.EthereumBlacklist {
			l = len(s)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.RateLimits) > 0 {
		for _, e := range m.RateLimits {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastObservedNonce", wireType)
			}
			m.LastObservedNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastObservedNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valsets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Valsets = append(m.Valsets, &Valset{})
			if err := m.Valsets[len(m.Valsets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetConfirms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValsetConfirms = append(m.ValsetConfirms, &MsgValsetConfirm{})
			if err := m.ValsetConfirms[len(m.ValsetConfirms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Batches = append(m.Batches, &OutgoingTxBatch{})
			if err := m.Batches[len(m.Batches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchConfirms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchConfirms = append(m.BatchConfirms, &MsgConfirmBatch{})
			if err := m.BatchConfirms[len(m.BatchConfirms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attestations = append(m.Attestations, &Attestation{})
			if err := m.Attestations[len(m.Attestations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorAddresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorAddresses = append(m.OrchestratorAddresses, &MsgSetOrchestratorAddresses{})
			if err := m.OrchestratorAddresses[len(m.OrchestratorAddresses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20ToDenoms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Erc20ToDenoms = append(m.Erc20ToDenoms, &ERC20ToDenom{})
			if err := m.Erc20ToDenoms[len(m.Erc20ToDenoms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbatchedTransfers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbatchedTransfers = append(m.UnbatchedTransfers, &OutgoingTransferTx{})
			if err := m.UnbatchedTransfers[len(m.UnbatchedTransfers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastObservedEthereumHeight", wireType)
			}
			m.LastObservedEthereumHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastObservedEthereumHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastOutgoingBatchId", wireType)
			}
			m.LastOutgoingBatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastOutgoingBatchId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastOutgoingPoolId", wireType)
			}
			m.LastOutgoingPoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastOutgoingPoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastObservedValset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LastObservedValset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthereumBlacklist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthereumBlacklist = append(m.EthereumBlacklist, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RateLimits = append(m.RateLimits, &RateLimit{})
			if err := m.RateLimits[len(m.RateLimits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
