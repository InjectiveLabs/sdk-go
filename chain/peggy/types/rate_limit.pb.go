// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: injective/peggy/v1/rate_limit.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RateLimit struct {
	// address of the ERC20 token
	TokenAddress string `protobuf:"bytes,1,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"`
	// decimals of the ERC20 token
	TokenDecimals uint32 `protobuf:"varint,2,opt,name=token_decimals,json=tokenDecimals,proto3" json:"token_decimals,omitempty"`
	// a Pyth-specific ID used to obtain USD price of the ERC20 token
	TokenPriceId string `protobuf:"bytes,3,opt,name=token_price_id,json=tokenPriceId,proto3" json:"token_price_id,omitempty"`
	// length of the sliding window in which inbound (outbound) traffic is
	// measured
	RateLimitWindow uint64 `protobuf:"varint,4,opt,name=rate_limit_window,json=rateLimitWindow,proto3" json:"rate_limit_window,omitempty"`
	// the notional USD limit imposed on all outgoing traffic (per token)
	RateLimitUsd cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=rate_limit_usd,json=rateLimitUsd,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"rate_limit_usd"`
	// transfers that occurred within the sliding window
	Transfers []*BridgeTransfer `protobuf:"bytes,6,rep,name=transfers,proto3" json:"transfers,omitempty"`
}

func (m *RateLimit) Reset()         { *m = RateLimit{} }
func (m *RateLimit) String() string { return proto.CompactTextString(m) }
func (*RateLimit) ProtoMessage()    {}
func (*RateLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e4b49160131e74, []int{0}
}
func (m *RateLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RateLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RateLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RateLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateLimit.Merge(m, src)
}
func (m *RateLimit) XXX_Size() int {
	return m.Size()
}
func (m *RateLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_RateLimit.DiscardUnknown(m)
}

var xxx_messageInfo_RateLimit proto.InternalMessageInfo

func (m *RateLimit) GetTokenAddress() string {
	if m != nil {
		return m.TokenAddress
	}
	return ""
}

func (m *RateLimit) GetTokenDecimals() uint32 {
	if m != nil {
		return m.TokenDecimals
	}
	return 0
}

func (m *RateLimit) GetTokenPriceId() string {
	if m != nil {
		return m.TokenPriceId
	}
	return ""
}

func (m *RateLimit) GetRateLimitWindow() uint64 {
	if m != nil {
		return m.RateLimitWindow
	}
	return 0
}

func (m *RateLimit) GetTransfers() []*BridgeTransfer {
	if m != nil {
		return m.Transfers
	}
	return nil
}

type BridgeTransfer struct {
	// quantity that was bridged (chain format)
	Amount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
	// the Injective block at which this amount was bridged
	BlockNumber uint64 `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	// type of transfer (withdrawal/deposit)
	IsDeposit bool `protobuf:"varint,3,opt,name=is_deposit,json=isDeposit,proto3" json:"is_deposit,omitempty"`
}

func (m *BridgeTransfer) Reset()         { *m = BridgeTransfer{} }
func (m *BridgeTransfer) String() string { return proto.CompactTextString(m) }
func (*BridgeTransfer) ProtoMessage()    {}
func (*BridgeTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e4b49160131e74, []int{1}
}
func (m *BridgeTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BridgeTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BridgeTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BridgeTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BridgeTransfer.Merge(m, src)
}
func (m *BridgeTransfer) XXX_Size() int {
	return m.Size()
}
func (m *BridgeTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_BridgeTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_BridgeTransfer proto.InternalMessageInfo

func (m *BridgeTransfer) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *BridgeTransfer) GetIsDeposit() bool {
	if m != nil {
		return m.IsDeposit
	}
	return false
}

func init() {
	proto.RegisterType((*RateLimit)(nil), "injective.peggy.v1.RateLimit")
	proto.RegisterType((*BridgeTransfer)(nil), "injective.peggy.v1.BridgeTransfer")
}

func init() {
	proto.RegisterFile("injective/peggy/v1/rate_limit.proto", fileDescriptor_f5e4b49160131e74)
}

var fileDescriptor_f5e4b49160131e74 = []byte{
	// 436 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0xc1, 0x8a, 0xd3, 0x40,
	0x18, 0xc7, 0x9b, 0xdd, 0x5a, 0xec, 0x6c, 0xb7, 0xe2, 0xa0, 0x10, 0x94, 0xcd, 0xd6, 0x56, 0xa1,
	0x08, 0x26, 0xac, 0xe2, 0x5d, 0x4b, 0x2f, 0xc5, 0x22, 0x32, 0x28, 0x82, 0x97, 0x30, 0x99, 0xf9,
	0x4c, 0xc7, 0x36, 0x33, 0x61, 0x66, 0xd2, 0xa5, 0x8f, 0xe0, 0xcd, 0xa7, 0xf1, 0x19, 0xf6, 0xb8,
	0x47, 0xf1, 0xb0, 0x48, 0xfb, 0x22, 0x92, 0x49, 0xda, 0xed, 0xd2, 0x5b, 0xf2, 0x9b, 0xdf, 0xf7,
	0xf1, 0x9f, 0x3f, 0x83, 0x06, 0x42, 0xfe, 0x00, 0x66, 0xc5, 0x12, 0xa2, 0x1c, 0xd2, 0x74, 0x15,
	0x2d, 0x2f, 0x22, 0x4d, 0x2d, 0xc4, 0x0b, 0x91, 0x09, 0x1b, 0xe6, 0x5a, 0x59, 0x85, 0xf1, 0x4e,
	0x0a, 0x9d, 0x14, 0x2e, 0x2f, 0x9e, 0x3c, 0x4a, 0x55, 0xaa, 0xdc, 0x71, 0x54, 0x7e, 0x55, 0x66,
	0xff, 0xf7, 0x11, 0x6a, 0x13, 0x6a, 0x61, 0x5a, 0x4e, 0xe3, 0x01, 0x3a, 0xb5, 0x6a, 0x0e, 0x32,
	0xa6, 0x9c, 0x6b, 0x30, 0xc6, 0xf7, 0x7a, 0xde, 0xb0, 0x4d, 0x3a, 0x0e, 0xbe, 0xaf, 0x18, 0x7e,
	0x81, 0xba, 0x95, 0xc4, 0x81, 0x89, 0x8c, 0x2e, 0x8c, 0x7f, 0xd4, 0xf3, 0x86, 0xa7, 0xa4, 0x1a,
	0x1d, 0xd7, 0x10, 0x3f, 0xdf, 0x6a, 0xb9, 0x16, 0x0c, 0x62, 0xc1, 0xfd, 0xe3, 0xbd, 0x65, 0x9f,
	0x4a, 0x38, 0xe1, 0xf8, 0x25, 0x7a, 0x78, 0x9b, 0x3e, 0xbe, 0x14, 0x92, 0xab, 0x4b, 0xbf, 0xd9,
	0xf3, 0x86, 0x4d, 0xf2, 0x40, 0x6f, 0x73, 0x7d, 0x75, 0x18, 0x4f, 0x50, 0x77, 0xcf, 0x2d, 0x0c,
	0xf7, 0xef, 0x95, 0x1b, 0x47, 0x83, 0xab, 0x9b, 0xf3, 0xc6, 0xdf, 0x9b, 0xf3, 0xa7, 0x4c, 0x99,
	0x4c, 0x19, 0xc3, 0xe7, 0xa1, 0x50, 0x51, 0x46, 0xed, 0x2c, 0x9c, 0x42, 0x4a, 0xd9, 0x6a, 0x0c,
	0x8c, 0x74, 0x76, 0xdb, 0xbe, 0x18, 0x8e, 0xdf, 0xa1, 0xb6, 0xd5, 0x54, 0x9a, 0xef, 0xa0, 0x8d,
	0xdf, 0xea, 0x1d, 0x0f, 0x4f, 0x5e, 0xf7, 0xc3, 0xc3, 0xd2, 0xc2, 0x91, 0x16, 0x3c, 0x85, 0xcf,
	0xb5, 0x4a, 0x6e, 0x87, 0xfa, 0x3f, 0x3d, 0xd4, 0xbd, 0x7b, 0x8a, 0xdf, 0xa2, 0x16, 0xcd, 0x54,
	0x21, 0x6d, 0x55, 0xdb, 0xe8, 0xac, 0xce, 0xf5, 0xf8, 0x30, 0xd7, 0x44, 0x5a, 0x52, 0xcb, 0xf8,
	0x19, 0xea, 0x24, 0x0b, 0xc5, 0xe6, 0xb1, 0x2c, 0xb2, 0x04, 0xb4, 0x6b, 0xb3, 0x49, 0x4e, 0x1c,
	0xfb, 0xe8, 0x10, 0x3e, 0x43, 0x48, 0x98, 0x98, 0x43, 0xae, 0x8c, 0xb0, 0xae, 0xc7, 0xfb, 0xa4,
	0x2d, 0xcc, 0xb8, 0x02, 0x23, 0xb8, 0x5a, 0x07, 0xde, 0xf5, 0x3a, 0xf0, 0xfe, 0xad, 0x03, 0xef,
	0xd7, 0x26, 0x68, 0x5c, 0x6f, 0x82, 0xc6, 0x9f, 0x4d, 0xd0, 0xf8, 0xf6, 0x21, 0x15, 0x76, 0x56,
	0x24, 0x21, 0x53, 0x59, 0x34, 0xd9, 0x5e, 0x6f, 0x4a, 0x13, 0x13, 0xed, 0x2e, 0xfb, 0x8a, 0x29,
	0x0d, 0xfb, 0xbf, 0x33, 0x2a, 0x64, 0x94, 0x29, 0x5e, 0x2c, 0xc0, 0xd4, 0x6f, 0xcc, 0xae, 0x72,
	0x30, 0x49, 0xcb, 0x3d, 0x99, 0x37, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x7d, 0xb9, 0xaf, 0xe1,
	0x83, 0x02, 0x00, 0x00,
}

func (m *RateLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Transfers) > 0 {
		for iNdEx := len(m.Transfers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Transfers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRateLimit(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	{
		size := m.RateLimitUsd.Size()
		i -= size
		if _, err := m.RateLimitUsd.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRateLimit(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.RateLimitWindow != 0 {
		i = encodeVarintRateLimit(dAtA, i, uint64(m.RateLimitWindow))
		i--
		dAtA[i] = 0x20
	}
	if len(m.TokenPriceId) > 0 {
		i -= len(m.TokenPriceId)
		copy(dAtA[i:], m.TokenPriceId)
		i = encodeVarintRateLimit(dAtA, i, uint64(len(m.TokenPriceId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TokenDecimals != 0 {
		i = encodeVarintRateLimit(dAtA, i, uint64(m.TokenDecimals))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TokenAddress) > 0 {
		i -= len(m.TokenAddress)
		copy(dAtA[i:], m.TokenAddress)
		i = encodeVarintRateLimit(dAtA, i, uint64(len(m.TokenAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BridgeTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BridgeTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BridgeTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsDeposit {
		i--
		if m.IsDeposit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.BlockNumber != 0 {
		i = encodeVarintRateLimit(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRateLimit(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintRateLimit(dAtA []byte, offset int, v uint64) int {
	offset -= sovRateLimit(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TokenAddress)
	if l > 0 {
		n += 1 + l + sovRateLimit(uint64(l))
	}
	if m.TokenDecimals != 0 {
		n += 1 + sovRateLimit(uint64(m.TokenDecimals))
	}
	l = len(m.TokenPriceId)
	if l > 0 {
		n += 1 + l + sovRateLimit(uint64(l))
	}
	if m.RateLimitWindow != 0 {
		n += 1 + sovRateLimit(uint64(m.RateLimitWindow))
	}
	l = m.RateLimitUsd.Size()
	n += 1 + l + sovRateLimit(uint64(l))
	if len(m.Transfers) > 0 {
		for _, e := range m.Transfers {
			l = e.Size()
			n += 1 + l + sovRateLimit(uint64(l))
		}
	}
	return n
}

func (m *BridgeTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovRateLimit(uint64(l))
	if m.BlockNumber != 0 {
		n += 1 + sovRateLimit(uint64(m.BlockNumber))
	}
	if m.IsDeposit {
		n += 2
	}
	return n
}

func sovRateLimit(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRateLimit(x uint64) (n int) {
	return sovRateLimit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RateLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRateLimit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RateLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RateLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRateLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRateLimit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRateLimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenDecimals", wireType)
			}
			m.TokenDecimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRateLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenDecimals |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenPriceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRateLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRateLimit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRateLimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenPriceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimitWindow", wireType)
			}
			m.RateLimitWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRateLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RateLimitWindow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimitUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRateLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRateLimit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRateLimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RateLimitUsd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transfers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRateLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRateLimit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRateLimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transfers = append(m.Transfers, &BridgeTransfer{})
			if err := m.Transfers[len(m.Transfers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRateLimit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRateLimit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BridgeTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRateLimit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BridgeTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BridgeTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRateLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRateLimit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRateLimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRateLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeposit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRateLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDeposit = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRateLimit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRateLimit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRateLimit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRateLimit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRateLimit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRateLimit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRateLimit
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRateLimit
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRateLimit
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRateLimit        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRateLimit          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRateLimit = fmt.Errorf("proto: unexpected end of group")
)
