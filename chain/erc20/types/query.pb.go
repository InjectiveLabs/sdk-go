// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: injective/erc20/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5110d01ee5d7f02e, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params defines the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5110d01ee5d7f02e, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryAllTokenPairsRequest is the request type for the Query/AllTokenPairs RPC
// method.
type QueryAllTokenPairsRequest struct {
}

func (m *QueryAllTokenPairsRequest) Reset()         { *m = QueryAllTokenPairsRequest{} }
func (m *QueryAllTokenPairsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTokenPairsRequest) ProtoMessage()    {}
func (*QueryAllTokenPairsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5110d01ee5d7f02e, []int{2}
}
func (m *QueryAllTokenPairsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTokenPairsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTokenPairsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTokenPairsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTokenPairsRequest.Merge(m, src)
}
func (m *QueryAllTokenPairsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTokenPairsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTokenPairsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTokenPairsRequest proto.InternalMessageInfo

// QueryAllTokenPairsResponse is the response type for the Query/AllTokenPairs
// RPC method.
type QueryAllTokenPairsResponse struct {
	TokenPairs []*TokenPair `protobuf:"bytes,1,rep,name=token_pairs,json=tokenPairs,proto3" json:"token_pairs,omitempty"`
}

func (m *QueryAllTokenPairsResponse) Reset()         { *m = QueryAllTokenPairsResponse{} }
func (m *QueryAllTokenPairsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTokenPairsResponse) ProtoMessage()    {}
func (*QueryAllTokenPairsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5110d01ee5d7f02e, []int{3}
}
func (m *QueryAllTokenPairsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTokenPairsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTokenPairsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTokenPairsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTokenPairsResponse.Merge(m, src)
}
func (m *QueryAllTokenPairsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTokenPairsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTokenPairsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTokenPairsResponse proto.InternalMessageInfo

func (m *QueryAllTokenPairsResponse) GetTokenPairs() []*TokenPair {
	if m != nil {
		return m.TokenPairs
	}
	return nil
}

// QueryTokenPairByDenomRequest is the request type for the
// Query/TokenPairByDenom RPC method.
type QueryTokenPairByDenomRequest struct {
	BankDenom string `protobuf:"bytes,1,opt,name=bank_denom,json=bankDenom,proto3" json:"bank_denom,omitempty"`
}

func (m *QueryTokenPairByDenomRequest) Reset()         { *m = QueryTokenPairByDenomRequest{} }
func (m *QueryTokenPairByDenomRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenPairByDenomRequest) ProtoMessage()    {}
func (*QueryTokenPairByDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5110d01ee5d7f02e, []int{4}
}
func (m *QueryTokenPairByDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenPairByDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenPairByDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenPairByDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenPairByDenomRequest.Merge(m, src)
}
func (m *QueryTokenPairByDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenPairByDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenPairByDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenPairByDenomRequest proto.InternalMessageInfo

func (m *QueryTokenPairByDenomRequest) GetBankDenom() string {
	if m != nil {
		return m.BankDenom
	}
	return ""
}

// QueryTokenPairByDenomResponse is the response type for the
// Query/TokenPairByDenom RPC method.
type QueryTokenPairByDenomResponse struct {
	TokenPair *TokenPair `protobuf:"bytes,1,opt,name=token_pair,json=tokenPair,proto3" json:"token_pair,omitempty"`
}

func (m *QueryTokenPairByDenomResponse) Reset()         { *m = QueryTokenPairByDenomResponse{} }
func (m *QueryTokenPairByDenomResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenPairByDenomResponse) ProtoMessage()    {}
func (*QueryTokenPairByDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5110d01ee5d7f02e, []int{5}
}
func (m *QueryTokenPairByDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenPairByDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenPairByDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenPairByDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenPairByDenomResponse.Merge(m, src)
}
func (m *QueryTokenPairByDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenPairByDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenPairByDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenPairByDenomResponse proto.InternalMessageInfo

func (m *QueryTokenPairByDenomResponse) GetTokenPair() *TokenPair {
	if m != nil {
		return m.TokenPair
	}
	return nil
}

type QueryTokenPairByERC20AddressRequest struct {
	Erc20Address string `protobuf:"bytes,1,opt,name=erc20_address,json=erc20Address,proto3" json:"erc20_address,omitempty"`
}

func (m *QueryTokenPairByERC20AddressRequest) Reset()         { *m = QueryTokenPairByERC20AddressRequest{} }
func (m *QueryTokenPairByERC20AddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenPairByERC20AddressRequest) ProtoMessage()    {}
func (*QueryTokenPairByERC20AddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5110d01ee5d7f02e, []int{6}
}
func (m *QueryTokenPairByERC20AddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenPairByERC20AddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenPairByERC20AddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenPairByERC20AddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenPairByERC20AddressRequest.Merge(m, src)
}
func (m *QueryTokenPairByERC20AddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenPairByERC20AddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenPairByERC20AddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenPairByERC20AddressRequest proto.InternalMessageInfo

func (m *QueryTokenPairByERC20AddressRequest) GetErc20Address() string {
	if m != nil {
		return m.Erc20Address
	}
	return ""
}

type QueryTokenPairByERC20AddressResponse struct {
	TokenPair *TokenPair `protobuf:"bytes,1,opt,name=token_pair,json=tokenPair,proto3" json:"token_pair,omitempty"`
}

func (m *QueryTokenPairByERC20AddressResponse) Reset()         { *m = QueryTokenPairByERC20AddressResponse{} }
func (m *QueryTokenPairByERC20AddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenPairByERC20AddressResponse) ProtoMessage()    {}
func (*QueryTokenPairByERC20AddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5110d01ee5d7f02e, []int{7}
}
func (m *QueryTokenPairByERC20AddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenPairByERC20AddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenPairByERC20AddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenPairByERC20AddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenPairByERC20AddressResponse.Merge(m, src)
}
func (m *QueryTokenPairByERC20AddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenPairByERC20AddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenPairByERC20AddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenPairByERC20AddressResponse proto.InternalMessageInfo

func (m *QueryTokenPairByERC20AddressResponse) GetTokenPair() *TokenPair {
	if m != nil {
		return m.TokenPair
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "injective.erc20.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "injective.erc20.v1beta1.QueryParamsResponse")
	proto.RegisterType((*QueryAllTokenPairsRequest)(nil), "injective.erc20.v1beta1.QueryAllTokenPairsRequest")
	proto.RegisterType((*QueryAllTokenPairsResponse)(nil), "injective.erc20.v1beta1.QueryAllTokenPairsResponse")
	proto.RegisterType((*QueryTokenPairByDenomRequest)(nil), "injective.erc20.v1beta1.QueryTokenPairByDenomRequest")
	proto.RegisterType((*QueryTokenPairByDenomResponse)(nil), "injective.erc20.v1beta1.QueryTokenPairByDenomResponse")
	proto.RegisterType((*QueryTokenPairByERC20AddressRequest)(nil), "injective.erc20.v1beta1.QueryTokenPairByERC20AddressRequest")
	proto.RegisterType((*QueryTokenPairByERC20AddressResponse)(nil), "injective.erc20.v1beta1.QueryTokenPairByERC20AddressResponse")
}

func init() {
	proto.RegisterFile("injective/erc20/v1beta1/query.proto", fileDescriptor_5110d01ee5d7f02e)
}

var fileDescriptor_5110d01ee5d7f02e = []byte{
	// 600 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x63, 0xa0, 0x95, 0x3a, 0xa5, 0x12, 0x5a, 0x2a, 0xb5, 0x98, 0xd6, 0x29, 0x4e, 0x11,
	0x51, 0x29, 0x76, 0xea, 0x96, 0x9e, 0x9a, 0x43, 0x52, 0x38, 0xf0, 0xe7, 0x50, 0xa2, 0x9e, 0xb8,
	0x44, 0x6b, 0x67, 0xe5, 0x9a, 0x3a, 0xbb, 0xae, 0xd7, 0xa9, 0x94, 0x2b, 0x67, 0x0e, 0x48, 0xbc,
	0x05, 0x2f, 0xc0, 0x2b, 0xf4, 0x58, 0x89, 0x1e, 0x38, 0x21, 0x94, 0xf0, 0x20, 0xc8, 0xeb, 0x8d,
	0x93, 0x94, 0x6c, 0x94, 0x22, 0x6e, 0xc9, 0xcc, 0x37, 0xf3, 0xfd, 0x66, 0x32, 0x1b, 0x28, 0x05,
	0xf4, 0x03, 0xf1, 0x92, 0xe0, 0x9c, 0xd8, 0x24, 0xf6, 0x9c, 0x8a, 0x7d, 0xbe, 0xe3, 0x92, 0x04,
	0xef, 0xd8, 0x67, 0x1d, 0x12, 0x77, 0xad, 0x28, 0x66, 0x09, 0x43, 0x2b, 0xb9, 0xc8, 0x12, 0x22,
	0x4b, 0x8a, 0xf4, 0x65, 0x9f, 0xf9, 0x4c, 0x68, 0xec, 0xf4, 0x53, 0x26, 0xd7, 0xd7, 0x7c, 0xc6,
	0xfc, 0x90, 0xd8, 0x38, 0x0a, 0x6c, 0x4c, 0x29, 0x4b, 0x70, 0x12, 0x30, 0xca, 0x65, 0xd6, 0xf0,
	0x18, 0x6f, 0x33, 0x6e, 0xbb, 0x98, 0x93, 0xdc, 0xcd, 0x63, 0x01, 0x95, 0xf9, 0xad, 0xd1, 0xbc,
	0xa0, 0xc8, 0x55, 0x11, 0xf6, 0x03, 0x2a, 0x9a, 0x49, 0xed, 0xa6, 0x8a, 0x3e, 0xc2, 0x31, 0x6e,
	0x0f, 0x1c, 0x1f, 0xab, 0x54, 0x3e, 0xa1, 0x84, 0x07, 0x03, 0x99, 0x72, 0x15, 0xd9, 0xcc, 0x42,
	0x64, 0x2e, 0x03, 0x7a, 0x97, 0x32, 0x1d, 0x09, 0x83, 0x06, 0x39, 0xeb, 0x10, 0x9e, 0x98, 0xc7,
	0x70, 0x7f, 0x2c, 0xca, 0x23, 0x46, 0x39, 0x41, 0x55, 0x98, 0xcf, 0x40, 0x56, 0xb5, 0x0d, 0xad,
	0xbc, 0xe8, 0x14, 0x2d, 0xc5, 0x22, 0xad, 0xac, 0xb0, 0x7e, 0xe7, 0xe2, 0x67, 0xb1, 0xd0, 0x90,
	0x45, 0xe6, 0x43, 0x78, 0x20, 0xba, 0xd6, 0xc2, 0xf0, 0x98, 0x9d, 0x12, 0x7a, 0x84, 0x83, 0x38,
	0xb7, 0xc4, 0xa0, 0x4f, 0x4a, 0x4a, 0xe7, 0x43, 0x58, 0x4c, 0xd2, 0x68, 0x33, 0x4a, 0xc3, 0xab,
	0xda, 0xc6, 0xed, 0xf2, 0xa2, 0x63, 0x2a, 0xed, 0xf3, 0x0e, 0x0d, 0x48, 0xf2, 0x66, 0x66, 0x15,
	0xd6, 0x84, 0x45, 0x9e, 0xad, 0x77, 0x5f, 0x10, 0xca, 0xda, 0x12, 0x01, 0xad, 0x03, 0xb8, 0x98,
	0x9e, 0x36, 0x5b, 0x69, 0x50, 0x8c, 0xb8, 0xd0, 0x58, 0x48, 0x23, 0x42, 0x65, 0xba, 0xb0, 0xae,
	0x28, 0x97, 0x90, 0x35, 0x80, 0x21, 0xa4, 0x5c, 0xd1, 0x2c, 0x8c, 0x0b, 0x39, 0xa3, 0xf9, 0x1a,
	0x4a, 0xd7, 0x3d, 0x5e, 0x36, 0x0e, 0x9d, 0x4a, 0xad, 0xd5, 0x8a, 0x09, 0x1f, 0x2c, 0x0b, 0x95,
	0x60, 0x49, 0x34, 0x6b, 0xe2, 0x2c, 0x2e, 0x61, 0xef, 0x8a, 0xa0, 0xd4, 0x9a, 0x01, 0x6c, 0x4e,
	0xef, 0xf5, 0xdf, 0xb0, 0x9d, 0xab, 0x39, 0x98, 0x13, 0x5e, 0xe8, 0x93, 0x06, 0xf3, 0xd9, 0x8f,
	0x8f, 0x9e, 0x2a, 0x7b, 0xfc, 0x7d, 0x71, 0xfa, 0xf6, 0x6c, 0xe2, 0x0c, 0xd9, 0x7c, 0xf2, 0xf1,
	0xfb, 0xef, 0x2f, 0xb7, 0x1e, 0xa1, 0xa2, 0x3d, 0xfd, 0xc1, 0xa0, 0xaf, 0x1a, 0x2c, 0x8d, 0x5d,
	0x14, 0x72, 0xa6, 0x1b, 0x4d, 0xba, 0x4d, 0x7d, 0xf7, 0x46, 0x35, 0x92, 0xb1, 0x22, 0x18, 0xb7,
	0x50, 0x59, 0xc9, 0x88, 0xc3, 0xb0, 0x39, 0x72, 0xd5, 0xe8, 0x9b, 0x06, 0xf7, 0xae, 0x1f, 0x17,
	0x7a, 0x3e, 0xdd, 0x5b, 0x71, 0xcb, 0xfa, 0xfe, 0x4d, 0xcb, 0x24, 0xf5, 0x9e, 0xa0, 0xb6, 0xd0,
	0xb6, 0x92, 0x7a, 0x48, 0xdc, 0x74, 0xbb, 0xd9, 0x5b, 0x41, 0x57, 0x1a, 0xac, 0x28, 0xce, 0x0c,
	0x1d, 0xcc, 0x4c, 0x32, 0xe1, 0xd2, 0xf5, 0xea, 0x3f, 0x56, 0xcb, 0x71, 0x0e, 0xc4, 0x38, 0xfb,
	0x68, 0x6f, 0xc6, 0x71, 0xc6, 0x5e, 0x55, 0x9d, 0x5c, 0xf4, 0x0c, 0xed, 0xb2, 0x67, 0x68, 0xbf,
	0x7a, 0x86, 0xf6, 0xb9, 0x6f, 0x14, 0x2e, 0xfb, 0x46, 0xe1, 0x47, 0xdf, 0x28, 0xbc, 0x7f, 0xe3,
	0x07, 0xc9, 0x49, 0xc7, 0xb5, 0x3c, 0xd6, 0xb6, 0x5f, 0x0d, 0x3a, 0xbf, 0xc5, 0x2e, 0x1f, 0xfa,
	0x3c, 0xf3, 0x58, 0x4c, 0x46, 0xbf, 0x9e, 0xe0, 0x80, 0xda, 0x6d, 0xd6, 0xea, 0x84, 0x84, 0x4b,
	0x88, 0xa4, 0x1b, 0x11, 0xee, 0xce, 0x8b, 0xbf, 0xe2, 0xdd, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0xf4, 0x1b, 0x87, 0xd3, 0xbc, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params defines a gRPC query method that returns the erc20 module's
	// parameters.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// AllTokenPairs defines a gRPC query method that returns the erc20
	// module's created token pairs.
	AllTokenPairs(ctx context.Context, in *QueryAllTokenPairsRequest, opts ...grpc.CallOption) (*QueryAllTokenPairsResponse, error)
	// TokenPairByDenom defines a gRPC query method that returns the erc20
	// module's token pair associated with the provided bank denom.
	TokenPairByDenom(ctx context.Context, in *QueryTokenPairByDenomRequest, opts ...grpc.CallOption) (*QueryTokenPairByDenomResponse, error)
	// TokenPairByERC20Address defines a gRPC query method that returns the erc20
	// module's token pair associated with the provided erc20 contract address.
	TokenPairByERC20Address(ctx context.Context, in *QueryTokenPairByERC20AddressRequest, opts ...grpc.CallOption) (*QueryTokenPairByERC20AddressResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/injective.erc20.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllTokenPairs(ctx context.Context, in *QueryAllTokenPairsRequest, opts ...grpc.CallOption) (*QueryAllTokenPairsResponse, error) {
	out := new(QueryAllTokenPairsResponse)
	err := c.cc.Invoke(ctx, "/injective.erc20.v1beta1.Query/AllTokenPairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenPairByDenom(ctx context.Context, in *QueryTokenPairByDenomRequest, opts ...grpc.CallOption) (*QueryTokenPairByDenomResponse, error) {
	out := new(QueryTokenPairByDenomResponse)
	err := c.cc.Invoke(ctx, "/injective.erc20.v1beta1.Query/TokenPairByDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenPairByERC20Address(ctx context.Context, in *QueryTokenPairByERC20AddressRequest, opts ...grpc.CallOption) (*QueryTokenPairByERC20AddressResponse, error) {
	out := new(QueryTokenPairByERC20AddressResponse)
	err := c.cc.Invoke(ctx, "/injective.erc20.v1beta1.Query/TokenPairByERC20Address", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params defines a gRPC query method that returns the erc20 module's
	// parameters.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// AllTokenPairs defines a gRPC query method that returns the erc20
	// module's created token pairs.
	AllTokenPairs(context.Context, *QueryAllTokenPairsRequest) (*QueryAllTokenPairsResponse, error)
	// TokenPairByDenom defines a gRPC query method that returns the erc20
	// module's token pair associated with the provided bank denom.
	TokenPairByDenom(context.Context, *QueryTokenPairByDenomRequest) (*QueryTokenPairByDenomResponse, error)
	// TokenPairByERC20Address defines a gRPC query method that returns the erc20
	// module's token pair associated with the provided erc20 contract address.
	TokenPairByERC20Address(context.Context, *QueryTokenPairByERC20AddressRequest) (*QueryTokenPairByERC20AddressResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) AllTokenPairs(ctx context.Context, req *QueryAllTokenPairsRequest) (*QueryAllTokenPairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllTokenPairs not implemented")
}
func (*UnimplementedQueryServer) TokenPairByDenom(ctx context.Context, req *QueryTokenPairByDenomRequest) (*QueryTokenPairByDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenPairByDenom not implemented")
}
func (*UnimplementedQueryServer) TokenPairByERC20Address(ctx context.Context, req *QueryTokenPairByERC20AddressRequest) (*QueryTokenPairByERC20AddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenPairByERC20Address not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.erc20.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllTokenPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTokenPairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllTokenPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.erc20.v1beta1.Query/AllTokenPairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllTokenPairs(ctx, req.(*QueryAllTokenPairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenPairByDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenPairByDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenPairByDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.erc20.v1beta1.Query/TokenPairByDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenPairByDenom(ctx, req.(*QueryTokenPairByDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenPairByERC20Address_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenPairByERC20AddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenPairByERC20Address(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.erc20.v1beta1.Query/TokenPairByERC20Address",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenPairByERC20Address(ctx, req.(*QueryTokenPairByERC20AddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "injective.erc20.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "AllTokenPairs",
			Handler:    _Query_AllTokenPairs_Handler,
		},
		{
			MethodName: "TokenPairByDenom",
			Handler:    _Query_TokenPairByDenom_Handler,
		},
		{
			MethodName: "TokenPairByERC20Address",
			Handler:    _Query_TokenPairByERC20Address_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "injective/erc20/v1beta1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllTokenPairsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTokenPairsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTokenPairsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllTokenPairsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTokenPairsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTokenPairsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenPairs) > 0 {
		for iNdEx := len(m.TokenPairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenPairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenPairByDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenPairByDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenPairByDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BankDenom) > 0 {
		i -= len(m.BankDenom)
		copy(dAtA[i:], m.BankDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BankDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenPairByDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenPairByDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenPairByDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TokenPair != nil {
		{
			size, err := m.TokenPair.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenPairByERC20AddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenPairByERC20AddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenPairByERC20AddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Erc20Address) > 0 {
		i -= len(m.Erc20Address)
		copy(dAtA[i:], m.Erc20Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Erc20Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenPairByERC20AddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenPairByERC20AddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenPairByERC20AddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TokenPair != nil {
		{
			size, err := m.TokenPair.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllTokenPairsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllTokenPairsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TokenPairs) > 0 {
		for _, e := range m.TokenPairs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTokenPairByDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BankDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenPairByDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TokenPair != nil {
		l = m.TokenPair.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenPairByERC20AddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Erc20Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenPairByERC20AddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TokenPair != nil {
		l = m.TokenPair.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTokenPairsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTokenPairsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTokenPairsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTokenPairsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTokenPairsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTokenPairsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenPairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenPairs = append(m.TokenPairs, &TokenPair{})
			if err := m.TokenPairs[len(m.TokenPairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenPairByDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenPairByDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenPairByDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BankDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenPairByDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenPairByDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenPairByDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenPair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TokenPair == nil {
				m.TokenPair = &TokenPair{}
			}
			if err := m.TokenPair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenPairByERC20AddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenPairByERC20AddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenPairByERC20AddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Erc20Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenPairByERC20AddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenPairByERC20AddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenPairByERC20AddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenPair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TokenPair == nil {
				m.TokenPair = &TokenPair{}
			}
			if err := m.TokenPair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
