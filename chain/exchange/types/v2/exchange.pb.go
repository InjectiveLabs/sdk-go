// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: injective/exchange/v2/exchange.proto

package v2

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/InjectiveLabs/sdk-go/chain/oracle/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ExecutionType int32

const (
	ExecutionType_UnspecifiedExecutionType ExecutionType = 0
	ExecutionType_Market                   ExecutionType = 1
	ExecutionType_LimitFill                ExecutionType = 2
	ExecutionType_LimitMatchRestingOrder   ExecutionType = 3
	ExecutionType_LimitMatchNewOrder       ExecutionType = 4
	ExecutionType_MarketLiquidation        ExecutionType = 5
	ExecutionType_ExpiryMarketSettlement   ExecutionType = 6
)

var ExecutionType_name = map[int32]string{
	0: "UnspecifiedExecutionType",
	1: "Market",
	2: "LimitFill",
	3: "LimitMatchRestingOrder",
	4: "LimitMatchNewOrder",
	5: "MarketLiquidation",
	6: "ExpiryMarketSettlement",
}

var ExecutionType_value = map[string]int32{
	"UnspecifiedExecutionType": 0,
	"Market":                   1,
	"LimitFill":                2,
	"LimitMatchRestingOrder":   3,
	"LimitMatchNewOrder":       4,
	"MarketLiquidation":        5,
	"ExpiryMarketSettlement":   6,
}

func (x ExecutionType) String() string {
	return proto.EnumName(ExecutionType_name, int32(x))
}

func (ExecutionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0b5851fb01a33564, []int{0}
}

type Params struct {
	// spot_market_instant_listing_fee defines the expedited fee in INJ required
	// to create a spot market by bypassing governance
	SpotMarketInstantListingFee types.Coin `protobuf:"bytes,1,opt,name=spot_market_instant_listing_fee,json=spotMarketInstantListingFee,proto3" json:"spot_market_instant_listing_fee"`
	// derivative_market_instant_listing_fee defines the expedited fee in INJ
	// required to create a derivative market by bypassing governance
	DerivativeMarketInstantListingFee types.Coin `protobuf:"bytes,2,opt,name=derivative_market_instant_listing_fee,json=derivativeMarketInstantListingFee,proto3" json:"derivative_market_instant_listing_fee"`
	// default_spot_maker_fee defines the default exchange trade fee for makers on
	// a spot market
	DefaultSpotMakerFeeRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=default_spot_maker_fee_rate,json=defaultSpotMakerFeeRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"default_spot_maker_fee_rate"`
	// default_spot_taker_fee_rate defines the default exchange trade fee rate for
	// takers on a new spot market
	DefaultSpotTakerFeeRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=default_spot_taker_fee_rate,json=defaultSpotTakerFeeRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"default_spot_taker_fee_rate"`
	// default_derivative_maker_fee defines the default exchange trade fee for
	// makers on a new derivative market
	DefaultDerivativeMakerFeeRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=default_derivative_maker_fee_rate,json=defaultDerivativeMakerFeeRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"default_derivative_maker_fee_rate"`
	// default_derivative_taker_fee defines the default exchange trade fee for
	// takers on a new derivative market
	DefaultDerivativeTakerFeeRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,6,opt,name=default_derivative_taker_fee_rate,json=defaultDerivativeTakerFeeRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"default_derivative_taker_fee_rate"`
	// default_initial_margin_ratio defines the default initial margin ratio on a
	// new derivative market
	DefaultInitialMarginRatio cosmossdk_io_math.LegacyDec `protobuf:"bytes,7,opt,name=default_initial_margin_ratio,json=defaultInitialMarginRatio,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"default_initial_margin_ratio"`
	// default_maintenance_margin_ratio defines the default maintenance margin
	// ratio on a new derivative market
	DefaultMaintenanceMarginRatio cosmossdk_io_math.LegacyDec `protobuf:"bytes,8,opt,name=default_maintenance_margin_ratio,json=defaultMaintenanceMarginRatio,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"default_maintenance_margin_ratio"`
	// default_funding_interval defines the default funding interval on a
	// derivative market
	DefaultFundingInterval int64 `protobuf:"varint,9,opt,name=default_funding_interval,json=defaultFundingInterval,proto3" json:"default_funding_interval,omitempty"`
	// funding_multiple defines the timestamp multiple that the funding timestamp
	// should be a multiple of
	FundingMultiple int64 `protobuf:"varint,10,opt,name=funding_multiple,json=fundingMultiple,proto3" json:"funding_multiple,omitempty"`
	// relayer_fee_share_rate defines the trade fee share percentage that goes to
	// relayers
	RelayerFeeShareRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,11,opt,name=relayer_fee_share_rate,json=relayerFeeShareRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"relayer_fee_share_rate"`
	// default_hourly_funding_rate_cap defines the default maximum absolute value
	// of the hourly funding rate
	DefaultHourlyFundingRateCap cosmossdk_io_math.LegacyDec `protobuf:"bytes,12,opt,name=default_hourly_funding_rate_cap,json=defaultHourlyFundingRateCap,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"default_hourly_funding_rate_cap"`
	// hourly_interest_rate defines the hourly interest rate
	DefaultHourlyInterestRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,13,opt,name=default_hourly_interest_rate,json=defaultHourlyInterestRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"default_hourly_interest_rate"`
	// max_derivative_order_side_count defines the maximum number of derivative
	// active orders a subaccount can have for a given orderbook side
	MaxDerivativeOrderSideCount uint32 `protobuf:"varint,14,opt,name=max_derivative_order_side_count,json=maxDerivativeOrderSideCount,proto3" json:"max_derivative_order_side_count,omitempty"`
	// inj_reward_staked_requirement_threshold defines the threshold on INJ
	// rewards after which one also needs staked INJ to receive more
	InjRewardStakedRequirementThreshold cosmossdk_io_math.Int `protobuf:"bytes,15,opt,name=inj_reward_staked_requirement_threshold,json=injRewardStakedRequirementThreshold,proto3,customtype=cosmossdk.io/math.Int" json:"inj_reward_staked_requirement_threshold"`
	// the trading_rewards_vesting_duration defines the vesting times for trading
	// rewards
	TradingRewardsVestingDuration int64 `protobuf:"varint,16,opt,name=trading_rewards_vesting_duration,json=tradingRewardsVestingDuration,proto3" json:"trading_rewards_vesting_duration,omitempty"`
	// liquidator_reward_share_rate defines the ratio of the split of the surplus
	// collateral that goes to the liquidator
	LiquidatorRewardShareRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,17,opt,name=liquidator_reward_share_rate,json=liquidatorRewardShareRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"liquidator_reward_share_rate"`
	// binary_options_market_instant_listing_fee defines the expedited fee in INJ
	// required to create a derivative market by bypassing governance
	BinaryOptionsMarketInstantListingFee types.Coin `protobuf:"bytes,18,opt,name=binary_options_market_instant_listing_fee,json=binaryOptionsMarketInstantListingFee,proto3" json:"binary_options_market_instant_listing_fee"`
	// atomic_market_order_access_level defines the required access permissions
	// for executing atomic market orders
	AtomicMarketOrderAccessLevel AtomicMarketOrderAccessLevel `protobuf:"varint,19,opt,name=atomic_market_order_access_level,json=atomicMarketOrderAccessLevel,proto3,enum=injective.exchange.v2.AtomicMarketOrderAccessLevel" json:"atomic_market_order_access_level,omitempty"`
	// spot_atomic_market_order_fee_multiplier defines the default multiplier for
	// executing atomic market orders in spot markets
	SpotAtomicMarketOrderFeeMultiplier cosmossdk_io_math.LegacyDec `protobuf:"bytes,20,opt,name=spot_atomic_market_order_fee_multiplier,json=spotAtomicMarketOrderFeeMultiplier,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"spot_atomic_market_order_fee_multiplier"`
	// derivative_atomic_market_order_fee_multiplier defines the default
	// multiplier for executing atomic market orders in derivative markets
	DerivativeAtomicMarketOrderFeeMultiplier cosmossdk_io_math.LegacyDec `protobuf:"bytes,21,opt,name=derivative_atomic_market_order_fee_multiplier,json=derivativeAtomicMarketOrderFeeMultiplier,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"derivative_atomic_market_order_fee_multiplier"`
	// binary_options_atomic_market_order_fee_multiplier defines the default
	// multiplier for executing atomic market orders in binary markets
	BinaryOptionsAtomicMarketOrderFeeMultiplier cosmossdk_io_math.LegacyDec `protobuf:"bytes,22,opt,name=binary_options_atomic_market_order_fee_multiplier,json=binaryOptionsAtomicMarketOrderFeeMultiplier,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"binary_options_atomic_market_order_fee_multiplier"`
	// minimal_protocol_fee_rate defines the minimal protocol fee rate
	MinimalProtocolFeeRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,23,opt,name=minimal_protocol_fee_rate,json=minimalProtocolFeeRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"minimal_protocol_fee_rate"`
	// is_instant_derivative_market_launch_enabled defines whether instant
	// derivative market launch is enabled
	IsInstantDerivativeMarketLaunchEnabled bool  `protobuf:"varint,24,opt,name=is_instant_derivative_market_launch_enabled,json=isInstantDerivativeMarketLaunchEnabled,proto3" json:"is_instant_derivative_market_launch_enabled,omitempty"`
	PostOnlyModeHeightThreshold            int64 `protobuf:"varint,25,opt,name=post_only_mode_height_threshold,json=postOnlyModeHeightThreshold,proto3" json:"post_only_mode_height_threshold,omitempty"`
	// Maximum time in seconds since the last mark price update to allow a
	// decrease in margin
	MarginDecreasePriceTimestampThresholdSeconds int64 `protobuf:"varint,26,opt,name=margin_decrease_price_timestamp_threshold_seconds,json=marginDecreasePriceTimestampThresholdSeconds,proto3" json:"margin_decrease_price_timestamp_threshold_seconds,omitempty"`
	// List of addresses that are allowed to perform exchange admin operations
	ExchangeAdmins []string `protobuf:"bytes,27,rep,name=exchange_admins,json=exchangeAdmins,proto3" json:"exchange_admins,omitempty"`
	// inj_auction_max_cap defines the maximum cap for INJ sent to auction
	InjAuctionMaxCap cosmossdk_io_math.Int `protobuf:"bytes,28,opt,name=inj_auction_max_cap,json=injAuctionMaxCap,proto3,customtype=cosmossdk.io/math.Int" json:"inj_auction_max_cap"`
	// fixed_gas_enabled indicates if msg server will consume fixed gas amount for
	// certain msg types
	FixedGasEnabled bool `protobuf:"varint,29,opt,name=fixed_gas_enabled,json=fixedGasEnabled,proto3" json:"fixed_gas_enabled,omitempty"`
	// emit_legacy_version_events indicates if events of legacy version types
	// should be emitted in parallel to the new version events
	EmitLegacyVersionEvents bool `protobuf:"varint,30,opt,name=emit_legacy_version_events,json=emitLegacyVersionEvents,proto3" json:"emit_legacy_version_events,omitempty"`
	// default_reduce_margin_ratio defines the default reduce margin ratio on a
	// new derivative market
	DefaultReduceMarginRatio cosmossdk_io_math.LegacyDec `protobuf:"bytes,31,opt,name=default_reduce_margin_ratio,json=defaultReduceMarginRatio,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"default_reduce_margin_ratio"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5851fb01a33564, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetSpotMarketInstantListingFee() types.Coin {
	if m != nil {
		return m.SpotMarketInstantListingFee
	}
	return types.Coin{}
}

func (m *Params) GetDerivativeMarketInstantListingFee() types.Coin {
	if m != nil {
		return m.DerivativeMarketInstantListingFee
	}
	return types.Coin{}
}

func (m *Params) GetDefaultFundingInterval() int64 {
	if m != nil {
		return m.DefaultFundingInterval
	}
	return 0
}

func (m *Params) GetFundingMultiple() int64 {
	if m != nil {
		return m.FundingMultiple
	}
	return 0
}

func (m *Params) GetMaxDerivativeOrderSideCount() uint32 {
	if m != nil {
		return m.MaxDerivativeOrderSideCount
	}
	return 0
}

func (m *Params) GetTradingRewardsVestingDuration() int64 {
	if m != nil {
		return m.TradingRewardsVestingDuration
	}
	return 0
}

func (m *Params) GetBinaryOptionsMarketInstantListingFee() types.Coin {
	if m != nil {
		return m.BinaryOptionsMarketInstantListingFee
	}
	return types.Coin{}
}

func (m *Params) GetAtomicMarketOrderAccessLevel() AtomicMarketOrderAccessLevel {
	if m != nil {
		return m.AtomicMarketOrderAccessLevel
	}
	return AtomicMarketOrderAccessLevel_Nobody
}

func (m *Params) GetIsInstantDerivativeMarketLaunchEnabled() bool {
	if m != nil {
		return m.IsInstantDerivativeMarketLaunchEnabled
	}
	return false
}

func (m *Params) GetPostOnlyModeHeightThreshold() int64 {
	if m != nil {
		return m.PostOnlyModeHeightThreshold
	}
	return 0
}

func (m *Params) GetMarginDecreasePriceTimestampThresholdSeconds() int64 {
	if m != nil {
		return m.MarginDecreasePriceTimestampThresholdSeconds
	}
	return 0
}

func (m *Params) GetExchangeAdmins() []string {
	if m != nil {
		return m.ExchangeAdmins
	}
	return nil
}

func (m *Params) GetFixedGasEnabled() bool {
	if m != nil {
		return m.FixedGasEnabled
	}
	return false
}

func (m *Params) GetEmitLegacyVersionEvents() bool {
	if m != nil {
		return m.EmitLegacyVersionEvents
	}
	return false
}

type NextFundingTimestamp struct {
	NextTimestamp int64 `protobuf:"varint,1,opt,name=next_timestamp,json=nextTimestamp,proto3" json:"next_timestamp,omitempty"`
}

func (m *NextFundingTimestamp) Reset()         { *m = NextFundingTimestamp{} }
func (m *NextFundingTimestamp) String() string { return proto.CompactTextString(m) }
func (*NextFundingTimestamp) ProtoMessage()    {}
func (*NextFundingTimestamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5851fb01a33564, []int{1}
}
func (m *NextFundingTimestamp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NextFundingTimestamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NextFundingTimestamp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NextFundingTimestamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NextFundingTimestamp.Merge(m, src)
}
func (m *NextFundingTimestamp) XXX_Size() int {
	return m.Size()
}
func (m *NextFundingTimestamp) XXX_DiscardUnknown() {
	xxx_messageInfo_NextFundingTimestamp.DiscardUnknown(m)
}

var xxx_messageInfo_NextFundingTimestamp proto.InternalMessageInfo

func (m *NextFundingTimestamp) GetNextTimestamp() int64 {
	if m != nil {
		return m.NextTimestamp
	}
	return 0
}

type MidPriceAndTOB struct {
	// mid price of the market
	MidPrice *cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=mid_price,json=midPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"mid_price,omitempty"`
	// best buy price of the market
	BestBuyPrice *cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=best_buy_price,json=bestBuyPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"best_buy_price,omitempty"`
	// best sell price of the market
	BestSellPrice *cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=best_sell_price,json=bestSellPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"best_sell_price,omitempty"`
}

func (m *MidPriceAndTOB) Reset()         { *m = MidPriceAndTOB{} }
func (m *MidPriceAndTOB) String() string { return proto.CompactTextString(m) }
func (*MidPriceAndTOB) ProtoMessage()    {}
func (*MidPriceAndTOB) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5851fb01a33564, []int{2}
}
func (m *MidPriceAndTOB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MidPriceAndTOB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MidPriceAndTOB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MidPriceAndTOB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MidPriceAndTOB.Merge(m, src)
}
func (m *MidPriceAndTOB) XXX_Size() int {
	return m.Size()
}
func (m *MidPriceAndTOB) XXX_DiscardUnknown() {
	xxx_messageInfo_MidPriceAndTOB.DiscardUnknown(m)
}

var xxx_messageInfo_MidPriceAndTOB proto.InternalMessageInfo

// A subaccount's deposit for a given base currency
type Deposit struct {
	AvailableBalance cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=available_balance,json=availableBalance,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"available_balance"`
	TotalBalance     cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=total_balance,json=totalBalance,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"total_balance"`
}

func (m *Deposit) Reset()         { *m = Deposit{} }
func (m *Deposit) String() string { return proto.CompactTextString(m) }
func (*Deposit) ProtoMessage()    {}
func (*Deposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5851fb01a33564, []int{3}
}
func (m *Deposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Deposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Deposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Deposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deposit.Merge(m, src)
}
func (m *Deposit) XXX_Size() int {
	return m.Size()
}
func (m *Deposit) XXX_DiscardUnknown() {
	xxx_messageInfo_Deposit.DiscardUnknown(m)
}

var xxx_messageInfo_Deposit proto.InternalMessageInfo

type SubaccountTradeNonce struct {
	Nonce uint32 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *SubaccountTradeNonce) Reset()         { *m = SubaccountTradeNonce{} }
func (m *SubaccountTradeNonce) String() string { return proto.CompactTextString(m) }
func (*SubaccountTradeNonce) ProtoMessage()    {}
func (*SubaccountTradeNonce) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5851fb01a33564, []int{4}
}
func (m *SubaccountTradeNonce) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubaccountTradeNonce) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubaccountTradeNonce.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubaccountTradeNonce) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubaccountTradeNonce.Merge(m, src)
}
func (m *SubaccountTradeNonce) XXX_Size() int {
	return m.Size()
}
func (m *SubaccountTradeNonce) XXX_DiscardUnknown() {
	xxx_messageInfo_SubaccountTradeNonce.DiscardUnknown(m)
}

var xxx_messageInfo_SubaccountTradeNonce proto.InternalMessageInfo

func (m *SubaccountTradeNonce) GetNonce() uint32 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type SubaccountOrder struct {
	// price of the order
	Price cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=price,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"price"`
	// the amount of the quantity remaining fillable
	Quantity     cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=quantity,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"quantity"`
	IsReduceOnly bool                        `protobuf:"varint,3,opt,name=isReduceOnly,proto3" json:"isReduceOnly,omitempty"`
	Cid          string                      `protobuf:"bytes,4,opt,name=cid,proto3" json:"cid,omitempty"`
}

func (m *SubaccountOrder) Reset()         { *m = SubaccountOrder{} }
func (m *SubaccountOrder) String() string { return proto.CompactTextString(m) }
func (*SubaccountOrder) ProtoMessage()    {}
func (*SubaccountOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5851fb01a33564, []int{5}
}
func (m *SubaccountOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubaccountOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubaccountOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubaccountOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubaccountOrder.Merge(m, src)
}
func (m *SubaccountOrder) XXX_Size() int {
	return m.Size()
}
func (m *SubaccountOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_SubaccountOrder.DiscardUnknown(m)
}

var xxx_messageInfo_SubaccountOrder proto.InternalMessageInfo

func (m *SubaccountOrder) GetIsReduceOnly() bool {
	if m != nil {
		return m.IsReduceOnly
	}
	return false
}

func (m *SubaccountOrder) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

type SubaccountOrderData struct {
	Order     *SubaccountOrder `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	OrderHash []byte           `protobuf:"bytes,2,opt,name=order_hash,json=orderHash,proto3" json:"order_hash,omitempty"`
}

func (m *SubaccountOrderData) Reset()         { *m = SubaccountOrderData{} }
func (m *SubaccountOrderData) String() string { return proto.CompactTextString(m) }
func (*SubaccountOrderData) ProtoMessage()    {}
func (*SubaccountOrderData) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5851fb01a33564, []int{6}
}
func (m *SubaccountOrderData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubaccountOrderData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubaccountOrderData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubaccountOrderData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubaccountOrderData.Merge(m, src)
}
func (m *SubaccountOrderData) XXX_Size() int {
	return m.Size()
}
func (m *SubaccountOrderData) XXX_DiscardUnknown() {
	xxx_messageInfo_SubaccountOrderData.DiscardUnknown(m)
}

var xxx_messageInfo_SubaccountOrderData proto.InternalMessageInfo

func (m *SubaccountOrderData) GetOrder() *SubaccountOrder {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *SubaccountOrderData) GetOrderHash() []byte {
	if m != nil {
		return m.OrderHash
	}
	return nil
}

type Position struct {
	IsLong                 bool                        `protobuf:"varint,1,opt,name=isLong,proto3" json:"isLong,omitempty"`
	Quantity               cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=quantity,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"quantity"`
	EntryPrice             cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=entry_price,json=entryPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"entry_price"`
	Margin                 cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=margin,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"margin"`
	CumulativeFundingEntry cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=cumulative_funding_entry,json=cumulativeFundingEntry,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"cumulative_funding_entry"`
}

func (m *Position) Reset()         { *m = Position{} }
func (m *Position) String() string { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()    {}
func (*Position) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5851fb01a33564, []int{7}
}
func (m *Position) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Position) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Position.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Position) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Position.Merge(m, src)
}
func (m *Position) XXX_Size() int {
	return m.Size()
}
func (m *Position) XXX_DiscardUnknown() {
	xxx_messageInfo_Position.DiscardUnknown(m)
}

var xxx_messageInfo_Position proto.InternalMessageInfo

func (m *Position) GetIsLong() bool {
	if m != nil {
		return m.IsLong
	}
	return false
}

type Balance struct {
	SubaccountId string   `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	Denom        string   `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Deposits     *Deposit `protobuf:"bytes,3,opt,name=deposits,proto3" json:"deposits,omitempty"`
}

func (m *Balance) Reset()         { *m = Balance{} }
func (m *Balance) String() string { return proto.CompactTextString(m) }
func (*Balance) ProtoMessage()    {}
func (*Balance) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5851fb01a33564, []int{8}
}
func (m *Balance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Balance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Balance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Balance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Balance.Merge(m, src)
}
func (m *Balance) XXX_Size() int {
	return m.Size()
}
func (m *Balance) XXX_DiscardUnknown() {
	xxx_messageInfo_Balance.DiscardUnknown(m)
}

var xxx_messageInfo_Balance proto.InternalMessageInfo

type DerivativePosition struct {
	SubaccountId string    `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	MarketId     string    `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	Position     *Position `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
}

func (m *DerivativePosition) Reset()         { *m = DerivativePosition{} }
func (m *DerivativePosition) String() string { return proto.CompactTextString(m) }
func (*DerivativePosition) ProtoMessage()    {}
func (*DerivativePosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5851fb01a33564, []int{9}
}
func (m *DerivativePosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DerivativePosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DerivativePosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DerivativePosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DerivativePosition.Merge(m, src)
}
func (m *DerivativePosition) XXX_Size() int {
	return m.Size()
}
func (m *DerivativePosition) XXX_DiscardUnknown() {
	xxx_messageInfo_DerivativePosition.DiscardUnknown(m)
}

var xxx_messageInfo_DerivativePosition proto.InternalMessageInfo

type MarketOrderIndicator struct {
	// market_id represents the unique ID of the market
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	IsBuy    bool   `protobuf:"varint,2,opt,name=isBuy,proto3" json:"isBuy,omitempty"`
}

func (m *MarketOrderIndicator) Reset()         { *m = MarketOrderIndicator{} }
func (m *MarketOrderIndicator) String() string { return proto.CompactTextString(m) }
func (*MarketOrderIndicator) ProtoMessage()    {}
func (*MarketOrderIndicator) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5851fb01a33564, []int{10}
}
func (m *MarketOrderIndicator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarketOrderIndicator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarketOrderIndicator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarketOrderIndicator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketOrderIndicator.Merge(m, src)
}
func (m *MarketOrderIndicator) XXX_Size() int {
	return m.Size()
}
func (m *MarketOrderIndicator) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketOrderIndicator.DiscardUnknown(m)
}

var xxx_messageInfo_MarketOrderIndicator proto.InternalMessageInfo

func (m *MarketOrderIndicator) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *MarketOrderIndicator) GetIsBuy() bool {
	if m != nil {
		return m.IsBuy
	}
	return false
}

type TradeLog struct {
	Quantity cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=quantity,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"quantity"`
	Price    cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=price,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"price"`
	// bytes32 subaccount ID that executed the trade
	SubaccountId        []byte                      `protobuf:"bytes,3,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	Fee                 cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=fee,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"fee"`
	OrderHash           []byte                      `protobuf:"bytes,5,opt,name=order_hash,json=orderHash,proto3" json:"order_hash,omitempty"`
	FeeRecipientAddress []byte                      `protobuf:"bytes,6,opt,name=fee_recipient_address,json=feeRecipientAddress,proto3" json:"fee_recipient_address,omitempty"`
	Cid                 string                      `protobuf:"bytes,7,opt,name=cid,proto3" json:"cid,omitempty"`
}

func (m *TradeLog) Reset()         { *m = TradeLog{} }
func (m *TradeLog) String() string { return proto.CompactTextString(m) }
func (*TradeLog) ProtoMessage()    {}
func (*TradeLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5851fb01a33564, []int{11}
}
func (m *TradeLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TradeLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TradeLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TradeLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeLog.Merge(m, src)
}
func (m *TradeLog) XXX_Size() int {
	return m.Size()
}
func (m *TradeLog) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeLog.DiscardUnknown(m)
}

var xxx_messageInfo_TradeLog proto.InternalMessageInfo

func (m *TradeLog) GetSubaccountId() []byte {
	if m != nil {
		return m.SubaccountId
	}
	return nil
}

func (m *TradeLog) GetOrderHash() []byte {
	if m != nil {
		return m.OrderHash
	}
	return nil
}

func (m *TradeLog) GetFeeRecipientAddress() []byte {
	if m != nil {
		return m.FeeRecipientAddress
	}
	return nil
}

func (m *TradeLog) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

type PositionDelta struct {
	IsLong            bool                        `protobuf:"varint,1,opt,name=is_long,json=isLong,proto3" json:"is_long,omitempty"`
	ExecutionQuantity cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=execution_quantity,json=executionQuantity,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"execution_quantity"`
	ExecutionMargin   cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=execution_margin,json=executionMargin,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"execution_margin"`
	ExecutionPrice    cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=execution_price,json=executionPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"execution_price"`
}

func (m *PositionDelta) Reset()         { *m = PositionDelta{} }
func (m *PositionDelta) String() string { return proto.CompactTextString(m) }
func (*PositionDelta) ProtoMessage()    {}
func (*PositionDelta) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5851fb01a33564, []int{12}
}
func (m *PositionDelta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PositionDelta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PositionDelta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PositionDelta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionDelta.Merge(m, src)
}
func (m *PositionDelta) XXX_Size() int {
	return m.Size()
}
func (m *PositionDelta) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionDelta.DiscardUnknown(m)
}

var xxx_messageInfo_PositionDelta proto.InternalMessageInfo

func (m *PositionDelta) GetIsLong() bool {
	if m != nil {
		return m.IsLong
	}
	return false
}

type DerivativeTradeLog struct {
	SubaccountId        []byte                      `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	PositionDelta       *PositionDelta              `protobuf:"bytes,2,opt,name=position_delta,json=positionDelta,proto3" json:"position_delta,omitempty"`
	Payout              cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=payout,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"payout"`
	Fee                 cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=fee,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"fee"`
	OrderHash           []byte                      `protobuf:"bytes,5,opt,name=order_hash,json=orderHash,proto3" json:"order_hash,omitempty"`
	FeeRecipientAddress []byte                      `protobuf:"bytes,6,opt,name=fee_recipient_address,json=feeRecipientAddress,proto3" json:"fee_recipient_address,omitempty"`
	Cid                 string                      `protobuf:"bytes,7,opt,name=cid,proto3" json:"cid,omitempty"`
	Pnl                 cosmossdk_io_math.LegacyDec `protobuf:"bytes,8,opt,name=pnl,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"pnl"`
}

func (m *DerivativeTradeLog) Reset()         { *m = DerivativeTradeLog{} }
func (m *DerivativeTradeLog) String() string { return proto.CompactTextString(m) }
func (*DerivativeTradeLog) ProtoMessage()    {}
func (*DerivativeTradeLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5851fb01a33564, []int{13}
}
func (m *DerivativeTradeLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DerivativeTradeLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DerivativeTradeLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DerivativeTradeLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DerivativeTradeLog.Merge(m, src)
}
func (m *DerivativeTradeLog) XXX_Size() int {
	return m.Size()
}
func (m *DerivativeTradeLog) XXX_DiscardUnknown() {
	xxx_messageInfo_DerivativeTradeLog.DiscardUnknown(m)
}

var xxx_messageInfo_DerivativeTradeLog proto.InternalMessageInfo

func (m *DerivativeTradeLog) GetSubaccountId() []byte {
	if m != nil {
		return m.SubaccountId
	}
	return nil
}

func (m *DerivativeTradeLog) GetPositionDelta() *PositionDelta {
	if m != nil {
		return m.PositionDelta
	}
	return nil
}

func (m *DerivativeTradeLog) GetOrderHash() []byte {
	if m != nil {
		return m.OrderHash
	}
	return nil
}

func (m *DerivativeTradeLog) GetFeeRecipientAddress() []byte {
	if m != nil {
		return m.FeeRecipientAddress
	}
	return nil
}

func (m *DerivativeTradeLog) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

type SubaccountPosition struct {
	Position     *Position `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	SubaccountId []byte    `protobuf:"bytes,2,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
}

func (m *SubaccountPosition) Reset()         { *m = SubaccountPosition{} }
func (m *SubaccountPosition) String() string { return proto.CompactTextString(m) }
func (*SubaccountPosition) ProtoMessage()    {}
func (*SubaccountPosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5851fb01a33564, []int{14}
}
func (m *SubaccountPosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubaccountPosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubaccountPosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubaccountPosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubaccountPosition.Merge(m, src)
}
func (m *SubaccountPosition) XXX_Size() int {
	return m.Size()
}
func (m *SubaccountPosition) XXX_DiscardUnknown() {
	xxx_messageInfo_SubaccountPosition.DiscardUnknown(m)
}

var xxx_messageInfo_SubaccountPosition proto.InternalMessageInfo

func (m *SubaccountPosition) GetPosition() *Position {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *SubaccountPosition) GetSubaccountId() []byte {
	if m != nil {
		return m.SubaccountId
	}
	return nil
}

type SubaccountDeposit struct {
	SubaccountId []byte   `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	Deposit      *Deposit `protobuf:"bytes,2,opt,name=deposit,proto3" json:"deposit,omitempty"`
}

func (m *SubaccountDeposit) Reset()         { *m = SubaccountDeposit{} }
func (m *SubaccountDeposit) String() string { return proto.CompactTextString(m) }
func (*SubaccountDeposit) ProtoMessage()    {}
func (*SubaccountDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5851fb01a33564, []int{15}
}
func (m *SubaccountDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubaccountDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubaccountDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubaccountDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubaccountDeposit.Merge(m, src)
}
func (m *SubaccountDeposit) XXX_Size() int {
	return m.Size()
}
func (m *SubaccountDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_SubaccountDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_SubaccountDeposit proto.InternalMessageInfo

func (m *SubaccountDeposit) GetSubaccountId() []byte {
	if m != nil {
		return m.SubaccountId
	}
	return nil
}

func (m *SubaccountDeposit) GetDeposit() *Deposit {
	if m != nil {
		return m.Deposit
	}
	return nil
}

type DepositUpdate struct {
	Denom    string               `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Deposits []*SubaccountDeposit `protobuf:"bytes,2,rep,name=deposits,proto3" json:"deposits,omitempty"`
}

func (m *DepositUpdate) Reset()         { *m = DepositUpdate{} }
func (m *DepositUpdate) String() string { return proto.CompactTextString(m) }
func (*DepositUpdate) ProtoMessage()    {}
func (*DepositUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5851fb01a33564, []int{16}
}
func (m *DepositUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositUpdate.Merge(m, src)
}
func (m *DepositUpdate) XXX_Size() int {
	return m.Size()
}
func (m *DepositUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_DepositUpdate proto.InternalMessageInfo

func (m *DepositUpdate) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *DepositUpdate) GetDeposits() []*SubaccountDeposit {
	if m != nil {
		return m.Deposits
	}
	return nil
}

type PointsMultiplier struct {
	MakerPointsMultiplier cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=maker_points_multiplier,json=makerPointsMultiplier,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"maker_points_multiplier"`
	TakerPointsMultiplier cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=taker_points_multiplier,json=takerPointsMultiplier,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"taker_points_multiplier"`
}

func (m *PointsMultiplier) Reset()         { *m = PointsMultiplier{} }
func (m *PointsMultiplier) String() string { return proto.CompactTextString(m) }
func (*PointsMultiplier) ProtoMessage()    {}
func (*PointsMultiplier) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5851fb01a33564, []int{17}
}
func (m *PointsMultiplier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PointsMultiplier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PointsMultiplier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PointsMultiplier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PointsMultiplier.Merge(m, src)
}
func (m *PointsMultiplier) XXX_Size() int {
	return m.Size()
}
func (m *PointsMultiplier) XXX_DiscardUnknown() {
	xxx_messageInfo_PointsMultiplier.DiscardUnknown(m)
}

var xxx_messageInfo_PointsMultiplier proto.InternalMessageInfo

type TradingRewardCampaignBoostInfo struct {
	BoostedSpotMarketIds        []string           `protobuf:"bytes,1,rep,name=boosted_spot_market_ids,json=boostedSpotMarketIds,proto3" json:"boosted_spot_market_ids,omitempty"`
	SpotMarketMultipliers       []PointsMultiplier `protobuf:"bytes,2,rep,name=spot_market_multipliers,json=spotMarketMultipliers,proto3" json:"spot_market_multipliers"`
	BoostedDerivativeMarketIds  []string           `protobuf:"bytes,3,rep,name=boosted_derivative_market_ids,json=boostedDerivativeMarketIds,proto3" json:"boosted_derivative_market_ids,omitempty"`
	DerivativeMarketMultipliers []PointsMultiplier `protobuf:"bytes,4,rep,name=derivative_market_multipliers,json=derivativeMarketMultipliers,proto3" json:"derivative_market_multipliers"`
}

func (m *TradingRewardCampaignBoostInfo) Reset()         { *m = TradingRewardCampaignBoostInfo{} }
func (m *TradingRewardCampaignBoostInfo) String() string { return proto.CompactTextString(m) }
func (*TradingRewardCampaignBoostInfo) ProtoMessage()    {}
func (*TradingRewardCampaignBoostInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5851fb01a33564, []int{18}
}
func (m *TradingRewardCampaignBoostInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TradingRewardCampaignBoostInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TradingRewardCampaignBoostInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TradingRewardCampaignBoostInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradingRewardCampaignBoostInfo.Merge(m, src)
}
func (m *TradingRewardCampaignBoostInfo) XXX_Size() int {
	return m.Size()
}
func (m *TradingRewardCampaignBoostInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TradingRewardCampaignBoostInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TradingRewardCampaignBoostInfo proto.InternalMessageInfo

func (m *TradingRewardCampaignBoostInfo) GetBoostedSpotMarketIds() []string {
	if m != nil {
		return m.BoostedSpotMarketIds
	}
	return nil
}

func (m *TradingRewardCampaignBoostInfo) GetSpotMarketMultipliers() []PointsMultiplier {
	if m != nil {
		return m.SpotMarketMultipliers
	}
	return nil
}

func (m *TradingRewardCampaignBoostInfo) GetBoostedDerivativeMarketIds() []string {
	if m != nil {
		return m.BoostedDerivativeMarketIds
	}
	return nil
}

func (m *TradingRewardCampaignBoostInfo) GetDerivativeMarketMultipliers() []PointsMultiplier {
	if m != nil {
		return m.DerivativeMarketMultipliers
	}
	return nil
}

type CampaignRewardPool struct {
	StartTimestamp int64 `protobuf:"varint,1,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	// max_campaign_rewards are the maximum reward amounts to be disbursed at the
	// end of the campaign
	MaxCampaignRewards github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=max_campaign_rewards,json=maxCampaignRewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"max_campaign_rewards"`
}

func (m *CampaignRewardPool) Reset()         { *m = CampaignRewardPool{} }
func (m *CampaignRewardPool) String() string { return proto.CompactTextString(m) }
func (*CampaignRewardPool) ProtoMessage()    {}
func (*CampaignRewardPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5851fb01a33564, []int{19}
}
func (m *CampaignRewardPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CampaignRewardPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CampaignRewardPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CampaignRewardPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CampaignRewardPool.Merge(m, src)
}
func (m *CampaignRewardPool) XXX_Size() int {
	return m.Size()
}
func (m *CampaignRewardPool) XXX_DiscardUnknown() {
	xxx_messageInfo_CampaignRewardPool.DiscardUnknown(m)
}

var xxx_messageInfo_CampaignRewardPool proto.InternalMessageInfo

func (m *CampaignRewardPool) GetStartTimestamp() int64 {
	if m != nil {
		return m.StartTimestamp
	}
	return 0
}

func (m *CampaignRewardPool) GetMaxCampaignRewards() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.MaxCampaignRewards
	}
	return nil
}

type TradingRewardCampaignInfo struct {
	// number of seconds of the duration of each campaign
	CampaignDurationSeconds int64 `protobuf:"varint,1,opt,name=campaign_duration_seconds,json=campaignDurationSeconds,proto3" json:"campaign_duration_seconds,omitempty"`
	// the trading fee quote denoms which will be counted for the rewards
	QuoteDenoms []string `protobuf:"bytes,2,rep,name=quote_denoms,json=quoteDenoms,proto3" json:"quote_denoms,omitempty"`
	// the optional boost info for markets
	TradingRewardBoostInfo *TradingRewardCampaignBoostInfo `protobuf:"bytes,3,opt,name=trading_reward_boost_info,json=tradingRewardBoostInfo,proto3" json:"trading_reward_boost_info,omitempty"`
	// the marketIDs which are disqualified from being rewarded
	DisqualifiedMarketIds []string `protobuf:"bytes,4,rep,name=disqualified_market_ids,json=disqualifiedMarketIds,proto3" json:"disqualified_market_ids,omitempty"`
}

func (m *TradingRewardCampaignInfo) Reset()         { *m = TradingRewardCampaignInfo{} }
func (m *TradingRewardCampaignInfo) String() string { return proto.CompactTextString(m) }
func (*TradingRewardCampaignInfo) ProtoMessage()    {}
func (*TradingRewardCampaignInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5851fb01a33564, []int{20}
}
func (m *TradingRewardCampaignInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TradingRewardCampaignInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TradingRewardCampaignInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TradingRewardCampaignInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradingRewardCampaignInfo.Merge(m, src)
}
func (m *TradingRewardCampaignInfo) XXX_Size() int {
	return m.Size()
}
func (m *TradingRewardCampaignInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TradingRewardCampaignInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TradingRewardCampaignInfo proto.InternalMessageInfo

func (m *TradingRewardCampaignInfo) GetCampaignDurationSeconds() int64 {
	if m != nil {
		return m.CampaignDurationSeconds
	}
	return 0
}

func (m *TradingRewardCampaignInfo) GetQuoteDenoms() []string {
	if m != nil {
		return m.QuoteDenoms
	}
	return nil
}

func (m *TradingRewardCampaignInfo) GetTradingRewardBoostInfo() *TradingRewardCampaignBoostInfo {
	if m != nil {
		return m.TradingRewardBoostInfo
	}
	return nil
}

func (m *TradingRewardCampaignInfo) GetDisqualifiedMarketIds() []string {
	if m != nil {
		return m.DisqualifiedMarketIds
	}
	return nil
}

type FeeDiscountTierInfo struct {
	MakerDiscountRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=maker_discount_rate,json=makerDiscountRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"maker_discount_rate"`
	TakerDiscountRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=taker_discount_rate,json=takerDiscountRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"taker_discount_rate"`
	StakedAmount      cosmossdk_io_math.Int       `protobuf:"bytes,3,opt,name=staked_amount,json=stakedAmount,proto3,customtype=cosmossdk.io/math.Int" json:"staked_amount"`
	Volume            cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=volume,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"volume"`
}

func (m *FeeDiscountTierInfo) Reset()         { *m = FeeDiscountTierInfo{} }
func (m *FeeDiscountTierInfo) String() string { return proto.CompactTextString(m) }
func (*FeeDiscountTierInfo) ProtoMessage()    {}
func (*FeeDiscountTierInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5851fb01a33564, []int{21}
}
func (m *FeeDiscountTierInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeDiscountTierInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeDiscountTierInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeDiscountTierInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeDiscountTierInfo.Merge(m, src)
}
func (m *FeeDiscountTierInfo) XXX_Size() int {
	return m.Size()
}
func (m *FeeDiscountTierInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeDiscountTierInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FeeDiscountTierInfo proto.InternalMessageInfo

type FeeDiscountSchedule struct {
	BucketCount    uint64 `protobuf:"varint,1,opt,name=bucket_count,json=bucketCount,proto3" json:"bucket_count,omitempty"`
	BucketDuration int64  `protobuf:"varint,2,opt,name=bucket_duration,json=bucketDuration,proto3" json:"bucket_duration,omitempty"`
	// the trading fee quote denoms which will be counted for the fee paid
	// contribution
	QuoteDenoms []string `protobuf:"bytes,3,rep,name=quote_denoms,json=quoteDenoms,proto3" json:"quote_denoms,omitempty"`
	// the fee discount tiers
	TierInfos []*FeeDiscountTierInfo `protobuf:"bytes,4,rep,name=tier_infos,json=tierInfos,proto3" json:"tier_infos,omitempty"`
	// the marketIDs which are disqualified from contributing to the fee paid
	// amount
	DisqualifiedMarketIds []string `protobuf:"bytes,5,rep,name=disqualified_market_ids,json=disqualifiedMarketIds,proto3" json:"disqualified_market_ids,omitempty"`
}

func (m *FeeDiscountSchedule) Reset()         { *m = FeeDiscountSchedule{} }
func (m *FeeDiscountSchedule) String() string { return proto.CompactTextString(m) }
func (*FeeDiscountSchedule) ProtoMessage()    {}
func (*FeeDiscountSchedule) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5851fb01a33564, []int{22}
}
func (m *FeeDiscountSchedule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeDiscountSchedule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeDiscountSchedule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeDiscountSchedule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeDiscountSchedule.Merge(m, src)
}
func (m *FeeDiscountSchedule) XXX_Size() int {
	return m.Size()
}
func (m *FeeDiscountSchedule) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeDiscountSchedule.DiscardUnknown(m)
}

var xxx_messageInfo_FeeDiscountSchedule proto.InternalMessageInfo

func (m *FeeDiscountSchedule) GetBucketCount() uint64 {
	if m != nil {
		return m.BucketCount
	}
	return 0
}

func (m *FeeDiscountSchedule) GetBucketDuration() int64 {
	if m != nil {
		return m.BucketDuration
	}
	return 0
}

func (m *FeeDiscountSchedule) GetQuoteDenoms() []string {
	if m != nil {
		return m.QuoteDenoms
	}
	return nil
}

func (m *FeeDiscountSchedule) GetTierInfos() []*FeeDiscountTierInfo {
	if m != nil {
		return m.TierInfos
	}
	return nil
}

func (m *FeeDiscountSchedule) GetDisqualifiedMarketIds() []string {
	if m != nil {
		return m.DisqualifiedMarketIds
	}
	return nil
}

type FeeDiscountTierTTL struct {
	Tier         uint64 `protobuf:"varint,1,opt,name=tier,proto3" json:"tier,omitempty"`
	TtlTimestamp int64  `protobuf:"varint,2,opt,name=ttl_timestamp,json=ttlTimestamp,proto3" json:"ttl_timestamp,omitempty"`
}

func (m *FeeDiscountTierTTL) Reset()         { *m = FeeDiscountTierTTL{} }
func (m *FeeDiscountTierTTL) String() string { return proto.CompactTextString(m) }
func (*FeeDiscountTierTTL) ProtoMessage()    {}
func (*FeeDiscountTierTTL) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5851fb01a33564, []int{23}
}
func (m *FeeDiscountTierTTL) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeDiscountTierTTL) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeDiscountTierTTL.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeDiscountTierTTL) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeDiscountTierTTL.Merge(m, src)
}
func (m *FeeDiscountTierTTL) XXX_Size() int {
	return m.Size()
}
func (m *FeeDiscountTierTTL) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeDiscountTierTTL.DiscardUnknown(m)
}

var xxx_messageInfo_FeeDiscountTierTTL proto.InternalMessageInfo

func (m *FeeDiscountTierTTL) GetTier() uint64 {
	if m != nil {
		return m.Tier
	}
	return 0
}

func (m *FeeDiscountTierTTL) GetTtlTimestamp() int64 {
	if m != nil {
		return m.TtlTimestamp
	}
	return 0
}

type AccountRewards struct {
	Account string                                   `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Rewards github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=rewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"rewards"`
}

func (m *AccountRewards) Reset()         { *m = AccountRewards{} }
func (m *AccountRewards) String() string { return proto.CompactTextString(m) }
func (*AccountRewards) ProtoMessage()    {}
func (*AccountRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5851fb01a33564, []int{24}
}
func (m *AccountRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountRewards.Merge(m, src)
}
func (m *AccountRewards) XXX_Size() int {
	return m.Size()
}
func (m *AccountRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountRewards.DiscardUnknown(m)
}

var xxx_messageInfo_AccountRewards proto.InternalMessageInfo

func (m *AccountRewards) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *AccountRewards) GetRewards() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Rewards
	}
	return nil
}

type TradeRecords struct {
	MarketId           string         `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	LatestTradeRecords []*TradeRecord `protobuf:"bytes,2,rep,name=latest_trade_records,json=latestTradeRecords,proto3" json:"latest_trade_records,omitempty"`
}

func (m *TradeRecords) Reset()         { *m = TradeRecords{} }
func (m *TradeRecords) String() string { return proto.CompactTextString(m) }
func (*TradeRecords) ProtoMessage()    {}
func (*TradeRecords) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5851fb01a33564, []int{25}
}
func (m *TradeRecords) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TradeRecords) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TradeRecords.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TradeRecords) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeRecords.Merge(m, src)
}
func (m *TradeRecords) XXX_Size() int {
	return m.Size()
}
func (m *TradeRecords) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeRecords.DiscardUnknown(m)
}

var xxx_messageInfo_TradeRecords proto.InternalMessageInfo

func (m *TradeRecords) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *TradeRecords) GetLatestTradeRecords() []*TradeRecord {
	if m != nil {
		return m.LatestTradeRecords
	}
	return nil
}

type SubaccountIDs struct {
	SubaccountIds [][]byte `protobuf:"bytes,1,rep,name=subaccount_ids,json=subaccountIds,proto3" json:"subaccount_ids,omitempty"`
}

func (m *SubaccountIDs) Reset()         { *m = SubaccountIDs{} }
func (m *SubaccountIDs) String() string { return proto.CompactTextString(m) }
func (*SubaccountIDs) ProtoMessage()    {}
func (*SubaccountIDs) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5851fb01a33564, []int{26}
}
func (m *SubaccountIDs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubaccountIDs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubaccountIDs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubaccountIDs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubaccountIDs.Merge(m, src)
}
func (m *SubaccountIDs) XXX_Size() int {
	return m.Size()
}
func (m *SubaccountIDs) XXX_DiscardUnknown() {
	xxx_messageInfo_SubaccountIDs.DiscardUnknown(m)
}

var xxx_messageInfo_SubaccountIDs proto.InternalMessageInfo

func (m *SubaccountIDs) GetSubaccountIds() [][]byte {
	if m != nil {
		return m.SubaccountIds
	}
	return nil
}

type TradeRecord struct {
	Timestamp int64                       `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Price     cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=price,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"price"`
	Quantity  cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=quantity,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"quantity"`
}

func (m *TradeRecord) Reset()         { *m = TradeRecord{} }
func (m *TradeRecord) String() string { return proto.CompactTextString(m) }
func (*TradeRecord) ProtoMessage()    {}
func (*TradeRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5851fb01a33564, []int{27}
}
func (m *TradeRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TradeRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TradeRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TradeRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeRecord.Merge(m, src)
}
func (m *TradeRecord) XXX_Size() int {
	return m.Size()
}
func (m *TradeRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeRecord.DiscardUnknown(m)
}

var xxx_messageInfo_TradeRecord proto.InternalMessageInfo

func (m *TradeRecord) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type Level struct {
	// price
	P cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=p,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"p"`
	// quantity
	Q cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=q,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"q"`
}

func (m *Level) Reset()         { *m = Level{} }
func (m *Level) String() string { return proto.CompactTextString(m) }
func (*Level) ProtoMessage()    {}
func (*Level) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5851fb01a33564, []int{28}
}
func (m *Level) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Level) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Level.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Level) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Level.Merge(m, src)
}
func (m *Level) XXX_Size() int {
	return m.Size()
}
func (m *Level) XXX_DiscardUnknown() {
	xxx_messageInfo_Level.DiscardUnknown(m)
}

var xxx_messageInfo_Level proto.InternalMessageInfo

type AggregateSubaccountVolumeRecord struct {
	SubaccountId  string          `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	MarketVolumes []*MarketVolume `protobuf:"bytes,2,rep,name=market_volumes,json=marketVolumes,proto3" json:"market_volumes,omitempty"`
}

func (m *AggregateSubaccountVolumeRecord) Reset()         { *m = AggregateSubaccountVolumeRecord{} }
func (m *AggregateSubaccountVolumeRecord) String() string { return proto.CompactTextString(m) }
func (*AggregateSubaccountVolumeRecord) ProtoMessage()    {}
func (*AggregateSubaccountVolumeRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5851fb01a33564, []int{29}
}
func (m *AggregateSubaccountVolumeRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AggregateSubaccountVolumeRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AggregateSubaccountVolumeRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AggregateSubaccountVolumeRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregateSubaccountVolumeRecord.Merge(m, src)
}
func (m *AggregateSubaccountVolumeRecord) XXX_Size() int {
	return m.Size()
}
func (m *AggregateSubaccountVolumeRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregateSubaccountVolumeRecord.DiscardUnknown(m)
}

var xxx_messageInfo_AggregateSubaccountVolumeRecord proto.InternalMessageInfo

func (m *AggregateSubaccountVolumeRecord) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

func (m *AggregateSubaccountVolumeRecord) GetMarketVolumes() []*MarketVolume {
	if m != nil {
		return m.MarketVolumes
	}
	return nil
}

type AggregateAccountVolumeRecord struct {
	Account       string          `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	MarketVolumes []*MarketVolume `protobuf:"bytes,2,rep,name=market_volumes,json=marketVolumes,proto3" json:"market_volumes,omitempty"`
}

func (m *AggregateAccountVolumeRecord) Reset()         { *m = AggregateAccountVolumeRecord{} }
func (m *AggregateAccountVolumeRecord) String() string { return proto.CompactTextString(m) }
func (*AggregateAccountVolumeRecord) ProtoMessage()    {}
func (*AggregateAccountVolumeRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5851fb01a33564, []int{30}
}
func (m *AggregateAccountVolumeRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AggregateAccountVolumeRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AggregateAccountVolumeRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AggregateAccountVolumeRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregateAccountVolumeRecord.Merge(m, src)
}
func (m *AggregateAccountVolumeRecord) XXX_Size() int {
	return m.Size()
}
func (m *AggregateAccountVolumeRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregateAccountVolumeRecord.DiscardUnknown(m)
}

var xxx_messageInfo_AggregateAccountVolumeRecord proto.InternalMessageInfo

func (m *AggregateAccountVolumeRecord) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *AggregateAccountVolumeRecord) GetMarketVolumes() []*MarketVolume {
	if m != nil {
		return m.MarketVolumes
	}
	return nil
}

type DenomDecimals struct {
	Denom    string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Decimals uint64 `protobuf:"varint,2,opt,name=decimals,proto3" json:"decimals,omitempty"`
}

func (m *DenomDecimals) Reset()         { *m = DenomDecimals{} }
func (m *DenomDecimals) String() string { return proto.CompactTextString(m) }
func (*DenomDecimals) ProtoMessage()    {}
func (*DenomDecimals) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5851fb01a33564, []int{31}
}
func (m *DenomDecimals) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenomDecimals) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenomDecimals.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenomDecimals) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenomDecimals.Merge(m, src)
}
func (m *DenomDecimals) XXX_Size() int {
	return m.Size()
}
func (m *DenomDecimals) XXX_DiscardUnknown() {
	xxx_messageInfo_DenomDecimals.DiscardUnknown(m)
}

var xxx_messageInfo_DenomDecimals proto.InternalMessageInfo

func (m *DenomDecimals) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *DenomDecimals) GetDecimals() uint64 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

type GrantAuthorization struct {
	Grantee string                `protobuf:"bytes,1,opt,name=grantee,proto3" json:"grantee,omitempty"`
	Amount  cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *GrantAuthorization) Reset()         { *m = GrantAuthorization{} }
func (m *GrantAuthorization) String() string { return proto.CompactTextString(m) }
func (*GrantAuthorization) ProtoMessage()    {}
func (*GrantAuthorization) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5851fb01a33564, []int{32}
}
func (m *GrantAuthorization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GrantAuthorization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GrantAuthorization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GrantAuthorization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrantAuthorization.Merge(m, src)
}
func (m *GrantAuthorization) XXX_Size() int {
	return m.Size()
}
func (m *GrantAuthorization) XXX_DiscardUnknown() {
	xxx_messageInfo_GrantAuthorization.DiscardUnknown(m)
}

var xxx_messageInfo_GrantAuthorization proto.InternalMessageInfo

func (m *GrantAuthorization) GetGrantee() string {
	if m != nil {
		return m.Grantee
	}
	return ""
}

type ActiveGrant struct {
	Granter string                `protobuf:"bytes,1,opt,name=granter,proto3" json:"granter,omitempty"`
	Amount  cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *ActiveGrant) Reset()         { *m = ActiveGrant{} }
func (m *ActiveGrant) String() string { return proto.CompactTextString(m) }
func (*ActiveGrant) ProtoMessage()    {}
func (*ActiveGrant) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5851fb01a33564, []int{33}
}
func (m *ActiveGrant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActiveGrant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActiveGrant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActiveGrant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActiveGrant.Merge(m, src)
}
func (m *ActiveGrant) XXX_Size() int {
	return m.Size()
}
func (m *ActiveGrant) XXX_DiscardUnknown() {
	xxx_messageInfo_ActiveGrant.DiscardUnknown(m)
}

var xxx_messageInfo_ActiveGrant proto.InternalMessageInfo

func (m *ActiveGrant) GetGranter() string {
	if m != nil {
		return m.Granter
	}
	return ""
}

type EffectiveGrant struct {
	Granter         string                `protobuf:"bytes,1,opt,name=granter,proto3" json:"granter,omitempty"`
	NetGrantedStake cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=net_granted_stake,json=netGrantedStake,proto3,customtype=cosmossdk.io/math.Int" json:"net_granted_stake"`
	IsValid         bool                  `protobuf:"varint,3,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
}

func (m *EffectiveGrant) Reset()         { *m = EffectiveGrant{} }
func (m *EffectiveGrant) String() string { return proto.CompactTextString(m) }
func (*EffectiveGrant) ProtoMessage()    {}
func (*EffectiveGrant) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5851fb01a33564, []int{34}
}
func (m *EffectiveGrant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EffectiveGrant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EffectiveGrant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EffectiveGrant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EffectiveGrant.Merge(m, src)
}
func (m *EffectiveGrant) XXX_Size() int {
	return m.Size()
}
func (m *EffectiveGrant) XXX_DiscardUnknown() {
	xxx_messageInfo_EffectiveGrant.DiscardUnknown(m)
}

var xxx_messageInfo_EffectiveGrant proto.InternalMessageInfo

func (m *EffectiveGrant) GetGranter() string {
	if m != nil {
		return m.Granter
	}
	return ""
}

func (m *EffectiveGrant) GetIsValid() bool {
	if m != nil {
		return m.IsValid
	}
	return false
}

type DenomMinNotional struct {
	Denom       string                      `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	MinNotional cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=min_notional,json=minNotional,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"min_notional"`
}

func (m *DenomMinNotional) Reset()         { *m = DenomMinNotional{} }
func (m *DenomMinNotional) String() string { return proto.CompactTextString(m) }
func (*DenomMinNotional) ProtoMessage()    {}
func (*DenomMinNotional) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5851fb01a33564, []int{35}
}
func (m *DenomMinNotional) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenomMinNotional) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenomMinNotional.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenomMinNotional) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenomMinNotional.Merge(m, src)
}
func (m *DenomMinNotional) XXX_Size() int {
	return m.Size()
}
func (m *DenomMinNotional) XXX_DiscardUnknown() {
	xxx_messageInfo_DenomMinNotional.DiscardUnknown(m)
}

var xxx_messageInfo_DenomMinNotional proto.InternalMessageInfo

func (m *DenomMinNotional) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func init() {
	proto.RegisterEnum("injective.exchange.v2.ExecutionType", ExecutionType_name, ExecutionType_value)
	proto.RegisterType((*Params)(nil), "injective.exchange.v2.Params")
	proto.RegisterType((*NextFundingTimestamp)(nil), "injective.exchange.v2.NextFundingTimestamp")
	proto.RegisterType((*MidPriceAndTOB)(nil), "injective.exchange.v2.MidPriceAndTOB")
	proto.RegisterType((*Deposit)(nil), "injective.exchange.v2.Deposit")
	proto.RegisterType((*SubaccountTradeNonce)(nil), "injective.exchange.v2.SubaccountTradeNonce")
	proto.RegisterType((*SubaccountOrder)(nil), "injective.exchange.v2.SubaccountOrder")
	proto.RegisterType((*SubaccountOrderData)(nil), "injective.exchange.v2.SubaccountOrderData")
	proto.RegisterType((*Position)(nil), "injective.exchange.v2.Position")
	proto.RegisterType((*Balance)(nil), "injective.exchange.v2.Balance")
	proto.RegisterType((*DerivativePosition)(nil), "injective.exchange.v2.DerivativePosition")
	proto.RegisterType((*MarketOrderIndicator)(nil), "injective.exchange.v2.MarketOrderIndicator")
	proto.RegisterType((*TradeLog)(nil), "injective.exchange.v2.TradeLog")
	proto.RegisterType((*PositionDelta)(nil), "injective.exchange.v2.PositionDelta")
	proto.RegisterType((*DerivativeTradeLog)(nil), "injective.exchange.v2.DerivativeTradeLog")
	proto.RegisterType((*SubaccountPosition)(nil), "injective.exchange.v2.SubaccountPosition")
	proto.RegisterType((*SubaccountDeposit)(nil), "injective.exchange.v2.SubaccountDeposit")
	proto.RegisterType((*DepositUpdate)(nil), "injective.exchange.v2.DepositUpdate")
	proto.RegisterType((*PointsMultiplier)(nil), "injective.exchange.v2.PointsMultiplier")
	proto.RegisterType((*TradingRewardCampaignBoostInfo)(nil), "injective.exchange.v2.TradingRewardCampaignBoostInfo")
	proto.RegisterType((*CampaignRewardPool)(nil), "injective.exchange.v2.CampaignRewardPool")
	proto.RegisterType((*TradingRewardCampaignInfo)(nil), "injective.exchange.v2.TradingRewardCampaignInfo")
	proto.RegisterType((*FeeDiscountTierInfo)(nil), "injective.exchange.v2.FeeDiscountTierInfo")
	proto.RegisterType((*FeeDiscountSchedule)(nil), "injective.exchange.v2.FeeDiscountSchedule")
	proto.RegisterType((*FeeDiscountTierTTL)(nil), "injective.exchange.v2.FeeDiscountTierTTL")
	proto.RegisterType((*AccountRewards)(nil), "injective.exchange.v2.AccountRewards")
	proto.RegisterType((*TradeRecords)(nil), "injective.exchange.v2.TradeRecords")
	proto.RegisterType((*SubaccountIDs)(nil), "injective.exchange.v2.SubaccountIDs")
	proto.RegisterType((*TradeRecord)(nil), "injective.exchange.v2.TradeRecord")
	proto.RegisterType((*Level)(nil), "injective.exchange.v2.Level")
	proto.RegisterType((*AggregateSubaccountVolumeRecord)(nil), "injective.exchange.v2.AggregateSubaccountVolumeRecord")
	proto.RegisterType((*AggregateAccountVolumeRecord)(nil), "injective.exchange.v2.AggregateAccountVolumeRecord")
	proto.RegisterType((*DenomDecimals)(nil), "injective.exchange.v2.DenomDecimals")
	proto.RegisterType((*GrantAuthorization)(nil), "injective.exchange.v2.GrantAuthorization")
	proto.RegisterType((*ActiveGrant)(nil), "injective.exchange.v2.ActiveGrant")
	proto.RegisterType((*EffectiveGrant)(nil), "injective.exchange.v2.EffectiveGrant")
	proto.RegisterType((*DenomMinNotional)(nil), "injective.exchange.v2.DenomMinNotional")
}

func init() {
	proto.RegisterFile("injective/exchange/v2/exchange.proto", fileDescriptor_0b5851fb01a33564)
}

var fileDescriptor_0b5851fb01a33564 = []byte{
	// 2986 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0xdb, 0x6f, 0x5c, 0x47,
	0x19, 0xcf, 0x59, 0xdf, 0xd6, 0x9f, 0xbd, 0xbe, 0x8c, 0x6f, 0xeb, 0x38, 0xb1, 0x9d, 0x93, 0xa6,
	0x71, 0xd3, 0xd6, 0x26, 0xa9, 0x52, 0x95, 0x14, 0x04, 0x76, 0x36, 0x4e, 0x96, 0xda, 0x49, 0x7a,
	0xec, 0x46, 0x88, 0x8a, 0x1e, 0xcd, 0x9e, 0x33, 0xde, 0x9d, 0xf8, 0x5c, 0xd6, 0x67, 0x66, 0xb7,
	0x5e, 0x10, 0x0f, 0x48, 0x95, 0x40, 0xe5, 0xa5, 0xf0, 0x88, 0x40, 0xea, 0x43, 0x11, 0x12, 0x2f,
	0xf0, 0x07, 0xf0, 0x80, 0x84, 0x90, 0xfa, 0x00, 0x52, 0x1f, 0x11, 0x0f, 0x05, 0xb5, 0x0f, 0x54,
	0x3c, 0xf3, 0x07, 0xa0, 0xb9, 0x9c, 0xcb, 0xee, 0xfa, 0xb2, 0x9b, 0x82, 0xc4, 0x4b, 0xb2, 0x33,
	0xf3, 0x7d, 0xbf, 0xef, 0x9b, 0xf9, 0xae, 0x33, 0xc7, 0xf0, 0x1c, 0x0d, 0x9e, 0x12, 0x87, 0xd3,
	0x26, 0xd9, 0x20, 0xc7, 0x4e, 0x0d, 0x07, 0x55, 0xb2, 0xd1, 0xbc, 0x95, 0xfc, 0x5e, 0xaf, 0x47,
	0x21, 0x0f, 0xd1, 0x5c, 0x42, 0xb5, 0x9e, 0xac, 0x34, 0x6f, 0x5d, 0x9c, 0xad, 0x86, 0xd5, 0x50,
	0x52, 0x6c, 0x88, 0x5f, 0x8a, 0xf8, 0xe2, 0x34, 0xf6, 0x69, 0x10, 0x6e, 0xc8, 0x7f, 0xf5, 0xd4,
	0xb2, 0x13, 0x32, 0x3f, 0x64, 0x1b, 0x15, 0xcc, 0xc8, 0x46, 0xf3, 0x66, 0x85, 0x70, 0x7c, 0x73,
	0xc3, 0x09, 0x69, 0xa0, 0xd7, 0xaf, 0xa5, 0x5a, 0x84, 0x11, 0x76, 0xbc, 0x94, 0x48, 0x0d, 0x35,
	0x99, 0x79, 0xb2, 0xb2, 0x3e, 0x8e, 0x0e, 0x09, 0xd7, 0x34, 0x57, 0x4e, 0xa6, 0x09, 0x23, 0x97,
	0x44, 0x8a, 0xc4, 0xfc, 0x68, 0x01, 0x86, 0x1f, 0xe3, 0x08, 0xfb, 0x0c, 0x11, 0x58, 0x61, 0xf5,
	0x90, 0xdb, 0x0a, 0xc2, 0xa6, 0x01, 0xe3, 0x38, 0xe0, 0xb6, 0x47, 0x19, 0xa7, 0x41, 0xd5, 0x3e,
	0x20, 0xa4, 0x68, 0xac, 0x1a, 0x6b, 0x63, 0xb7, 0x16, 0xd7, 0xd5, 0x16, 0xd6, 0xc5, 0x16, 0xd6,
	0xb5, 0x76, 0xeb, 0x77, 0x43, 0x1a, 0x6c, 0x0d, 0x7e, 0xfc, 0xe9, 0xca, 0x05, 0x6b, 0x49, 0xe0,
	0xec, 0x4a, 0x98, 0xb2, 0x42, 0xd9, 0x51, 0x20, 0xdb, 0x84, 0xa0, 0x23, 0xb8, 0xe6, 0x92, 0x88,
	0x36, 0xb1, 0xd0, 0xeb, 0x2c, 0x61, 0xb9, 0xde, 0x84, 0x5d, 0x49, 0xd1, 0x4e, 0x13, 0x89, 0x61,
	0xc9, 0x25, 0x07, 0xb8, 0xe1, 0x71, 0x5b, 0xef, 0xf0, 0x90, 0x44, 0x42, 0x86, 0x1d, 0x61, 0x4e,
	0x8a, 0x03, 0xab, 0xc6, 0xda, 0xe8, 0xd6, 0x55, 0x81, 0xf6, 0xb7, 0x4f, 0x57, 0x96, 0x94, 0x3c,
	0xe6, 0x1e, 0xae, 0xd3, 0x70, 0xc3, 0xc7, 0xbc, 0xb6, 0xbe, 0x43, 0xaa, 0xd8, 0x69, 0x95, 0x88,
	0x63, 0x2d, 0x68, 0x9c, 0x3d, 0xb9, 0xc1, 0x43, 0x12, 0x6d, 0x13, 0x62, 0x61, 0xde, 0x2d, 0x82,
	0xb7, 0x8b, 0x18, 0x7c, 0x36, 0x11, 0xfb, 0x59, 0x11, 0x3e, 0x5c, 0x89, 0x45, 0xb4, 0x1d, 0x60,
	0x9b, 0xa0, 0xa1, 0xde, 0x05, 0x5d, 0xd6, 0x68, 0xa5, 0xcc, 0xf9, 0x9d, 0x2b, 0xae, 0x63, 0x5f,
	0xc3, 0x5f, 0x46, 0x5c, 0xdb, 0xee, 0x5c, 0xb8, 0x14, 0x8b, 0xa3, 0x01, 0xe5, 0x14, 0x7b, 0xc2,
	0x37, 0xaa, 0x34, 0x10, 0x82, 0x68, 0x58, 0x1c, 0xe9, 0x5d, 0xd2, 0xa2, 0x06, 0x2a, 0x2b, 0x9c,
	0x5d, 0x09, 0x63, 0x09, 0x14, 0xe4, 0xc1, 0x6a, 0x2c, 0xc5, 0xc7, 0x34, 0xe0, 0x24, 0xc0, 0x81,
	0x43, 0xda, 0x25, 0xe5, 0xfb, 0xdf, 0xd3, 0x6e, 0x8a, 0x95, 0x95, 0xf6, 0x1a, 0x14, 0x63, 0x69,
	0x07, 0x8d, 0xc0, 0x15, 0x8e, 0x2d, 0xe8, 0xa2, 0x26, 0xf6, 0x8a, 0xa3, 0xab, 0xc6, 0xda, 0x80,
	0x35, 0xaf, 0xd7, 0xb7, 0xd5, 0x72, 0x59, 0xaf, 0xa2, 0x17, 0x60, 0x2a, 0xe6, 0xf0, 0x1b, 0x1e,
	0xa7, 0x75, 0x8f, 0x14, 0x41, 0x72, 0x4c, 0xea, 0xf9, 0x5d, 0x3d, 0x8d, 0xbe, 0x0d, 0xf3, 0x11,
	0xf1, 0x70, 0x4b, 0x9b, 0x85, 0xd5, 0x70, 0xa4, 0x8d, 0x33, 0xd6, 0xfb, 0x46, 0x66, 0x34, 0xc4,
	0x36, 0x21, 0x7b, 0x02, 0x40, 0x9a, 0x84, 0xc2, 0x4a, 0xac, 0x7e, 0x2d, 0x6c, 0x44, 0x5e, 0x2b,
	0xd9, 0x85, 0x80, 0xb7, 0x1d, 0x5c, 0x2f, 0x8e, 0xf7, 0x2e, 0x22, 0x8e, 0x8f, 0x07, 0x12, 0x4a,
	0x6f, 0x58, 0xc8, 0xb9, 0x8b, 0xeb, 0x59, 0xeb, 0x6b, 0x51, 0xf2, 0xa0, 0x08, 0xe3, 0x6a, 0x2b,
	0x85, 0xfe, 0xad, 0xaf, 0xe4, 0x94, 0x35, 0x8c, 0xdc, 0x50, 0x09, 0x56, 0x7c, 0x7c, 0x9c, 0x75,
	0x67, 0x99, 0x0a, 0x6d, 0x46, 0x5d, 0x62, 0x3b, 0x61, 0x23, 0xe0, 0xc5, 0x89, 0x55, 0x63, 0xad,
	0x60, 0x2d, 0xf9, 0xf8, 0x38, 0xf5, 0xd3, 0x47, 0x82, 0x68, 0x8f, 0xba, 0xe4, 0xae, 0x20, 0x41,
	0x0c, 0xae, 0xd3, 0xe0, 0xa9, 0x1d, 0x91, 0x77, 0x71, 0xe4, 0xda, 0x4c, 0x44, 0x84, 0x6b, 0x47,
	0xe4, 0xa8, 0x41, 0x23, 0xe2, 0x93, 0x80, 0xdb, 0xbc, 0x16, 0x11, 0x56, 0x0b, 0x3d, 0xb7, 0x38,
	0x29, 0xd5, 0xbe, 0xac, 0xd5, 0x9e, 0xeb, 0x56, 0xbb, 0x1c, 0x70, 0xeb, 0x2a, 0x0d, 0x9e, 0x5a,
	0x12, 0x6c, 0x4f, 0x62, 0x59, 0x29, 0xd4, 0x7e, 0x8c, 0x84, 0xee, 0xc3, 0x2a, 0x8f, 0xb0, 0x3a,
	0x7c, 0x49, 0xcb, 0xec, 0x26, 0x51, 0xb9, 0xd2, 0x6d, 0x48, 0xbf, 0x0d, 0x8a, 0x53, 0xd2, 0x41,
	0x2e, 0x6b, 0x3a, 0x05, 0xc9, 0x9e, 0x28, 0xaa, 0x92, 0x26, 0x12, 0x27, 0xed, 0xd1, 0xa3, 0x06,
	0x75, 0x31, 0x0f, 0xa3, 0x64, 0x13, 0xa9, 0xd3, 0x4c, 0xf7, 0x71, 0xd2, 0x29, 0x90, 0xd6, 0x3f,
	0x71, 0x9d, 0x63, 0x78, 0xa1, 0x42, 0x03, 0x1c, 0xb5, 0xec, 0xb0, 0x2e, 0xc4, 0xb2, 0xb3, 0x12,
	0x3d, 0xea, 0x2d, 0xd1, 0x3f, 0xa7, 0x10, 0x1f, 0x29, 0xc0, 0xd3, 0x72, 0xfd, 0xf7, 0x61, 0x15,
	0xf3, 0xd0, 0xa7, 0x4e, 0x2c, 0x51, 0x99, 0x18, 0x3b, 0x0e, 0x61, 0xcc, 0xf6, 0x48, 0x93, 0x78,
	0xc5, 0x99, 0x55, 0x63, 0x6d, 0xe2, 0xd6, 0x2b, 0xeb, 0x27, 0x56, 0xf2, 0xf5, 0x4d, 0xc9, 0xae,
	0xf0, 0xa5, 0xe9, 0x37, 0x25, 0xef, 0x8e, 0x60, 0xb5, 0x2e, 0xe1, 0x33, 0x56, 0xd1, 0x31, 0x5c,
	0x97, 0xd9, 0xff, 0x24, 0x0d, 0x44, 0x70, 0xea, 0x58, 0xa6, 0x24, 0x2a, 0xce, 0xf6, 0x7e, 0xce,
	0xa6, 0xc0, 0xec, 0xd2, 0x6a, 0x9b, 0x90, 0xdd, 0x04, 0x0e, 0xbd, 0x67, 0xc0, 0xcb, 0x19, 0xbf,
	0xee, 0x41, 0x81, 0xb9, 0xde, 0x15, 0x58, 0x4b, 0x91, 0xcf, 0x51, 0xe3, 0x27, 0x06, 0xdc, 0xec,
	0x30, 0x7c, 0x0f, 0xaa, 0xcc, 0xf7, 0xae, 0xca, 0x8b, 0x6d, 0x4e, 0x70, 0x8e, 0x36, 0xef, 0xc0,
	0xa2, 0x4f, 0x03, 0xea, 0x63, 0xcf, 0x96, 0xdd, 0x8e, 0x13, 0x7a, 0x69, 0xe9, 0x5a, 0xe8, 0x5d,
	0xe8, 0xbc, 0x46, 0x79, 0xac, 0x41, 0xe2, 0x9a, 0xf5, 0x36, 0xbc, 0x48, 0x59, 0xe2, 0xd2, 0xdd,
	0x5d, 0x8d, 0x87, 0x1b, 0x81, 0x53, 0xb3, 0x49, 0x80, 0x2b, 0x1e, 0x71, 0x8b, 0xc5, 0x55, 0x63,
	0x2d, 0x6f, 0x3d, 0x4f, 0x99, 0xf6, 0xda, 0x52, 0x47, 0xe3, 0xb2, 0x23, 0xc9, 0xef, 0x29, 0x6a,
	0x91, 0xac, 0xea, 0x21, 0xe3, 0x76, 0x18, 0x78, 0x2d, 0xdb, 0x0f, 0x5d, 0x62, 0xd7, 0x08, 0xad,
	0xd6, 0xb2, 0xe9, 0x65, 0x51, 0x06, 0xfc, 0x92, 0x20, 0x7b, 0x14, 0x78, 0xad, 0xdd, 0xd0, 0x25,
	0x0f, 0x24, 0x4d, 0x9a, 0x37, 0xaa, 0x70, 0x53, 0x17, 0x37, 0x97, 0x38, 0x11, 0xc1, 0x8c, 0xd8,
	0xf5, 0x88, 0x3a, 0xc4, 0xe6, 0xd4, 0x27, 0x8c, 0x63, 0xbf, 0x9e, 0xe2, 0xd9, 0x8c, 0x38, 0x61,
	0xe0, 0xb2, 0xe2, 0x45, 0x89, 0xfb, 0x92, 0x62, 0x2c, 0x69, 0xbe, 0xc7, 0x82, 0x6d, 0x3f, 0xe6,
	0x4a, 0x24, 0xec, 0x29, 0x1e, 0x74, 0x1d, 0x26, 0xe3, 0x20, 0xb2, 0xb1, 0xeb, 0xd3, 0x80, 0x15,
	0x97, 0x56, 0x07, 0xd6, 0x46, 0xad, 0x89, 0x78, 0x7a, 0x53, 0xce, 0xa2, 0x1d, 0x98, 0x11, 0xe9,
	0x13, 0x37, 0x1c, 0x61, 0x42, 0x5b, 0x24, 0x64, 0x51, 0x49, 0x2e, 0xf5, 0x92, 0x2a, 0xa7, 0x68,
	0xf0, 0x74, 0x53, 0x31, 0xee, 0xe2, 0x63, 0x51, 0x38, 0x6e, 0xc0, 0xf4, 0x01, 0x3d, 0x26, 0xae,
	0x5d, 0xc5, 0x2c, 0x39, 0xe8, 0xcb, 0xf2, 0xa0, 0x27, 0xe5, 0xc2, 0x7d, 0xcc, 0xe2, 0x13, 0x7d,
	0x1d, 0x2e, 0x12, 0x9f, 0x72, 0xdb, 0x93, 0x86, 0xb5, 0x9b, 0x24, 0x62, 0x42, 0x03, 0xd2, 0x24,
	0x01, 0x67, 0xc5, 0x65, 0xc9, 0xb4, 0x20, 0x28, 0x94, 0xe5, 0x9f, 0xa8, 0xf5, 0x7b, 0x72, 0x19,
	0x55, 0xd2, 0x06, 0x2f, 0x22, 0x6e, 0xa3, 0xb3, 0x69, 0x58, 0xe9, 0xdd, 0x9b, 0xe2, 0x9e, 0xc0,
	0x92, 0x30, 0x99, 0x7e, 0xe1, 0x4e, 0xf1, 0x8b, 0x0f, 0x57, 0x8c, 0xf7, 0xff, 0xf9, 0xbb, 0x1b,
	0xc9, 0x51, 0x6e, 0xa8, 0xde, 0xdc, 0xfc, 0x3a, 0xcc, 0x3e, 0x24, 0xc7, 0x71, 0x9b, 0x90, 0x58,
	0x01, 0x5d, 0x83, 0x89, 0x80, 0x1c, 0xf3, 0xd4, 0x9a, 0xb2, 0x45, 0x1f, 0xb0, 0x0a, 0x62, 0x36,
	0x21, 0x33, 0xff, 0x65, 0xc0, 0xc4, 0x2e, 0x75, 0xa5, 0x09, 0x37, 0x03, 0x77, 0xff, 0xd1, 0x16,
	0xfa, 0x26, 0x8c, 0xfa, 0xd4, 0x55, 0xce, 0x20, 0x99, 0x94, 0xf6, 0xc6, 0x79, 0xda, 0xe7, 0x7d,
	0x8d, 0x83, 0xca, 0x30, 0x51, 0x11, 0x05, 0xba, 0xd2, 0x68, 0x69, 0x98, 0x5c, 0xef, 0x30, 0xe3,
	0x82, 0x75, 0xab, 0xd1, 0x52, 0x50, 0x6f, 0xc0, 0xa4, 0x84, 0x62, 0xc4, 0xf3, 0x34, 0xd6, 0x40,
	0xef, 0x58, 0x05, 0xc1, 0xbb, 0x47, 0x3c, 0x4f, 0x82, 0x99, 0xbf, 0x32, 0x60, 0xa4, 0x44, 0xea,
	0x21, 0xa3, 0x1c, 0x3d, 0x86, 0x69, 0xdc, 0xc4, 0xd4, 0x13, 0x0e, 0x60, 0x57, 0xb0, 0x27, 0x3a,
	0xb4, 0xcc, 0x6e, 0xcf, 0xb5, 0xd5, 0x54, 0xc2, 0xbd, 0xa5, 0x98, 0xd1, 0x03, 0x28, 0xf0, 0x90,
	0x63, 0x2f, 0x41, 0xcb, 0xf5, 0x8e, 0x36, 0x2e, 0x39, 0x35, 0x92, 0xf9, 0x12, 0xcc, 0xee, 0x35,
	0x2a, 0xd8, 0x91, 0x8d, 0xc7, 0x7e, 0x84, 0x5d, 0xf2, 0x30, 0x14, 0x12, 0x66, 0x61, 0x28, 0x08,
	0x63, 0x3d, 0x0b, 0x96, 0x1a, 0x98, 0x7f, 0x34, 0x60, 0x32, 0x25, 0x97, 0xc9, 0x0e, 0x7d, 0x15,
	0x86, 0x3a, 0xed, 0x77, 0xae, 0x0e, 0x8a, 0x03, 0x7d, 0x03, 0xf2, 0x47, 0x0d, 0x1c, 0x70, 0xca,
	0x5b, 0xfd, 0xec, 0x20, 0x61, 0x42, 0x26, 0x8c, 0x53, 0xa6, 0x5c, 0x58, 0xe4, 0x1e, 0x69, 0xaf,
	0xbc, 0xd5, 0x36, 0x87, 0xa6, 0x60, 0xc0, 0xa1, 0xae, 0xba, 0xfc, 0x58, 0xe2, 0xa7, 0x19, 0xc1,
	0x4c, 0xc7, 0x26, 0x4a, 0x98, 0x63, 0xf4, 0x35, 0x18, 0x92, 0x85, 0x41, 0x5f, 0x30, 0x9f, 0x3f,
	0xa5, 0x32, 0x77, 0xb0, 0x5a, 0x8a, 0x09, 0x5d, 0x06, 0x50, 0x65, 0xa5, 0x86, 0x59, 0x4d, 0xee,
	0x66, 0xdc, 0x1a, 0x95, 0x33, 0x0f, 0x30, 0xab, 0x99, 0x7f, 0xca, 0x41, 0xfe, 0xb1, 0xf0, 0x06,
	0xd1, 0xfe, 0xcc, 0xc3, 0x30, 0x65, 0x3b, 0x61, 0x50, 0x95, 0xa2, 0xf2, 0x96, 0x1e, 0x7d, 0xf9,
	0xf3, 0x28, 0xc1, 0x18, 0x09, 0x78, 0xd4, 0xea, 0x72, 0xdf, 0x73, 0x31, 0x40, 0xf2, 0xa9, 0x40,
	0x78, 0x1d, 0x86, 0x55, 0x5a, 0xe9, 0xe7, 0xc6, 0xa8, 0x59, 0xd0, 0x77, 0xa1, 0xe8, 0x34, 0xfc,
	0x86, 0xa7, 0x6a, 0x50, 0xdc, 0xab, 0x4b, 0xf4, 0x7e, 0xee, 0x85, 0xf3, 0x29, 0x88, 0xce, 0x37,
	0xf7, 0x04, 0x84, 0xf9, 0xbe, 0x01, 0x23, 0x71, 0x14, 0x5c, 0x85, 0x02, 0x4b, 0x8c, 0x61, 0x53,
	0x57, 0x79, 0xa0, 0x35, 0x9e, 0x4e, 0x96, 0x5d, 0xe1, 0xc8, 0x2e, 0x09, 0x42, 0x5f, 0x1d, 0xa8,
	0xa5, 0x06, 0xe8, 0x0e, 0xe4, 0x5d, 0x15, 0x9d, 0x4c, 0x9e, 0xd2, 0xd8, 0xad, 0xe5, 0x53, 0xcc,
	0xad, 0x83, 0xd8, 0x4a, 0xe8, 0xef, 0xe4, 0x7f, 0xfc, 0xe1, 0xca, 0x85, 0x2f, 0x3e, 0x5c, 0xb9,
	0x60, 0xfe, 0xd2, 0x00, 0x94, 0xd6, 0xcf, 0xc4, 0xbc, 0x3d, 0xe9, 0xb5, 0x04, 0xa3, 0x71, 0x37,
	0xea, 0x6a, 0xdd, 0xf2, 0x6a, 0xa2, 0x2c, 0x8a, 0x44, 0xbe, 0xae, 0xd1, 0xb4, 0x7a, 0x2b, 0xa7,
	0xa8, 0x17, 0x0b, 0xb5, 0x12, 0x86, 0x8c, 0x7e, 0x65, 0x98, 0xcd, 0xb4, 0x25, 0xe5, 0xc0, 0xa5,
	0x8e, 0xe8, 0x93, 0xdb, 0x65, 0x1b, 0x1d, 0xb2, 0x67, 0x61, 0x88, 0xb2, 0xad, 0x86, 0xf2, 0xc0,
	0xbc, 0xa5, 0x06, 0xe6, 0x5f, 0x72, 0x90, 0x97, 0xe9, 0x61, 0x27, 0x6c, 0xf7, 0x53, 0xe3, 0x59,
	0xfc, 0x34, 0xc9, 0x19, 0xb9, 0xbe, 0x73, 0x46, 0xd7, 0xe1, 0x0e, 0xc8, 0x50, 0x6b, 0x3f, 0xdc,
	0xdb, 0x30, 0x20, 0x7a, 0xfa, 0x3e, 0xdc, 0x57, 0xd0, 0x77, 0xc4, 0xf0, 0x50, 0x47, 0x0c, 0xa3,
	0xd7, 0x60, 0x4e, 0x36, 0x6e, 0xc4, 0xa1, 0x75, 0x2a, 0xee, 0x58, 0xd8, 0x75, 0x23, 0xc2, 0x98,
	0x7c, 0x80, 0x18, 0x97, 0x17, 0x04, 0xc3, 0x9a, 0x39, 0x20, 0xc4, 0x8a, 0x29, 0x36, 0x15, 0x41,
	0x9c, 0x83, 0x46, 0xd2, 0x1c, 0xf4, 0xf3, 0x1c, 0x14, 0x62, 0xdb, 0x95, 0x88, 0xc7, 0x31, 0x5a,
	0x80, 0x11, 0xca, 0x6c, 0xaf, 0x3b, 0x2b, 0x58, 0x80, 0xc8, 0x31, 0x71, 0x1a, 0xb2, 0x53, 0x79,
	0x96, 0xfc, 0x30, 0x9d, 0xb0, 0xbf, 0x19, 0x1b, 0xe0, 0x21, 0x4c, 0xa5, 0x98, 0x3a, 0xd8, 0xfb,
	0xc8, 0x16, 0x93, 0x09, 0xb3, 0xea, 0x1c, 0xd0, 0x0e, 0xa4, 0x53, 0x3a, 0xf9, 0xf4, 0x71, 0xf8,
	0x13, 0x09, 0xaf, 0x2a, 0x9e, 0xbf, 0x18, 0xc8, 0xc6, 0x55, 0xe2, 0x76, 0x27, 0xc6, 0x55, 0xa7,
	0xe9, 0xdf, 0x80, 0x89, 0x38, 0x12, 0x6c, 0x57, 0x1c, 0xac, 0x7e, 0xc2, 0x7b, 0xee, 0x9c, 0x00,
	0x92, 0x46, 0xb0, 0x0a, 0xf5, 0x36, 0x9b, 0xbc, 0x0e, 0xc3, 0x75, 0xdc, 0x0a, 0x1b, 0xbc, 0x9f,
	0xc3, 0xd1, 0x2c, 0xff, 0xff, 0x4e, 0x28, 0x34, 0xac, 0x07, 0x5e, 0x3f, 0x6f, 0x4d, 0x82, 0xde,
	0x6c, 0x02, 0x4a, 0x8b, 0x60, 0x92, 0xf5, 0xb2, 0x39, 0xcb, 0xe8, 0x33, 0x67, 0x75, 0x9b, 0x36,
	0xd7, 0x6d, 0x5a, 0x33, 0x82, 0xe9, 0x54, 0x6e, 0xdc, 0x5c, 0xf5, 0xe4, 0x14, 0xaf, 0xc1, 0x88,
	0x4e, 0xdf, 0xda, 0x1b, 0xce, 0xcb, 0xf6, 0x31, 0xb9, 0x79, 0x08, 0x05, 0x3d, 0xf7, 0x56, 0xdd,
	0x15, 0xd7, 0xad, 0xa4, 0x9e, 0x18, 0xd9, 0x7a, 0x52, 0xca, 0xd4, 0x93, 0xdc, 0xea, 0xc0, 0xda,
	0xd8, 0xad, 0xb5, 0x73, 0xdb, 0x87, 0xae, 0xca, 0x62, 0xfe, 0xd9, 0x80, 0xa9, 0xc7, 0x21, 0x0d,
	0x38, 0xcb, 0xdc, 0x1f, 0xdf, 0x86, 0x05, 0xf5, 0xbc, 0x5a, 0x97, 0x2b, 0xd9, 0x2b, 0x6b, 0x1f,
	0xb9, 0x77, 0x4e, 0x62, 0x9c, 0x04, 0xce, 0x4f, 0x01, 0xef, 0x23, 0xc1, 0xcc, 0xf1, 0x93, 0xc0,
	0xcd, 0x7f, 0xe7, 0x60, 0x79, 0x3f, 0xfb, 0x0e, 0x74, 0x17, 0xfb, 0x75, 0x4c, 0xab, 0xc1, 0x56,
	0x18, 0x32, 0x5e, 0x0e, 0x0e, 0x42, 0x74, 0x1b, 0x16, 0x2a, 0x62, 0x40, 0x5c, 0xbb, 0xed, 0xd9,
	0xdf, 0x65, 0x45, 0x43, 0x5e, 0xdc, 0x66, 0xf5, 0xf2, 0x5e, 0xfa, 0x98, 0xef, 0x32, 0x44, 0x60,
	0x21, 0x4b, 0x9e, 0x6a, 0x1d, 0x9f, 0xfe, 0xf5, 0x53, 0x5d, 0xaf, 0x5d, 0x47, 0xfd, 0xaa, 0x33,
	0x97, 0x7e, 0x2b, 0x48, 0xd7, 0x18, 0xda, 0x84, 0xcb, 0xb1, 0x76, 0x27, 0x7c, 0x2d, 0x70, 0x45,
	0xeb, 0x20, 0x74, 0xbc, 0xa8, 0x89, 0x3a, 0xaf, 0xd2, 0x42, 0xd3, 0x23, 0xb8, 0xdc, 0xcd, 0x9a,
	0xd5, 0x77, 0xf0, 0x59, 0xf4, 0x5d, 0xea, 0xfc, 0xdc, 0x90, 0xd1, 0xda, 0xfc, 0xbd, 0x01, 0x28,
	0x3e, 0x69, 0x75, 0xee, 0x8f, 0xc3, 0xd0, 0x13, 0x77, 0x63, 0xc6, 0x71, 0xd4, 0x7d, 0x4d, 0x9b,
	0x90, 0xd3, 0xe9, 0x75, 0xee, 0x07, 0x30, 0xab, 0xee, 0xc3, 0x0a, 0x22, 0x7e, 0xea, 0xd3, 0x27,
	0x7b, 0xc6, 0x0b, 0xd9, 0x57, 0x84, 0x6e, 0xbf, 0xf9, 0xfb, 0xca, 0x5a, 0x95, 0xf2, 0x5a, 0xa3,
	0xb2, 0xee, 0x84, 0xfe, 0x86, 0xfe, 0xce, 0xa4, 0xfe, 0x7b, 0x99, 0xb9, 0x87, 0x1b, 0xbc, 0x55,
	0x27, 0x4c, 0x32, 0x30, 0x0b, 0xf9, 0xe2, 0x02, 0x9d, 0x55, 0x95, 0x99, 0x1f, 0xe5, 0x60, 0xf1,
	0x44, 0xaf, 0x91, 0x0e, 0x73, 0x07, 0x16, 0x13, 0xc5, 0xe2, 0x37, 0xc7, 0xe4, 0xc9, 0x40, 0xed,
	0x67, 0x21, 0x26, 0x88, 0x9f, 0x1b, 0xe3, 0xd7, 0x81, 0x2b, 0x30, 0x7e, 0xd4, 0x08, 0x39, 0xb1,
	0x65, 0xcc, 0xaa, 0x0d, 0x8d, 0x5a, 0x63, 0x72, 0xae, 0x24, 0xa7, 0x50, 0x1d, 0x16, 0xdb, 0x5f,
	0x38, 0x6d, 0x69, 0x5b, 0x9b, 0x06, 0x07, 0xa1, 0xee, 0xc4, 0x6e, 0x9f, 0x62, 0xaa, 0xb3, 0x3d,
	0xdd, 0x9a, 0x6f, 0x7b, 0x11, 0x4d, 0x23, 0xe0, 0x55, 0x58, 0x70, 0x29, 0x3b, 0x6a, 0x60, 0x8f,
	0x1e, 0x50, 0xe2, 0x66, 0xbd, 0x6b, 0x50, 0xea, 0x37, 0x97, 0x5d, 0x4e, 0x1c, 0xcb, 0xfc, 0x43,
	0x0e, 0x66, 0xb6, 0x09, 0x29, 0x51, 0xa6, 0xae, 0x6e, 0x54, 0x34, 0x78, 0x07, 0x21, 0xda, 0x83,
	0x19, 0x95, 0x2e, 0x5c, 0xbd, 0xa2, 0x1e, 0x9a, 0xfa, 0x48, 0x15, 0xd3, 0x92, 0x3f, 0x06, 0x96,
	0x6f, 0x4c, 0x7b, 0x30, 0xc3, 0x4f, 0x00, 0xed, 0xa7, 0x07, 0xe1, 0x5d, 0xa0, 0x5b, 0x50, 0xd0,
	0xef, 0xd6, 0xd8, 0x97, 0xcf, 0xde, 0x03, 0xbd, 0xbc, 0xbe, 0x8c, 0x2b, 0x9e, 0x4d, 0xc9, 0x22,
	0x0a, 0x74, 0x33, 0xf4, 0x1a, 0x7e, 0x5f, 0x65, 0x56, 0xb3, 0x98, 0x3f, 0x6a, 0x3f, 0xc2, 0x3d,
	0xa7, 0x46, 0xdc, 0x86, 0x47, 0x84, 0x9f, 0x54, 0x1a, 0x8e, 0xb0, 0x82, 0x7a, 0x8e, 0x17, 0x67,
	0x37, 0x68, 0x8d, 0xa9, 0x39, 0xf5, 0xfc, 0x7e, 0x1d, 0x26, 0x35, 0x49, 0xf2, 0xf0, 0x9d, 0x53,
	0xc1, 0xa4, 0xa6, 0x93, 0x97, 0xee, 0x4e, 0x9f, 0x1b, 0xe8, 0xf6, 0xb9, 0x32, 0x00, 0xa7, 0x24,
	0x92, 0x3e, 0x16, 0xe7, 0x83, 0x1b, 0xa7, 0x38, 0xd9, 0x09, 0x16, 0xb7, 0x46, 0xb9, 0xfe, 0xc5,
	0xce, 0x72, 0xa6, 0xa1, 0xb3, 0x9c, 0x69, 0x17, 0x50, 0x07, 0xf2, 0xfe, 0xfe, 0x0e, 0x42, 0x30,
	0xc8, 0xe3, 0x32, 0x33, 0x68, 0xc9, 0xdf, 0xa2, 0xdc, 0x72, 0xee, 0x65, 0x72, 0x88, 0xda, 0xf6,
	0x38, 0xe7, 0x5e, 0xfa, 0xd2, 0xf3, 0x53, 0x03, 0x26, 0x36, 0x55, 0x91, 0xd3, 0x51, 0x8d, 0x8a,
	0x30, 0xa2, 0xcb, 0x9e, 0x2e, 0x9c, 0xf1, 0x10, 0x11, 0x18, 0xf9, 0x1f, 0x66, 0x98, 0x18, 0xdb,
	0xfc, 0xa1, 0x01, 0xe3, 0xb2, 0x93, 0xb4, 0x88, 0x13, 0x0a, 0x8d, 0xce, 0xbc, 0x04, 0xed, 0xc3,
	0xac, 0x87, 0x39, 0x61, 0xdc, 0x16, 0x61, 0x2b, 0xdb, 0xad, 0x30, 0xd5, 0xd0, 0x3c, 0x23, 0x05,
	0x68, 0x7c, 0x0b, 0x29, 0xfe, 0xac, 0x48, 0xf3, 0x55, 0x28, 0xa4, 0xe5, 0xbf, 0x5c, 0x62, 0xe8,
	0x1a, 0x4c, 0xb4, 0x35, 0x2f, 0xaa, 0xea, 0x8d, 0x5b, 0x85, 0x6c, 0xf7, 0xc2, 0xcc, 0x5f, 0x1b,
	0x30, 0x96, 0x01, 0x42, 0x97, 0x60, 0xb4, 0x33, 0x89, 0xa7, 0x13, 0x5f, 0xe6, 0x72, 0x95, 0xbd,
	0xd8, 0x0d, 0x3c, 0xc3, 0xc5, 0xce, 0xf4, 0x61, 0x48, 0x7d, 0x84, 0xb8, 0x09, 0x46, 0xbd, 0x9f,
	0xa4, 0x63, 0xd4, 0x05, 0xcb, 0x51, 0x3f, 0x3a, 0x1b, 0x47, 0xe6, 0xcf, 0x0c, 0x58, 0xd9, 0xac,
	0x56, 0x23, 0x52, 0xc5, 0x9c, 0xa4, 0x47, 0xfb, 0x44, 0xc6, 0xb7, 0x3e, 0xac, 0x9e, 0x6e, 0xe3,
	0xdf, 0x82, 0x09, 0xed, 0x0c, 0x2a, 0x37, 0xc4, 0x96, 0xbe, 0x7a, 0x8a, 0xa5, 0x55, 0xe8, 0x68,
	0x39, 0x05, 0x3f, 0x33, 0x62, 0xe6, 0x7b, 0x06, 0x5c, 0x4a, 0x94, 0xda, 0x3c, 0x41, 0xa3, 0xd3,
	0x63, 0xe1, 0xbf, 0xa9, 0xc6, 0xa6, 0xe8, 0x5c, 0x83, 0xd0, 0x2f, 0x11, 0x87, 0xfa, 0xd8, 0x63,
	0xa7, 0x74, 0xae, 0x17, 0x45, 0xe7, 0xaa, 0x28, 0xe4, 0xe1, 0x0f, 0x5a, 0xc9, 0xd8, 0x24, 0x80,
	0xee, 0x47, 0x38, 0xe0, 0x9b, 0x0d, 0x5e, 0x0b, 0x23, 0xfa, 0x3d, 0x95, 0xd2, 0x8a, 0x30, 0x52,
	0x15, 0xb3, 0xfa, 0x4f, 0x31, 0x46, 0xad, 0x78, 0x88, 0x6e, 0xc3, 0xb0, 0x4e, 0xe5, 0xb9, 0x5e,
	0x52, 0xb9, 0x26, 0x36, 0xdf, 0x81, 0xb1, 0x4d, 0xb9, 0x37, 0x29, 0x2c, 0xc5, 0x8f, 0xda, 0xf1,
	0xa3, 0x67, 0xc5, 0xff, 0xc0, 0x80, 0x89, 0x7b, 0x07, 0x07, 0xa4, 0x27, 0x19, 0x65, 0x98, 0x0e,
	0x08, 0xb7, 0xd5, 0x50, 0x7f, 0x59, 0xed, 0x4d, 0xdc, 0x64, 0x40, 0xf8, 0x7d, 0xc5, 0x26, 0xbf,
	0xa1, 0xa2, 0x45, 0xc8, 0x53, 0x66, 0x37, 0xb1, 0xa7, 0x5f, 0x29, 0xf2, 0xd6, 0x08, 0x65, 0x4f,
	0xc4, 0xd0, 0xac, 0xc3, 0x94, 0x34, 0xce, 0x2e, 0x0d, 0x1e, 0x86, 0xe2, 0x54, 0xb1, 0x77, 0x8a,
	0x7d, 0xb6, 0x61, 0xdc, 0xa7, 0x81, 0x1d, 0x68, 0xaa, 0x7e, 0x02, 0x64, 0xcc, 0x4f, 0xd1, 0x6f,
	0xfc, 0xd6, 0x80, 0xc2, 0xbd, 0xf8, 0x9a, 0xbd, 0xdf, 0xaa, 0x13, 0x74, 0x09, 0x8a, 0x6f, 0x05,
	0xac, 0x4e, 0x1c, 0x59, 0x0c, 0xda, 0xd6, 0xa6, 0x2e, 0x20, 0x80, 0x61, 0xe5, 0x5d, 0x53, 0x06,
	0x2a, 0xc0, 0xe8, 0x0e, 0xf5, 0x29, 0xdf, 0xa6, 0x9e, 0x37, 0x95, 0x43, 0x17, 0x61, 0x5e, 0x0e,
	0x77, 0x31, 0x77, 0x6a, 0x96, 0xfa, 0xb4, 0x2b, 0x5f, 0x98, 0xa6, 0x06, 0xd0, 0x3c, 0xa0, 0x74,
	0xed, 0x21, 0x79, 0x57, 0xcd, 0x0f, 0xa2, 0x39, 0x98, 0xd6, 0xdf, 0x97, 0xf4, 0xe7, 0x5a, 0x1a,
	0x06, 0x53, 0x43, 0x02, 0xea, 0xde, 0x71, 0x9d, 0x46, 0x2d, 0xb5, 0xb8, 0x47, 0x38, 0xf7, 0xe4,
	0x47, 0xe7, 0xa9, 0xe1, 0xad, 0xc3, 0x8f, 0x3f, 0x5b, 0x36, 0x3e, 0xf9, 0x6c, 0xd9, 0xf8, 0xc7,
	0x67, 0xcb, 0xc6, 0x07, 0x9f, 0x2f, 0x5f, 0xf8, 0xe4, 0xf3, 0xe5, 0x0b, 0x7f, 0xfd, 0x7c, 0xf9,
	0xc2, 0x77, 0xde, 0xcc, 0xa4, 0xff, 0x72, 0x1c, 0x18, 0x3b, 0xb8, 0xc2, 0x36, 0x92, 0x30, 0x79,
	0xd9, 0x09, 0x23, 0x92, 0x1d, 0xd6, 0x30, 0x0d, 0x36, 0xfc, 0x50, 0x14, 0x78, 0x96, 0xfe, 0x21,
	0x92, 0x2c, 0x15, 0x1b, 0xcd, 0x5b, 0x95, 0x61, 0xf9, 0x6d, 0xee, 0x95, 0xff, 0x04, 0x00, 0x00,
	0xff, 0xff, 0xe3, 0x4d, 0xab, 0xb3, 0x7f, 0x25, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SpotMarketInstantListingFee.Equal(&that1.SpotMarketInstantListingFee) {
		return false
	}
	if !this.DerivativeMarketInstantListingFee.Equal(&that1.DerivativeMarketInstantListingFee) {
		return false
	}
	if !this.DefaultSpotMakerFeeRate.Equal(that1.DefaultSpotMakerFeeRate) {
		return false
	}
	if !this.DefaultSpotTakerFeeRate.Equal(that1.DefaultSpotTakerFeeRate) {
		return false
	}
	if !this.DefaultDerivativeMakerFeeRate.Equal(that1.DefaultDerivativeMakerFeeRate) {
		return false
	}
	if !this.DefaultDerivativeTakerFeeRate.Equal(that1.DefaultDerivativeTakerFeeRate) {
		return false
	}
	if !this.DefaultInitialMarginRatio.Equal(that1.DefaultInitialMarginRatio) {
		return false
	}
	if !this.DefaultMaintenanceMarginRatio.Equal(that1.DefaultMaintenanceMarginRatio) {
		return false
	}
	if this.DefaultFundingInterval != that1.DefaultFundingInterval {
		return false
	}
	if this.FundingMultiple != that1.FundingMultiple {
		return false
	}
	if !this.RelayerFeeShareRate.Equal(that1.RelayerFeeShareRate) {
		return false
	}
	if !this.DefaultHourlyFundingRateCap.Equal(that1.DefaultHourlyFundingRateCap) {
		return false
	}
	if !this.DefaultHourlyInterestRate.Equal(that1.DefaultHourlyInterestRate) {
		return false
	}
	if this.MaxDerivativeOrderSideCount != that1.MaxDerivativeOrderSideCount {
		return false
	}
	if !this.InjRewardStakedRequirementThreshold.Equal(that1.InjRewardStakedRequirementThreshold) {
		return false
	}
	if this.TradingRewardsVestingDuration != that1.TradingRewardsVestingDuration {
		return false
	}
	if !this.LiquidatorRewardShareRate.Equal(that1.LiquidatorRewardShareRate) {
		return false
	}
	if !this.BinaryOptionsMarketInstantListingFee.Equal(&that1.BinaryOptionsMarketInstantListingFee) {
		return false
	}
	if this.AtomicMarketOrderAccessLevel != that1.AtomicMarketOrderAccessLevel {
		return false
	}
	if !this.SpotAtomicMarketOrderFeeMultiplier.Equal(that1.SpotAtomicMarketOrderFeeMultiplier) {
		return false
	}
	if !this.DerivativeAtomicMarketOrderFeeMultiplier.Equal(that1.DerivativeAtomicMarketOrderFeeMultiplier) {
		return false
	}
	if !this.BinaryOptionsAtomicMarketOrderFeeMultiplier.Equal(that1.BinaryOptionsAtomicMarketOrderFeeMultiplier) {
		return false
	}
	if !this.MinimalProtocolFeeRate.Equal(that1.MinimalProtocolFeeRate) {
		return false
	}
	if this.IsInstantDerivativeMarketLaunchEnabled != that1.IsInstantDerivativeMarketLaunchEnabled {
		return false
	}
	if this.PostOnlyModeHeightThreshold != that1.PostOnlyModeHeightThreshold {
		return false
	}
	if this.MarginDecreasePriceTimestampThresholdSeconds != that1.MarginDecreasePriceTimestampThresholdSeconds {
		return false
	}
	if len(this.ExchangeAdmins) != len(that1.ExchangeAdmins) {
		return false
	}
	for i := range this.ExchangeAdmins {
		if this.ExchangeAdmins[i] != that1.ExchangeAdmins[i] {
			return false
		}
	}
	if !this.InjAuctionMaxCap.Equal(that1.InjAuctionMaxCap) {
		return false
	}
	if this.FixedGasEnabled != that1.FixedGasEnabled {
		return false
	}
	if this.EmitLegacyVersionEvents != that1.EmitLegacyVersionEvents {
		return false
	}
	if !this.DefaultReduceMarginRatio.Equal(that1.DefaultReduceMarginRatio) {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.DefaultReduceMarginRatio.Size()
		i -= size
		if _, err := m.DefaultReduceMarginRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xfa
	if m.EmitLegacyVersionEvents {
		i--
		if m.EmitLegacyVersionEvents {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.FixedGasEnabled {
		i--
		if m.FixedGasEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	{
		size := m.InjAuctionMaxCap.Size()
		i -= size
		if _, err := m.InjAuctionMaxCap.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xe2
	if len(m.ExchangeAdmins) > 0 {
		for iNdEx := len(m.ExchangeAdmins) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExchangeAdmins[iNdEx])
			copy(dAtA[i:], m.ExchangeAdmins[iNdEx])
			i = encodeVarintExchange(dAtA, i, uint64(len(m.ExchangeAdmins[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xda
		}
	}
	if m.MarginDecreasePriceTimestampThresholdSeconds != 0 {
		i = encodeVarintExchange(dAtA, i, uint64(m.MarginDecreasePriceTimestampThresholdSeconds))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.PostOnlyModeHeightThreshold != 0 {
		i = encodeVarintExchange(dAtA, i, uint64(m.PostOnlyModeHeightThreshold))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.IsInstantDerivativeMarketLaunchEnabled {
		i--
		if m.IsInstantDerivativeMarketLaunchEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	{
		size := m.MinimalProtocolFeeRate.Size()
		i -= size
		if _, err := m.MinimalProtocolFeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xba
	{
		size := m.BinaryOptionsAtomicMarketOrderFeeMultiplier.Size()
		i -= size
		if _, err := m.BinaryOptionsAtomicMarketOrderFeeMultiplier.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb2
	{
		size := m.DerivativeAtomicMarketOrderFeeMultiplier.Size()
		i -= size
		if _, err := m.DerivativeAtomicMarketOrderFeeMultiplier.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xaa
	{
		size := m.SpotAtomicMarketOrderFeeMultiplier.Size()
		i -= size
		if _, err := m.SpotAtomicMarketOrderFeeMultiplier.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa2
	if m.AtomicMarketOrderAccessLevel != 0 {
		i = encodeVarintExchange(dAtA, i, uint64(m.AtomicMarketOrderAccessLevel))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	{
		size, err := m.BinaryOptionsMarketInstantListingFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x92
	{
		size := m.LiquidatorRewardShareRate.Size()
		i -= size
		if _, err := m.LiquidatorRewardShareRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	if m.TradingRewardsVestingDuration != 0 {
		i = encodeVarintExchange(dAtA, i, uint64(m.TradingRewardsVestingDuration))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	{
		size := m.InjRewardStakedRequirementThreshold.Size()
		i -= size
		if _, err := m.InjRewardStakedRequirementThreshold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	if m.MaxDerivativeOrderSideCount != 0 {
		i = encodeVarintExchange(dAtA, i, uint64(m.MaxDerivativeOrderSideCount))
		i--
		dAtA[i] = 0x70
	}
	{
		size := m.DefaultHourlyInterestRate.Size()
		i -= size
		if _, err := m.DefaultHourlyInterestRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size := m.DefaultHourlyFundingRateCap.Size()
		i -= size
		if _, err := m.DefaultHourlyFundingRateCap.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size := m.RelayerFeeShareRate.Size()
		i -= size
		if _, err := m.RelayerFeeShareRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	if m.FundingMultiple != 0 {
		i = encodeVarintExchange(dAtA, i, uint64(m.FundingMultiple))
		i--
		dAtA[i] = 0x50
	}
	if m.DefaultFundingInterval != 0 {
		i = encodeVarintExchange(dAtA, i, uint64(m.DefaultFundingInterval))
		i--
		dAtA[i] = 0x48
	}
	{
		size := m.DefaultMaintenanceMarginRatio.Size()
		i -= size
		if _, err := m.DefaultMaintenanceMarginRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.DefaultInitialMarginRatio.Size()
		i -= size
		if _, err := m.DefaultInitialMarginRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.DefaultDerivativeTakerFeeRate.Size()
		i -= size
		if _, err := m.DefaultDerivativeTakerFeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.DefaultDerivativeMakerFeeRate.Size()
		i -= size
		if _, err := m.DefaultDerivativeMakerFeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.DefaultSpotTakerFeeRate.Size()
		i -= size
		if _, err := m.DefaultSpotTakerFeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.DefaultSpotMakerFeeRate.Size()
		i -= size
		if _, err := m.DefaultSpotMakerFeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.DerivativeMarketInstantListingFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.SpotMarketInstantListingFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NextFundingTimestamp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NextFundingTimestamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NextFundingTimestamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextTimestamp != 0 {
		i = encodeVarintExchange(dAtA, i, uint64(m.NextTimestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MidPriceAndTOB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MidPriceAndTOB) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MidPriceAndTOB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BestSellPrice != nil {
		{
			size := m.BestSellPrice.Size()
			i -= size
			if _, err := m.BestSellPrice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintExchange(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BestBuyPrice != nil {
		{
			size := m.BestBuyPrice.Size()
			i -= size
			if _, err := m.BestBuyPrice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintExchange(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.MidPrice != nil {
		{
			size := m.MidPrice.Size()
			i -= size
			if _, err := m.MidPrice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintExchange(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Deposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Deposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Deposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalBalance.Size()
		i -= size
		if _, err := m.TotalBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.AvailableBalance.Size()
		i -= size
		if _, err := m.AvailableBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SubaccountTradeNonce) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubaccountTradeNonce) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubaccountTradeNonce) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintExchange(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubaccountOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubaccountOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubaccountOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintExchange(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x22
	}
	if m.IsReduceOnly {
		i--
		if m.IsReduceOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.Quantity.Size()
		i -= size
		if _, err := m.Quantity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SubaccountOrderData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubaccountOrderData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubaccountOrderData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrderHash) > 0 {
		i -= len(m.OrderHash)
		copy(dAtA[i:], m.OrderHash)
		i = encodeVarintExchange(dAtA, i, uint64(len(m.OrderHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.Order != nil {
		{
			size, err := m.Order.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExchange(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Position) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Position) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Position) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.CumulativeFundingEntry.Size()
		i -= size
		if _, err := m.CumulativeFundingEntry.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Margin.Size()
		i -= size
		if _, err := m.Margin.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.EntryPrice.Size()
		i -= size
		if _, err := m.EntryPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Quantity.Size()
		i -= size
		if _, err := m.Quantity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.IsLong {
		i--
		if m.IsLong {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Balance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Balance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Balance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Deposits != nil {
		{
			size, err := m.Deposits.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExchange(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintExchange(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintExchange(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DerivativePosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DerivativePosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DerivativePosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Position != nil {
		{
			size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExchange(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintExchange(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintExchange(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MarketOrderIndicator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarketOrderIndicator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarketOrderIndicator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsBuy {
		i--
		if m.IsBuy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintExchange(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TradeLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TradeLog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TradeLog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintExchange(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.FeeRecipientAddress) > 0 {
		i -= len(m.FeeRecipientAddress)
		copy(dAtA[i:], m.FeeRecipientAddress)
		i = encodeVarintExchange(dAtA, i, uint64(len(m.FeeRecipientAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OrderHash) > 0 {
		i -= len(m.OrderHash)
		copy(dAtA[i:], m.OrderHash)
		i = encodeVarintExchange(dAtA, i, uint64(len(m.OrderHash)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.Fee.Size()
		i -= size
		if _, err := m.Fee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintExchange(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Quantity.Size()
		i -= size
		if _, err := m.Quantity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PositionDelta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PositionDelta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PositionDelta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ExecutionPrice.Size()
		i -= size
		if _, err := m.ExecutionPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.ExecutionMargin.Size()
		i -= size
		if _, err := m.ExecutionMargin.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.ExecutionQuantity.Size()
		i -= size
		if _, err := m.ExecutionQuantity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.IsLong {
		i--
		if m.IsLong {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DerivativeTradeLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DerivativeTradeLog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DerivativeTradeLog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Pnl.Size()
		i -= size
		if _, err := m.Pnl.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintExchange(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.FeeRecipientAddress) > 0 {
		i -= len(m.FeeRecipientAddress)
		copy(dAtA[i:], m.FeeRecipientAddress)
		i = encodeVarintExchange(dAtA, i, uint64(len(m.FeeRecipientAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OrderHash) > 0 {
		i -= len(m.OrderHash)
		copy(dAtA[i:], m.OrderHash)
		i = encodeVarintExchange(dAtA, i, uint64(len(m.OrderHash)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.Fee.Size()
		i -= size
		if _, err := m.Fee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Payout.Size()
		i -= size
		if _, err := m.Payout.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.PositionDelta != nil {
		{
			size, err := m.PositionDelta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExchange(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintExchange(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubaccountPosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubaccountPosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubaccountPosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintExchange(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Position != nil {
		{
			size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExchange(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubaccountDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubaccountDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubaccountDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Deposit != nil {
		{
			size, err := m.Deposit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExchange(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintExchange(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DepositUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Deposits) > 0 {
		for iNdEx := len(m.Deposits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deposits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExchange(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintExchange(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PointsMultiplier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PointsMultiplier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PointsMultiplier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TakerPointsMultiplier.Size()
		i -= size
		if _, err := m.TakerPointsMultiplier.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.MakerPointsMultiplier.Size()
		i -= size
		if _, err := m.MakerPointsMultiplier.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TradingRewardCampaignBoostInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TradingRewardCampaignBoostInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TradingRewardCampaignBoostInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DerivativeMarketMultipliers) > 0 {
		for iNdEx := len(m.DerivativeMarketMultipliers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DerivativeMarketMultipliers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExchange(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.BoostedDerivativeMarketIds) > 0 {
		for iNdEx := len(m.BoostedDerivativeMarketIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BoostedDerivativeMarketIds[iNdEx])
			copy(dAtA[i:], m.BoostedDerivativeMarketIds[iNdEx])
			i = encodeVarintExchange(dAtA, i, uint64(len(m.BoostedDerivativeMarketIds[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SpotMarketMultipliers) > 0 {
		for iNdEx := len(m.SpotMarketMultipliers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SpotMarketMultipliers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExchange(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.BoostedSpotMarketIds) > 0 {
		for iNdEx := len(m.BoostedSpotMarketIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BoostedSpotMarketIds[iNdEx])
			copy(dAtA[i:], m.BoostedSpotMarketIds[iNdEx])
			i = encodeVarintExchange(dAtA, i, uint64(len(m.BoostedSpotMarketIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CampaignRewardPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CampaignRewardPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CampaignRewardPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MaxCampaignRewards) > 0 {
		for iNdEx := len(m.MaxCampaignRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MaxCampaignRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExchange(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.StartTimestamp != 0 {
		i = encodeVarintExchange(dAtA, i, uint64(m.StartTimestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TradingRewardCampaignInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TradingRewardCampaignInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TradingRewardCampaignInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DisqualifiedMarketIds) > 0 {
		for iNdEx := len(m.DisqualifiedMarketIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DisqualifiedMarketIds[iNdEx])
			copy(dAtA[i:], m.DisqualifiedMarketIds[iNdEx])
			i = encodeVarintExchange(dAtA, i, uint64(len(m.DisqualifiedMarketIds[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.TradingRewardBoostInfo != nil {
		{
			size, err := m.TradingRewardBoostInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExchange(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.QuoteDenoms) > 0 {
		for iNdEx := len(m.QuoteDenoms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.QuoteDenoms[iNdEx])
			copy(dAtA[i:], m.QuoteDenoms[iNdEx])
			i = encodeVarintExchange(dAtA, i, uint64(len(m.QuoteDenoms[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.CampaignDurationSeconds != 0 {
		i = encodeVarintExchange(dAtA, i, uint64(m.CampaignDurationSeconds))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FeeDiscountTierInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeDiscountTierInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeDiscountTierInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Volume.Size()
		i -= size
		if _, err := m.Volume.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.StakedAmount.Size()
		i -= size
		if _, err := m.StakedAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.TakerDiscountRate.Size()
		i -= size
		if _, err := m.TakerDiscountRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.MakerDiscountRate.Size()
		i -= size
		if _, err := m.MakerDiscountRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *FeeDiscountSchedule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeDiscountSchedule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeDiscountSchedule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DisqualifiedMarketIds) > 0 {
		for iNdEx := len(m.DisqualifiedMarketIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DisqualifiedMarketIds[iNdEx])
			copy(dAtA[i:], m.DisqualifiedMarketIds[iNdEx])
			i = encodeVarintExchange(dAtA, i, uint64(len(m.DisqualifiedMarketIds[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.TierInfos) > 0 {
		for iNdEx := len(m.TierInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TierInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExchange(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.QuoteDenoms) > 0 {
		for iNdEx := len(m.QuoteDenoms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.QuoteDenoms[iNdEx])
			copy(dAtA[i:], m.QuoteDenoms[iNdEx])
			i = encodeVarintExchange(dAtA, i, uint64(len(m.QuoteDenoms[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.BucketDuration != 0 {
		i = encodeVarintExchange(dAtA, i, uint64(m.BucketDuration))
		i--
		dAtA[i] = 0x10
	}
	if m.BucketCount != 0 {
		i = encodeVarintExchange(dAtA, i, uint64(m.BucketCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FeeDiscountTierTTL) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeDiscountTierTTL) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeDiscountTierTTL) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TtlTimestamp != 0 {
		i = encodeVarintExchange(dAtA, i, uint64(m.TtlTimestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.Tier != 0 {
		i = encodeVarintExchange(dAtA, i, uint64(m.Tier))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AccountRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExchange(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintExchange(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TradeRecords) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TradeRecords) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TradeRecords) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LatestTradeRecords) > 0 {
		for iNdEx := len(m.LatestTradeRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LatestTradeRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExchange(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintExchange(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubaccountIDs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubaccountIDs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubaccountIDs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubaccountIds) > 0 {
		for iNdEx := len(m.SubaccountIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SubaccountIds[iNdEx])
			copy(dAtA[i:], m.SubaccountIds[iNdEx])
			i = encodeVarintExchange(dAtA, i, uint64(len(m.SubaccountIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TradeRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TradeRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TradeRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Quantity.Size()
		i -= size
		if _, err := m.Quantity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Timestamp != 0 {
		i = encodeVarintExchange(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Level) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Level) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Level) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Q.Size()
		i -= size
		if _, err := m.Q.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.P.Size()
		i -= size
		if _, err := m.P.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AggregateSubaccountVolumeRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggregateSubaccountVolumeRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AggregateSubaccountVolumeRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketVolumes) > 0 {
		for iNdEx := len(m.MarketVolumes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MarketVolumes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExchange(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintExchange(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AggregateAccountVolumeRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggregateAccountVolumeRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AggregateAccountVolumeRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketVolumes) > 0 {
		for iNdEx := len(m.MarketVolumes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MarketVolumes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExchange(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintExchange(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DenomDecimals) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenomDecimals) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenomDecimals) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Decimals != 0 {
		i = encodeVarintExchange(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintExchange(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GrantAuthorization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GrantAuthorization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GrantAuthorization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Grantee) > 0 {
		i -= len(m.Grantee)
		copy(dAtA[i:], m.Grantee)
		i = encodeVarintExchange(dAtA, i, uint64(len(m.Grantee)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActiveGrant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveGrant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActiveGrant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Granter) > 0 {
		i -= len(m.Granter)
		copy(dAtA[i:], m.Granter)
		i = encodeVarintExchange(dAtA, i, uint64(len(m.Granter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EffectiveGrant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EffectiveGrant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EffectiveGrant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsValid {
		i--
		if m.IsValid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.NetGrantedStake.Size()
		i -= size
		if _, err := m.NetGrantedStake.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Granter) > 0 {
		i -= len(m.Granter)
		copy(dAtA[i:], m.Granter)
		i = encodeVarintExchange(dAtA, i, uint64(len(m.Granter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DenomMinNotional) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenomMinNotional) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenomMinNotional) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinNotional.Size()
		i -= size
		if _, err := m.MinNotional.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintExchange(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintExchange(dAtA []byte, offset int, v uint64) int {
	offset -= sovExchange(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SpotMarketInstantListingFee.Size()
	n += 1 + l + sovExchange(uint64(l))
	l = m.DerivativeMarketInstantListingFee.Size()
	n += 1 + l + sovExchange(uint64(l))
	l = m.DefaultSpotMakerFeeRate.Size()
	n += 1 + l + sovExchange(uint64(l))
	l = m.DefaultSpotTakerFeeRate.Size()
	n += 1 + l + sovExchange(uint64(l))
	l = m.DefaultDerivativeMakerFeeRate.Size()
	n += 1 + l + sovExchange(uint64(l))
	l = m.DefaultDerivativeTakerFeeRate.Size()
	n += 1 + l + sovExchange(uint64(l))
	l = m.DefaultInitialMarginRatio.Size()
	n += 1 + l + sovExchange(uint64(l))
	l = m.DefaultMaintenanceMarginRatio.Size()
	n += 1 + l + sovExchange(uint64(l))
	if m.DefaultFundingInterval != 0 {
		n += 1 + sovExchange(uint64(m.DefaultFundingInterval))
	}
	if m.FundingMultiple != 0 {
		n += 1 + sovExchange(uint64(m.FundingMultiple))
	}
	l = m.RelayerFeeShareRate.Size()
	n += 1 + l + sovExchange(uint64(l))
	l = m.DefaultHourlyFundingRateCap.Size()
	n += 1 + l + sovExchange(uint64(l))
	l = m.DefaultHourlyInterestRate.Size()
	n += 1 + l + sovExchange(uint64(l))
	if m.MaxDerivativeOrderSideCount != 0 {
		n += 1 + sovExchange(uint64(m.MaxDerivativeOrderSideCount))
	}
	l = m.InjRewardStakedRequirementThreshold.Size()
	n += 1 + l + sovExchange(uint64(l))
	if m.TradingRewardsVestingDuration != 0 {
		n += 2 + sovExchange(uint64(m.TradingRewardsVestingDuration))
	}
	l = m.LiquidatorRewardShareRate.Size()
	n += 2 + l + sovExchange(uint64(l))
	l = m.BinaryOptionsMarketInstantListingFee.Size()
	n += 2 + l + sovExchange(uint64(l))
	if m.AtomicMarketOrderAccessLevel != 0 {
		n += 2 + sovExchange(uint64(m.AtomicMarketOrderAccessLevel))
	}
	l = m.SpotAtomicMarketOrderFeeMultiplier.Size()
	n += 2 + l + sovExchange(uint64(l))
	l = m.DerivativeAtomicMarketOrderFeeMultiplier.Size()
	n += 2 + l + sovExchange(uint64(l))
	l = m.BinaryOptionsAtomicMarketOrderFeeMultiplier.Size()
	n += 2 + l + sovExchange(uint64(l))
	l = m.MinimalProtocolFeeRate.Size()
	n += 2 + l + sovExchange(uint64(l))
	if m.IsInstantDerivativeMarketLaunchEnabled {
		n += 3
	}
	if m.PostOnlyModeHeightThreshold != 0 {
		n += 2 + sovExchange(uint64(m.PostOnlyModeHeightThreshold))
	}
	if m.MarginDecreasePriceTimestampThresholdSeconds != 0 {
		n += 2 + sovExchange(uint64(m.MarginDecreasePriceTimestampThresholdSeconds))
	}
	if len(m.ExchangeAdmins) > 0 {
		for _, s := range m.ExchangeAdmins {
			l = len(s)
			n += 2 + l + sovExchange(uint64(l))
		}
	}
	l = m.InjAuctionMaxCap.Size()
	n += 2 + l + sovExchange(uint64(l))
	if m.FixedGasEnabled {
		n += 3
	}
	if m.EmitLegacyVersionEvents {
		n += 3
	}
	l = m.DefaultReduceMarginRatio.Size()
	n += 2 + l + sovExchange(uint64(l))
	return n
}

func (m *NextFundingTimestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NextTimestamp != 0 {
		n += 1 + sovExchange(uint64(m.NextTimestamp))
	}
	return n
}

func (m *MidPriceAndTOB) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MidPrice != nil {
		l = m.MidPrice.Size()
		n += 1 + l + sovExchange(uint64(l))
	}
	if m.BestBuyPrice != nil {
		l = m.BestBuyPrice.Size()
		n += 1 + l + sovExchange(uint64(l))
	}
	if m.BestSellPrice != nil {
		l = m.BestSellPrice.Size()
		n += 1 + l + sovExchange(uint64(l))
	}
	return n
}

func (m *Deposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AvailableBalance.Size()
	n += 1 + l + sovExchange(uint64(l))
	l = m.TotalBalance.Size()
	n += 1 + l + sovExchange(uint64(l))
	return n
}

func (m *SubaccountTradeNonce) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovExchange(uint64(m.Nonce))
	}
	return n
}

func (m *SubaccountOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Price.Size()
	n += 1 + l + sovExchange(uint64(l))
	l = m.Quantity.Size()
	n += 1 + l + sovExchange(uint64(l))
	if m.IsReduceOnly {
		n += 2
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovExchange(uint64(l))
	}
	return n
}

func (m *SubaccountOrderData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Order != nil {
		l = m.Order.Size()
		n += 1 + l + sovExchange(uint64(l))
	}
	l = len(m.OrderHash)
	if l > 0 {
		n += 1 + l + sovExchange(uint64(l))
	}
	return n
}

func (m *Position) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsLong {
		n += 2
	}
	l = m.Quantity.Size()
	n += 1 + l + sovExchange(uint64(l))
	l = m.EntryPrice.Size()
	n += 1 + l + sovExchange(uint64(l))
	l = m.Margin.Size()
	n += 1 + l + sovExchange(uint64(l))
	l = m.CumulativeFundingEntry.Size()
	n += 1 + l + sovExchange(uint64(l))
	return n
}

func (m *Balance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovExchange(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovExchange(uint64(l))
	}
	if m.Deposits != nil {
		l = m.Deposits.Size()
		n += 1 + l + sovExchange(uint64(l))
	}
	return n
}

func (m *DerivativePosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovExchange(uint64(l))
	}
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovExchange(uint64(l))
	}
	if m.Position != nil {
		l = m.Position.Size()
		n += 1 + l + sovExchange(uint64(l))
	}
	return n
}

func (m *MarketOrderIndicator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovExchange(uint64(l))
	}
	if m.IsBuy {
		n += 2
	}
	return n
}

func (m *TradeLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Quantity.Size()
	n += 1 + l + sovExchange(uint64(l))
	l = m.Price.Size()
	n += 1 + l + sovExchange(uint64(l))
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovExchange(uint64(l))
	}
	l = m.Fee.Size()
	n += 1 + l + sovExchange(uint64(l))
	l = len(m.OrderHash)
	if l > 0 {
		n += 1 + l + sovExchange(uint64(l))
	}
	l = len(m.FeeRecipientAddress)
	if l > 0 {
		n += 1 + l + sovExchange(uint64(l))
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovExchange(uint64(l))
	}
	return n
}

func (m *PositionDelta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsLong {
		n += 2
	}
	l = m.ExecutionQuantity.Size()
	n += 1 + l + sovExchange(uint64(l))
	l = m.ExecutionMargin.Size()
	n += 1 + l + sovExchange(uint64(l))
	l = m.ExecutionPrice.Size()
	n += 1 + l + sovExchange(uint64(l))
	return n
}

func (m *DerivativeTradeLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovExchange(uint64(l))
	}
	if m.PositionDelta != nil {
		l = m.PositionDelta.Size()
		n += 1 + l + sovExchange(uint64(l))
	}
	l = m.Payout.Size()
	n += 1 + l + sovExchange(uint64(l))
	l = m.Fee.Size()
	n += 1 + l + sovExchange(uint64(l))
	l = len(m.OrderHash)
	if l > 0 {
		n += 1 + l + sovExchange(uint64(l))
	}
	l = len(m.FeeRecipientAddress)
	if l > 0 {
		n += 1 + l + sovExchange(uint64(l))
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovExchange(uint64(l))
	}
	l = m.Pnl.Size()
	n += 1 + l + sovExchange(uint64(l))
	return n
}

func (m *SubaccountPosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Position != nil {
		l = m.Position.Size()
		n += 1 + l + sovExchange(uint64(l))
	}
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovExchange(uint64(l))
	}
	return n
}

func (m *SubaccountDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovExchange(uint64(l))
	}
	if m.Deposit != nil {
		l = m.Deposit.Size()
		n += 1 + l + sovExchange(uint64(l))
	}
	return n
}

func (m *DepositUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovExchange(uint64(l))
	}
	if len(m.Deposits) > 0 {
		for _, e := range m.Deposits {
			l = e.Size()
			n += 1 + l + sovExchange(uint64(l))
		}
	}
	return n
}

func (m *PointsMultiplier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MakerPointsMultiplier.Size()
	n += 1 + l + sovExchange(uint64(l))
	l = m.TakerPointsMultiplier.Size()
	n += 1 + l + sovExchange(uint64(l))
	return n
}

func (m *TradingRewardCampaignBoostInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BoostedSpotMarketIds) > 0 {
		for _, s := range m.BoostedSpotMarketIds {
			l = len(s)
			n += 1 + l + sovExchange(uint64(l))
		}
	}
	if len(m.SpotMarketMultipliers) > 0 {
		for _, e := range m.SpotMarketMultipliers {
			l = e.Size()
			n += 1 + l + sovExchange(uint64(l))
		}
	}
	if len(m.BoostedDerivativeMarketIds) > 0 {
		for _, s := range m.BoostedDerivativeMarketIds {
			l = len(s)
			n += 1 + l + sovExchange(uint64(l))
		}
	}
	if len(m.DerivativeMarketMultipliers) > 0 {
		for _, e := range m.DerivativeMarketMultipliers {
			l = e.Size()
			n += 1 + l + sovExchange(uint64(l))
		}
	}
	return n
}

func (m *CampaignRewardPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartTimestamp != 0 {
		n += 1 + sovExchange(uint64(m.StartTimestamp))
	}
	if len(m.MaxCampaignRewards) > 0 {
		for _, e := range m.MaxCampaignRewards {
			l = e.Size()
			n += 1 + l + sovExchange(uint64(l))
		}
	}
	return n
}

func (m *TradingRewardCampaignInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CampaignDurationSeconds != 0 {
		n += 1 + sovExchange(uint64(m.CampaignDurationSeconds))
	}
	if len(m.QuoteDenoms) > 0 {
		for _, s := range m.QuoteDenoms {
			l = len(s)
			n += 1 + l + sovExchange(uint64(l))
		}
	}
	if m.TradingRewardBoostInfo != nil {
		l = m.TradingRewardBoostInfo.Size()
		n += 1 + l + sovExchange(uint64(l))
	}
	if len(m.DisqualifiedMarketIds) > 0 {
		for _, s := range m.DisqualifiedMarketIds {
			l = len(s)
			n += 1 + l + sovExchange(uint64(l))
		}
	}
	return n
}

func (m *FeeDiscountTierInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MakerDiscountRate.Size()
	n += 1 + l + sovExchange(uint64(l))
	l = m.TakerDiscountRate.Size()
	n += 1 + l + sovExchange(uint64(l))
	l = m.StakedAmount.Size()
	n += 1 + l + sovExchange(uint64(l))
	l = m.Volume.Size()
	n += 1 + l + sovExchange(uint64(l))
	return n
}

func (m *FeeDiscountSchedule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BucketCount != 0 {
		n += 1 + sovExchange(uint64(m.BucketCount))
	}
	if m.BucketDuration != 0 {
		n += 1 + sovExchange(uint64(m.BucketDuration))
	}
	if len(m.QuoteDenoms) > 0 {
		for _, s := range m.QuoteDenoms {
			l = len(s)
			n += 1 + l + sovExchange(uint64(l))
		}
	}
	if len(m.TierInfos) > 0 {
		for _, e := range m.TierInfos {
			l = e.Size()
			n += 1 + l + sovExchange(uint64(l))
		}
	}
	if len(m.DisqualifiedMarketIds) > 0 {
		for _, s := range m.DisqualifiedMarketIds {
			l = len(s)
			n += 1 + l + sovExchange(uint64(l))
		}
	}
	return n
}

func (m *FeeDiscountTierTTL) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tier != 0 {
		n += 1 + sovExchange(uint64(m.Tier))
	}
	if m.TtlTimestamp != 0 {
		n += 1 + sovExchange(uint64(m.TtlTimestamp))
	}
	return n
}

func (m *AccountRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovExchange(uint64(l))
	}
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovExchange(uint64(l))
		}
	}
	return n
}

func (m *TradeRecords) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovExchange(uint64(l))
	}
	if len(m.LatestTradeRecords) > 0 {
		for _, e := range m.LatestTradeRecords {
			l = e.Size()
			n += 1 + l + sovExchange(uint64(l))
		}
	}
	return n
}

func (m *SubaccountIDs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SubaccountIds) > 0 {
		for _, b := range m.SubaccountIds {
			l = len(b)
			n += 1 + l + sovExchange(uint64(l))
		}
	}
	return n
}

func (m *TradeRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovExchange(uint64(m.Timestamp))
	}
	l = m.Price.Size()
	n += 1 + l + sovExchange(uint64(l))
	l = m.Quantity.Size()
	n += 1 + l + sovExchange(uint64(l))
	return n
}

func (m *Level) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.P.Size()
	n += 1 + l + sovExchange(uint64(l))
	l = m.Q.Size()
	n += 1 + l + sovExchange(uint64(l))
	return n
}

func (m *AggregateSubaccountVolumeRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovExchange(uint64(l))
	}
	if len(m.MarketVolumes) > 0 {
		for _, e := range m.MarketVolumes {
			l = e.Size()
			n += 1 + l + sovExchange(uint64(l))
		}
	}
	return n
}

func (m *AggregateAccountVolumeRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovExchange(uint64(l))
	}
	if len(m.MarketVolumes) > 0 {
		for _, e := range m.MarketVolumes {
			l = e.Size()
			n += 1 + l + sovExchange(uint64(l))
		}
	}
	return n
}

func (m *DenomDecimals) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovExchange(uint64(l))
	}
	if m.Decimals != 0 {
		n += 1 + sovExchange(uint64(m.Decimals))
	}
	return n
}

func (m *GrantAuthorization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Grantee)
	if l > 0 {
		n += 1 + l + sovExchange(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovExchange(uint64(l))
	return n
}

func (m *ActiveGrant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Granter)
	if l > 0 {
		n += 1 + l + sovExchange(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovExchange(uint64(l))
	return n
}

func (m *EffectiveGrant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Granter)
	if l > 0 {
		n += 1 + l + sovExchange(uint64(l))
	}
	l = m.NetGrantedStake.Size()
	n += 1 + l + sovExchange(uint64(l))
	if m.IsValid {
		n += 2
	}
	return n
}

func (m *DenomMinNotional) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovExchange(uint64(l))
	}
	l = m.MinNotional.Size()
	n += 1 + l + sovExchange(uint64(l))
	return n
}

func sovExchange(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExchange(x uint64) (n int) {
	return sovExchange(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpotMarketInstantListingFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SpotMarketInstantListingFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DerivativeMarketInstantListingFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DerivativeMarketInstantListingFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSpotMakerFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultSpotMakerFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSpotTakerFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultSpotTakerFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultDerivativeMakerFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultDerivativeMakerFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultDerivativeTakerFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultDerivativeTakerFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultInitialMarginRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultInitialMarginRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultMaintenanceMarginRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultMaintenanceMarginRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultFundingInterval", wireType)
			}
			m.DefaultFundingInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultFundingInterval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundingMultiple", wireType)
			}
			m.FundingMultiple = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FundingMultiple |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerFeeShareRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RelayerFeeShareRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultHourlyFundingRateCap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultHourlyFundingRateCap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultHourlyInterestRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultHourlyInterestRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDerivativeOrderSideCount", wireType)
			}
			m.MaxDerivativeOrderSideCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDerivativeOrderSideCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InjRewardStakedRequirementThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InjRewardStakedRequirementThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingRewardsVestingDuration", wireType)
			}
			m.TradingRewardsVestingDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TradingRewardsVestingDuration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidatorRewardShareRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidatorRewardShareRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryOptionsMarketInstantListingFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BinaryOptionsMarketInstantListingFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AtomicMarketOrderAccessLevel", wireType)
			}
			m.AtomicMarketOrderAccessLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AtomicMarketOrderAccessLevel |= AtomicMarketOrderAccessLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpotAtomicMarketOrderFeeMultiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SpotAtomicMarketOrderFeeMultiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DerivativeAtomicMarketOrderFeeMultiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DerivativeAtomicMarketOrderFeeMultiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryOptionsAtomicMarketOrderFeeMultiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BinaryOptionsAtomicMarketOrderFeeMultiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimalProtocolFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinimalProtocolFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsInstantDerivativeMarketLaunchEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsInstantDerivativeMarketLaunchEnabled = bool(v != 0)
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostOnlyModeHeightThreshold", wireType)
			}
			m.PostOnlyModeHeightThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PostOnlyModeHeightThreshold |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarginDecreasePriceTimestampThresholdSeconds", wireType)
			}
			m.MarginDecreasePriceTimestampThresholdSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarginDecreasePriceTimestampThresholdSeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeAdmins", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExchangeAdmins = append(m.ExchangeAdmins, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InjAuctionMaxCap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InjAuctionMaxCap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixedGasEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FixedGasEnabled = bool(v != 0)
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmitLegacyVersionEvents", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EmitLegacyVersionEvents = bool(v != 0)
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultReduceMarginRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultReduceMarginRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NextFundingTimestamp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NextFundingTimestamp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NextFundingTimestamp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextTimestamp", wireType)
			}
			m.NextTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MidPriceAndTOB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MidPriceAndTOB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MidPriceAndTOB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MidPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.MidPrice = &v
			if err := m.MidPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BestBuyPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.BestBuyPrice = &v
			if err := m.BestBuyPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BestSellPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.BestSellPrice = &v
			if err := m.BestSellPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Deposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Deposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Deposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AvailableBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubaccountTradeNonce) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubaccountTradeNonce: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubaccountTradeNonce: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubaccountOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubaccountOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubaccountOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsReduceOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsReduceOnly = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubaccountOrderData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubaccountOrderData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubaccountOrderData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Order == nil {
				m.Order = &SubaccountOrder{}
			}
			if err := m.Order.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderHash = append(m.OrderHash[:0], dAtA[iNdEx:postIndex]...)
			if m.OrderHash == nil {
				m.OrderHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Position) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Position: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Position: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLong", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLong = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EntryPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Margin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Margin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumulativeFundingEntry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CumulativeFundingEntry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Balance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Balance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Balance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Deposits == nil {
				m.Deposits = &Deposit{}
			}
			if err := m.Deposits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DerivativePosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DerivativePosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DerivativePosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Position == nil {
				m.Position = &Position{}
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarketOrderIndicator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarketOrderIndicator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarketOrderIndicator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBuy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBuy = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TradeLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradeLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradeLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = append(m.SubaccountId[:0], dAtA[iNdEx:postIndex]...)
			if m.SubaccountId == nil {
				m.SubaccountId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderHash = append(m.OrderHash[:0], dAtA[iNdEx:postIndex]...)
			if m.OrderHash == nil {
				m.OrderHash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRecipientAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeRecipientAddress = append(m.FeeRecipientAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.FeeRecipientAddress == nil {
				m.FeeRecipientAddress = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PositionDelta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PositionDelta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PositionDelta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLong", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLong = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionQuantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExecutionQuantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionMargin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExecutionMargin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExecutionPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DerivativeTradeLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DerivativeTradeLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DerivativeTradeLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = append(m.SubaccountId[:0], dAtA[iNdEx:postIndex]...)
			if m.SubaccountId == nil {
				m.SubaccountId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionDelta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PositionDelta == nil {
				m.PositionDelta = &PositionDelta{}
			}
			if err := m.PositionDelta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Payout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderHash = append(m.OrderHash[:0], dAtA[iNdEx:postIndex]...)
			if m.OrderHash == nil {
				m.OrderHash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRecipientAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeRecipientAddress = append(m.FeeRecipientAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.FeeRecipientAddress == nil {
				m.FeeRecipientAddress = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pnl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pnl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubaccountPosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubaccountPosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubaccountPosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Position == nil {
				m.Position = &Position{}
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = append(m.SubaccountId[:0], dAtA[iNdEx:postIndex]...)
			if m.SubaccountId == nil {
				m.SubaccountId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubaccountDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubaccountDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubaccountDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = append(m.SubaccountId[:0], dAtA[iNdEx:postIndex]...)
			if m.SubaccountId == nil {
				m.SubaccountId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Deposit == nil {
				m.Deposit = &Deposit{}
			}
			if err := m.Deposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DepositUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposits = append(m.Deposits, &SubaccountDeposit{})
			if err := m.Deposits[len(m.Deposits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PointsMultiplier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PointsMultiplier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PointsMultiplier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerPointsMultiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MakerPointsMultiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerPointsMultiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TakerPointsMultiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TradingRewardCampaignBoostInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradingRewardCampaignBoostInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradingRewardCampaignBoostInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoostedSpotMarketIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BoostedSpotMarketIds = append(m.BoostedSpotMarketIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpotMarketMultipliers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpotMarketMultipliers = append(m.SpotMarketMultipliers, PointsMultiplier{})
			if err := m.SpotMarketMultipliers[len(m.SpotMarketMultipliers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoostedDerivativeMarketIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BoostedDerivativeMarketIds = append(m.BoostedDerivativeMarketIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DerivativeMarketMultipliers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DerivativeMarketMultipliers = append(m.DerivativeMarketMultipliers, PointsMultiplier{})
			if err := m.DerivativeMarketMultipliers[len(m.DerivativeMarketMultipliers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CampaignRewardPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CampaignRewardPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CampaignRewardPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimestamp", wireType)
			}
			m.StartTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCampaignRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxCampaignRewards = append(m.MaxCampaignRewards, types.Coin{})
			if err := m.MaxCampaignRewards[len(m.MaxCampaignRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TradingRewardCampaignInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradingRewardCampaignInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradingRewardCampaignInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignDurationSeconds", wireType)
			}
			m.CampaignDurationSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignDurationSeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteDenoms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteDenoms = append(m.QuoteDenoms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingRewardBoostInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TradingRewardBoostInfo == nil {
				m.TradingRewardBoostInfo = &TradingRewardCampaignBoostInfo{}
			}
			if err := m.TradingRewardBoostInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisqualifiedMarketIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisqualifiedMarketIds = append(m.DisqualifiedMarketIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeeDiscountTierInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeDiscountTierInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeDiscountTierInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerDiscountRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MakerDiscountRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerDiscountRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TakerDiscountRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Volume.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeeDiscountSchedule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeDiscountSchedule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeDiscountSchedule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketCount", wireType)
			}
			m.BucketCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BucketCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketDuration", wireType)
			}
			m.BucketDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BucketDuration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteDenoms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteDenoms = append(m.QuoteDenoms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TierInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TierInfos = append(m.TierInfos, &FeeDiscountTierInfo{})
			if err := m.TierInfos[len(m.TierInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisqualifiedMarketIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisqualifiedMarketIds = append(m.DisqualifiedMarketIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeeDiscountTierTTL) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeDiscountTierTTL: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeDiscountTierTTL: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tier", wireType)
			}
			m.Tier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TtlTimestamp", wireType)
			}
			m.TtlTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TtlTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, types.Coin{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TradeRecords) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradeRecords: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradeRecords: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestTradeRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestTradeRecords = append(m.LatestTradeRecords, &TradeRecord{})
			if err := m.LatestTradeRecords[len(m.LatestTradeRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubaccountIDs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubaccountIDs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubaccountIDs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountIds", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountIds = append(m.SubaccountIds, make([]byte, postIndex-iNdEx))
			copy(m.SubaccountIds[len(m.SubaccountIds)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TradeRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradeRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradeRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Level) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Level: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Level: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.P.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Q.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AggregateSubaccountVolumeRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggregateSubaccountVolumeRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggregateSubaccountVolumeRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketVolumes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketVolumes = append(m.MarketVolumes, &MarketVolume{})
			if err := m.MarketVolumes[len(m.MarketVolumes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AggregateAccountVolumeRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggregateAccountVolumeRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggregateAccountVolumeRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketVolumes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketVolumes = append(m.MarketVolumes, &MarketVolume{})
			if err := m.MarketVolumes[len(m.MarketVolumes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenomDecimals) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenomDecimals: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenomDecimals: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GrantAuthorization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GrantAuthorization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GrantAuthorization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grantee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grantee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActiveGrant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveGrant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveGrant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Granter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Granter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EffectiveGrant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EffectiveGrant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EffectiveGrant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Granter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Granter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetGrantedStake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NetGrantedStake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsValid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsValid = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenomMinNotional) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenomMinNotional: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenomMinNotional: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinNotional", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinNotional.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExchange(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExchange
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExchange
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExchange
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExchange
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExchange
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExchange        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExchange          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExchange = fmt.Errorf("proto: unexpected end of group")
)
