// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: injective/exchange/v2/market.proto

package v2

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	types "github.com/InjectiveLabs/sdk-go/chain/oracle/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MarketStatus int32

const (
	MarketStatus_Unspecified MarketStatus = 0
	MarketStatus_Active      MarketStatus = 1
	MarketStatus_Paused      MarketStatus = 2
	MarketStatus_Demolished  MarketStatus = 3
	MarketStatus_Expired     MarketStatus = 4
)

var MarketStatus_name = map[int32]string{
	0: "Unspecified",
	1: "Active",
	2: "Paused",
	3: "Demolished",
	4: "Expired",
}

var MarketStatus_value = map[string]int32{
	"Unspecified": 0,
	"Active":      1,
	"Paused":      2,
	"Demolished":  3,
	"Expired":     4,
}

func (x MarketStatus) String() string {
	return proto.EnumName(MarketStatus_name, int32(x))
}

func (MarketStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c255fc568a8e9667, []int{0}
}

type OpenNotionalCap struct {
	// Types that are valid to be assigned to Cap:
	//	*OpenNotionalCap_Uncapped
	//	*OpenNotionalCap_Capped
	Cap isOpenNotionalCap_Cap `protobuf_oneof:"cap"`
}

func (m *OpenNotionalCap) Reset()         { *m = OpenNotionalCap{} }
func (m *OpenNotionalCap) String() string { return proto.CompactTextString(m) }
func (*OpenNotionalCap) ProtoMessage()    {}
func (*OpenNotionalCap) Descriptor() ([]byte, []int) {
	return fileDescriptor_c255fc568a8e9667, []int{0}
}
func (m *OpenNotionalCap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenNotionalCap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpenNotionalCap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpenNotionalCap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenNotionalCap.Merge(m, src)
}
func (m *OpenNotionalCap) XXX_Size() int {
	return m.Size()
}
func (m *OpenNotionalCap) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenNotionalCap.DiscardUnknown(m)
}

var xxx_messageInfo_OpenNotionalCap proto.InternalMessageInfo

type isOpenNotionalCap_Cap interface {
	isOpenNotionalCap_Cap()
	MarshalTo([]byte) (int, error)
	Size() int
}

type OpenNotionalCap_Uncapped struct {
	Uncapped *OpenNotionalCapUncapped `protobuf:"bytes,1,opt,name=uncapped,proto3,oneof" json:"uncapped,omitempty"`
}
type OpenNotionalCap_Capped struct {
	Capped *OpenNotionalCapCapped `protobuf:"bytes,2,opt,name=capped,proto3,oneof" json:"capped,omitempty"`
}

func (*OpenNotionalCap_Uncapped) isOpenNotionalCap_Cap() {}
func (*OpenNotionalCap_Capped) isOpenNotionalCap_Cap()   {}

func (m *OpenNotionalCap) GetCap() isOpenNotionalCap_Cap {
	if m != nil {
		return m.Cap
	}
	return nil
}

func (m *OpenNotionalCap) GetUncapped() *OpenNotionalCapUncapped {
	if x, ok := m.GetCap().(*OpenNotionalCap_Uncapped); ok {
		return x.Uncapped
	}
	return nil
}

func (m *OpenNotionalCap) GetCapped() *OpenNotionalCapCapped {
	if x, ok := m.GetCap().(*OpenNotionalCap_Capped); ok {
		return x.Capped
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*OpenNotionalCap) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*OpenNotionalCap_Uncapped)(nil),
		(*OpenNotionalCap_Capped)(nil),
	}
}

type OpenNotionalCapUncapped struct {
}

func (m *OpenNotionalCapUncapped) Reset()         { *m = OpenNotionalCapUncapped{} }
func (m *OpenNotionalCapUncapped) String() string { return proto.CompactTextString(m) }
func (*OpenNotionalCapUncapped) ProtoMessage()    {}
func (*OpenNotionalCapUncapped) Descriptor() ([]byte, []int) {
	return fileDescriptor_c255fc568a8e9667, []int{1}
}
func (m *OpenNotionalCapUncapped) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenNotionalCapUncapped) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpenNotionalCapUncapped.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpenNotionalCapUncapped) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenNotionalCapUncapped.Merge(m, src)
}
func (m *OpenNotionalCapUncapped) XXX_Size() int {
	return m.Size()
}
func (m *OpenNotionalCapUncapped) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenNotionalCapUncapped.DiscardUnknown(m)
}

var xxx_messageInfo_OpenNotionalCapUncapped proto.InternalMessageInfo

type OpenNotionalCapCapped struct {
	Value cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=value,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"value"`
}

func (m *OpenNotionalCapCapped) Reset()         { *m = OpenNotionalCapCapped{} }
func (m *OpenNotionalCapCapped) String() string { return proto.CompactTextString(m) }
func (*OpenNotionalCapCapped) ProtoMessage()    {}
func (*OpenNotionalCapCapped) Descriptor() ([]byte, []int) {
	return fileDescriptor_c255fc568a8e9667, []int{2}
}
func (m *OpenNotionalCapCapped) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenNotionalCapCapped) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpenNotionalCapCapped.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpenNotionalCapCapped) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenNotionalCapCapped.Merge(m, src)
}
func (m *OpenNotionalCapCapped) XXX_Size() int {
	return m.Size()
}
func (m *OpenNotionalCapCapped) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenNotionalCapCapped.DiscardUnknown(m)
}

var xxx_messageInfo_OpenNotionalCapCapped proto.InternalMessageInfo

type MarketFeeMultiplier struct {
	MarketId      string                      `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	FeeMultiplier cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=fee_multiplier,json=feeMultiplier,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"fee_multiplier"`
}

func (m *MarketFeeMultiplier) Reset()         { *m = MarketFeeMultiplier{} }
func (m *MarketFeeMultiplier) String() string { return proto.CompactTextString(m) }
func (*MarketFeeMultiplier) ProtoMessage()    {}
func (*MarketFeeMultiplier) Descriptor() ([]byte, []int) {
	return fileDescriptor_c255fc568a8e9667, []int{3}
}
func (m *MarketFeeMultiplier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarketFeeMultiplier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarketFeeMultiplier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarketFeeMultiplier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketFeeMultiplier.Merge(m, src)
}
func (m *MarketFeeMultiplier) XXX_Size() int {
	return m.Size()
}
func (m *MarketFeeMultiplier) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketFeeMultiplier.DiscardUnknown(m)
}

var xxx_messageInfo_MarketFeeMultiplier proto.InternalMessageInfo

// An object describing trade pair of two assets.
type SpotMarket struct {
	// A name of the pair in format AAA/BBB, where AAA is base asset, BBB is quote
	// asset.
	Ticker string `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	// Coin denom used for the base asset
	BaseDenom string `protobuf:"bytes,2,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty"`
	// Coin used for the quote asset
	QuoteDenom string `protobuf:"bytes,3,opt,name=quote_denom,json=quoteDenom,proto3" json:"quote_denom,omitempty"`
	// maker_fee_rate defines the fee percentage makers pay when trading
	MakerFeeRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=maker_fee_rate,json=makerFeeRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"maker_fee_rate"`
	// taker_fee_rate defines the fee percentage takers pay when trading
	TakerFeeRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=taker_fee_rate,json=takerFeeRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"taker_fee_rate"`
	// relayer_fee_share_rate defines the percentage of the transaction fee shared
	// with the relayer in a derivative market
	RelayerFeeShareRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,6,opt,name=relayer_fee_share_rate,json=relayerFeeShareRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"relayer_fee_share_rate"`
	// Unique market ID.
	MarketId string `protobuf:"bytes,7,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Status of the market
	Status MarketStatus `protobuf:"varint,8,opt,name=status,proto3,enum=injective.exchange.v2.MarketStatus" json:"status,omitempty"`
	// min_price_tick_size defines the minimum tick size that the price required
	// for orders in the market (in human readable format)
	MinPriceTickSize cosmossdk_io_math.LegacyDec `protobuf:"bytes,9,opt,name=min_price_tick_size,json=minPriceTickSize,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"min_price_tick_size"`
	// min_quantity_tick_size defines the minimum tick size of the quantity
	// required for orders in the market (in human readable format)
	MinQuantityTickSize cosmossdk_io_math.LegacyDec `protobuf:"bytes,10,opt,name=min_quantity_tick_size,json=minQuantityTickSize,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"min_quantity_tick_size"`
	// min_notional defines the minimum notional (in quote asset) required for
	// orders in the market (in human readable format)
	MinNotional cosmossdk_io_math.LegacyDec `protobuf:"bytes,11,opt,name=min_notional,json=minNotional,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"min_notional"`
	// current market admin
	Admin string `protobuf:"bytes,12,opt,name=admin,proto3" json:"admin,omitempty"`
	// level of admin permissions
	AdminPermissions uint32 `protobuf:"varint,13,opt,name=admin_permissions,json=adminPermissions,proto3" json:"admin_permissions,omitempty"`
	// base token decimals
	BaseDecimals uint32 `protobuf:"varint,14,opt,name=base_decimals,json=baseDecimals,proto3" json:"base_decimals,omitempty"`
	// quote token decimals
	QuoteDecimals uint32 `protobuf:"varint,15,opt,name=quote_decimals,json=quoteDecimals,proto3" json:"quote_decimals,omitempty"`
}

func (m *SpotMarket) Reset()         { *m = SpotMarket{} }
func (m *SpotMarket) String() string { return proto.CompactTextString(m) }
func (*SpotMarket) ProtoMessage()    {}
func (*SpotMarket) Descriptor() ([]byte, []int) {
	return fileDescriptor_c255fc568a8e9667, []int{4}
}
func (m *SpotMarket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpotMarket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpotMarket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpotMarket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpotMarket.Merge(m, src)
}
func (m *SpotMarket) XXX_Size() int {
	return m.Size()
}
func (m *SpotMarket) XXX_DiscardUnknown() {
	xxx_messageInfo_SpotMarket.DiscardUnknown(m)
}

var xxx_messageInfo_SpotMarket proto.InternalMessageInfo

func (m *SpotMarket) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

func (m *SpotMarket) GetBaseDenom() string {
	if m != nil {
		return m.BaseDenom
	}
	return ""
}

func (m *SpotMarket) GetQuoteDenom() string {
	if m != nil {
		return m.QuoteDenom
	}
	return ""
}

func (m *SpotMarket) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *SpotMarket) GetStatus() MarketStatus {
	if m != nil {
		return m.Status
	}
	return MarketStatus_Unspecified
}

func (m *SpotMarket) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *SpotMarket) GetAdminPermissions() uint32 {
	if m != nil {
		return m.AdminPermissions
	}
	return 0
}

func (m *SpotMarket) GetBaseDecimals() uint32 {
	if m != nil {
		return m.BaseDecimals
	}
	return 0
}

func (m *SpotMarket) GetQuoteDecimals() uint32 {
	if m != nil {
		return m.QuoteDecimals
	}
	return 0
}

// An object describing a binary options market in Injective Protocol.
type BinaryOptionsMarket struct {
	// Ticker for the derivative contract.
	Ticker string `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	// Oracle symbol
	OracleSymbol string `protobuf:"bytes,2,opt,name=oracle_symbol,json=oracleSymbol,proto3" json:"oracle_symbol,omitempty"`
	// Oracle Provider
	OracleProvider string `protobuf:"bytes,3,opt,name=oracle_provider,json=oracleProvider,proto3" json:"oracle_provider,omitempty"`
	// Oracle type
	OracleType types.OracleType `protobuf:"varint,4,opt,name=oracle_type,json=oracleType,proto3,enum=injective.oracle.v1beta1.OracleType" json:"oracle_type,omitempty"`
	// Scale factor for oracle prices.
	OracleScaleFactor uint32 `protobuf:"varint,5,opt,name=oracle_scale_factor,json=oracleScaleFactor,proto3" json:"oracle_scale_factor,omitempty"`
	// expiration timestamp
	ExpirationTimestamp int64 `protobuf:"varint,6,opt,name=expiration_timestamp,json=expirationTimestamp,proto3" json:"expiration_timestamp,omitempty"`
	// expiration timestamp
	SettlementTimestamp int64 `protobuf:"varint,7,opt,name=settlement_timestamp,json=settlementTimestamp,proto3" json:"settlement_timestamp,omitempty"`
	// admin of the market
	Admin string `protobuf:"bytes,8,opt,name=admin,proto3" json:"admin,omitempty"`
	// Address of the quote currency denomination for the binary options contract
	QuoteDenom string `protobuf:"bytes,9,opt,name=quote_denom,json=quoteDenom,proto3" json:"quote_denom,omitempty"`
	// Unique market ID.
	MarketId string `protobuf:"bytes,10,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// maker_fee_rate defines the maker fee rate of a binary options market
	MakerFeeRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,11,opt,name=maker_fee_rate,json=makerFeeRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"maker_fee_rate"`
	// taker_fee_rate defines the taker fee rate of a derivative market
	TakerFeeRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,12,opt,name=taker_fee_rate,json=takerFeeRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"taker_fee_rate"`
	// relayer_fee_share_rate defines the percentage of the transaction fee shared
	// with the relayer in a derivative market
	RelayerFeeShareRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,13,opt,name=relayer_fee_share_rate,json=relayerFeeShareRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"relayer_fee_share_rate"`
	// Status of the market
	Status MarketStatus `protobuf:"varint,14,opt,name=status,proto3,enum=injective.exchange.v2.MarketStatus" json:"status,omitempty"`
	// min_price_tick_size defines the minimum tick size that the price and margin
	// required for orders in the market (in human readable format)
	MinPriceTickSize cosmossdk_io_math.LegacyDec `protobuf:"bytes,15,opt,name=min_price_tick_size,json=minPriceTickSize,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"min_price_tick_size"`
	// min_quantity_tick_size defines the minimum tick size of the quantity
	// required for orders in the market (in human readable format)
	MinQuantityTickSize cosmossdk_io_math.LegacyDec `protobuf:"bytes,16,opt,name=min_quantity_tick_size,json=minQuantityTickSize,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"min_quantity_tick_size"`
	// settlement_price defines the settlement price of the binary options market
	// (in human readable format)
	SettlementPrice *cosmossdk_io_math.LegacyDec `protobuf:"bytes,17,opt,name=settlement_price,json=settlementPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"settlement_price,omitempty"`
	// min_notional defines the minimum notional (in quote asset) required for
	// orders in the market (in human readable format)
	MinNotional cosmossdk_io_math.LegacyDec `protobuf:"bytes,18,opt,name=min_notional,json=minNotional,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"min_notional"`
	// level of admin permissions
	AdminPermissions uint32 `protobuf:"varint,19,opt,name=admin_permissions,json=adminPermissions,proto3" json:"admin_permissions,omitempty"`
	// quote token decimals
	QuoteDecimals uint32 `protobuf:"varint,20,opt,name=quote_decimals,json=quoteDecimals,proto3" json:"quote_decimals,omitempty"`
	// open_notional_cap defines the maximum open notional for the market
	OpenNotionalCap OpenNotionalCap `protobuf:"bytes,21,opt,name=open_notional_cap,json=openNotionalCap,proto3" json:"open_notional_cap"`
}

func (m *BinaryOptionsMarket) Reset()         { *m = BinaryOptionsMarket{} }
func (m *BinaryOptionsMarket) String() string { return proto.CompactTextString(m) }
func (*BinaryOptionsMarket) ProtoMessage()    {}
func (*BinaryOptionsMarket) Descriptor() ([]byte, []int) {
	return fileDescriptor_c255fc568a8e9667, []int{5}
}
func (m *BinaryOptionsMarket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BinaryOptionsMarket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BinaryOptionsMarket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BinaryOptionsMarket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BinaryOptionsMarket.Merge(m, src)
}
func (m *BinaryOptionsMarket) XXX_Size() int {
	return m.Size()
}
func (m *BinaryOptionsMarket) XXX_DiscardUnknown() {
	xxx_messageInfo_BinaryOptionsMarket.DiscardUnknown(m)
}

var xxx_messageInfo_BinaryOptionsMarket proto.InternalMessageInfo

// An object describing a derivative market in the Injective Futures Protocol.
type DerivativeMarket struct {
	// Ticker for the derivative contract.
	Ticker string `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	// Oracle base currency
	OracleBase string `protobuf:"bytes,2,opt,name=oracle_base,json=oracleBase,proto3" json:"oracle_base,omitempty"`
	// Oracle quote currency
	OracleQuote string `protobuf:"bytes,3,opt,name=oracle_quote,json=oracleQuote,proto3" json:"oracle_quote,omitempty"`
	// Oracle type
	OracleType types.OracleType `protobuf:"varint,4,opt,name=oracle_type,json=oracleType,proto3,enum=injective.oracle.v1beta1.OracleType" json:"oracle_type,omitempty"`
	// Scale factor for oracle prices.
	OracleScaleFactor uint32 `protobuf:"varint,5,opt,name=oracle_scale_factor,json=oracleScaleFactor,proto3" json:"oracle_scale_factor,omitempty"`
	// Address of the quote currency denomination for the derivative contract
	QuoteDenom string `protobuf:"bytes,6,opt,name=quote_denom,json=quoteDenom,proto3" json:"quote_denom,omitempty"`
	// Unique market ID.
	MarketId string `protobuf:"bytes,7,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// initial_margin_ratio defines the initial margin ratio of a derivative
	// market
	InitialMarginRatio cosmossdk_io_math.LegacyDec `protobuf:"bytes,8,opt,name=initial_margin_ratio,json=initialMarginRatio,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"initial_margin_ratio"`
	// maintenance_margin_ratio defines the maintenance margin ratio of a
	// derivative market
	MaintenanceMarginRatio cosmossdk_io_math.LegacyDec `protobuf:"bytes,9,opt,name=maintenance_margin_ratio,json=maintenanceMarginRatio,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"maintenance_margin_ratio"`
	// maker_fee_rate defines the maker fee rate of a derivative market
	MakerFeeRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,10,opt,name=maker_fee_rate,json=makerFeeRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"maker_fee_rate"`
	// taker_fee_rate defines the taker fee rate of a derivative market
	TakerFeeRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,11,opt,name=taker_fee_rate,json=takerFeeRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"taker_fee_rate"`
	// relayer_fee_share_rate defines the percentage of the transaction fee shared
	// with the relayer in a derivative market
	RelayerFeeShareRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,12,opt,name=relayer_fee_share_rate,json=relayerFeeShareRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"relayer_fee_share_rate"`
	// true if the market is a perpetual market. false if the market is an expiry
	// futures market
	IsPerpetual bool `protobuf:"varint,13,opt,name=isPerpetual,proto3" json:"isPerpetual,omitempty"`
	// Status of the market
	Status MarketStatus `protobuf:"varint,14,opt,name=status,proto3,enum=injective.exchange.v2.MarketStatus" json:"status,omitempty"`
	// min_price_tick_size defines the minimum tick size that the price and margin
	// required for orders in the market (in human readable format)
	MinPriceTickSize cosmossdk_io_math.LegacyDec `protobuf:"bytes,15,opt,name=min_price_tick_size,json=minPriceTickSize,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"min_price_tick_size"`
	// min_quantity_tick_size defines the minimum tick size of the quantity
	// required for orders in the market (in human readable format)
	MinQuantityTickSize cosmossdk_io_math.LegacyDec `protobuf:"bytes,16,opt,name=min_quantity_tick_size,json=minQuantityTickSize,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"min_quantity_tick_size"`
	// min_notional defines the minimum notional (in quote asset) required for
	// orders in the market (in human readable format)
	MinNotional cosmossdk_io_math.LegacyDec `protobuf:"bytes,17,opt,name=min_notional,json=minNotional,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"min_notional"`
	// current market admin
	Admin string `protobuf:"bytes,18,opt,name=admin,proto3" json:"admin,omitempty"`
	// level of admin permissions
	AdminPermissions uint32 `protobuf:"varint,19,opt,name=admin_permissions,json=adminPermissions,proto3" json:"admin_permissions,omitempty"`
	// quote token decimals
	QuoteDecimals uint32 `protobuf:"varint,20,opt,name=quote_decimals,json=quoteDecimals,proto3" json:"quote_decimals,omitempty"`
	// reduce_margin_ratio defines the ratio of the margin that is reduced
	ReduceMarginRatio cosmossdk_io_math.LegacyDec `protobuf:"bytes,21,opt,name=reduce_margin_ratio,json=reduceMarginRatio,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"reduce_margin_ratio"`
	// open_notional_cap defines the maximum open notional for the market
	OpenNotionalCap OpenNotionalCap `protobuf:"bytes,22,opt,name=open_notional_cap,json=openNotionalCap,proto3" json:"open_notional_cap"`
}

func (m *DerivativeMarket) Reset()         { *m = DerivativeMarket{} }
func (m *DerivativeMarket) String() string { return proto.CompactTextString(m) }
func (*DerivativeMarket) ProtoMessage()    {}
func (*DerivativeMarket) Descriptor() ([]byte, []int) {
	return fileDescriptor_c255fc568a8e9667, []int{6}
}
func (m *DerivativeMarket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DerivativeMarket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DerivativeMarket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DerivativeMarket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DerivativeMarket.Merge(m, src)
}
func (m *DerivativeMarket) XXX_Size() int {
	return m.Size()
}
func (m *DerivativeMarket) XXX_DiscardUnknown() {
	xxx_messageInfo_DerivativeMarket.DiscardUnknown(m)
}

var xxx_messageInfo_DerivativeMarket proto.InternalMessageInfo

type DerivativeMarketSettlementInfo struct {
	// market ID.
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// settlement_price defines the settlement price
	SettlementPrice cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=settlement_price,json=settlementPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"settlement_price"`
}

func (m *DerivativeMarketSettlementInfo) Reset()         { *m = DerivativeMarketSettlementInfo{} }
func (m *DerivativeMarketSettlementInfo) String() string { return proto.CompactTextString(m) }
func (*DerivativeMarketSettlementInfo) ProtoMessage()    {}
func (*DerivativeMarketSettlementInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c255fc568a8e9667, []int{7}
}
func (m *DerivativeMarketSettlementInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DerivativeMarketSettlementInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DerivativeMarketSettlementInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DerivativeMarketSettlementInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DerivativeMarketSettlementInfo.Merge(m, src)
}
func (m *DerivativeMarketSettlementInfo) XXX_Size() int {
	return m.Size()
}
func (m *DerivativeMarketSettlementInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DerivativeMarketSettlementInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DerivativeMarketSettlementInfo proto.InternalMessageInfo

func (m *DerivativeMarketSettlementInfo) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

type MarketVolume struct {
	// the market ID
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// the market volume
	Volume VolumeRecord `protobuf:"bytes,2,opt,name=volume,proto3" json:"volume"`
}

func (m *MarketVolume) Reset()         { *m = MarketVolume{} }
func (m *MarketVolume) String() string { return proto.CompactTextString(m) }
func (*MarketVolume) ProtoMessage()    {}
func (*MarketVolume) Descriptor() ([]byte, []int) {
	return fileDescriptor_c255fc568a8e9667, []int{8}
}
func (m *MarketVolume) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarketVolume) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarketVolume.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarketVolume) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketVolume.Merge(m, src)
}
func (m *MarketVolume) XXX_Size() int {
	return m.Size()
}
func (m *MarketVolume) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketVolume.DiscardUnknown(m)
}

var xxx_messageInfo_MarketVolume proto.InternalMessageInfo

func (m *MarketVolume) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *MarketVolume) GetVolume() VolumeRecord {
	if m != nil {
		return m.Volume
	}
	return VolumeRecord{}
}

type VolumeRecord struct {
	// the market's maker volume (in human readable format)
	MakerVolume cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=maker_volume,json=makerVolume,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"maker_volume"`
	// the market's taker volume (in human readable format)
	TakerVolume cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=taker_volume,json=takerVolume,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"taker_volume"`
}

func (m *VolumeRecord) Reset()         { *m = VolumeRecord{} }
func (m *VolumeRecord) String() string { return proto.CompactTextString(m) }
func (*VolumeRecord) ProtoMessage()    {}
func (*VolumeRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_c255fc568a8e9667, []int{9}
}
func (m *VolumeRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VolumeRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VolumeRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VolumeRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeRecord.Merge(m, src)
}
func (m *VolumeRecord) XXX_Size() int {
	return m.Size()
}
func (m *VolumeRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeRecord.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeRecord proto.InternalMessageInfo

type ExpiryFuturesMarketInfoState struct {
	MarketId   string                   `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	MarketInfo *ExpiryFuturesMarketInfo `protobuf:"bytes,2,opt,name=market_info,json=marketInfo,proto3" json:"market_info,omitempty"`
}

func (m *ExpiryFuturesMarketInfoState) Reset()         { *m = ExpiryFuturesMarketInfoState{} }
func (m *ExpiryFuturesMarketInfoState) String() string { return proto.CompactTextString(m) }
func (*ExpiryFuturesMarketInfoState) ProtoMessage()    {}
func (*ExpiryFuturesMarketInfoState) Descriptor() ([]byte, []int) {
	return fileDescriptor_c255fc568a8e9667, []int{10}
}
func (m *ExpiryFuturesMarketInfoState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExpiryFuturesMarketInfoState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExpiryFuturesMarketInfoState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExpiryFuturesMarketInfoState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpiryFuturesMarketInfoState.Merge(m, src)
}
func (m *ExpiryFuturesMarketInfoState) XXX_Size() int {
	return m.Size()
}
func (m *ExpiryFuturesMarketInfoState) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpiryFuturesMarketInfoState.DiscardUnknown(m)
}

var xxx_messageInfo_ExpiryFuturesMarketInfoState proto.InternalMessageInfo

func (m *ExpiryFuturesMarketInfoState) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *ExpiryFuturesMarketInfoState) GetMarketInfo() *ExpiryFuturesMarketInfo {
	if m != nil {
		return m.MarketInfo
	}
	return nil
}

type PerpetualMarketFundingState struct {
	MarketId string                  `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	Funding  *PerpetualMarketFunding `protobuf:"bytes,2,opt,name=funding,proto3" json:"funding,omitempty"`
}

func (m *PerpetualMarketFundingState) Reset()         { *m = PerpetualMarketFundingState{} }
func (m *PerpetualMarketFundingState) String() string { return proto.CompactTextString(m) }
func (*PerpetualMarketFundingState) ProtoMessage()    {}
func (*PerpetualMarketFundingState) Descriptor() ([]byte, []int) {
	return fileDescriptor_c255fc568a8e9667, []int{11}
}
func (m *PerpetualMarketFundingState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PerpetualMarketFundingState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PerpetualMarketFundingState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PerpetualMarketFundingState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerpetualMarketFundingState.Merge(m, src)
}
func (m *PerpetualMarketFundingState) XXX_Size() int {
	return m.Size()
}
func (m *PerpetualMarketFundingState) XXX_DiscardUnknown() {
	xxx_messageInfo_PerpetualMarketFundingState.DiscardUnknown(m)
}

var xxx_messageInfo_PerpetualMarketFundingState proto.InternalMessageInfo

func (m *PerpetualMarketFundingState) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *PerpetualMarketFundingState) GetFunding() *PerpetualMarketFunding {
	if m != nil {
		return m.Funding
	}
	return nil
}

type ExpiryFuturesMarketInfo struct {
	// market ID.
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// expiration_timestamp defines the expiration time for a time expiry futures
	// market.
	ExpirationTimestamp int64 `protobuf:"varint,2,opt,name=expiration_timestamp,json=expirationTimestamp,proto3" json:"expiration_timestamp,omitempty"`
	// expiration_twap_start_timestamp defines the start time of the TWAP
	// calculation window
	TwapStartTimestamp int64 `protobuf:"varint,3,opt,name=twap_start_timestamp,json=twapStartTimestamp,proto3" json:"twap_start_timestamp,omitempty"`
	// expiration_twap_start_price_cumulative defines the cumulative price for the
	// start of the TWAP window (in human readable format)
	ExpirationTwapStartPriceCumulative cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=expiration_twap_start_price_cumulative,json=expirationTwapStartPriceCumulative,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"expiration_twap_start_price_cumulative"`
	// settlement_price defines the settlement price for a time expiry futures
	// market (in human readable format)
	SettlementPrice cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=settlement_price,json=settlementPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"settlement_price"`
}

func (m *ExpiryFuturesMarketInfo) Reset()         { *m = ExpiryFuturesMarketInfo{} }
func (m *ExpiryFuturesMarketInfo) String() string { return proto.CompactTextString(m) }
func (*ExpiryFuturesMarketInfo) ProtoMessage()    {}
func (*ExpiryFuturesMarketInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c255fc568a8e9667, []int{12}
}
func (m *ExpiryFuturesMarketInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExpiryFuturesMarketInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExpiryFuturesMarketInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExpiryFuturesMarketInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpiryFuturesMarketInfo.Merge(m, src)
}
func (m *ExpiryFuturesMarketInfo) XXX_Size() int {
	return m.Size()
}
func (m *ExpiryFuturesMarketInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpiryFuturesMarketInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ExpiryFuturesMarketInfo proto.InternalMessageInfo

func (m *ExpiryFuturesMarketInfo) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *ExpiryFuturesMarketInfo) GetExpirationTimestamp() int64 {
	if m != nil {
		return m.ExpirationTimestamp
	}
	return 0
}

func (m *ExpiryFuturesMarketInfo) GetTwapStartTimestamp() int64 {
	if m != nil {
		return m.TwapStartTimestamp
	}
	return 0
}

type PerpetualMarketInfo struct {
	// market ID.
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// hourly_funding_rate_cap defines the maximum absolute value of the hourly
	// funding rate
	HourlyFundingRateCap cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=hourly_funding_rate_cap,json=hourlyFundingRateCap,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"hourly_funding_rate_cap"`
	// hourly_interest_rate defines the hourly interest rate
	HourlyInterestRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=hourly_interest_rate,json=hourlyInterestRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"hourly_interest_rate"`
	// next_funding_timestamp defines the next funding timestamp in seconds of a
	// perpetual market
	NextFundingTimestamp int64 `protobuf:"varint,4,opt,name=next_funding_timestamp,json=nextFundingTimestamp,proto3" json:"next_funding_timestamp,omitempty"`
	// funding_interval defines the next funding interval in seconds of a
	// perpetual market.
	FundingInterval int64 `protobuf:"varint,5,opt,name=funding_interval,json=fundingInterval,proto3" json:"funding_interval,omitempty"`
}

func (m *PerpetualMarketInfo) Reset()         { *m = PerpetualMarketInfo{} }
func (m *PerpetualMarketInfo) String() string { return proto.CompactTextString(m) }
func (*PerpetualMarketInfo) ProtoMessage()    {}
func (*PerpetualMarketInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c255fc568a8e9667, []int{13}
}
func (m *PerpetualMarketInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PerpetualMarketInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PerpetualMarketInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PerpetualMarketInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerpetualMarketInfo.Merge(m, src)
}
func (m *PerpetualMarketInfo) XXX_Size() int {
	return m.Size()
}
func (m *PerpetualMarketInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PerpetualMarketInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PerpetualMarketInfo proto.InternalMessageInfo

func (m *PerpetualMarketInfo) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *PerpetualMarketInfo) GetNextFundingTimestamp() int64 {
	if m != nil {
		return m.NextFundingTimestamp
	}
	return 0
}

func (m *PerpetualMarketInfo) GetFundingInterval() int64 {
	if m != nil {
		return m.FundingInterval
	}
	return 0
}

type PerpetualMarketFunding struct {
	// cumulative_funding defines the cumulative funding of a perpetual market.
	CumulativeFunding cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=cumulative_funding,json=cumulativeFunding,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"cumulative_funding"`
	// cumulative_price defines the running time-integral of the perp premium
	// ((VWAP - mark_price) / mark_price) i.e., sum(premium * seconds)
	// used to compute the interval’s average premium for funding
	CumulativePrice cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=cumulative_price,json=cumulativePrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"cumulative_price"`
	// the last funding timestamp in seconds
	LastTimestamp int64 `protobuf:"varint,3,opt,name=last_timestamp,json=lastTimestamp,proto3" json:"last_timestamp,omitempty"`
}

func (m *PerpetualMarketFunding) Reset()         { *m = PerpetualMarketFunding{} }
func (m *PerpetualMarketFunding) String() string { return proto.CompactTextString(m) }
func (*PerpetualMarketFunding) ProtoMessage()    {}
func (*PerpetualMarketFunding) Descriptor() ([]byte, []int) {
	return fileDescriptor_c255fc568a8e9667, []int{14}
}
func (m *PerpetualMarketFunding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PerpetualMarketFunding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PerpetualMarketFunding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PerpetualMarketFunding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerpetualMarketFunding.Merge(m, src)
}
func (m *PerpetualMarketFunding) XXX_Size() int {
	return m.Size()
}
func (m *PerpetualMarketFunding) XXX_DiscardUnknown() {
	xxx_messageInfo_PerpetualMarketFunding.DiscardUnknown(m)
}

var xxx_messageInfo_PerpetualMarketFunding proto.InternalMessageInfo

func (m *PerpetualMarketFunding) GetLastTimestamp() int64 {
	if m != nil {
		return m.LastTimestamp
	}
	return 0
}

func init() {
	proto.RegisterEnum("injective.exchange.v2.MarketStatus", MarketStatus_name, MarketStatus_value)
	proto.RegisterType((*OpenNotionalCap)(nil), "injective.exchange.v2.OpenNotionalCap")
	proto.RegisterType((*OpenNotionalCapUncapped)(nil), "injective.exchange.v2.OpenNotionalCapUncapped")
	proto.RegisterType((*OpenNotionalCapCapped)(nil), "injective.exchange.v2.OpenNotionalCapCapped")
	proto.RegisterType((*MarketFeeMultiplier)(nil), "injective.exchange.v2.MarketFeeMultiplier")
	proto.RegisterType((*SpotMarket)(nil), "injective.exchange.v2.SpotMarket")
	proto.RegisterType((*BinaryOptionsMarket)(nil), "injective.exchange.v2.BinaryOptionsMarket")
	proto.RegisterType((*DerivativeMarket)(nil), "injective.exchange.v2.DerivativeMarket")
	proto.RegisterType((*DerivativeMarketSettlementInfo)(nil), "injective.exchange.v2.DerivativeMarketSettlementInfo")
	proto.RegisterType((*MarketVolume)(nil), "injective.exchange.v2.MarketVolume")
	proto.RegisterType((*VolumeRecord)(nil), "injective.exchange.v2.VolumeRecord")
	proto.RegisterType((*ExpiryFuturesMarketInfoState)(nil), "injective.exchange.v2.ExpiryFuturesMarketInfoState")
	proto.RegisterType((*PerpetualMarketFundingState)(nil), "injective.exchange.v2.PerpetualMarketFundingState")
	proto.RegisterType((*ExpiryFuturesMarketInfo)(nil), "injective.exchange.v2.ExpiryFuturesMarketInfo")
	proto.RegisterType((*PerpetualMarketInfo)(nil), "injective.exchange.v2.PerpetualMarketInfo")
	proto.RegisterType((*PerpetualMarketFunding)(nil), "injective.exchange.v2.PerpetualMarketFunding")
}

func init() {
	proto.RegisterFile("injective/exchange/v2/market.proto", fileDescriptor_c255fc568a8e9667)
}

var fileDescriptor_c255fc568a8e9667 = []byte{
	// 1570 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x58, 0x4b, 0x73, 0x1b, 0xc5,
	0x16, 0xf6, 0xf8, 0x21, 0xdb, 0x47, 0x4f, 0xb7, 0x64, 0x47, 0x37, 0xb9, 0xd7, 0xf6, 0x95, 0x49,
	0x08, 0x8f, 0x48, 0xc4, 0xb0, 0x01, 0x56, 0xb1, 0x1d, 0x81, 0xa9, 0x24, 0x76, 0x46, 0x0e, 0x95,
	0x4a, 0x15, 0x35, 0xd5, 0x1e, 0xb5, 0xed, 0xc6, 0xf3, 0xca, 0x4c, 0x8f, 0x12, 0x65, 0x0b, 0x0b,
	0x16, 0x50, 0xc5, 0x2f, 0xa0, 0xf8, 0x05, 0x6c, 0x58, 0xb3, 0xa5, 0xb2, 0x4c, 0x15, 0x1b, 0x8a,
	0x45, 0x8a, 0x8a, 0xf9, 0x21, 0x54, 0x3f, 0xe6, 0x61, 0x59, 0xb2, 0x25, 0x6c, 0x8a, 0x05, 0xbb,
	0x99, 0xd3, 0xe7, 0xfb, 0xfa, 0x4c, 0x9f, 0x73, 0xbe, 0xee, 0x1e, 0xa8, 0x51, 0xe7, 0x73, 0x62,
	0x32, 0xda, 0x21, 0x0d, 0xf2, 0xd4, 0x3c, 0xc0, 0xce, 0x3e, 0x69, 0x74, 0x56, 0x1b, 0x36, 0xf6,
	0x0f, 0x09, 0xab, 0x7b, 0xbe, 0xcb, 0x5c, 0x34, 0x1f, 0xfb, 0xd4, 0x23, 0x9f, 0x7a, 0x67, 0xf5,
	0x72, 0x65, 0xdf, 0xdd, 0x77, 0x85, 0x47, 0x83, 0x3f, 0x49, 0xe7, 0xcb, 0x57, 0x13, 0x42, 0xd7,
	0xc7, 0xa6, 0x45, 0x1a, 0x9d, 0x9b, 0xbb, 0x84, 0xe1, 0x9b, 0xea, 0x55, 0xba, 0xd5, 0x7e, 0xd0,
	0xa0, 0xb8, 0xe5, 0x11, 0xe7, 0x9e, 0xcb, 0xa8, 0xeb, 0x60, 0x6b, 0x1d, 0x7b, 0xe8, 0x0e, 0xcc,
	0x84, 0x8e, 0x89, 0x3d, 0x8f, 0xb4, 0xab, 0xda, 0xb2, 0x76, 0x3d, 0xbb, 0x5a, 0xaf, 0xf7, 0x9d,
	0xba, 0xde, 0x83, 0x7c, 0xa0, 0x50, 0x1f, 0x8f, 0xe9, 0x31, 0x03, 0x6a, 0x42, 0x46, 0x71, 0x8d,
	0x0b, 0xae, 0xb7, 0x87, 0xe3, 0x5a, 0x8f, 0x98, 0x14, 0x7a, 0x6d, 0x0a, 0x26, 0x4c, 0xec, 0xd5,
	0xfe, 0x03, 0x97, 0x06, 0xcc, 0x5a, 0xd3, 0x61, 0xbe, 0x2f, 0x09, 0x7a, 0x1f, 0xa6, 0x3a, 0xd8,
	0x0a, 0x89, 0xf8, 0x9a, 0xd9, 0xb5, 0x95, 0xe7, 0x2f, 0x97, 0xc6, 0x7e, 0x7b, 0xb9, 0x74, 0xc5,
	0x74, 0x03, 0xdb, 0x0d, 0x82, 0xf6, 0x61, 0x9d, 0xba, 0x0d, 0x1b, 0xb3, 0x83, 0xfa, 0x1d, 0xb2,
	0x8f, 0xcd, 0xee, 0x06, 0x31, 0x75, 0x89, 0xa8, 0x7d, 0xa9, 0x41, 0xf9, 0xae, 0x48, 0x42, 0x93,
	0x90, 0xbb, 0xa1, 0xc5, 0xa8, 0x67, 0x51, 0xe2, 0xa3, 0x2b, 0x30, 0x2b, 0x73, 0x63, 0x50, 0xb9,
	0x48, 0xb3, 0xfa, 0x8c, 0x34, 0x6c, 0xb6, 0xd1, 0x27, 0x50, 0xd8, 0x23, 0xc4, 0xb0, 0x63, 0x77,
	0xf1, 0xe9, 0x43, 0x4e, 0x9c, 0xdf, 0x4b, 0x4f, 0xf4, 0xc1, 0xe4, 0x57, 0xdf, 0x2f, 0x8d, 0xd5,
	0x7e, 0xcc, 0x00, 0xb4, 0x3c, 0x97, 0xc9, 0x50, 0xd0, 0x02, 0x64, 0x18, 0x35, 0x0f, 0x89, 0xaf,
	0xa6, 0x56, 0x6f, 0xe8, 0x7f, 0x00, 0xbb, 0x38, 0x20, 0x46, 0x9b, 0x38, 0xae, 0x2d, 0x27, 0xd5,
	0x67, 0xb9, 0x65, 0x83, 0x1b, 0xd0, 0x12, 0x64, 0x1f, 0x87, 0x2e, 0x8b, 0xc6, 0x27, 0xc4, 0x38,
	0x08, 0x93, 0x74, 0xd8, 0x84, 0x82, 0x8d, 0x0f, 0x89, 0x6f, 0xf0, 0xf0, 0x7d, 0xcc, 0x48, 0x75,
	0x72, 0xf8, 0xc0, 0x73, 0x02, 0xda, 0x24, 0x44, 0xc7, 0x8c, 0x70, 0x2a, 0x76, 0x9c, 0x6a, 0x6a,
	0x04, 0x2a, 0x96, 0xa6, 0x7a, 0x08, 0x0b, 0x3e, 0xb1, 0x70, 0x57, 0x91, 0x05, 0x07, 0xd8, 0x57,
	0x94, 0x99, 0xe1, 0x29, 0xcb, 0x8a, 0xa2, 0x49, 0x48, 0x8b, 0x13, 0x08, 0xe6, 0x63, 0x59, 0x9c,
	0xee, 0xc9, 0xe2, 0x87, 0x90, 0x09, 0x18, 0x66, 0x61, 0x50, 0x9d, 0x59, 0xd6, 0xae, 0x17, 0x56,
	0x57, 0x06, 0x14, 0xae, 0xcc, 0x49, 0x4b, 0xb8, 0xea, 0x0a, 0x82, 0x74, 0x28, 0xdb, 0xd4, 0x31,
	0x3c, 0x9f, 0x9a, 0xc4, 0xe0, 0xd9, 0x31, 0x02, 0xfa, 0x8c, 0x54, 0x67, 0x87, 0x0f, 0xb8, 0x64,
	0x53, 0x67, 0x9b, 0xc3, 0x77, 0xa8, 0x79, 0xd8, 0xa2, 0xcf, 0xc4, 0x3a, 0x70, 0xce, 0xc7, 0x21,
	0x76, 0x18, 0x65, 0xdd, 0x14, 0x2d, 0x8c, 0xb0, 0x0e, 0x36, 0x75, 0xee, 0x2b, 0x86, 0x98, 0xb9,
	0x09, 0x39, 0xce, 0xec, 0xa8, 0xce, 0xa9, 0x66, 0x87, 0xe7, 0xcb, 0xda, 0x34, 0xee, 0x38, 0x54,
	0x81, 0x29, 0xdc, 0xb6, 0xa9, 0x53, 0xcd, 0x89, 0xb5, 0x94, 0x2f, 0xe8, 0x2d, 0x98, 0x13, 0x0f,
	0x86, 0x47, 0x7c, 0x9b, 0x06, 0x01, 0x75, 0x9d, 0xa0, 0x9a, 0x5f, 0xd6, 0xae, 0xe7, 0xf5, 0x92,
	0x18, 0xd8, 0x4e, 0xec, 0x68, 0x05, 0xf2, 0xaa, 0x84, 0x4d, 0x6a, 0x63, 0x2b, 0xa8, 0x16, 0x84,
	0x63, 0x4e, 0x56, 0xb1, 0xb4, 0xa1, 0xab, 0x50, 0x88, 0x0a, 0x59, 0x79, 0x15, 0x85, 0x57, 0x5e,
	0xd5, 0xb2, 0x34, 0xd6, 0x7e, 0x99, 0x85, 0xf2, 0x1a, 0x75, 0xb0, 0xdf, 0xdd, 0xf2, 0x78, 0x84,
	0xc1, 0x19, 0xed, 0xb3, 0x02, 0x79, 0x29, 0x8e, 0x46, 0xd0, 0xb5, 0x77, 0x5d, 0x4b, 0x75, 0x50,
	0x4e, 0x1a, 0x5b, 0xc2, 0x86, 0x5e, 0x87, 0xa2, 0x72, 0xf2, 0x7c, 0xb7, 0x43, 0xdb, 0xc4, 0x57,
	0x8d, 0x54, 0x90, 0xe6, 0x6d, 0x65, 0x45, 0xb7, 0x21, 0xab, 0x1c, 0x59, 0xd7, 0x93, 0x9d, 0x54,
	0x58, 0x7d, 0x2d, 0x55, 0x44, 0x4a, 0x88, 0x95, 0x2e, 0xd7, 0xb7, 0xc4, 0xeb, 0x4e, 0xd7, 0x23,
	0x3a, 0xb8, 0xf1, 0x33, 0xaa, 0x43, 0x39, 0x0a, 0xca, 0xc4, 0x16, 0x31, 0xf6, 0xb0, 0xc9, 0x5c,
	0x5f, 0x74, 0x53, 0x5e, 0x9f, 0x53, 0xa1, 0xf1, 0x91, 0xa6, 0x18, 0x40, 0x37, 0xa1, 0x42, 0x9e,
	0x7a, 0xd4, 0xc7, 0xfc, 0x8b, 0x0d, 0x46, 0x6d, 0x12, 0x30, 0x6c, 0x7b, 0xa2, 0x57, 0x26, 0xf4,
	0x72, 0x32, 0xb6, 0x13, 0x0d, 0x71, 0x48, 0x40, 0x18, 0xb3, 0x88, 0x4d, 0x1c, 0x96, 0x82, 0x4c,
	0x4b, 0x48, 0x32, 0x96, 0x40, 0xe2, 0x4c, 0xcf, 0xa4, 0x33, 0xdd, 0x23, 0x30, 0xb3, 0x27, 0x04,
	0xe6, 0x58, 0xc3, 0x41, 0x4f, 0xc3, 0x9d, 0x54, 0x9f, 0xec, 0xc5, 0xa9, 0x4f, 0xee, 0xe2, 0xd5,
	0x27, 0x7f, 0x4e, 0xf5, 0x49, 0x04, 0xa6, 0x70, 0x61, 0x02, 0x53, 0xfc, 0x7b, 0x04, 0xa6, 0x74,
	0x4e, 0x81, 0xb9, 0x07, 0xa5, 0x54, 0x85, 0x89, 0xa0, 0xab, 0x73, 0x31, 0xa7, 0x76, 0x16, 0x67,
	0x31, 0x01, 0x8b, 0x88, 0x4f, 0x08, 0x16, 0xfa, 0x8b, 0x82, 0xd5, 0x57, 0x9a, 0xca, 0x03, 0xa4,
	0xe9, 0xa4, 0xea, 0x54, 0xfa, 0xa8, 0x0e, 0x7a, 0x08, 0x73, 0xae, 0x47, 0x92, 0xe0, 0x0c, 0x13,
	0x7b, 0xd5, 0x79, 0x71, 0xf6, 0xb9, 0x36, 0xdc, 0xd9, 0x67, 0x6d, 0x92, 0x7f, 0x88, 0x5e, 0x74,
	0x8f, 0x9b, 0xd5, 0x59, 0xe0, 0x27, 0x80, 0xd2, 0x06, 0xf1, 0x69, 0x07, 0x73, 0x9e, 0x33, 0x24,
	0x6d, 0x29, 0x16, 0x21, 0x2e, 0xa0, 0x4a, 0xd0, 0x94, 0xbc, 0xac, 0xe1, 0x80, 0xa0, 0xff, 0x83,
	0x92, 0x37, 0x43, 0x7c, 0x85, 0xd2, 0x32, 0x05, 0xba, 0xcf, 0x4d, 0xff, 0x94, 0x90, 0xf5, 0x88,
	0x49, 0xe6, 0x74, 0x31, 0xe9, 0xdd, 0xbd, 0x1f, 0x40, 0x85, 0x3a, 0x94, 0x51, 0x6c, 0x19, 0x36,
	0xf6, 0xf7, 0xa9, 0x63, 0x08, 0xd5, 0x93, 0x7a, 0x35, 0x5c, 0xa5, 0x20, 0x45, 0x70, 0x57, 0xe0,
	0x75, 0x0e, 0x47, 0x9f, 0x41, 0xd5, 0xc6, 0xd4, 0x61, 0xc4, 0xc1, 0x8e, 0x49, 0x8e, 0x53, 0x8f,
	0xb0, 0xb9, 0x2f, 0xa4, 0x48, 0xd2, 0xf4, 0x27, 0x25, 0x10, 0x2e, 0x4e, 0x02, 0xb3, 0x17, 0x2f,
	0x81, 0xb9, 0x73, 0x4a, 0xe0, 0x32, 0x64, 0x69, 0xb0, 0x4d, 0x7c, 0x8f, 0xb0, 0x10, 0x5b, 0x42,
	0x51, 0x67, 0xf4, 0xb4, 0xe9, 0xdf, 0x24, 0x92, 0xbd, 0xa2, 0x36, 0x77, 0xde, 0x53, 0x18, 0x3a,
	0xf3, 0x14, 0x76, 0x4e, 0xa9, 0x6b, 0x41, 0xd9, 0x27, 0xed, 0xb0, 0xb7, 0x11, 0xe6, 0x87, 0x0f,
	0x7c, 0x4e, 0xe2, 0xd3, 0x3d, 0xd0, 0x57, 0x3f, 0x17, 0x2e, 0x4e, 0x3f, 0xbf, 0xd1, 0x60, 0xb1,
	0x57, 0x3f, 0x5b, 0xf1, 0xfe, 0xb2, 0xe9, 0xec, 0xb9, 0xa7, 0xdf, 0xee, 0xfa, 0xed, 0x65, 0x23,
	0xdc, 0xef, 0x7a, 0xf7, 0xb2, 0x9a, 0x03, 0x39, 0x19, 0xc4, 0xa7, 0xae, 0x15, 0xda, 0xe4, 0xf4,
	0xc9, 0x6f, 0x41, 0xa6, 0x23, 0xdc, 0xd4, 0x6d, 0x7a, 0x50, 0x3b, 0x48, 0x2e, 0x9d, 0x98, 0xae,
	0xdf, 0x56, 0xcb, 0xa1, 0x80, 0xb5, 0xef, 0x34, 0xc8, 0xa5, 0x87, 0x45, 0xdd, 0x09, 0xa5, 0x50,
	0xcc, 0xda, 0x28, 0x75, 0xc7, 0x81, 0x2a, 0xf0, 0x26, 0x48, 0xd9, 0x30, 0x52, 0x11, 0x0e, 0xcb,
	0xc3, 0x12, 0x9e, 0xda, 0xd7, 0x1a, 0xfc, 0xf7, 0x36, 0x3f, 0xa6, 0x76, 0x9b, 0x21, 0x0b, 0x7d,
	0xa2, 0x8e, 0xed, 0x3c, 0x33, 0xbc, 0xbf, 0xcf, 0x58, 0xa1, 0x2d, 0xc8, 0x46, 0x83, 0xce, 0x9e,
	0xab, 0x96, 0x69, 0xd0, 0x0f, 0x8c, 0x01, 0xd3, 0xe8, 0x60, 0xc7, 0xcf, 0xb5, 0x2f, 0x34, 0xb8,
	0x12, 0xeb, 0x91, 0xfa, 0x17, 0x10, 0x3a, 0x6d, 0xea, 0xec, 0x0f, 0x11, 0xcd, 0x47, 0x30, 0xbd,
	0x27, 0x9d, 0x55, 0x24, 0x37, 0x06, 0x44, 0xd2, 0x7f, 0x06, 0x3d, 0x42, 0xd7, 0xfe, 0x18, 0x87,
	0x4b, 0x03, 0xa2, 0x3d, 0x3d, 0x82, 0x41, 0xf7, 0x81, 0xf1, 0xc1, 0xf7, 0x81, 0x77, 0xa0, 0xc2,
	0x9e, 0x60, 0xcf, 0x08, 0x18, 0xf6, 0xd3, 0xf7, 0x81, 0x09, 0x01, 0x41, 0x7c, 0xac, 0xc5, 0x87,
	0x12, 0xc4, 0x13, 0xb8, 0x96, 0x9e, 0x24, 0x01, 0x4b, 0xe9, 0x35, 0x43, 0x3b, 0xb4, 0x44, 0xbb,
	0x8d, 0xf2, 0x43, 0xa1, 0x96, 0x8a, 0x2d, 0x9a, 0x52, 0xb4, 0xcc, 0x7a, 0x4c, 0xd7, 0xb7, 0x19,
	0xa7, 0xce, 0xd1, 0x8c, 0x3f, 0x8f, 0x43, 0xb9, 0x27, 0x15, 0x67, 0x2f, 0xf1, 0x23, 0xb8, 0x74,
	0xe0, 0x86, 0xbe, 0xd5, 0x35, 0x54, 0xb6, 0xc4, 0xe6, 0x28, 0x74, 0x6b, 0x84, 0x1e, 0xa8, 0x48,
	0x8e, 0x28, 0xf3, 0x98, 0x91, 0x75, 0xec, 0xf1, 0x73, 0x8c, 0xe2, 0xe6, 0x07, 0x06, 0x9f, 0x04,
	0x4c, 0xee, 0xbc, 0x13, 0x23, 0x9c, 0x63, 0x24, 0xc1, 0xa6, 0xc2, 0x8b, 0x8d, 0xf7, 0x3d, 0x58,
	0x70, 0xc8, 0x53, 0x16, 0x07, 0x9c, 0x24, 0x79, 0x52, 0x24, 0xb9, 0xc2, 0x47, 0x55, 0x28, 0x49,
	0x9a, 0xdf, 0x80, 0x52, 0x04, 0x10, 0xd1, 0x74, 0xb0, 0x25, 0x56, 0x7b, 0x42, 0x2f, 0x2a, 0xfb,
	0xa6, 0x32, 0xd7, 0x8e, 0x34, 0x58, 0xe8, 0x5f, 0xd3, 0x48, 0x07, 0x94, 0x14, 0x44, 0x14, 0xc1,
	0x28, 0xaa, 0x33, 0x97, 0xc0, 0x23, 0xce, 0x7b, 0x50, 0x4a, 0x71, 0x8e, 0x2e, 0xca, 0x09, 0x58,
	0x5e, 0x30, 0xae, 0x42, 0xc1, 0xc2, 0xc1, 0xc9, 0xe2, 0xcf, 0x73, 0x6b, 0xbc, 0x20, 0x6f, 0xee,
	0x44, 0xda, 0x2d, 0x0f, 0x1e, 0xa8, 0x08, 0xd9, 0x07, 0x4e, 0xe0, 0x11, 0x93, 0xee, 0x51, 0xd2,
	0x2e, 0x8d, 0x21, 0x80, 0xcc, 0x2d, 0xd1, 0xec, 0x25, 0x8d, 0x3f, 0x6f, 0xe3, 0x30, 0x20, 0xed,
	0xd2, 0x38, 0x2a, 0x00, 0x6c, 0x10, 0xdb, 0xb5, 0x68, 0x70, 0x40, 0xda, 0xa5, 0x09, 0x94, 0x85,
	0x69, 0xd1, 0xdd, 0xa4, 0x5d, 0x9a, 0x5c, 0x3b, 0x7c, 0xfe, 0x6a, 0x51, 0x7b, 0xf1, 0x6a, 0x51,
	0xfb, 0xfd, 0xd5, 0xa2, 0xf6, 0xed, 0xd1, 0xe2, 0xd8, 0x8b, 0xa3, 0xc5, 0xb1, 0x5f, 0x8f, 0x16,
	0xc7, 0x1e, 0xdd, 0xdf, 0xa7, 0xec, 0x20, 0xdc, 0xad, 0x9b, 0xae, 0xdd, 0xd8, 0x8c, 0x74, 0xe4,
	0x0e, 0xde, 0x0d, 0x1a, 0xb1, 0xaa, 0xdc, 0x30, 0x5d, 0x9f, 0xa4, 0x5f, 0x0f, 0x30, 0x75, 0x1a,
	0xb6, 0xdb, 0x0e, 0x2d, 0x12, 0x24, 0x3f, 0x97, 0xf9, 0x51, 0x3e, 0x68, 0x74, 0x56, 0x77, 0x33,
	0xe2, 0x47, 0xf0, 0xbb, 0x7f, 0x06, 0x00, 0x00, 0xff, 0xff, 0x33, 0x6e, 0xf5, 0xe5, 0x82, 0x16,
	0x00, 0x00,
}

func (m *OpenNotionalCap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenNotionalCap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenNotionalCap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cap != nil {
		{
			size := m.Cap.Size()
			i -= size
			if _, err := m.Cap.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *OpenNotionalCap_Uncapped) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenNotionalCap_Uncapped) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Uncapped != nil {
		{
			size, err := m.Uncapped.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMarket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *OpenNotionalCap_Capped) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenNotionalCap_Capped) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Capped != nil {
		{
			size, err := m.Capped.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMarket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *OpenNotionalCapUncapped) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenNotionalCapUncapped) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenNotionalCapUncapped) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *OpenNotionalCapCapped) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenNotionalCapCapped) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenNotionalCapCapped) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Value.Size()
		i -= size
		if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MarketFeeMultiplier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarketFeeMultiplier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarketFeeMultiplier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.FeeMultiplier.Size()
		i -= size
		if _, err := m.FeeMultiplier.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpotMarket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpotMarket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpotMarket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QuoteDecimals != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.QuoteDecimals))
		i--
		dAtA[i] = 0x78
	}
	if m.BaseDecimals != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.BaseDecimals))
		i--
		dAtA[i] = 0x70
	}
	if m.AdminPermissions != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.AdminPermissions))
		i--
		dAtA[i] = 0x68
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0x62
	}
	{
		size := m.MinNotional.Size()
		i -= size
		if _, err := m.MinNotional.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.MinQuantityTickSize.Size()
		i -= size
		if _, err := m.MinQuantityTickSize.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.MinPriceTickSize.Size()
		i -= size
		if _, err := m.MinPriceTickSize.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.Status != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0x3a
	}
	{
		size := m.RelayerFeeShareRate.Size()
		i -= size
		if _, err := m.RelayerFeeShareRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.TakerFeeRate.Size()
		i -= size
		if _, err := m.TakerFeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.MakerFeeRate.Size()
		i -= size
		if _, err := m.MakerFeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.QuoteDenom) > 0 {
		i -= len(m.QuoteDenom)
		copy(dAtA[i:], m.QuoteDenom)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.QuoteDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ticker) > 0 {
		i -= len(m.Ticker)
		copy(dAtA[i:], m.Ticker)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.Ticker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BinaryOptionsMarket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BinaryOptionsMarket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BinaryOptionsMarket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.OpenNotionalCap.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xaa
	if m.QuoteDecimals != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.QuoteDecimals))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.AdminPermissions != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.AdminPermissions))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	{
		size := m.MinNotional.Size()
		i -= size
		if _, err := m.MinNotional.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x92
	if m.SettlementPrice != nil {
		{
			size := m.SettlementPrice.Size()
			i -= size
			if _, err := m.SettlementPrice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintMarket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	{
		size := m.MinQuantityTickSize.Size()
		i -= size
		if _, err := m.MinQuantityTickSize.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	{
		size := m.MinPriceTickSize.Size()
		i -= size
		if _, err := m.MinPriceTickSize.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	if m.Status != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x70
	}
	{
		size := m.RelayerFeeShareRate.Size()
		i -= size
		if _, err := m.RelayerFeeShareRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size := m.TakerFeeRate.Size()
		i -= size
		if _, err := m.TakerFeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size := m.MakerFeeRate.Size()
		i -= size
		if _, err := m.MakerFeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.QuoteDenom) > 0 {
		i -= len(m.QuoteDenom)
		copy(dAtA[i:], m.QuoteDenom)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.QuoteDenom)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0x42
	}
	if m.SettlementTimestamp != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.SettlementTimestamp))
		i--
		dAtA[i] = 0x38
	}
	if m.ExpirationTimestamp != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.ExpirationTimestamp))
		i--
		dAtA[i] = 0x30
	}
	if m.OracleScaleFactor != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.OracleScaleFactor))
		i--
		dAtA[i] = 0x28
	}
	if m.OracleType != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.OracleType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.OracleProvider) > 0 {
		i -= len(m.OracleProvider)
		copy(dAtA[i:], m.OracleProvider)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.OracleProvider)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OracleSymbol) > 0 {
		i -= len(m.OracleSymbol)
		copy(dAtA[i:], m.OracleSymbol)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.OracleSymbol)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ticker) > 0 {
		i -= len(m.Ticker)
		copy(dAtA[i:], m.Ticker)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.Ticker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DerivativeMarket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DerivativeMarket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DerivativeMarket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.OpenNotionalCap.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb2
	{
		size := m.ReduceMarginRatio.Size()
		i -= size
		if _, err := m.ReduceMarginRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xaa
	if m.QuoteDecimals != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.QuoteDecimals))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.AdminPermissions != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.AdminPermissions))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	{
		size := m.MinNotional.Size()
		i -= size
		if _, err := m.MinNotional.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	{
		size := m.MinQuantityTickSize.Size()
		i -= size
		if _, err := m.MinQuantityTickSize.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	{
		size := m.MinPriceTickSize.Size()
		i -= size
		if _, err := m.MinPriceTickSize.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	if m.Status != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x70
	}
	if m.IsPerpetual {
		i--
		if m.IsPerpetual {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	{
		size := m.RelayerFeeShareRate.Size()
		i -= size
		if _, err := m.RelayerFeeShareRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size := m.TakerFeeRate.Size()
		i -= size
		if _, err := m.TakerFeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.MakerFeeRate.Size()
		i -= size
		if _, err := m.MakerFeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.MaintenanceMarginRatio.Size()
		i -= size
		if _, err := m.MaintenanceMarginRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.InitialMarginRatio.Size()
		i -= size
		if _, err := m.InitialMarginRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.QuoteDenom) > 0 {
		i -= len(m.QuoteDenom)
		copy(dAtA[i:], m.QuoteDenom)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.QuoteDenom)))
		i--
		dAtA[i] = 0x32
	}
	if m.OracleScaleFactor != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.OracleScaleFactor))
		i--
		dAtA[i] = 0x28
	}
	if m.OracleType != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.OracleType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.OracleQuote) > 0 {
		i -= len(m.OracleQuote)
		copy(dAtA[i:], m.OracleQuote)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.OracleQuote)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OracleBase) > 0 {
		i -= len(m.OracleBase)
		copy(dAtA[i:], m.OracleBase)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.OracleBase)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ticker) > 0 {
		i -= len(m.Ticker)
		copy(dAtA[i:], m.Ticker)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.Ticker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DerivativeMarketSettlementInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DerivativeMarketSettlementInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DerivativeMarketSettlementInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SettlementPrice.Size()
		i -= size
		if _, err := m.SettlementPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MarketVolume) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarketVolume) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarketVolume) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Volume.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VolumeRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VolumeRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VolumeRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TakerVolume.Size()
		i -= size
		if _, err := m.TakerVolume.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.MakerVolume.Size()
		i -= size
		if _, err := m.MakerVolume.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ExpiryFuturesMarketInfoState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExpiryFuturesMarketInfoState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExpiryFuturesMarketInfoState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MarketInfo != nil {
		{
			size, err := m.MarketInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMarket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PerpetualMarketFundingState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PerpetualMarketFundingState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PerpetualMarketFundingState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Funding != nil {
		{
			size, err := m.Funding.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMarket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExpiryFuturesMarketInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExpiryFuturesMarketInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExpiryFuturesMarketInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SettlementPrice.Size()
		i -= size
		if _, err := m.SettlementPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.ExpirationTwapStartPriceCumulative.Size()
		i -= size
		if _, err := m.ExpirationTwapStartPriceCumulative.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.TwapStartTimestamp != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.TwapStartTimestamp))
		i--
		dAtA[i] = 0x18
	}
	if m.ExpirationTimestamp != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.ExpirationTimestamp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PerpetualMarketInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PerpetualMarketInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PerpetualMarketInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FundingInterval != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.FundingInterval))
		i--
		dAtA[i] = 0x28
	}
	if m.NextFundingTimestamp != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.NextFundingTimestamp))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.HourlyInterestRate.Size()
		i -= size
		if _, err := m.HourlyInterestRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.HourlyFundingRateCap.Size()
		i -= size
		if _, err := m.HourlyFundingRateCap.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PerpetualMarketFunding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PerpetualMarketFunding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PerpetualMarketFunding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastTimestamp != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.LastTimestamp))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.CumulativePrice.Size()
		i -= size
		if _, err := m.CumulativePrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.CumulativeFunding.Size()
		i -= size
		if _, err := m.CumulativeFunding.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintMarket(dAtA []byte, offset int, v uint64) int {
	offset -= sovMarket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OpenNotionalCap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cap != nil {
		n += m.Cap.Size()
	}
	return n
}

func (m *OpenNotionalCap_Uncapped) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uncapped != nil {
		l = m.Uncapped.Size()
		n += 1 + l + sovMarket(uint64(l))
	}
	return n
}
func (m *OpenNotionalCap_Capped) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Capped != nil {
		l = m.Capped.Size()
		n += 1 + l + sovMarket(uint64(l))
	}
	return n
}
func (m *OpenNotionalCapUncapped) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *OpenNotionalCapCapped) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Value.Size()
	n += 1 + l + sovMarket(uint64(l))
	return n
}

func (m *MarketFeeMultiplier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = m.FeeMultiplier.Size()
	n += 1 + l + sovMarket(uint64(l))
	return n
}

func (m *SpotMarket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ticker)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = len(m.QuoteDenom)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = m.MakerFeeRate.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.TakerFeeRate.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.RelayerFeeShareRate.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovMarket(uint64(m.Status))
	}
	l = m.MinPriceTickSize.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.MinQuantityTickSize.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.MinNotional.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	if m.AdminPermissions != 0 {
		n += 1 + sovMarket(uint64(m.AdminPermissions))
	}
	if m.BaseDecimals != 0 {
		n += 1 + sovMarket(uint64(m.BaseDecimals))
	}
	if m.QuoteDecimals != 0 {
		n += 1 + sovMarket(uint64(m.QuoteDecimals))
	}
	return n
}

func (m *BinaryOptionsMarket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ticker)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = len(m.OracleSymbol)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = len(m.OracleProvider)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	if m.OracleType != 0 {
		n += 1 + sovMarket(uint64(m.OracleType))
	}
	if m.OracleScaleFactor != 0 {
		n += 1 + sovMarket(uint64(m.OracleScaleFactor))
	}
	if m.ExpirationTimestamp != 0 {
		n += 1 + sovMarket(uint64(m.ExpirationTimestamp))
	}
	if m.SettlementTimestamp != 0 {
		n += 1 + sovMarket(uint64(m.SettlementTimestamp))
	}
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = len(m.QuoteDenom)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = m.MakerFeeRate.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.TakerFeeRate.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.RelayerFeeShareRate.Size()
	n += 1 + l + sovMarket(uint64(l))
	if m.Status != 0 {
		n += 1 + sovMarket(uint64(m.Status))
	}
	l = m.MinPriceTickSize.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.MinQuantityTickSize.Size()
	n += 2 + l + sovMarket(uint64(l))
	if m.SettlementPrice != nil {
		l = m.SettlementPrice.Size()
		n += 2 + l + sovMarket(uint64(l))
	}
	l = m.MinNotional.Size()
	n += 2 + l + sovMarket(uint64(l))
	if m.AdminPermissions != 0 {
		n += 2 + sovMarket(uint64(m.AdminPermissions))
	}
	if m.QuoteDecimals != 0 {
		n += 2 + sovMarket(uint64(m.QuoteDecimals))
	}
	l = m.OpenNotionalCap.Size()
	n += 2 + l + sovMarket(uint64(l))
	return n
}

func (m *DerivativeMarket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ticker)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = len(m.OracleBase)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = len(m.OracleQuote)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	if m.OracleType != 0 {
		n += 1 + sovMarket(uint64(m.OracleType))
	}
	if m.OracleScaleFactor != 0 {
		n += 1 + sovMarket(uint64(m.OracleScaleFactor))
	}
	l = len(m.QuoteDenom)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = m.InitialMarginRatio.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.MaintenanceMarginRatio.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.MakerFeeRate.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.TakerFeeRate.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.RelayerFeeShareRate.Size()
	n += 1 + l + sovMarket(uint64(l))
	if m.IsPerpetual {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovMarket(uint64(m.Status))
	}
	l = m.MinPriceTickSize.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.MinQuantityTickSize.Size()
	n += 2 + l + sovMarket(uint64(l))
	l = m.MinNotional.Size()
	n += 2 + l + sovMarket(uint64(l))
	l = len(m.Admin)
	if l > 0 {
		n += 2 + l + sovMarket(uint64(l))
	}
	if m.AdminPermissions != 0 {
		n += 2 + sovMarket(uint64(m.AdminPermissions))
	}
	if m.QuoteDecimals != 0 {
		n += 2 + sovMarket(uint64(m.QuoteDecimals))
	}
	l = m.ReduceMarginRatio.Size()
	n += 2 + l + sovMarket(uint64(l))
	l = m.OpenNotionalCap.Size()
	n += 2 + l + sovMarket(uint64(l))
	return n
}

func (m *DerivativeMarketSettlementInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = m.SettlementPrice.Size()
	n += 1 + l + sovMarket(uint64(l))
	return n
}

func (m *MarketVolume) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = m.Volume.Size()
	n += 1 + l + sovMarket(uint64(l))
	return n
}

func (m *VolumeRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MakerVolume.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.TakerVolume.Size()
	n += 1 + l + sovMarket(uint64(l))
	return n
}

func (m *ExpiryFuturesMarketInfoState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	if m.MarketInfo != nil {
		l = m.MarketInfo.Size()
		n += 1 + l + sovMarket(uint64(l))
	}
	return n
}

func (m *PerpetualMarketFundingState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	if m.Funding != nil {
		l = m.Funding.Size()
		n += 1 + l + sovMarket(uint64(l))
	}
	return n
}

func (m *ExpiryFuturesMarketInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	if m.ExpirationTimestamp != 0 {
		n += 1 + sovMarket(uint64(m.ExpirationTimestamp))
	}
	if m.TwapStartTimestamp != 0 {
		n += 1 + sovMarket(uint64(m.TwapStartTimestamp))
	}
	l = m.ExpirationTwapStartPriceCumulative.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.SettlementPrice.Size()
	n += 1 + l + sovMarket(uint64(l))
	return n
}

func (m *PerpetualMarketInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = m.HourlyFundingRateCap.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.HourlyInterestRate.Size()
	n += 1 + l + sovMarket(uint64(l))
	if m.NextFundingTimestamp != 0 {
		n += 1 + sovMarket(uint64(m.NextFundingTimestamp))
	}
	if m.FundingInterval != 0 {
		n += 1 + sovMarket(uint64(m.FundingInterval))
	}
	return n
}

func (m *PerpetualMarketFunding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CumulativeFunding.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.CumulativePrice.Size()
	n += 1 + l + sovMarket(uint64(l))
	if m.LastTimestamp != 0 {
		n += 1 + sovMarket(uint64(m.LastTimestamp))
	}
	return n
}

func sovMarket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMarket(x uint64) (n int) {
	return sovMarket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OpenNotionalCap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenNotionalCap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenNotionalCap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uncapped", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OpenNotionalCapUncapped{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cap = &OpenNotionalCap_Uncapped{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capped", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OpenNotionalCapCapped{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cap = &OpenNotionalCap_Capped{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenNotionalCapUncapped) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenNotionalCapUncapped: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenNotionalCapUncapped: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenNotionalCapCapped) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenNotionalCapCapped: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenNotionalCapCapped: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarketFeeMultiplier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarketFeeMultiplier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarketFeeMultiplier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeMultiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeMultiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpotMarket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpotMarket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpotMarket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ticker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MakerFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TakerFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerFeeShareRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RelayerFeeShareRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= MarketStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPriceTickSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinPriceTickSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinQuantityTickSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinQuantityTickSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinNotional", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinNotional.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminPermissions", wireType)
			}
			m.AdminPermissions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminPermissions |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDecimals", wireType)
			}
			m.BaseDecimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseDecimals |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteDecimals", wireType)
			}
			m.QuoteDecimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuoteDecimals |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BinaryOptionsMarket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BinaryOptionsMarket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BinaryOptionsMarket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ticker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleSymbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleSymbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleProvider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleProvider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleType", wireType)
			}
			m.OracleType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OracleType |= types.OracleType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleScaleFactor", wireType)
			}
			m.OracleScaleFactor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OracleScaleFactor |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTimestamp", wireType)
			}
			m.ExpirationTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementTimestamp", wireType)
			}
			m.SettlementTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SettlementTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MakerFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TakerFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerFeeShareRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RelayerFeeShareRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= MarketStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPriceTickSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinPriceTickSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinQuantityTickSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinQuantityTickSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.SettlementPrice = &v
			if err := m.SettlementPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinNotional", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinNotional.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminPermissions", wireType)
			}
			m.AdminPermissions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminPermissions |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteDecimals", wireType)
			}
			m.QuoteDecimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuoteDecimals |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenNotionalCap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OpenNotionalCap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DerivativeMarket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DerivativeMarket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DerivativeMarket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ticker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleBase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleBase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleQuote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleQuote = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleType", wireType)
			}
			m.OracleType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OracleType |= types.OracleType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleScaleFactor", wireType)
			}
			m.OracleScaleFactor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OracleScaleFactor |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialMarginRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitialMarginRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaintenanceMarginRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaintenanceMarginRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MakerFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TakerFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerFeeShareRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RelayerFeeShareRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPerpetual", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPerpetual = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= MarketStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPriceTickSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinPriceTickSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinQuantityTickSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinQuantityTickSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinNotional", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinNotional.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminPermissions", wireType)
			}
			m.AdminPermissions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminPermissions |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteDecimals", wireType)
			}
			m.QuoteDecimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuoteDecimals |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReduceMarginRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReduceMarginRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenNotionalCap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OpenNotionalCap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DerivativeMarketSettlementInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DerivativeMarketSettlementInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DerivativeMarketSettlementInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SettlementPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarketVolume) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarketVolume: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarketVolume: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Volume.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VolumeRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VolumeRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VolumeRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerVolume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MakerVolume.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerVolume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TakerVolume.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExpiryFuturesMarketInfoState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpiryFuturesMarketInfoState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpiryFuturesMarketInfoState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MarketInfo == nil {
				m.MarketInfo = &ExpiryFuturesMarketInfo{}
			}
			if err := m.MarketInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PerpetualMarketFundingState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PerpetualMarketFundingState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PerpetualMarketFundingState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Funding", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Funding == nil {
				m.Funding = &PerpetualMarketFunding{}
			}
			if err := m.Funding.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExpiryFuturesMarketInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpiryFuturesMarketInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpiryFuturesMarketInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTimestamp", wireType)
			}
			m.ExpirationTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwapStartTimestamp", wireType)
			}
			m.TwapStartTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TwapStartTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTwapStartPriceCumulative", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExpirationTwapStartPriceCumulative.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SettlementPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PerpetualMarketInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PerpetualMarketInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PerpetualMarketInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HourlyFundingRateCap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HourlyFundingRateCap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HourlyInterestRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HourlyInterestRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextFundingTimestamp", wireType)
			}
			m.NextFundingTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextFundingTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundingInterval", wireType)
			}
			m.FundingInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FundingInterval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PerpetualMarketFunding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PerpetualMarketFunding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PerpetualMarketFunding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumulativeFunding", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CumulativeFunding.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumulativePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CumulativePrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTimestamp", wireType)
			}
			m.LastTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMarket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMarket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMarket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMarket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMarket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMarket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMarket = fmt.Errorf("proto: unexpected end of group")
)
