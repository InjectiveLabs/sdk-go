// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: injective/exchange/v2/orderbook.proto

package v2

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Spot Exchange Limit Orderbook
type SpotOrderBook struct {
	MarketId  string            `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	IsBuySide bool              `protobuf:"varint,2,opt,name=isBuySide,proto3" json:"isBuySide,omitempty"`
	Orders    []*SpotLimitOrder `protobuf:"bytes,3,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (m *SpotOrderBook) Reset()         { *m = SpotOrderBook{} }
func (m *SpotOrderBook) String() string { return proto.CompactTextString(m) }
func (*SpotOrderBook) ProtoMessage()    {}
func (*SpotOrderBook) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2fb0f56aadb9282, []int{0}
}
func (m *SpotOrderBook) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpotOrderBook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpotOrderBook.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpotOrderBook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpotOrderBook.Merge(m, src)
}
func (m *SpotOrderBook) XXX_Size() int {
	return m.Size()
}
func (m *SpotOrderBook) XXX_DiscardUnknown() {
	xxx_messageInfo_SpotOrderBook.DiscardUnknown(m)
}

var xxx_messageInfo_SpotOrderBook proto.InternalMessageInfo

// Derivative Exchange Limit Orderbook
type DerivativeOrderBook struct {
	MarketId  string                  `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	IsBuySide bool                    `protobuf:"varint,2,opt,name=isBuySide,proto3" json:"isBuySide,omitempty"`
	Orders    []*DerivativeLimitOrder `protobuf:"bytes,3,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (m *DerivativeOrderBook) Reset()         { *m = DerivativeOrderBook{} }
func (m *DerivativeOrderBook) String() string { return proto.CompactTextString(m) }
func (*DerivativeOrderBook) ProtoMessage()    {}
func (*DerivativeOrderBook) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2fb0f56aadb9282, []int{1}
}
func (m *DerivativeOrderBook) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DerivativeOrderBook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DerivativeOrderBook.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DerivativeOrderBook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DerivativeOrderBook.Merge(m, src)
}
func (m *DerivativeOrderBook) XXX_Size() int {
	return m.Size()
}
func (m *DerivativeOrderBook) XXX_DiscardUnknown() {
	xxx_messageInfo_DerivativeOrderBook.DiscardUnknown(m)
}

var xxx_messageInfo_DerivativeOrderBook proto.InternalMessageInfo

// Orderbook containing limit & market conditional orders
type ConditionalDerivativeOrderBook struct {
	MarketId         string                   `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	LimitBuyOrders   []*DerivativeLimitOrder  `protobuf:"bytes,2,rep,name=limit_buy_orders,json=limitBuyOrders,proto3" json:"limit_buy_orders,omitempty"`
	MarketBuyOrders  []*DerivativeMarketOrder `protobuf:"bytes,3,rep,name=market_buy_orders,json=marketBuyOrders,proto3" json:"market_buy_orders,omitempty"`
	LimitSellOrders  []*DerivativeLimitOrder  `protobuf:"bytes,4,rep,name=limit_sell_orders,json=limitSellOrders,proto3" json:"limit_sell_orders,omitempty"`
	MarketSellOrders []*DerivativeMarketOrder `protobuf:"bytes,5,rep,name=market_sell_orders,json=marketSellOrders,proto3" json:"market_sell_orders,omitempty"`
}

func (m *ConditionalDerivativeOrderBook) Reset()         { *m = ConditionalDerivativeOrderBook{} }
func (m *ConditionalDerivativeOrderBook) String() string { return proto.CompactTextString(m) }
func (*ConditionalDerivativeOrderBook) ProtoMessage()    {}
func (*ConditionalDerivativeOrderBook) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2fb0f56aadb9282, []int{2}
}
func (m *ConditionalDerivativeOrderBook) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConditionalDerivativeOrderBook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConditionalDerivativeOrderBook.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConditionalDerivativeOrderBook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConditionalDerivativeOrderBook.Merge(m, src)
}
func (m *ConditionalDerivativeOrderBook) XXX_Size() int {
	return m.Size()
}
func (m *ConditionalDerivativeOrderBook) XXX_DiscardUnknown() {
	xxx_messageInfo_ConditionalDerivativeOrderBook.DiscardUnknown(m)
}

var xxx_messageInfo_ConditionalDerivativeOrderBook proto.InternalMessageInfo

type SubaccountOrderbookMetadata struct {
	VanillaLimitOrderCount    uint32 `protobuf:"varint,1,opt,name=vanilla_limit_order_count,json=vanillaLimitOrderCount,proto3" json:"vanilla_limit_order_count,omitempty"`
	ReduceOnlyLimitOrderCount uint32 `protobuf:"varint,2,opt,name=reduce_only_limit_order_count,json=reduceOnlyLimitOrderCount,proto3" json:"reduce_only_limit_order_count,omitempty"`
	// AggregateReduceOnlyQuantity is the aggregate fillable quantity of the
	// subaccount's reduce-only limit orders in the given direction.
	AggregateReduceOnlyQuantity cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=aggregate_reduce_only_quantity,json=aggregateReduceOnlyQuantity,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"aggregate_reduce_only_quantity"`
	// AggregateVanillaQuantity is the aggregate fillable quantity of the
	// subaccount's vanilla limit orders in the given direction.
	AggregateVanillaQuantity        cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=aggregate_vanilla_quantity,json=aggregateVanillaQuantity,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"aggregate_vanilla_quantity"`
	VanillaConditionalOrderCount    uint32                      `protobuf:"varint,5,opt,name=vanilla_conditional_order_count,json=vanillaConditionalOrderCount,proto3" json:"vanilla_conditional_order_count,omitempty"`
	ReduceOnlyConditionalOrderCount uint32                      `protobuf:"varint,6,opt,name=reduce_only_conditional_order_count,json=reduceOnlyConditionalOrderCount,proto3" json:"reduce_only_conditional_order_count,omitempty"`
}

func (m *SubaccountOrderbookMetadata) Reset()         { *m = SubaccountOrderbookMetadata{} }
func (m *SubaccountOrderbookMetadata) String() string { return proto.CompactTextString(m) }
func (*SubaccountOrderbookMetadata) ProtoMessage()    {}
func (*SubaccountOrderbookMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2fb0f56aadb9282, []int{3}
}
func (m *SubaccountOrderbookMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubaccountOrderbookMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubaccountOrderbookMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubaccountOrderbookMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubaccountOrderbookMetadata.Merge(m, src)
}
func (m *SubaccountOrderbookMetadata) XXX_Size() int {
	return m.Size()
}
func (m *SubaccountOrderbookMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_SubaccountOrderbookMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_SubaccountOrderbookMetadata proto.InternalMessageInfo

func (m *SubaccountOrderbookMetadata) GetVanillaLimitOrderCount() uint32 {
	if m != nil {
		return m.VanillaLimitOrderCount
	}
	return 0
}

func (m *SubaccountOrderbookMetadata) GetReduceOnlyLimitOrderCount() uint32 {
	if m != nil {
		return m.ReduceOnlyLimitOrderCount
	}
	return 0
}

func (m *SubaccountOrderbookMetadata) GetVanillaConditionalOrderCount() uint32 {
	if m != nil {
		return m.VanillaConditionalOrderCount
	}
	return 0
}

func (m *SubaccountOrderbookMetadata) GetReduceOnlyConditionalOrderCount() uint32 {
	if m != nil {
		return m.ReduceOnlyConditionalOrderCount
	}
	return 0
}

func init() {
	proto.RegisterType((*SpotOrderBook)(nil), "injective.exchange.v2.SpotOrderBook")
	proto.RegisterType((*DerivativeOrderBook)(nil), "injective.exchange.v2.DerivativeOrderBook")
	proto.RegisterType((*ConditionalDerivativeOrderBook)(nil), "injective.exchange.v2.ConditionalDerivativeOrderBook")
	proto.RegisterType((*SubaccountOrderbookMetadata)(nil), "injective.exchange.v2.SubaccountOrderbookMetadata")
}

func init() {
	proto.RegisterFile("injective/exchange/v2/orderbook.proto", fileDescriptor_d2fb0f56aadb9282)
}

var fileDescriptor_d2fb0f56aadb9282 = []byte{
	// 615 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0x86, 0xed, 0xa6, 0xad, 0x92, 0x41, 0xa5, 0xad, 0xb9, 0x28, 0x4d, 0x8a, 0x1d, 0x5a, 0x55,
	0x8a, 0x04, 0xd8, 0x52, 0x58, 0x81, 0x84, 0x84, 0x92, 0xb2, 0xa8, 0x94, 0xaa, 0xaa, 0x23, 0x2e,
	0xea, 0xc6, 0x1a, 0xdb, 0x23, 0x67, 0x88, 0xed, 0x09, 0xf6, 0xd8, 0xc2, 0x6f, 0xc0, 0x12, 0x89,
	0x07, 0xa0, 0x2f, 0xc0, 0x7b, 0x74, 0xd9, 0x25, 0x62, 0x51, 0xa1, 0x64, 0xc3, 0x43, 0xb0, 0x40,
	0x9e, 0x71, 0x6c, 0x53, 0xa5, 0x85, 0x20, 0x76, 0xf1, 0xe4, 0x3f, 0xdf, 0xff, 0x9f, 0x33, 0x17,
	0xb0, 0x87, 0xfd, 0xb7, 0xc8, 0xa2, 0x38, 0x46, 0x1a, 0x7a, 0x6f, 0x0d, 0xa1, 0xef, 0x20, 0x2d,
	0xee, 0x68, 0x24, 0xb0, 0x51, 0x60, 0x12, 0x32, 0x52, 0xc7, 0x01, 0xa1, 0x44, 0xba, 0x93, 0xcb,
	0xd4, 0x99, 0x4c, 0x8d, 0x3b, 0x8d, 0xdb, 0x0e, 0x71, 0x08, 0x53, 0x68, 0xe9, 0x2f, 0x2e, 0x6e,
	0xdc, 0xbf, 0x86, 0xc9, 0x25, 0x3b, 0x9f, 0x44, 0xb0, 0x36, 0x18, 0x13, 0x7a, 0x94, 0xae, 0x75,
	0x09, 0x19, 0x49, 0x4d, 0x50, 0xf3, 0x60, 0x30, 0x42, 0xd4, 0xc0, 0x76, 0x5d, 0x6c, 0x89, 0xed,
	0x9a, 0x5e, 0xe5, 0x0b, 0x07, 0xb6, 0xb4, 0x0d, 0x6a, 0x38, 0xec, 0x46, 0xc9, 0x00, 0xdb, 0xa8,
	0xbe, 0xd4, 0x12, 0xdb, 0x55, 0xbd, 0x58, 0x90, 0x9e, 0x81, 0x55, 0xc6, 0x0e, 0xeb, 0x95, 0x56,
	0xa5, 0x7d, 0xa3, 0xb3, 0xa7, 0xce, 0x4d, 0xab, 0xa6, 0x86, 0x7d, 0xec, 0x61, 0xee, 0xaa, 0x67,
	0x45, 0x4f, 0xab, 0x1f, 0x4e, 0x15, 0xe1, 0xc7, 0xa9, 0x22, 0xec, 0x7c, 0x16, 0xc1, 0xad, 0x7d,
	0x14, 0xe0, 0x18, 0xa6, 0xb5, 0xff, 0x25, 0x5b, 0xef, 0x52, 0xb6, 0x07, 0x57, 0x64, 0x2b, 0x6c,
	0xaf, 0x4d, 0xf8, 0xa5, 0x02, 0xe4, 0x1e, 0xf1, 0x6d, 0x4c, 0x31, 0xf1, 0xa1, 0xbb, 0x70, 0xd8,
	0x97, 0x60, 0xc3, 0x4d, 0xf9, 0x86, 0x19, 0x25, 0x46, 0x16, 0x6c, 0x69, 0xf1, 0x60, 0x37, 0x19,
	0xa4, 0x1b, 0x25, 0xec, 0x33, 0x94, 0xde, 0x80, 0xcd, 0xcc, 0xb3, 0xc4, 0xe5, 0x0d, 0x3f, 0xfc,
	0x23, 0xf7, 0x90, 0x55, 0x72, 0xf0, 0x3a, 0xc7, 0x14, 0xe4, 0xd7, 0x60, 0x93, 0x07, 0x0e, 0x91,
	0xeb, 0xce, 0xc8, 0xcb, 0x8b, 0x27, 0x5e, 0x67, 0x94, 0x01, 0x72, 0xdd, 0x0c, 0x7c, 0x02, 0xa4,
	0x2c, 0x72, 0x99, 0xbc, 0xf2, 0x0f, 0x99, 0x37, 0x38, 0xa7, 0x60, 0x97, 0xf6, 0xeb, 0x67, 0x05,
	0x34, 0x07, 0x91, 0x09, 0x2d, 0x8b, 0x44, 0x3e, 0xd7, 0xa7, 0xb7, 0xea, 0x10, 0x51, 0x68, 0x43,
	0x0a, 0xa5, 0x27, 0x60, 0x2b, 0x86, 0x3e, 0x76, 0x5d, 0x68, 0xf0, 0x36, 0x59, 0x0e, 0x83, 0xa9,
	0xd9, 0xe6, 0xad, 0xe9, 0x77, 0x33, 0x41, 0xd1, 0x4c, 0x2f, 0xfd, 0x57, 0x7a, 0x0e, 0xee, 0x05,
	0xc8, 0x8e, 0x2c, 0x64, 0x10, 0xdf, 0x4d, 0xe6, 0x94, 0x2f, 0xb1, 0xf2, 0x2d, 0x2e, 0x3a, 0xf2,
	0xdd, 0xe4, 0x32, 0x61, 0x08, 0x64, 0xe8, 0x38, 0x01, 0x72, 0x20, 0x45, 0x46, 0x99, 0xf5, 0x2e,
	0x82, 0x3e, 0xc5, 0x34, 0xa9, 0x57, 0xd2, 0xe3, 0xd3, 0xdd, 0x3d, 0xbb, 0x50, 0x84, 0x6f, 0x17,
	0x4a, 0xd3, 0x22, 0xa1, 0x47, 0xc2, 0xd0, 0x1e, 0xa9, 0x98, 0x68, 0x1e, 0xa4, 0x43, 0xb5, 0x8f,
	0x1c, 0x68, 0x25, 0xfb, 0xc8, 0xd2, 0x9b, 0x39, 0x4a, 0xcf, 0x0d, 0x8f, 0x33, 0x8e, 0x04, 0x41,
	0xa3, 0x70, 0x9a, 0x35, 0x9c, 0xbb, 0x2c, 0xff, 0xbd, 0x4b, 0x3d, 0xc7, 0xbc, 0xe2, 0x94, 0xdc,
	0xe2, 0x05, 0x50, 0x66, 0x60, 0xab, 0xb8, 0x20, 0xbf, 0x0d, 0x64, 0x85, 0x0d, 0x64, 0x3b, 0x93,
	0x95, 0xae, 0x51, 0x69, 0x26, 0x7d, 0xb0, 0x5b, 0x9e, 0xc4, 0x55, 0xa8, 0x55, 0x86, 0x52, 0x8a,
	0xd9, 0xce, 0xa5, 0x75, 0x47, 0x67, 0x13, 0x59, 0x3c, 0x9f, 0xc8, 0xe2, 0xf7, 0x89, 0x2c, 0x7e,
	0x9c, 0xca, 0xc2, 0xf9, 0x54, 0x16, 0xbe, 0x4e, 0x65, 0xe1, 0xe4, 0xd8, 0xc1, 0x74, 0x18, 0x99,
	0xaa, 0x45, 0x3c, 0xed, 0x60, 0x76, 0xd8, 0xfa, 0xd0, 0x0c, 0xb5, 0xfc, 0xe8, 0x3d, 0xb2, 0x48,
	0x80, 0xca, 0x9f, 0x43, 0x88, 0x7d, 0xcd, 0x23, 0x76, 0xe4, 0xa2, 0xb0, 0x78, 0x59, 0x69, 0x32,
	0x46, 0xa1, 0x16, 0x77, 0xcc, 0x55, 0xf6, 0xb4, 0x3e, 0xfe, 0x15, 0x00, 0x00, 0xff, 0xff, 0x6c,
	0x90, 0xfd, 0xe5, 0xd3, 0x05, 0x00, 0x00,
}

func (m *SpotOrderBook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpotOrderBook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpotOrderBook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for iNdEx := len(m.Orders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOrderbook(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.IsBuySide {
		i--
		if m.IsBuySide {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintOrderbook(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DerivativeOrderBook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DerivativeOrderBook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DerivativeOrderBook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for iNdEx := len(m.Orders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOrderbook(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.IsBuySide {
		i--
		if m.IsBuySide {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintOrderbook(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConditionalDerivativeOrderBook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConditionalDerivativeOrderBook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConditionalDerivativeOrderBook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketSellOrders) > 0 {
		for iNdEx := len(m.MarketSellOrders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MarketSellOrders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOrderbook(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.LimitSellOrders) > 0 {
		for iNdEx := len(m.LimitSellOrders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LimitSellOrders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOrderbook(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.MarketBuyOrders) > 0 {
		for iNdEx := len(m.MarketBuyOrders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MarketBuyOrders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOrderbook(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.LimitBuyOrders) > 0 {
		for iNdEx := len(m.LimitBuyOrders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LimitBuyOrders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOrderbook(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintOrderbook(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubaccountOrderbookMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubaccountOrderbookMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubaccountOrderbookMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReduceOnlyConditionalOrderCount != 0 {
		i = encodeVarintOrderbook(dAtA, i, uint64(m.ReduceOnlyConditionalOrderCount))
		i--
		dAtA[i] = 0x30
	}
	if m.VanillaConditionalOrderCount != 0 {
		i = encodeVarintOrderbook(dAtA, i, uint64(m.VanillaConditionalOrderCount))
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.AggregateVanillaQuantity.Size()
		i -= size
		if _, err := m.AggregateVanillaQuantity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOrderbook(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.AggregateReduceOnlyQuantity.Size()
		i -= size
		if _, err := m.AggregateReduceOnlyQuantity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOrderbook(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.ReduceOnlyLimitOrderCount != 0 {
		i = encodeVarintOrderbook(dAtA, i, uint64(m.ReduceOnlyLimitOrderCount))
		i--
		dAtA[i] = 0x10
	}
	if m.VanillaLimitOrderCount != 0 {
		i = encodeVarintOrderbook(dAtA, i, uint64(m.VanillaLimitOrderCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintOrderbook(dAtA []byte, offset int, v uint64) int {
	offset -= sovOrderbook(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SpotOrderBook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovOrderbook(uint64(l))
	}
	if m.IsBuySide {
		n += 2
	}
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovOrderbook(uint64(l))
		}
	}
	return n
}

func (m *DerivativeOrderBook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovOrderbook(uint64(l))
	}
	if m.IsBuySide {
		n += 2
	}
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovOrderbook(uint64(l))
		}
	}
	return n
}

func (m *ConditionalDerivativeOrderBook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovOrderbook(uint64(l))
	}
	if len(m.LimitBuyOrders) > 0 {
		for _, e := range m.LimitBuyOrders {
			l = e.Size()
			n += 1 + l + sovOrderbook(uint64(l))
		}
	}
	if len(m.MarketBuyOrders) > 0 {
		for _, e := range m.MarketBuyOrders {
			l = e.Size()
			n += 1 + l + sovOrderbook(uint64(l))
		}
	}
	if len(m.LimitSellOrders) > 0 {
		for _, e := range m.LimitSellOrders {
			l = e.Size()
			n += 1 + l + sovOrderbook(uint64(l))
		}
	}
	if len(m.MarketSellOrders) > 0 {
		for _, e := range m.MarketSellOrders {
			l = e.Size()
			n += 1 + l + sovOrderbook(uint64(l))
		}
	}
	return n
}

func (m *SubaccountOrderbookMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VanillaLimitOrderCount != 0 {
		n += 1 + sovOrderbook(uint64(m.VanillaLimitOrderCount))
	}
	if m.ReduceOnlyLimitOrderCount != 0 {
		n += 1 + sovOrderbook(uint64(m.ReduceOnlyLimitOrderCount))
	}
	l = m.AggregateReduceOnlyQuantity.Size()
	n += 1 + l + sovOrderbook(uint64(l))
	l = m.AggregateVanillaQuantity.Size()
	n += 1 + l + sovOrderbook(uint64(l))
	if m.VanillaConditionalOrderCount != 0 {
		n += 1 + sovOrderbook(uint64(m.VanillaConditionalOrderCount))
	}
	if m.ReduceOnlyConditionalOrderCount != 0 {
		n += 1 + sovOrderbook(uint64(m.ReduceOnlyConditionalOrderCount))
	}
	return n
}

func sovOrderbook(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOrderbook(x uint64) (n int) {
	return sovOrderbook(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SpotOrderBook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderbook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpotOrderBook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpotOrderBook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBuySide", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBuySide = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrderbook
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrderbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, &SpotLimitOrder{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrderbook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrderbook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DerivativeOrderBook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderbook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DerivativeOrderBook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DerivativeOrderBook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBuySide", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBuySide = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrderbook
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrderbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, &DerivativeLimitOrder{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrderbook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrderbook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConditionalDerivativeOrderBook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderbook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConditionalDerivativeOrderBook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConditionalDerivativeOrderBook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitBuyOrders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrderbook
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrderbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LimitBuyOrders = append(m.LimitBuyOrders, &DerivativeLimitOrder{})
			if err := m.LimitBuyOrders[len(m.LimitBuyOrders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketBuyOrders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrderbook
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrderbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketBuyOrders = append(m.MarketBuyOrders, &DerivativeMarketOrder{})
			if err := m.MarketBuyOrders[len(m.MarketBuyOrders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitSellOrders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrderbook
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrderbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LimitSellOrders = append(m.LimitSellOrders, &DerivativeLimitOrder{})
			if err := m.LimitSellOrders[len(m.LimitSellOrders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketSellOrders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrderbook
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrderbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketSellOrders = append(m.MarketSellOrders, &DerivativeMarketOrder{})
			if err := m.MarketSellOrders[len(m.MarketSellOrders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrderbook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrderbook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubaccountOrderbookMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderbook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubaccountOrderbookMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubaccountOrderbookMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VanillaLimitOrderCount", wireType)
			}
			m.VanillaLimitOrderCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VanillaLimitOrderCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReduceOnlyLimitOrderCount", wireType)
			}
			m.ReduceOnlyLimitOrderCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReduceOnlyLimitOrderCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregateReduceOnlyQuantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AggregateReduceOnlyQuantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregateVanillaQuantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AggregateVanillaQuantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VanillaConditionalOrderCount", wireType)
			}
			m.VanillaConditionalOrderCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VanillaConditionalOrderCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReduceOnlyConditionalOrderCount", wireType)
			}
			m.ReduceOnlyConditionalOrderCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReduceOnlyConditionalOrderCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrderbook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrderbook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrderbook(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrderbook
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOrderbook
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOrderbook
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOrderbook
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOrderbook        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrderbook          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOrderbook = fmt.Errorf("proto: unexpected end of group")
)
