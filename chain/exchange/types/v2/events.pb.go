// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: injective/exchange/v2/events.proto

package v2

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/InjectiveLabs/sdk-go/chain/oracle/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventBatchSpotExecution struct {
	MarketId      string        `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	IsBuy         bool          `protobuf:"varint,2,opt,name=is_buy,json=isBuy,proto3" json:"is_buy,omitempty"`
	ExecutionType ExecutionType `protobuf:"varint,3,opt,name=executionType,proto3,enum=injective.exchange.v2.ExecutionType" json:"executionType,omitempty"`
	Trades        []*TradeLog   `protobuf:"bytes,4,rep,name=trades,proto3" json:"trades,omitempty"`
}

func (m *EventBatchSpotExecution) Reset()         { *m = EventBatchSpotExecution{} }
func (m *EventBatchSpotExecution) String() string { return proto.CompactTextString(m) }
func (*EventBatchSpotExecution) ProtoMessage()    {}
func (*EventBatchSpotExecution) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{0}
}
func (m *EventBatchSpotExecution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBatchSpotExecution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBatchSpotExecution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBatchSpotExecution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBatchSpotExecution.Merge(m, src)
}
func (m *EventBatchSpotExecution) XXX_Size() int {
	return m.Size()
}
func (m *EventBatchSpotExecution) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBatchSpotExecution.DiscardUnknown(m)
}

var xxx_messageInfo_EventBatchSpotExecution proto.InternalMessageInfo

func (m *EventBatchSpotExecution) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *EventBatchSpotExecution) GetIsBuy() bool {
	if m != nil {
		return m.IsBuy
	}
	return false
}

func (m *EventBatchSpotExecution) GetExecutionType() ExecutionType {
	if m != nil {
		return m.ExecutionType
	}
	return ExecutionType_UnspecifiedExecutionType
}

func (m *EventBatchSpotExecution) GetTrades() []*TradeLog {
	if m != nil {
		return m.Trades
	}
	return nil
}

type EventBatchDerivativeExecution struct {
	MarketId      string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	IsBuy         bool   `protobuf:"varint,2,opt,name=is_buy,json=isBuy,proto3" json:"is_buy,omitempty"`
	IsLiquidation bool   `protobuf:"varint,3,opt,name=is_liquidation,json=isLiquidation,proto3" json:"is_liquidation,omitempty"`
	// nil for time expiry futures
	CumulativeFunding *cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=cumulative_funding,json=cumulativeFunding,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"cumulative_funding,omitempty"`
	ExecutionType     ExecutionType                `protobuf:"varint,5,opt,name=executionType,proto3,enum=injective.exchange.v2.ExecutionType" json:"executionType,omitempty"`
	Trades            []*DerivativeTradeLog        `protobuf:"bytes,6,rep,name=trades,proto3" json:"trades,omitempty"`
}

func (m *EventBatchDerivativeExecution) Reset()         { *m = EventBatchDerivativeExecution{} }
func (m *EventBatchDerivativeExecution) String() string { return proto.CompactTextString(m) }
func (*EventBatchDerivativeExecution) ProtoMessage()    {}
func (*EventBatchDerivativeExecution) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{1}
}
func (m *EventBatchDerivativeExecution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBatchDerivativeExecution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBatchDerivativeExecution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBatchDerivativeExecution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBatchDerivativeExecution.Merge(m, src)
}
func (m *EventBatchDerivativeExecution) XXX_Size() int {
	return m.Size()
}
func (m *EventBatchDerivativeExecution) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBatchDerivativeExecution.DiscardUnknown(m)
}

var xxx_messageInfo_EventBatchDerivativeExecution proto.InternalMessageInfo

func (m *EventBatchDerivativeExecution) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *EventBatchDerivativeExecution) GetIsBuy() bool {
	if m != nil {
		return m.IsBuy
	}
	return false
}

func (m *EventBatchDerivativeExecution) GetIsLiquidation() bool {
	if m != nil {
		return m.IsLiquidation
	}
	return false
}

func (m *EventBatchDerivativeExecution) GetExecutionType() ExecutionType {
	if m != nil {
		return m.ExecutionType
	}
	return ExecutionType_UnspecifiedExecutionType
}

func (m *EventBatchDerivativeExecution) GetTrades() []*DerivativeTradeLog {
	if m != nil {
		return m.Trades
	}
	return nil
}

type EventLostFundsFromLiquidation struct {
	MarketId                           string                      `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	SubaccountId                       []byte                      `protobuf:"bytes,2,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	LostFundsFromAvailableDuringPayout cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=lost_funds_from_available_during_payout,json=lostFundsFromAvailableDuringPayout,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"lost_funds_from_available_during_payout"`
	LostFundsFromOrderCancels          cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=lost_funds_from_order_cancels,json=lostFundsFromOrderCancels,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"lost_funds_from_order_cancels"`
}

func (m *EventLostFundsFromLiquidation) Reset()         { *m = EventLostFundsFromLiquidation{} }
func (m *EventLostFundsFromLiquidation) String() string { return proto.CompactTextString(m) }
func (*EventLostFundsFromLiquidation) ProtoMessage()    {}
func (*EventLostFundsFromLiquidation) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{2}
}
func (m *EventLostFundsFromLiquidation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventLostFundsFromLiquidation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventLostFundsFromLiquidation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventLostFundsFromLiquidation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventLostFundsFromLiquidation.Merge(m, src)
}
func (m *EventLostFundsFromLiquidation) XXX_Size() int {
	return m.Size()
}
func (m *EventLostFundsFromLiquidation) XXX_DiscardUnknown() {
	xxx_messageInfo_EventLostFundsFromLiquidation.DiscardUnknown(m)
}

var xxx_messageInfo_EventLostFundsFromLiquidation proto.InternalMessageInfo

func (m *EventLostFundsFromLiquidation) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *EventLostFundsFromLiquidation) GetSubaccountId() []byte {
	if m != nil {
		return m.SubaccountId
	}
	return nil
}

type EventBatchDerivativePosition struct {
	MarketId  string                `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	Positions []*SubaccountPosition `protobuf:"bytes,2,rep,name=positions,proto3" json:"positions,omitempty"`
}

func (m *EventBatchDerivativePosition) Reset()         { *m = EventBatchDerivativePosition{} }
func (m *EventBatchDerivativePosition) String() string { return proto.CompactTextString(m) }
func (*EventBatchDerivativePosition) ProtoMessage()    {}
func (*EventBatchDerivativePosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{3}
}
func (m *EventBatchDerivativePosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBatchDerivativePosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBatchDerivativePosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBatchDerivativePosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBatchDerivativePosition.Merge(m, src)
}
func (m *EventBatchDerivativePosition) XXX_Size() int {
	return m.Size()
}
func (m *EventBatchDerivativePosition) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBatchDerivativePosition.DiscardUnknown(m)
}

var xxx_messageInfo_EventBatchDerivativePosition proto.InternalMessageInfo

func (m *EventBatchDerivativePosition) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *EventBatchDerivativePosition) GetPositions() []*SubaccountPosition {
	if m != nil {
		return m.Positions
	}
	return nil
}

type EventDerivativeMarketPaused struct {
	MarketId          string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	SettlePrice       string `protobuf:"bytes,2,opt,name=settle_price,json=settlePrice,proto3" json:"settle_price,omitempty"`
	TotalMissingFunds string `protobuf:"bytes,3,opt,name=total_missing_funds,json=totalMissingFunds,proto3" json:"total_missing_funds,omitempty"`
	MissingFundsRate  string `protobuf:"bytes,4,opt,name=missing_funds_rate,json=missingFundsRate,proto3" json:"missing_funds_rate,omitempty"`
}

func (m *EventDerivativeMarketPaused) Reset()         { *m = EventDerivativeMarketPaused{} }
func (m *EventDerivativeMarketPaused) String() string { return proto.CompactTextString(m) }
func (*EventDerivativeMarketPaused) ProtoMessage()    {}
func (*EventDerivativeMarketPaused) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{4}
}
func (m *EventDerivativeMarketPaused) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDerivativeMarketPaused) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDerivativeMarketPaused.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDerivativeMarketPaused) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDerivativeMarketPaused.Merge(m, src)
}
func (m *EventDerivativeMarketPaused) XXX_Size() int {
	return m.Size()
}
func (m *EventDerivativeMarketPaused) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDerivativeMarketPaused.DiscardUnknown(m)
}

var xxx_messageInfo_EventDerivativeMarketPaused proto.InternalMessageInfo

func (m *EventDerivativeMarketPaused) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *EventDerivativeMarketPaused) GetSettlePrice() string {
	if m != nil {
		return m.SettlePrice
	}
	return ""
}

func (m *EventDerivativeMarketPaused) GetTotalMissingFunds() string {
	if m != nil {
		return m.TotalMissingFunds
	}
	return ""
}

func (m *EventDerivativeMarketPaused) GetMissingFundsRate() string {
	if m != nil {
		return m.MissingFundsRate
	}
	return ""
}

type EventSettledMarketBalance struct {
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	Amount   string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *EventSettledMarketBalance) Reset()         { *m = EventSettledMarketBalance{} }
func (m *EventSettledMarketBalance) String() string { return proto.CompactTextString(m) }
func (*EventSettledMarketBalance) ProtoMessage()    {}
func (*EventSettledMarketBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{5}
}
func (m *EventSettledMarketBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSettledMarketBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSettledMarketBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSettledMarketBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSettledMarketBalance.Merge(m, src)
}
func (m *EventSettledMarketBalance) XXX_Size() int {
	return m.Size()
}
func (m *EventSettledMarketBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSettledMarketBalance.DiscardUnknown(m)
}

var xxx_messageInfo_EventSettledMarketBalance proto.InternalMessageInfo

func (m *EventSettledMarketBalance) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *EventSettledMarketBalance) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type EventNotSettledMarketBalance struct {
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	Amount   string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *EventNotSettledMarketBalance) Reset()         { *m = EventNotSettledMarketBalance{} }
func (m *EventNotSettledMarketBalance) String() string { return proto.CompactTextString(m) }
func (*EventNotSettledMarketBalance) ProtoMessage()    {}
func (*EventNotSettledMarketBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{6}
}
func (m *EventNotSettledMarketBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventNotSettledMarketBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventNotSettledMarketBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventNotSettledMarketBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventNotSettledMarketBalance.Merge(m, src)
}
func (m *EventNotSettledMarketBalance) XXX_Size() int {
	return m.Size()
}
func (m *EventNotSettledMarketBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_EventNotSettledMarketBalance.DiscardUnknown(m)
}

var xxx_messageInfo_EventNotSettledMarketBalance proto.InternalMessageInfo

func (m *EventNotSettledMarketBalance) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *EventNotSettledMarketBalance) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type EventMarketBeyondBankruptcy struct {
	MarketId           string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	SettlePrice        string `protobuf:"bytes,2,opt,name=settle_price,json=settlePrice,proto3" json:"settle_price,omitempty"`
	MissingMarketFunds string `protobuf:"bytes,3,opt,name=missing_market_funds,json=missingMarketFunds,proto3" json:"missing_market_funds,omitempty"`
}

func (m *EventMarketBeyondBankruptcy) Reset()         { *m = EventMarketBeyondBankruptcy{} }
func (m *EventMarketBeyondBankruptcy) String() string { return proto.CompactTextString(m) }
func (*EventMarketBeyondBankruptcy) ProtoMessage()    {}
func (*EventMarketBeyondBankruptcy) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{7}
}
func (m *EventMarketBeyondBankruptcy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventMarketBeyondBankruptcy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventMarketBeyondBankruptcy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventMarketBeyondBankruptcy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMarketBeyondBankruptcy.Merge(m, src)
}
func (m *EventMarketBeyondBankruptcy) XXX_Size() int {
	return m.Size()
}
func (m *EventMarketBeyondBankruptcy) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMarketBeyondBankruptcy.DiscardUnknown(m)
}

var xxx_messageInfo_EventMarketBeyondBankruptcy proto.InternalMessageInfo

func (m *EventMarketBeyondBankruptcy) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *EventMarketBeyondBankruptcy) GetSettlePrice() string {
	if m != nil {
		return m.SettlePrice
	}
	return ""
}

func (m *EventMarketBeyondBankruptcy) GetMissingMarketFunds() string {
	if m != nil {
		return m.MissingMarketFunds
	}
	return ""
}

type EventAllPositionsHaircut struct {
	MarketId         string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	SettlePrice      string `protobuf:"bytes,2,opt,name=settle_price,json=settlePrice,proto3" json:"settle_price,omitempty"`
	MissingFundsRate string `protobuf:"bytes,3,opt,name=missing_funds_rate,json=missingFundsRate,proto3" json:"missing_funds_rate,omitempty"`
}

func (m *EventAllPositionsHaircut) Reset()         { *m = EventAllPositionsHaircut{} }
func (m *EventAllPositionsHaircut) String() string { return proto.CompactTextString(m) }
func (*EventAllPositionsHaircut) ProtoMessage()    {}
func (*EventAllPositionsHaircut) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{8}
}
func (m *EventAllPositionsHaircut) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAllPositionsHaircut) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAllPositionsHaircut.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAllPositionsHaircut) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAllPositionsHaircut.Merge(m, src)
}
func (m *EventAllPositionsHaircut) XXX_Size() int {
	return m.Size()
}
func (m *EventAllPositionsHaircut) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAllPositionsHaircut.DiscardUnknown(m)
}

var xxx_messageInfo_EventAllPositionsHaircut proto.InternalMessageInfo

func (m *EventAllPositionsHaircut) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *EventAllPositionsHaircut) GetSettlePrice() string {
	if m != nil {
		return m.SettlePrice
	}
	return ""
}

func (m *EventAllPositionsHaircut) GetMissingFundsRate() string {
	if m != nil {
		return m.MissingFundsRate
	}
	return ""
}

type EventBinaryOptionsMarketUpdate struct {
	Market BinaryOptionsMarket `protobuf:"bytes,1,opt,name=market,proto3" json:"market"`
}

func (m *EventBinaryOptionsMarketUpdate) Reset()         { *m = EventBinaryOptionsMarketUpdate{} }
func (m *EventBinaryOptionsMarketUpdate) String() string { return proto.CompactTextString(m) }
func (*EventBinaryOptionsMarketUpdate) ProtoMessage()    {}
func (*EventBinaryOptionsMarketUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{9}
}
func (m *EventBinaryOptionsMarketUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBinaryOptionsMarketUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBinaryOptionsMarketUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBinaryOptionsMarketUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBinaryOptionsMarketUpdate.Merge(m, src)
}
func (m *EventBinaryOptionsMarketUpdate) XXX_Size() int {
	return m.Size()
}
func (m *EventBinaryOptionsMarketUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBinaryOptionsMarketUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_EventBinaryOptionsMarketUpdate proto.InternalMessageInfo

func (m *EventBinaryOptionsMarketUpdate) GetMarket() BinaryOptionsMarket {
	if m != nil {
		return m.Market
	}
	return BinaryOptionsMarket{}
}

type EventNewSpotOrders struct {
	MarketId   string            `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	BuyOrders  []*SpotLimitOrder `protobuf:"bytes,2,rep,name=buy_orders,json=buyOrders,proto3" json:"buy_orders,omitempty"`
	SellOrders []*SpotLimitOrder `protobuf:"bytes,3,rep,name=sell_orders,json=sellOrders,proto3" json:"sell_orders,omitempty"`
}

func (m *EventNewSpotOrders) Reset()         { *m = EventNewSpotOrders{} }
func (m *EventNewSpotOrders) String() string { return proto.CompactTextString(m) }
func (*EventNewSpotOrders) ProtoMessage()    {}
func (*EventNewSpotOrders) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{10}
}
func (m *EventNewSpotOrders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventNewSpotOrders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventNewSpotOrders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventNewSpotOrders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventNewSpotOrders.Merge(m, src)
}
func (m *EventNewSpotOrders) XXX_Size() int {
	return m.Size()
}
func (m *EventNewSpotOrders) XXX_DiscardUnknown() {
	xxx_messageInfo_EventNewSpotOrders.DiscardUnknown(m)
}

var xxx_messageInfo_EventNewSpotOrders proto.InternalMessageInfo

func (m *EventNewSpotOrders) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *EventNewSpotOrders) GetBuyOrders() []*SpotLimitOrder {
	if m != nil {
		return m.BuyOrders
	}
	return nil
}

func (m *EventNewSpotOrders) GetSellOrders() []*SpotLimitOrder {
	if m != nil {
		return m.SellOrders
	}
	return nil
}

type EventNewDerivativeOrders struct {
	MarketId   string                  `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	BuyOrders  []*DerivativeLimitOrder `protobuf:"bytes,2,rep,name=buy_orders,json=buyOrders,proto3" json:"buy_orders,omitempty"`
	SellOrders []*DerivativeLimitOrder `protobuf:"bytes,3,rep,name=sell_orders,json=sellOrders,proto3" json:"sell_orders,omitempty"`
}

func (m *EventNewDerivativeOrders) Reset()         { *m = EventNewDerivativeOrders{} }
func (m *EventNewDerivativeOrders) String() string { return proto.CompactTextString(m) }
func (*EventNewDerivativeOrders) ProtoMessage()    {}
func (*EventNewDerivativeOrders) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{11}
}
func (m *EventNewDerivativeOrders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventNewDerivativeOrders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventNewDerivativeOrders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventNewDerivativeOrders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventNewDerivativeOrders.Merge(m, src)
}
func (m *EventNewDerivativeOrders) XXX_Size() int {
	return m.Size()
}
func (m *EventNewDerivativeOrders) XXX_DiscardUnknown() {
	xxx_messageInfo_EventNewDerivativeOrders.DiscardUnknown(m)
}

var xxx_messageInfo_EventNewDerivativeOrders proto.InternalMessageInfo

func (m *EventNewDerivativeOrders) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *EventNewDerivativeOrders) GetBuyOrders() []*DerivativeLimitOrder {
	if m != nil {
		return m.BuyOrders
	}
	return nil
}

func (m *EventNewDerivativeOrders) GetSellOrders() []*DerivativeLimitOrder {
	if m != nil {
		return m.SellOrders
	}
	return nil
}

type EventCancelSpotOrder struct {
	MarketId string         `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	Order    SpotLimitOrder `protobuf:"bytes,2,opt,name=order,proto3" json:"order"`
}

func (m *EventCancelSpotOrder) Reset()         { *m = EventCancelSpotOrder{} }
func (m *EventCancelSpotOrder) String() string { return proto.CompactTextString(m) }
func (*EventCancelSpotOrder) ProtoMessage()    {}
func (*EventCancelSpotOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{12}
}
func (m *EventCancelSpotOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCancelSpotOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCancelSpotOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCancelSpotOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCancelSpotOrder.Merge(m, src)
}
func (m *EventCancelSpotOrder) XXX_Size() int {
	return m.Size()
}
func (m *EventCancelSpotOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCancelSpotOrder.DiscardUnknown(m)
}

var xxx_messageInfo_EventCancelSpotOrder proto.InternalMessageInfo

func (m *EventCancelSpotOrder) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *EventCancelSpotOrder) GetOrder() SpotLimitOrder {
	if m != nil {
		return m.Order
	}
	return SpotLimitOrder{}
}

type EventSpotMarketUpdate struct {
	Market SpotMarket `protobuf:"bytes,1,opt,name=market,proto3" json:"market"`
}

func (m *EventSpotMarketUpdate) Reset()         { *m = EventSpotMarketUpdate{} }
func (m *EventSpotMarketUpdate) String() string { return proto.CompactTextString(m) }
func (*EventSpotMarketUpdate) ProtoMessage()    {}
func (*EventSpotMarketUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{13}
}
func (m *EventSpotMarketUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSpotMarketUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSpotMarketUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSpotMarketUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSpotMarketUpdate.Merge(m, src)
}
func (m *EventSpotMarketUpdate) XXX_Size() int {
	return m.Size()
}
func (m *EventSpotMarketUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSpotMarketUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_EventSpotMarketUpdate proto.InternalMessageInfo

func (m *EventSpotMarketUpdate) GetMarket() SpotMarket {
	if m != nil {
		return m.Market
	}
	return SpotMarket{}
}

type EventPerpetualMarketUpdate struct {
	Market              DerivativeMarket        `protobuf:"bytes,1,opt,name=market,proto3" json:"market"`
	PerpetualMarketInfo *PerpetualMarketInfo    `protobuf:"bytes,2,opt,name=perpetual_market_info,json=perpetualMarketInfo,proto3" json:"perpetual_market_info,omitempty"`
	Funding             *PerpetualMarketFunding `protobuf:"bytes,3,opt,name=funding,proto3" json:"funding,omitempty"`
}

func (m *EventPerpetualMarketUpdate) Reset()         { *m = EventPerpetualMarketUpdate{} }
func (m *EventPerpetualMarketUpdate) String() string { return proto.CompactTextString(m) }
func (*EventPerpetualMarketUpdate) ProtoMessage()    {}
func (*EventPerpetualMarketUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{14}
}
func (m *EventPerpetualMarketUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPerpetualMarketUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPerpetualMarketUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPerpetualMarketUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPerpetualMarketUpdate.Merge(m, src)
}
func (m *EventPerpetualMarketUpdate) XXX_Size() int {
	return m.Size()
}
func (m *EventPerpetualMarketUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPerpetualMarketUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_EventPerpetualMarketUpdate proto.InternalMessageInfo

func (m *EventPerpetualMarketUpdate) GetMarket() DerivativeMarket {
	if m != nil {
		return m.Market
	}
	return DerivativeMarket{}
}

func (m *EventPerpetualMarketUpdate) GetPerpetualMarketInfo() *PerpetualMarketInfo {
	if m != nil {
		return m.PerpetualMarketInfo
	}
	return nil
}

func (m *EventPerpetualMarketUpdate) GetFunding() *PerpetualMarketFunding {
	if m != nil {
		return m.Funding
	}
	return nil
}

type EventExpiryFuturesMarketUpdate struct {
	Market                  DerivativeMarket         `protobuf:"bytes,1,opt,name=market,proto3" json:"market"`
	ExpiryFuturesMarketInfo *ExpiryFuturesMarketInfo `protobuf:"bytes,3,opt,name=expiry_futures_market_info,json=expiryFuturesMarketInfo,proto3" json:"expiry_futures_market_info,omitempty"`
}

func (m *EventExpiryFuturesMarketUpdate) Reset()         { *m = EventExpiryFuturesMarketUpdate{} }
func (m *EventExpiryFuturesMarketUpdate) String() string { return proto.CompactTextString(m) }
func (*EventExpiryFuturesMarketUpdate) ProtoMessage()    {}
func (*EventExpiryFuturesMarketUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{15}
}
func (m *EventExpiryFuturesMarketUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventExpiryFuturesMarketUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventExpiryFuturesMarketUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventExpiryFuturesMarketUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventExpiryFuturesMarketUpdate.Merge(m, src)
}
func (m *EventExpiryFuturesMarketUpdate) XXX_Size() int {
	return m.Size()
}
func (m *EventExpiryFuturesMarketUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_EventExpiryFuturesMarketUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_EventExpiryFuturesMarketUpdate proto.InternalMessageInfo

func (m *EventExpiryFuturesMarketUpdate) GetMarket() DerivativeMarket {
	if m != nil {
		return m.Market
	}
	return DerivativeMarket{}
}

func (m *EventExpiryFuturesMarketUpdate) GetExpiryFuturesMarketInfo() *ExpiryFuturesMarketInfo {
	if m != nil {
		return m.ExpiryFuturesMarketInfo
	}
	return nil
}

type EventPerpetualMarketFundingUpdate struct {
	MarketId        string                       `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	Funding         PerpetualMarketFunding       `protobuf:"bytes,2,opt,name=funding,proto3" json:"funding"`
	IsHourlyFunding bool                         `protobuf:"varint,3,opt,name=is_hourly_funding,json=isHourlyFunding,proto3" json:"is_hourly_funding,omitempty"`
	FundingRate     *cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=funding_rate,json=fundingRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"funding_rate,omitempty"`
	MarkPrice       *cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=mark_price,json=markPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"mark_price,omitempty"`
}

func (m *EventPerpetualMarketFundingUpdate) Reset()         { *m = EventPerpetualMarketFundingUpdate{} }
func (m *EventPerpetualMarketFundingUpdate) String() string { return proto.CompactTextString(m) }
func (*EventPerpetualMarketFundingUpdate) ProtoMessage()    {}
func (*EventPerpetualMarketFundingUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{16}
}
func (m *EventPerpetualMarketFundingUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPerpetualMarketFundingUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPerpetualMarketFundingUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPerpetualMarketFundingUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPerpetualMarketFundingUpdate.Merge(m, src)
}
func (m *EventPerpetualMarketFundingUpdate) XXX_Size() int {
	return m.Size()
}
func (m *EventPerpetualMarketFundingUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPerpetualMarketFundingUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_EventPerpetualMarketFundingUpdate proto.InternalMessageInfo

func (m *EventPerpetualMarketFundingUpdate) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *EventPerpetualMarketFundingUpdate) GetFunding() PerpetualMarketFunding {
	if m != nil {
		return m.Funding
	}
	return PerpetualMarketFunding{}
}

func (m *EventPerpetualMarketFundingUpdate) GetIsHourlyFunding() bool {
	if m != nil {
		return m.IsHourlyFunding
	}
	return false
}

type EventSubaccountDeposit struct {
	SrcAddress   string     `protobuf:"bytes,1,opt,name=src_address,json=srcAddress,proto3" json:"src_address,omitempty"`
	SubaccountId []byte     `protobuf:"bytes,2,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	Amount       types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
}

func (m *EventSubaccountDeposit) Reset()         { *m = EventSubaccountDeposit{} }
func (m *EventSubaccountDeposit) String() string { return proto.CompactTextString(m) }
func (*EventSubaccountDeposit) ProtoMessage()    {}
func (*EventSubaccountDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{17}
}
func (m *EventSubaccountDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSubaccountDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSubaccountDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSubaccountDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSubaccountDeposit.Merge(m, src)
}
func (m *EventSubaccountDeposit) XXX_Size() int {
	return m.Size()
}
func (m *EventSubaccountDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSubaccountDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_EventSubaccountDeposit proto.InternalMessageInfo

func (m *EventSubaccountDeposit) GetSrcAddress() string {
	if m != nil {
		return m.SrcAddress
	}
	return ""
}

func (m *EventSubaccountDeposit) GetSubaccountId() []byte {
	if m != nil {
		return m.SubaccountId
	}
	return nil
}

func (m *EventSubaccountDeposit) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

type EventSubaccountWithdraw struct {
	SubaccountId []byte     `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	DstAddress   string     `protobuf:"bytes,2,opt,name=dst_address,json=dstAddress,proto3" json:"dst_address,omitempty"`
	Amount       types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
}

func (m *EventSubaccountWithdraw) Reset()         { *m = EventSubaccountWithdraw{} }
func (m *EventSubaccountWithdraw) String() string { return proto.CompactTextString(m) }
func (*EventSubaccountWithdraw) ProtoMessage()    {}
func (*EventSubaccountWithdraw) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{18}
}
func (m *EventSubaccountWithdraw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSubaccountWithdraw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSubaccountWithdraw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSubaccountWithdraw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSubaccountWithdraw.Merge(m, src)
}
func (m *EventSubaccountWithdraw) XXX_Size() int {
	return m.Size()
}
func (m *EventSubaccountWithdraw) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSubaccountWithdraw.DiscardUnknown(m)
}

var xxx_messageInfo_EventSubaccountWithdraw proto.InternalMessageInfo

func (m *EventSubaccountWithdraw) GetSubaccountId() []byte {
	if m != nil {
		return m.SubaccountId
	}
	return nil
}

func (m *EventSubaccountWithdraw) GetDstAddress() string {
	if m != nil {
		return m.DstAddress
	}
	return ""
}

func (m *EventSubaccountWithdraw) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

type EventSubaccountBalanceTransfer struct {
	SrcSubaccountId string     `protobuf:"bytes,1,opt,name=src_subaccount_id,json=srcSubaccountId,proto3" json:"src_subaccount_id,omitempty"`
	DstSubaccountId string     `protobuf:"bytes,2,opt,name=dst_subaccount_id,json=dstSubaccountId,proto3" json:"dst_subaccount_id,omitempty"`
	Amount          types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
}

func (m *EventSubaccountBalanceTransfer) Reset()         { *m = EventSubaccountBalanceTransfer{} }
func (m *EventSubaccountBalanceTransfer) String() string { return proto.CompactTextString(m) }
func (*EventSubaccountBalanceTransfer) ProtoMessage()    {}
func (*EventSubaccountBalanceTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{19}
}
func (m *EventSubaccountBalanceTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSubaccountBalanceTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSubaccountBalanceTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSubaccountBalanceTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSubaccountBalanceTransfer.Merge(m, src)
}
func (m *EventSubaccountBalanceTransfer) XXX_Size() int {
	return m.Size()
}
func (m *EventSubaccountBalanceTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSubaccountBalanceTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_EventSubaccountBalanceTransfer proto.InternalMessageInfo

func (m *EventSubaccountBalanceTransfer) GetSrcSubaccountId() string {
	if m != nil {
		return m.SrcSubaccountId
	}
	return ""
}

func (m *EventSubaccountBalanceTransfer) GetDstSubaccountId() string {
	if m != nil {
		return m.DstSubaccountId
	}
	return ""
}

func (m *EventSubaccountBalanceTransfer) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

type EventBatchDepositUpdate struct {
	DepositUpdates []*DepositUpdate `protobuf:"bytes,1,rep,name=deposit_updates,json=depositUpdates,proto3" json:"deposit_updates,omitempty"`
}

func (m *EventBatchDepositUpdate) Reset()         { *m = EventBatchDepositUpdate{} }
func (m *EventBatchDepositUpdate) String() string { return proto.CompactTextString(m) }
func (*EventBatchDepositUpdate) ProtoMessage()    {}
func (*EventBatchDepositUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{20}
}
func (m *EventBatchDepositUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBatchDepositUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBatchDepositUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBatchDepositUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBatchDepositUpdate.Merge(m, src)
}
func (m *EventBatchDepositUpdate) XXX_Size() int {
	return m.Size()
}
func (m *EventBatchDepositUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBatchDepositUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_EventBatchDepositUpdate proto.InternalMessageInfo

func (m *EventBatchDepositUpdate) GetDepositUpdates() []*DepositUpdate {
	if m != nil {
		return m.DepositUpdates
	}
	return nil
}

type DerivativeMarketOrderCancel struct {
	MarketOrder    *DerivativeMarketOrder      `protobuf:"bytes,1,opt,name=market_order,json=marketOrder,proto3" json:"market_order,omitempty"`
	CancelQuantity cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=cancel_quantity,json=cancelQuantity,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"cancel_quantity"`
}

func (m *DerivativeMarketOrderCancel) Reset()         { *m = DerivativeMarketOrderCancel{} }
func (m *DerivativeMarketOrderCancel) String() string { return proto.CompactTextString(m) }
func (*DerivativeMarketOrderCancel) ProtoMessage()    {}
func (*DerivativeMarketOrderCancel) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{21}
}
func (m *DerivativeMarketOrderCancel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DerivativeMarketOrderCancel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DerivativeMarketOrderCancel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DerivativeMarketOrderCancel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DerivativeMarketOrderCancel.Merge(m, src)
}
func (m *DerivativeMarketOrderCancel) XXX_Size() int {
	return m.Size()
}
func (m *DerivativeMarketOrderCancel) XXX_DiscardUnknown() {
	xxx_messageInfo_DerivativeMarketOrderCancel.DiscardUnknown(m)
}

var xxx_messageInfo_DerivativeMarketOrderCancel proto.InternalMessageInfo

func (m *DerivativeMarketOrderCancel) GetMarketOrder() *DerivativeMarketOrder {
	if m != nil {
		return m.MarketOrder
	}
	return nil
}

type EventCancelDerivativeOrder struct {
	MarketId          string                       `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	IsLimitCancel     bool                         `protobuf:"varint,2,opt,name=isLimitCancel,proto3" json:"isLimitCancel,omitempty"`
	LimitOrder        *DerivativeLimitOrder        `protobuf:"bytes,3,opt,name=limit_order,json=limitOrder,proto3" json:"limit_order,omitempty"`
	MarketOrderCancel *DerivativeMarketOrderCancel `protobuf:"bytes,4,opt,name=market_order_cancel,json=marketOrderCancel,proto3" json:"market_order_cancel,omitempty"`
}

func (m *EventCancelDerivativeOrder) Reset()         { *m = EventCancelDerivativeOrder{} }
func (m *EventCancelDerivativeOrder) String() string { return proto.CompactTextString(m) }
func (*EventCancelDerivativeOrder) ProtoMessage()    {}
func (*EventCancelDerivativeOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{22}
}
func (m *EventCancelDerivativeOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCancelDerivativeOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCancelDerivativeOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCancelDerivativeOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCancelDerivativeOrder.Merge(m, src)
}
func (m *EventCancelDerivativeOrder) XXX_Size() int {
	return m.Size()
}
func (m *EventCancelDerivativeOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCancelDerivativeOrder.DiscardUnknown(m)
}

var xxx_messageInfo_EventCancelDerivativeOrder proto.InternalMessageInfo

func (m *EventCancelDerivativeOrder) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *EventCancelDerivativeOrder) GetIsLimitCancel() bool {
	if m != nil {
		return m.IsLimitCancel
	}
	return false
}

func (m *EventCancelDerivativeOrder) GetLimitOrder() *DerivativeLimitOrder {
	if m != nil {
		return m.LimitOrder
	}
	return nil
}

func (m *EventCancelDerivativeOrder) GetMarketOrderCancel() *DerivativeMarketOrderCancel {
	if m != nil {
		return m.MarketOrderCancel
	}
	return nil
}

type EventFeeDiscountSchedule struct {
	Schedule *FeeDiscountSchedule `protobuf:"bytes,1,opt,name=schedule,proto3" json:"schedule,omitempty"`
}

func (m *EventFeeDiscountSchedule) Reset()         { *m = EventFeeDiscountSchedule{} }
func (m *EventFeeDiscountSchedule) String() string { return proto.CompactTextString(m) }
func (*EventFeeDiscountSchedule) ProtoMessage()    {}
func (*EventFeeDiscountSchedule) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{23}
}
func (m *EventFeeDiscountSchedule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventFeeDiscountSchedule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventFeeDiscountSchedule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventFeeDiscountSchedule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventFeeDiscountSchedule.Merge(m, src)
}
func (m *EventFeeDiscountSchedule) XXX_Size() int {
	return m.Size()
}
func (m *EventFeeDiscountSchedule) XXX_DiscardUnknown() {
	xxx_messageInfo_EventFeeDiscountSchedule.DiscardUnknown(m)
}

var xxx_messageInfo_EventFeeDiscountSchedule proto.InternalMessageInfo

func (m *EventFeeDiscountSchedule) GetSchedule() *FeeDiscountSchedule {
	if m != nil {
		return m.Schedule
	}
	return nil
}

type EventTradingRewardCampaignUpdate struct {
	CampaignInfo        *TradingRewardCampaignInfo `protobuf:"bytes,1,opt,name=campaign_info,json=campaignInfo,proto3" json:"campaign_info,omitempty"`
	CampaignRewardPools []*CampaignRewardPool      `protobuf:"bytes,2,rep,name=campaign_reward_pools,json=campaignRewardPools,proto3" json:"campaign_reward_pools,omitempty"`
}

func (m *EventTradingRewardCampaignUpdate) Reset()         { *m = EventTradingRewardCampaignUpdate{} }
func (m *EventTradingRewardCampaignUpdate) String() string { return proto.CompactTextString(m) }
func (*EventTradingRewardCampaignUpdate) ProtoMessage()    {}
func (*EventTradingRewardCampaignUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{24}
}
func (m *EventTradingRewardCampaignUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventTradingRewardCampaignUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventTradingRewardCampaignUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventTradingRewardCampaignUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventTradingRewardCampaignUpdate.Merge(m, src)
}
func (m *EventTradingRewardCampaignUpdate) XXX_Size() int {
	return m.Size()
}
func (m *EventTradingRewardCampaignUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_EventTradingRewardCampaignUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_EventTradingRewardCampaignUpdate proto.InternalMessageInfo

func (m *EventTradingRewardCampaignUpdate) GetCampaignInfo() *TradingRewardCampaignInfo {
	if m != nil {
		return m.CampaignInfo
	}
	return nil
}

func (m *EventTradingRewardCampaignUpdate) GetCampaignRewardPools() []*CampaignRewardPool {
	if m != nil {
		return m.CampaignRewardPools
	}
	return nil
}

type EventTradingRewardDistribution struct {
	AccountRewards []*AccountRewards `protobuf:"bytes,1,rep,name=account_rewards,json=accountRewards,proto3" json:"account_rewards,omitempty"`
}

func (m *EventTradingRewardDistribution) Reset()         { *m = EventTradingRewardDistribution{} }
func (m *EventTradingRewardDistribution) String() string { return proto.CompactTextString(m) }
func (*EventTradingRewardDistribution) ProtoMessage()    {}
func (*EventTradingRewardDistribution) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{25}
}
func (m *EventTradingRewardDistribution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventTradingRewardDistribution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventTradingRewardDistribution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventTradingRewardDistribution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventTradingRewardDistribution.Merge(m, src)
}
func (m *EventTradingRewardDistribution) XXX_Size() int {
	return m.Size()
}
func (m *EventTradingRewardDistribution) XXX_DiscardUnknown() {
	xxx_messageInfo_EventTradingRewardDistribution.DiscardUnknown(m)
}

var xxx_messageInfo_EventTradingRewardDistribution proto.InternalMessageInfo

func (m *EventTradingRewardDistribution) GetAccountRewards() []*AccountRewards {
	if m != nil {
		return m.AccountRewards
	}
	return nil
}

type EventNewConditionalDerivativeOrder struct {
	MarketId string           `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	Order    *DerivativeOrder `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"`
	Hash     []byte           `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	IsMarket bool             `protobuf:"varint,4,opt,name=is_market,json=isMarket,proto3" json:"is_market,omitempty"`
}

func (m *EventNewConditionalDerivativeOrder) Reset()         { *m = EventNewConditionalDerivativeOrder{} }
func (m *EventNewConditionalDerivativeOrder) String() string { return proto.CompactTextString(m) }
func (*EventNewConditionalDerivativeOrder) ProtoMessage()    {}
func (*EventNewConditionalDerivativeOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{26}
}
func (m *EventNewConditionalDerivativeOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventNewConditionalDerivativeOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventNewConditionalDerivativeOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventNewConditionalDerivativeOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventNewConditionalDerivativeOrder.Merge(m, src)
}
func (m *EventNewConditionalDerivativeOrder) XXX_Size() int {
	return m.Size()
}
func (m *EventNewConditionalDerivativeOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_EventNewConditionalDerivativeOrder.DiscardUnknown(m)
}

var xxx_messageInfo_EventNewConditionalDerivativeOrder proto.InternalMessageInfo

func (m *EventNewConditionalDerivativeOrder) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *EventNewConditionalDerivativeOrder) GetOrder() *DerivativeOrder {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *EventNewConditionalDerivativeOrder) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *EventNewConditionalDerivativeOrder) GetIsMarket() bool {
	if m != nil {
		return m.IsMarket
	}
	return false
}

type EventCancelConditionalDerivativeOrder struct {
	MarketId      string                 `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	IsLimitCancel bool                   `protobuf:"varint,2,opt,name=isLimitCancel,proto3" json:"isLimitCancel,omitempty"`
	LimitOrder    *DerivativeLimitOrder  `protobuf:"bytes,3,opt,name=limit_order,json=limitOrder,proto3" json:"limit_order,omitempty"`
	MarketOrder   *DerivativeMarketOrder `protobuf:"bytes,4,opt,name=market_order,json=marketOrder,proto3" json:"market_order,omitempty"`
}

func (m *EventCancelConditionalDerivativeOrder) Reset()         { *m = EventCancelConditionalDerivativeOrder{} }
func (m *EventCancelConditionalDerivativeOrder) String() string { return proto.CompactTextString(m) }
func (*EventCancelConditionalDerivativeOrder) ProtoMessage()    {}
func (*EventCancelConditionalDerivativeOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{27}
}
func (m *EventCancelConditionalDerivativeOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCancelConditionalDerivativeOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCancelConditionalDerivativeOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCancelConditionalDerivativeOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCancelConditionalDerivativeOrder.Merge(m, src)
}
func (m *EventCancelConditionalDerivativeOrder) XXX_Size() int {
	return m.Size()
}
func (m *EventCancelConditionalDerivativeOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCancelConditionalDerivativeOrder.DiscardUnknown(m)
}

var xxx_messageInfo_EventCancelConditionalDerivativeOrder proto.InternalMessageInfo

func (m *EventCancelConditionalDerivativeOrder) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *EventCancelConditionalDerivativeOrder) GetIsLimitCancel() bool {
	if m != nil {
		return m.IsLimitCancel
	}
	return false
}

func (m *EventCancelConditionalDerivativeOrder) GetLimitOrder() *DerivativeLimitOrder {
	if m != nil {
		return m.LimitOrder
	}
	return nil
}

func (m *EventCancelConditionalDerivativeOrder) GetMarketOrder() *DerivativeMarketOrder {
	if m != nil {
		return m.MarketOrder
	}
	return nil
}

type EventConditionalDerivativeOrderTrigger struct {
	MarketId           []byte `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	IsLimitTrigger     bool   `protobuf:"varint,2,opt,name=isLimitTrigger,proto3" json:"isLimitTrigger,omitempty"`
	TriggeredOrderHash []byte `protobuf:"bytes,3,opt,name=triggered_order_hash,json=triggeredOrderHash,proto3" json:"triggered_order_hash,omitempty"`
	PlacedOrderHash    []byte `protobuf:"bytes,4,opt,name=placed_order_hash,json=placedOrderHash,proto3" json:"placed_order_hash,omitempty"`
	TriggeredOrderCid  string `protobuf:"bytes,5,opt,name=triggered_order_cid,json=triggeredOrderCid,proto3" json:"triggered_order_cid,omitempty"`
}

func (m *EventConditionalDerivativeOrderTrigger) Reset() {
	*m = EventConditionalDerivativeOrderTrigger{}
}
func (m *EventConditionalDerivativeOrderTrigger) String() string { return proto.CompactTextString(m) }
func (*EventConditionalDerivativeOrderTrigger) ProtoMessage()    {}
func (*EventConditionalDerivativeOrderTrigger) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{28}
}
func (m *EventConditionalDerivativeOrderTrigger) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventConditionalDerivativeOrderTrigger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventConditionalDerivativeOrderTrigger.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventConditionalDerivativeOrderTrigger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventConditionalDerivativeOrderTrigger.Merge(m, src)
}
func (m *EventConditionalDerivativeOrderTrigger) XXX_Size() int {
	return m.Size()
}
func (m *EventConditionalDerivativeOrderTrigger) XXX_DiscardUnknown() {
	xxx_messageInfo_EventConditionalDerivativeOrderTrigger.DiscardUnknown(m)
}

var xxx_messageInfo_EventConditionalDerivativeOrderTrigger proto.InternalMessageInfo

func (m *EventConditionalDerivativeOrderTrigger) GetMarketId() []byte {
	if m != nil {
		return m.MarketId
	}
	return nil
}

func (m *EventConditionalDerivativeOrderTrigger) GetIsLimitTrigger() bool {
	if m != nil {
		return m.IsLimitTrigger
	}
	return false
}

func (m *EventConditionalDerivativeOrderTrigger) GetTriggeredOrderHash() []byte {
	if m != nil {
		return m.TriggeredOrderHash
	}
	return nil
}

func (m *EventConditionalDerivativeOrderTrigger) GetPlacedOrderHash() []byte {
	if m != nil {
		return m.PlacedOrderHash
	}
	return nil
}

func (m *EventConditionalDerivativeOrderTrigger) GetTriggeredOrderCid() string {
	if m != nil {
		return m.TriggeredOrderCid
	}
	return ""
}

type EventOrderFail struct {
	Account []byte   `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Hashes  [][]byte `protobuf:"bytes,2,rep,name=hashes,proto3" json:"hashes,omitempty"`
	Flags   []uint32 `protobuf:"varint,3,rep,packed,name=flags,proto3" json:"flags,omitempty"`
	Cids    []string `protobuf:"bytes,4,rep,name=cids,proto3" json:"cids,omitempty"`
}

func (m *EventOrderFail) Reset()         { *m = EventOrderFail{} }
func (m *EventOrderFail) String() string { return proto.CompactTextString(m) }
func (*EventOrderFail) ProtoMessage()    {}
func (*EventOrderFail) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{29}
}
func (m *EventOrderFail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOrderFail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOrderFail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOrderFail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOrderFail.Merge(m, src)
}
func (m *EventOrderFail) XXX_Size() int {
	return m.Size()
}
func (m *EventOrderFail) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOrderFail.DiscardUnknown(m)
}

var xxx_messageInfo_EventOrderFail proto.InternalMessageInfo

func (m *EventOrderFail) GetAccount() []byte {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *EventOrderFail) GetHashes() [][]byte {
	if m != nil {
		return m.Hashes
	}
	return nil
}

func (m *EventOrderFail) GetFlags() []uint32 {
	if m != nil {
		return m.Flags
	}
	return nil
}

func (m *EventOrderFail) GetCids() []string {
	if m != nil {
		return m.Cids
	}
	return nil
}

type EventAtomicMarketOrderFeeMultipliersUpdated struct {
	MarketFeeMultipliers []*MarketFeeMultiplier `protobuf:"bytes,1,rep,name=market_fee_multipliers,json=marketFeeMultipliers,proto3" json:"market_fee_multipliers,omitempty"`
}

func (m *EventAtomicMarketOrderFeeMultipliersUpdated) Reset() {
	*m = EventAtomicMarketOrderFeeMultipliersUpdated{}
}
func (m *EventAtomicMarketOrderFeeMultipliersUpdated) String() string {
	return proto.CompactTextString(m)
}
func (*EventAtomicMarketOrderFeeMultipliersUpdated) ProtoMessage() {}
func (*EventAtomicMarketOrderFeeMultipliersUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{30}
}
func (m *EventAtomicMarketOrderFeeMultipliersUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAtomicMarketOrderFeeMultipliersUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAtomicMarketOrderFeeMultipliersUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAtomicMarketOrderFeeMultipliersUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAtomicMarketOrderFeeMultipliersUpdated.Merge(m, src)
}
func (m *EventAtomicMarketOrderFeeMultipliersUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventAtomicMarketOrderFeeMultipliersUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAtomicMarketOrderFeeMultipliersUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventAtomicMarketOrderFeeMultipliersUpdated proto.InternalMessageInfo

func (m *EventAtomicMarketOrderFeeMultipliersUpdated) GetMarketFeeMultipliers() []*MarketFeeMultiplier {
	if m != nil {
		return m.MarketFeeMultipliers
	}
	return nil
}

type EventOrderbookUpdate struct {
	SpotUpdates       []*OrderbookUpdate `protobuf:"bytes,1,rep,name=spot_updates,json=spotUpdates,proto3" json:"spot_updates,omitempty"`
	DerivativeUpdates []*OrderbookUpdate `protobuf:"bytes,2,rep,name=derivative_updates,json=derivativeUpdates,proto3" json:"derivative_updates,omitempty"`
}

func (m *EventOrderbookUpdate) Reset()         { *m = EventOrderbookUpdate{} }
func (m *EventOrderbookUpdate) String() string { return proto.CompactTextString(m) }
func (*EventOrderbookUpdate) ProtoMessage()    {}
func (*EventOrderbookUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{31}
}
func (m *EventOrderbookUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOrderbookUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOrderbookUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOrderbookUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOrderbookUpdate.Merge(m, src)
}
func (m *EventOrderbookUpdate) XXX_Size() int {
	return m.Size()
}
func (m *EventOrderbookUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOrderbookUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_EventOrderbookUpdate proto.InternalMessageInfo

func (m *EventOrderbookUpdate) GetSpotUpdates() []*OrderbookUpdate {
	if m != nil {
		return m.SpotUpdates
	}
	return nil
}

func (m *EventOrderbookUpdate) GetDerivativeUpdates() []*OrderbookUpdate {
	if m != nil {
		return m.DerivativeUpdates
	}
	return nil
}

type OrderbookUpdate struct {
	Seq       uint64     `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	Orderbook *Orderbook `protobuf:"bytes,2,opt,name=orderbook,proto3" json:"orderbook,omitempty"`
}

func (m *OrderbookUpdate) Reset()         { *m = OrderbookUpdate{} }
func (m *OrderbookUpdate) String() string { return proto.CompactTextString(m) }
func (*OrderbookUpdate) ProtoMessage()    {}
func (*OrderbookUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{32}
}
func (m *OrderbookUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderbookUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderbookUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderbookUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderbookUpdate.Merge(m, src)
}
func (m *OrderbookUpdate) XXX_Size() int {
	return m.Size()
}
func (m *OrderbookUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderbookUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_OrderbookUpdate proto.InternalMessageInfo

func (m *OrderbookUpdate) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *OrderbookUpdate) GetOrderbook() *Orderbook {
	if m != nil {
		return m.Orderbook
	}
	return nil
}

type Orderbook struct {
	MarketId   []byte   `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	BuyLevels  []*Level `protobuf:"bytes,2,rep,name=buy_levels,json=buyLevels,proto3" json:"buy_levels,omitempty"`
	SellLevels []*Level `protobuf:"bytes,3,rep,name=sell_levels,json=sellLevels,proto3" json:"sell_levels,omitempty"`
}

func (m *Orderbook) Reset()         { *m = Orderbook{} }
func (m *Orderbook) String() string { return proto.CompactTextString(m) }
func (*Orderbook) ProtoMessage()    {}
func (*Orderbook) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{33}
}
func (m *Orderbook) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Orderbook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Orderbook.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Orderbook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Orderbook.Merge(m, src)
}
func (m *Orderbook) XXX_Size() int {
	return m.Size()
}
func (m *Orderbook) XXX_DiscardUnknown() {
	xxx_messageInfo_Orderbook.DiscardUnknown(m)
}

var xxx_messageInfo_Orderbook proto.InternalMessageInfo

func (m *Orderbook) GetMarketId() []byte {
	if m != nil {
		return m.MarketId
	}
	return nil
}

func (m *Orderbook) GetBuyLevels() []*Level {
	if m != nil {
		return m.BuyLevels
	}
	return nil
}

func (m *Orderbook) GetSellLevels() []*Level {
	if m != nil {
		return m.SellLevels
	}
	return nil
}

type EventGrantAuthorizations struct {
	Granter string                `protobuf:"bytes,1,opt,name=granter,proto3" json:"granter,omitempty"`
	Grants  []*GrantAuthorization `protobuf:"bytes,2,rep,name=grants,proto3" json:"grants,omitempty"`
}

func (m *EventGrantAuthorizations) Reset()         { *m = EventGrantAuthorizations{} }
func (m *EventGrantAuthorizations) String() string { return proto.CompactTextString(m) }
func (*EventGrantAuthorizations) ProtoMessage()    {}
func (*EventGrantAuthorizations) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{34}
}
func (m *EventGrantAuthorizations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventGrantAuthorizations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventGrantAuthorizations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventGrantAuthorizations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventGrantAuthorizations.Merge(m, src)
}
func (m *EventGrantAuthorizations) XXX_Size() int {
	return m.Size()
}
func (m *EventGrantAuthorizations) XXX_DiscardUnknown() {
	xxx_messageInfo_EventGrantAuthorizations.DiscardUnknown(m)
}

var xxx_messageInfo_EventGrantAuthorizations proto.InternalMessageInfo

func (m *EventGrantAuthorizations) GetGranter() string {
	if m != nil {
		return m.Granter
	}
	return ""
}

func (m *EventGrantAuthorizations) GetGrants() []*GrantAuthorization {
	if m != nil {
		return m.Grants
	}
	return nil
}

type EventGrantActivation struct {
	Grantee string                `protobuf:"bytes,1,opt,name=grantee,proto3" json:"grantee,omitempty"`
	Granter string                `protobuf:"bytes,2,opt,name=granter,proto3" json:"granter,omitempty"`
	Amount  cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *EventGrantActivation) Reset()         { *m = EventGrantActivation{} }
func (m *EventGrantActivation) String() string { return proto.CompactTextString(m) }
func (*EventGrantActivation) ProtoMessage()    {}
func (*EventGrantActivation) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{35}
}
func (m *EventGrantActivation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventGrantActivation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventGrantActivation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventGrantActivation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventGrantActivation.Merge(m, src)
}
func (m *EventGrantActivation) XXX_Size() int {
	return m.Size()
}
func (m *EventGrantActivation) XXX_DiscardUnknown() {
	xxx_messageInfo_EventGrantActivation.DiscardUnknown(m)
}

var xxx_messageInfo_EventGrantActivation proto.InternalMessageInfo

func (m *EventGrantActivation) GetGrantee() string {
	if m != nil {
		return m.Grantee
	}
	return ""
}

func (m *EventGrantActivation) GetGranter() string {
	if m != nil {
		return m.Granter
	}
	return ""
}

type EventInvalidGrant struct {
	Grantee string `protobuf:"bytes,1,opt,name=grantee,proto3" json:"grantee,omitempty"`
	Granter string `protobuf:"bytes,2,opt,name=granter,proto3" json:"granter,omitempty"`
}

func (m *EventInvalidGrant) Reset()         { *m = EventInvalidGrant{} }
func (m *EventInvalidGrant) String() string { return proto.CompactTextString(m) }
func (*EventInvalidGrant) ProtoMessage()    {}
func (*EventInvalidGrant) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{36}
}
func (m *EventInvalidGrant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventInvalidGrant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventInvalidGrant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventInvalidGrant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventInvalidGrant.Merge(m, src)
}
func (m *EventInvalidGrant) XXX_Size() int {
	return m.Size()
}
func (m *EventInvalidGrant) XXX_DiscardUnknown() {
	xxx_messageInfo_EventInvalidGrant.DiscardUnknown(m)
}

var xxx_messageInfo_EventInvalidGrant proto.InternalMessageInfo

func (m *EventInvalidGrant) GetGrantee() string {
	if m != nil {
		return m.Grantee
	}
	return ""
}

func (m *EventInvalidGrant) GetGranter() string {
	if m != nil {
		return m.Granter
	}
	return ""
}

type EventOrderCancelFail struct {
	MarketId     string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	SubaccountId string `protobuf:"bytes,2,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	OrderHash    string `protobuf:"bytes,3,opt,name=order_hash,json=orderHash,proto3" json:"order_hash,omitempty"`
	Cid          string `protobuf:"bytes,4,opt,name=cid,proto3" json:"cid,omitempty"`
	Description  string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *EventOrderCancelFail) Reset()         { *m = EventOrderCancelFail{} }
func (m *EventOrderCancelFail) String() string { return proto.CompactTextString(m) }
func (*EventOrderCancelFail) ProtoMessage()    {}
func (*EventOrderCancelFail) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{37}
}
func (m *EventOrderCancelFail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOrderCancelFail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOrderCancelFail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOrderCancelFail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOrderCancelFail.Merge(m, src)
}
func (m *EventOrderCancelFail) XXX_Size() int {
	return m.Size()
}
func (m *EventOrderCancelFail) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOrderCancelFail.DiscardUnknown(m)
}

var xxx_messageInfo_EventOrderCancelFail proto.InternalMessageInfo

func (m *EventOrderCancelFail) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *EventOrderCancelFail) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

func (m *EventOrderCancelFail) GetOrderHash() string {
	if m != nil {
		return m.OrderHash
	}
	return ""
}

func (m *EventOrderCancelFail) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *EventOrderCancelFail) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type EventDerivativeOrdersV2Migration struct {
	MarketId         string                      `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	BuyOrderChanges  []*DerivativeOrderV2Changes `protobuf:"bytes,2,rep,name=buy_order_changes,json=buyOrderChanges,proto3" json:"buy_order_changes,omitempty"`
	SellOrderChanges []*DerivativeOrderV2Changes `protobuf:"bytes,3,rep,name=sell_order_changes,json=sellOrderChanges,proto3" json:"sell_order_changes,omitempty"`
}

func (m *EventDerivativeOrdersV2Migration) Reset()         { *m = EventDerivativeOrdersV2Migration{} }
func (m *EventDerivativeOrdersV2Migration) String() string { return proto.CompactTextString(m) }
func (*EventDerivativeOrdersV2Migration) ProtoMessage()    {}
func (*EventDerivativeOrdersV2Migration) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{38}
}
func (m *EventDerivativeOrdersV2Migration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDerivativeOrdersV2Migration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDerivativeOrdersV2Migration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDerivativeOrdersV2Migration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDerivativeOrdersV2Migration.Merge(m, src)
}
func (m *EventDerivativeOrdersV2Migration) XXX_Size() int {
	return m.Size()
}
func (m *EventDerivativeOrdersV2Migration) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDerivativeOrdersV2Migration.DiscardUnknown(m)
}

var xxx_messageInfo_EventDerivativeOrdersV2Migration proto.InternalMessageInfo

func (m *EventDerivativeOrdersV2Migration) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *EventDerivativeOrdersV2Migration) GetBuyOrderChanges() []*DerivativeOrderV2Changes {
	if m != nil {
		return m.BuyOrderChanges
	}
	return nil
}

func (m *EventDerivativeOrdersV2Migration) GetSellOrderChanges() []*DerivativeOrderV2Changes {
	if m != nil {
		return m.SellOrderChanges
	}
	return nil
}

type DerivativeOrderV2Changes struct {
	Cid  string `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	Hash []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// price of the order
	P cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=p,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"p"`
	// quantity of the order
	Q cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=q,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"q"`
	// margin of the order
	M cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=m,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"m"`
	// the amount of the quantity remaining fillable
	F cosmossdk_io_math.LegacyDec `protobuf:"bytes,6,opt,name=f,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"f"`
	// trigger price of the order
	Tp *cosmossdk_io_math.LegacyDec `protobuf:"bytes,7,opt,name=tp,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"tp,omitempty"`
}

func (m *DerivativeOrderV2Changes) Reset()         { *m = DerivativeOrderV2Changes{} }
func (m *DerivativeOrderV2Changes) String() string { return proto.CompactTextString(m) }
func (*DerivativeOrderV2Changes) ProtoMessage()    {}
func (*DerivativeOrderV2Changes) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{39}
}
func (m *DerivativeOrderV2Changes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DerivativeOrderV2Changes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DerivativeOrderV2Changes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DerivativeOrderV2Changes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DerivativeOrderV2Changes.Merge(m, src)
}
func (m *DerivativeOrderV2Changes) XXX_Size() int {
	return m.Size()
}
func (m *DerivativeOrderV2Changes) XXX_DiscardUnknown() {
	xxx_messageInfo_DerivativeOrderV2Changes.DiscardUnknown(m)
}

var xxx_messageInfo_DerivativeOrderV2Changes proto.InternalMessageInfo

func (m *DerivativeOrderV2Changes) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *DerivativeOrderV2Changes) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type EventSpotOrdersV2Migration struct {
	MarketId         string                `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	BuyOrderChanges  []*SpotOrderV2Changes `protobuf:"bytes,2,rep,name=buy_order_changes,json=buyOrderChanges,proto3" json:"buy_order_changes,omitempty"`
	SellOrderChanges []*SpotOrderV2Changes `protobuf:"bytes,3,rep,name=sell_order_changes,json=sellOrderChanges,proto3" json:"sell_order_changes,omitempty"`
}

func (m *EventSpotOrdersV2Migration) Reset()         { *m = EventSpotOrdersV2Migration{} }
func (m *EventSpotOrdersV2Migration) String() string { return proto.CompactTextString(m) }
func (*EventSpotOrdersV2Migration) ProtoMessage()    {}
func (*EventSpotOrdersV2Migration) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{40}
}
func (m *EventSpotOrdersV2Migration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSpotOrdersV2Migration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSpotOrdersV2Migration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSpotOrdersV2Migration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSpotOrdersV2Migration.Merge(m, src)
}
func (m *EventSpotOrdersV2Migration) XXX_Size() int {
	return m.Size()
}
func (m *EventSpotOrdersV2Migration) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSpotOrdersV2Migration.DiscardUnknown(m)
}

var xxx_messageInfo_EventSpotOrdersV2Migration proto.InternalMessageInfo

func (m *EventSpotOrdersV2Migration) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *EventSpotOrdersV2Migration) GetBuyOrderChanges() []*SpotOrderV2Changes {
	if m != nil {
		return m.BuyOrderChanges
	}
	return nil
}

func (m *EventSpotOrdersV2Migration) GetSellOrderChanges() []*SpotOrderV2Changes {
	if m != nil {
		return m.SellOrderChanges
	}
	return nil
}

type SpotOrderV2Changes struct {
	Cid  string `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	Hash []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// price of the order
	P cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=p,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"p"`
	// quantity of the order
	Q cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=q,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"q"`
	// the amount of the quantity remaining fillable
	F cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=f,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"f"`
	// trigger_price is the trigger price used by stop/take orders
	Tp *cosmossdk_io_math.LegacyDec `protobuf:"bytes,6,opt,name=tp,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"tp,omitempty"`
}

func (m *SpotOrderV2Changes) Reset()         { *m = SpotOrderV2Changes{} }
func (m *SpotOrderV2Changes) String() string { return proto.CompactTextString(m) }
func (*SpotOrderV2Changes) ProtoMessage()    {}
func (*SpotOrderV2Changes) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{41}
}
func (m *SpotOrderV2Changes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpotOrderV2Changes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpotOrderV2Changes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpotOrderV2Changes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpotOrderV2Changes.Merge(m, src)
}
func (m *SpotOrderV2Changes) XXX_Size() int {
	return m.Size()
}
func (m *SpotOrderV2Changes) XXX_DiscardUnknown() {
	xxx_messageInfo_SpotOrderV2Changes.DiscardUnknown(m)
}

var xxx_messageInfo_SpotOrderV2Changes proto.InternalMessageInfo

func (m *SpotOrderV2Changes) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *SpotOrderV2Changes) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type EventDerivativePositionV2Migration struct {
	Position *DerivativePosition `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
}

func (m *EventDerivativePositionV2Migration) Reset()         { *m = EventDerivativePositionV2Migration{} }
func (m *EventDerivativePositionV2Migration) String() string { return proto.CompactTextString(m) }
func (*EventDerivativePositionV2Migration) ProtoMessage()    {}
func (*EventDerivativePositionV2Migration) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac8f3da550fa1c4, []int{42}
}
func (m *EventDerivativePositionV2Migration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDerivativePositionV2Migration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDerivativePositionV2Migration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDerivativePositionV2Migration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDerivativePositionV2Migration.Merge(m, src)
}
func (m *EventDerivativePositionV2Migration) XXX_Size() int {
	return m.Size()
}
func (m *EventDerivativePositionV2Migration) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDerivativePositionV2Migration.DiscardUnknown(m)
}

var xxx_messageInfo_EventDerivativePositionV2Migration proto.InternalMessageInfo

func (m *EventDerivativePositionV2Migration) GetPosition() *DerivativePosition {
	if m != nil {
		return m.Position
	}
	return nil
}

func init() {
	proto.RegisterType((*EventBatchSpotExecution)(nil), "injective.exchange.v2.EventBatchSpotExecution")
	proto.RegisterType((*EventBatchDerivativeExecution)(nil), "injective.exchange.v2.EventBatchDerivativeExecution")
	proto.RegisterType((*EventLostFundsFromLiquidation)(nil), "injective.exchange.v2.EventLostFundsFromLiquidation")
	proto.RegisterType((*EventBatchDerivativePosition)(nil), "injective.exchange.v2.EventBatchDerivativePosition")
	proto.RegisterType((*EventDerivativeMarketPaused)(nil), "injective.exchange.v2.EventDerivativeMarketPaused")
	proto.RegisterType((*EventSettledMarketBalance)(nil), "injective.exchange.v2.EventSettledMarketBalance")
	proto.RegisterType((*EventNotSettledMarketBalance)(nil), "injective.exchange.v2.EventNotSettledMarketBalance")
	proto.RegisterType((*EventMarketBeyondBankruptcy)(nil), "injective.exchange.v2.EventMarketBeyondBankruptcy")
	proto.RegisterType((*EventAllPositionsHaircut)(nil), "injective.exchange.v2.EventAllPositionsHaircut")
	proto.RegisterType((*EventBinaryOptionsMarketUpdate)(nil), "injective.exchange.v2.EventBinaryOptionsMarketUpdate")
	proto.RegisterType((*EventNewSpotOrders)(nil), "injective.exchange.v2.EventNewSpotOrders")
	proto.RegisterType((*EventNewDerivativeOrders)(nil), "injective.exchange.v2.EventNewDerivativeOrders")
	proto.RegisterType((*EventCancelSpotOrder)(nil), "injective.exchange.v2.EventCancelSpotOrder")
	proto.RegisterType((*EventSpotMarketUpdate)(nil), "injective.exchange.v2.EventSpotMarketUpdate")
	proto.RegisterType((*EventPerpetualMarketUpdate)(nil), "injective.exchange.v2.EventPerpetualMarketUpdate")
	proto.RegisterType((*EventExpiryFuturesMarketUpdate)(nil), "injective.exchange.v2.EventExpiryFuturesMarketUpdate")
	proto.RegisterType((*EventPerpetualMarketFundingUpdate)(nil), "injective.exchange.v2.EventPerpetualMarketFundingUpdate")
	proto.RegisterType((*EventSubaccountDeposit)(nil), "injective.exchange.v2.EventSubaccountDeposit")
	proto.RegisterType((*EventSubaccountWithdraw)(nil), "injective.exchange.v2.EventSubaccountWithdraw")
	proto.RegisterType((*EventSubaccountBalanceTransfer)(nil), "injective.exchange.v2.EventSubaccountBalanceTransfer")
	proto.RegisterType((*EventBatchDepositUpdate)(nil), "injective.exchange.v2.EventBatchDepositUpdate")
	proto.RegisterType((*DerivativeMarketOrderCancel)(nil), "injective.exchange.v2.DerivativeMarketOrderCancel")
	proto.RegisterType((*EventCancelDerivativeOrder)(nil), "injective.exchange.v2.EventCancelDerivativeOrder")
	proto.RegisterType((*EventFeeDiscountSchedule)(nil), "injective.exchange.v2.EventFeeDiscountSchedule")
	proto.RegisterType((*EventTradingRewardCampaignUpdate)(nil), "injective.exchange.v2.EventTradingRewardCampaignUpdate")
	proto.RegisterType((*EventTradingRewardDistribution)(nil), "injective.exchange.v2.EventTradingRewardDistribution")
	proto.RegisterType((*EventNewConditionalDerivativeOrder)(nil), "injective.exchange.v2.EventNewConditionalDerivativeOrder")
	proto.RegisterType((*EventCancelConditionalDerivativeOrder)(nil), "injective.exchange.v2.EventCancelConditionalDerivativeOrder")
	proto.RegisterType((*EventConditionalDerivativeOrderTrigger)(nil), "injective.exchange.v2.EventConditionalDerivativeOrderTrigger")
	proto.RegisterType((*EventOrderFail)(nil), "injective.exchange.v2.EventOrderFail")
	proto.RegisterType((*EventAtomicMarketOrderFeeMultipliersUpdated)(nil), "injective.exchange.v2.EventAtomicMarketOrderFeeMultipliersUpdated")
	proto.RegisterType((*EventOrderbookUpdate)(nil), "injective.exchange.v2.EventOrderbookUpdate")
	proto.RegisterType((*OrderbookUpdate)(nil), "injective.exchange.v2.OrderbookUpdate")
	proto.RegisterType((*Orderbook)(nil), "injective.exchange.v2.Orderbook")
	proto.RegisterType((*EventGrantAuthorizations)(nil), "injective.exchange.v2.EventGrantAuthorizations")
	proto.RegisterType((*EventGrantActivation)(nil), "injective.exchange.v2.EventGrantActivation")
	proto.RegisterType((*EventInvalidGrant)(nil), "injective.exchange.v2.EventInvalidGrant")
	proto.RegisterType((*EventOrderCancelFail)(nil), "injective.exchange.v2.EventOrderCancelFail")
	proto.RegisterType((*EventDerivativeOrdersV2Migration)(nil), "injective.exchange.v2.EventDerivativeOrdersV2Migration")
	proto.RegisterType((*DerivativeOrderV2Changes)(nil), "injective.exchange.v2.DerivativeOrderV2Changes")
	proto.RegisterType((*EventSpotOrdersV2Migration)(nil), "injective.exchange.v2.EventSpotOrdersV2Migration")
	proto.RegisterType((*SpotOrderV2Changes)(nil), "injective.exchange.v2.SpotOrderV2Changes")
	proto.RegisterType((*EventDerivativePositionV2Migration)(nil), "injective.exchange.v2.EventDerivativePositionV2Migration")
}

func init() {
	proto.RegisterFile("injective/exchange/v2/events.proto", fileDescriptor_8ac8f3da550fa1c4)
}

var fileDescriptor_8ac8f3da550fa1c4 = []byte{
	// 2330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x59, 0xbd, 0x6f, 0x1c, 0xc7,
	0x15, 0xd7, 0x1e, 0x29, 0x9a, 0xf7, 0x8e, 0x22, 0xc5, 0x95, 0x28, 0x9f, 0x24, 0x8b, 0xa2, 0xd6,
	0x92, 0x2c, 0xcb, 0xf6, 0x9d, 0x45, 0x23, 0x70, 0x91, 0x2f, 0xf0, 0x53, 0xa2, 0x41, 0xca, 0xf4,
	0x52, 0xb2, 0x83, 0x04, 0xc6, 0x65, 0x6e, 0x77, 0x78, 0x37, 0xe6, 0xee, 0xce, 0x72, 0x67, 0xf6,
	0xa8, 0x4b, 0x17, 0x20, 0x85, 0x3b, 0xa7, 0x09, 0xe2, 0x26, 0x5d, 0xba, 0x34, 0x49, 0x17, 0x20,
	0x45, 0x10, 0x37, 0x71, 0xe9, 0xa4, 0x32, 0x0c, 0xc4, 0x08, 0xa4, 0x2a, 0x7f, 0x43, 0x9a, 0x60,
	0x3e, 0xf6, 0xe3, 0xbe, 0xef, 0x28, 0x05, 0x49, 0xb7, 0x3b, 0xfb, 0xde, 0xef, 0xbd, 0xf9, 0xcd,
	0x9b, 0x37, 0xef, 0xcd, 0x82, 0x45, 0x82, 0x4f, 0xb0, 0xc3, 0x49, 0x0b, 0x57, 0xf1, 0x13, 0xa7,
	0x89, 0x82, 0x06, 0xae, 0xb6, 0x56, 0xab, 0xb8, 0x85, 0x03, 0xce, 0x2a, 0x61, 0x44, 0x39, 0x35,
	0x97, 0x52, 0x99, 0x4a, 0x22, 0x53, 0x69, 0xad, 0x5e, 0xb9, 0xd8, 0xa0, 0x0d, 0x2a, 0x25, 0xaa,
	0xe2, 0x49, 0x09, 0x5f, 0x59, 0x76, 0x28, 0xf3, 0x29, 0xab, 0xd6, 0x11, 0xc3, 0xd5, 0xd6, 0xbd,
	0x3a, 0xe6, 0xe8, 0x5e, 0xd5, 0xa1, 0x24, 0xd0, 0xdf, 0x6f, 0x65, 0x06, 0x69, 0x84, 0x1c, 0x2f,
	0x13, 0x52, 0xaf, 0x5a, 0xec, 0xe6, 0x00, 0xbf, 0x12, 0xfb, 0x4a, 0x6a, 0x80, 0xf7, 0x3e, 0x8a,
	0x8e, 0x30, 0xd7, 0x32, 0x37, 0xfa, 0xcb, 0xd0, 0xc8, 0xc5, 0x91, 0x12, 0xb1, 0xfe, 0x6e, 0xc0,
	0xcb, 0x5b, 0x62, 0xc6, 0xeb, 0x88, 0x3b, 0xcd, 0x83, 0x90, 0xf2, 0xad, 0x27, 0xd8, 0x89, 0x39,
	0xa1, 0x81, 0x79, 0x15, 0x8a, 0x0a, 0xae, 0x46, 0xdc, 0xb2, 0xb1, 0x62, 0xdc, 0x29, 0xda, 0xb3,
	0x6a, 0x60, 0xc7, 0x35, 0x97, 0x60, 0x86, 0xb0, 0x5a, 0x3d, 0x6e, 0x97, 0x0b, 0x2b, 0xc6, 0x9d,
	0x59, 0xfb, 0x2c, 0x61, 0xeb, 0x71, 0xdb, 0x7c, 0x0f, 0xce, 0xe1, 0x04, 0xe0, 0x51, 0x3b, 0xc4,
	0xe5, 0xa9, 0x15, 0xe3, 0xce, 0xfc, 0xea, 0xcd, 0x4a, 0x5f, 0x22, 0x2b, 0x5b, 0x79, 0x59, 0xbb,
	0x53, 0xd5, 0x7c, 0x17, 0x66, 0x78, 0x84, 0x5c, 0xcc, 0xca, 0xd3, 0x2b, 0x53, 0x77, 0x4a, 0xab,
	0xd7, 0x07, 0x80, 0x3c, 0x12, 0x42, 0xbb, 0xb4, 0x61, 0x6b, 0x71, 0xeb, 0x1f, 0x05, 0xb8, 0x96,
	0x4d, 0x6a, 0x13, 0x47, 0xa4, 0x85, 0x84, 0xd6, 0xf3, 0x4d, 0xed, 0x16, 0xcc, 0x13, 0x56, 0xf3,
	0xc8, 0x71, 0x4c, 0x5c, 0x24, 0x50, 0xe4, 0xdc, 0x66, 0xed, 0x73, 0x84, 0xed, 0x66, 0x83, 0xa6,
	0x0d, 0xa6, 0x13, 0xfb, 0xb1, 0x27, 0x2d, 0xd6, 0x0e, 0xe3, 0xc0, 0x25, 0x41, 0xa3, 0x3c, 0x2d,
	0x6c, 0xac, 0xbf, 0xfa, 0xe5, 0xb7, 0xd7, 0x8d, 0x6f, 0xbe, 0xbd, 0x7e, 0x55, 0x45, 0x0a, 0x73,
	0x8f, 0x2a, 0x84, 0x56, 0x7d, 0xc4, 0x9b, 0x95, 0x5d, 0xdc, 0x40, 0x4e, 0x7b, 0x13, 0x3b, 0xf6,
	0x62, 0xa6, 0xbe, 0xad, 0xb4, 0x7b, 0x59, 0x3d, 0x7b, 0x7a, 0x56, 0xd7, 0x52, 0x56, 0x67, 0x24,
	0xab, 0xaf, 0x0f, 0x00, 0xc9, 0x68, 0xeb, 0xe1, 0xf7, 0x8b, 0x84, 0xdf, 0x5d, 0xca, 0xb8, 0xf0,
	0x91, 0x6d, 0x47, 0xd4, 0xcf, 0x93, 0x30, 0x94, 0xdf, 0x57, 0xe1, 0x1c, 0x8b, 0xeb, 0xc8, 0x71,
	0x68, 0x1c, 0x48, 0x01, 0x41, 0xf3, 0x9c, 0x3d, 0x97, 0x0d, 0xee, 0xb8, 0xe6, 0x13, 0x78, 0xcd,
	0xa3, 0x8c, 0x4b, 0x02, 0x59, 0xed, 0x30, 0xa2, 0x7e, 0x0d, 0xb5, 0x10, 0xf1, 0x50, 0xdd, 0xc3,
	0x35, 0x37, 0x8e, 0x48, 0xd0, 0xa8, 0x85, 0xa8, 0x4d, 0x63, 0x2e, 0x97, 0x41, 0x71, 0x7b, 0x66,
	0x14, 0xb7, 0x96, 0x97, 0xf7, 0x78, 0x2d, 0x01, 0xdc, 0x94, 0x78, 0xfb, 0x12, 0xce, 0xc4, 0x70,
	0xad, 0xdb, 0xb2, 0xdc, 0x31, 0x35, 0x07, 0x05, 0x0e, 0xf6, 0x58, 0x6e, 0x2d, 0x47, 0xda, 0xbb,
	0xdc, 0x61, 0xef, 0x7d, 0x01, 0xb3, 0xa1, 0x50, 0xac, 0x5f, 0x18, 0xf0, 0x4a, 0xbf, 0x20, 0xdd,
	0xa7, 0x8c, 0x8c, 0xe6, 0xf0, 0x3e, 0x14, 0x43, 0x2d, 0xc8, 0xca, 0x85, 0xa1, 0x0b, 0x79, 0x90,
	0xd2, 0x9a, 0x40, 0xdb, 0x99, 0xae, 0xf5, 0x27, 0x03, 0xae, 0x4a, 0x37, 0x32, 0x0f, 0xf6, 0xa4,
	0x91, 0x7d, 0x14, 0x33, 0xec, 0x0e, 0xf7, 0xe2, 0x06, 0xcc, 0x31, 0xcc, 0xb9, 0x87, 0x6b, 0x61,
	0x44, 0x1c, 0x2c, 0x17, 0xb2, 0x68, 0x97, 0xd4, 0xd8, 0xbe, 0x18, 0x32, 0x2b, 0x70, 0x81, 0x53,
	0x8e, 0xbc, 0x9a, 0x4f, 0x18, 0x13, 0x8b, 0x26, 0x69, 0x55, 0x6b, 0x66, 0x2f, 0xca, 0x4f, 0x7b,
	0xea, 0x8b, 0xa4, 0xc9, 0x7c, 0x13, 0xcc, 0x0e, 0xc9, 0x5a, 0x84, 0x38, 0x56, 0x94, 0xdb, 0xe7,
	0xfd, 0x9c, 0xa4, 0x8d, 0x38, 0xb6, 0xf6, 0xe1, 0xb2, 0x74, 0xfe, 0x40, 0x5a, 0x74, 0x95, 0xe7,
	0xeb, 0xc8, 0x13, 0x1c, 0x0f, 0x77, 0xfd, 0x12, 0xcc, 0x20, 0x5f, 0x90, 0xa2, 0x9d, 0xd6, 0x6f,
	0xd6, 0x81, 0x5e, 0x95, 0x87, 0xf4, 0x05, 0x82, 0x7e, 0x96, 0x90, 0xac, 0xb1, 0x70, 0x9b, 0x06,
	0xee, 0x3a, 0x0a, 0x8e, 0xa2, 0x38, 0xe4, 0x4e, 0xfb, 0xb9, 0x49, 0x7e, 0x1b, 0x2e, 0x26, 0xa4,
	0x69, 0x9c, 0x3c, 0xcb, 0x09, 0xa1, 0xca, 0xb8, 0x24, 0xcf, 0xfa, 0xd4, 0x80, 0xb2, 0xf4, 0x68,
	0xcd, 0xf3, 0x92, 0xb0, 0x60, 0x0f, 0x10, 0x89, 0x9c, 0x98, 0x3f, 0xb7, 0x3b, 0xfd, 0xd7, 0x70,
	0x6a, 0xc0, 0x1a, 0x7e, 0x02, 0xcb, 0x6a, 0x1f, 0x90, 0x00, 0x45, 0xed, 0xf7, 0x43, 0xe9, 0x8a,
	0xf2, 0xf5, 0x71, 0xe8, 0x22, 0x8e, 0xcd, 0x07, 0x30, 0xa3, 0xcc, 0x4b, 0x67, 0x4a, 0xab, 0x77,
	0x07, 0x44, 0x7a, 0x1f, 0x84, 0xf5, 0x69, 0xb1, 0x4d, 0x6d, 0xad, 0x6f, 0xfd, 0xd9, 0x00, 0x53,
	0x2d, 0x2f, 0x3e, 0x11, 0x87, 0x9d, 0xdc, 0x91, 0x6c, 0xf8, 0x84, 0x37, 0x01, 0xea, 0x71, 0x5b,
	0xe5, 0x80, 0x64, 0xaf, 0xdd, 0x1a, 0xb4, 0xd7, 0x42, 0xca, 0x77, 0x89, 0x4f, 0x14, 0xb0, 0x5d,
	0xac, 0xc7, 0x6d, 0x6d, 0x62, 0x1b, 0x4a, 0x0c, 0x7b, 0x5e, 0x02, 0x33, 0x35, 0x09, 0x0c, 0x08,
	0x4d, 0x85, 0x63, 0xfd, 0x2d, 0x59, 0xb8, 0x87, 0xf8, 0x24, 0xdb, 0xb2, 0xe3, 0xcc, 0xe3, 0xbd,
	0x3e, 0xf3, 0x78, 0x63, 0x64, 0xf2, 0xef, 0x3f, 0x9b, 0xdd, 0x7e, 0xb3, 0x99, 0x08, 0x2c, 0x3f,
	0xa7, 0x16, 0x5c, 0x94, 0x53, 0x52, 0xa9, 0x31, 0x5d, 0x97, 0xe1, 0xd3, 0x59, 0x83, 0xb3, 0xd2,
	0xba, 0x0c, 0xc0, 0x71, 0xa9, 0xd4, 0xe1, 0xa0, 0x34, 0xad, 0x1f, 0xc1, 0x92, 0xca, 0x1e, 0x21,
	0xe5, 0x1d, 0x01, 0xf7, 0xc3, 0xae, 0x80, 0xbb, 0x31, 0x04, 0xbc, 0x6f, 0x9c, 0x7d, 0x5e, 0x80,
	0x2b, 0x12, 0x7a, 0x1f, 0x47, 0x21, 0xe6, 0x31, 0xf2, 0x3a, 0xf0, 0xb7, 0xba, 0xf0, 0x5f, 0x1b,
	0xc9, 0x5c, 0x3f, 0x2b, 0xa6, 0x0b, 0x4b, 0x61, 0x82, 0x9f, 0x6c, 0x7c, 0x12, 0x1c, 0x52, 0x4d,
	0xc9, 0xa0, 0x6d, 0xd2, 0xe5, 0xd3, 0x4e, 0x70, 0x48, 0x25, 0xb0, 0x61, 0x5f, 0x08, 0x7b, 0x3f,
	0x99, 0x7b, 0xf0, 0x52, 0x52, 0xc5, 0x4c, 0x49, 0xdc, 0xb7, 0xc6, 0xc3, 0xd5, 0xc5, 0x8b, 0x86,
	0x4e, 0x30, 0xac, 0x6f, 0x0c, 0xbd, 0xdf, 0xb7, 0x9e, 0x84, 0x24, 0x6a, 0x6f, 0xc7, 0x3c, 0x8e,
	0x30, 0xfb, 0x6f, 0xd0, 0x73, 0x0c, 0x57, 0xb0, 0xb4, 0x51, 0x3b, 0x54, 0x46, 0x3a, 0x38, 0x52,
	0x73, 0xa9, 0x0c, 0x2c, 0xa1, 0x7a, 0x9c, 0xcb, 0xf1, 0xf4, 0x32, 0xee, 0xff, 0xd9, 0xfa, 0x6b,
	0x01, 0x6e, 0xf4, 0x5b, 0x77, 0xcd, 0x85, 0x9e, 0xdf, 0xd0, 0xb8, 0xce, 0xd1, 0x5d, 0x38, 0x2d,
	0xdd, 0x67, 0x52, 0xba, 0xcd, 0xbb, 0xb0, 0x48, 0x58, 0xad, 0x49, 0xe3, 0xc8, 0x6b, 0xd7, 0xf2,
	0xeb, 0x38, 0x6b, 0x2f, 0x10, 0xf6, 0x40, 0x8e, 0x27, 0x65, 0xe6, 0x36, 0xcc, 0x69, 0x89, 0xdc,
	0xa9, 0x3b, 0x5e, 0xd1, 0x5a, 0xd2, 0x8a, 0x22, 0xa3, 0x9b, 0xeb, 0x00, 0x62, 0x3a, 0xfa, 0x80,
	0x38, 0x3b, 0x3e, 0x8a, 0xa4, 0x45, 0x9e, 0x21, 0xd6, 0xaf, 0x0d, 0xb8, 0xa4, 0x36, 0x67, 0x5a,
	0xbe, 0x6c, 0x62, 0x59, 0xb6, 0x98, 0xd7, 0xa1, 0xc4, 0x22, 0xa7, 0x86, 0x5c, 0x37, 0xc2, 0x8c,
	0x69, 0x02, 0x81, 0x45, 0xce, 0x9a, 0x1a, 0x19, 0xaf, 0xc0, 0x7c, 0x37, 0x3d, 0xab, 0x55, 0x24,
	0x5c, 0xae, 0x28, 0xcf, 0x2a, 0xa2, 0x7d, 0xab, 0xe8, 0xce, 0xac, 0xb2, 0x41, 0x49, 0x90, 0x84,
	0x95, 0x3e, 0xcc, 0x3f, 0x4f, 0x5a, 0xa6, 0xcc, 0xb3, 0x8f, 0x08, 0x6f, 0xba, 0x11, 0x3a, 0xe9,
	0xb5, 0x6c, 0xf4, 0xb1, 0x7c, 0x1d, 0x4a, 0x2e, 0xe3, 0xa9, 0xff, 0xea, 0x00, 0x05, 0x97, 0xf1,
	0xc4, 0xff, 0x53, 0xbb, 0xf6, 0x87, 0x64, 0x6f, 0x65, 0xae, 0xe9, 0xba, 0xe5, 0x51, 0x84, 0x02,
	0x76, 0x88, 0x23, 0x11, 0x0f, 0x82, 0xbc, 0x5e, 0x2f, 0x8b, 0xf6, 0x02, 0x8b, 0x9c, 0x83, 0xbc,
	0xa3, 0x77, 0x61, 0x51, 0x38, 0xda, 0xcb, 0x65, 0xd1, 0x5e, 0x70, 0x19, 0x3f, 0x78, 0x21, 0x74,
	0x36, 0xf3, 0x0d, 0xa8, 0x5e, 0x62, 0xbd, 0x4f, 0xf6, 0x60, 0xc1, 0x55, 0x03, 0xb5, 0x58, 0x8e,
	0x88, 0xc5, 0x16, 0x27, 0xcd, 0xcd, 0x81, 0x09, 0x21, 0xa7, 0x6e, 0xcf, 0xbb, 0xf9, 0x57, 0x66,
	0x7d, 0x61, 0xc0, 0xd5, 0xee, 0x94, 0x91, 0x2b, 0xc9, 0xcd, 0xc7, 0x30, 0xa7, 0xb7, 0xa5, 0x3a,
	0x58, 0x54, 0xf2, 0x79, 0x73, 0xcc, 0xe4, 0x93, 0x9d, 0x2f, 0x86, 0x5d, 0xf2, 0xb3, 0x21, 0x73,
	0x17, 0x16, 0x54, 0xe7, 0x50, 0x3b, 0x8e, 0x51, 0xc0, 0x09, 0x57, 0x7d, 0xe5, 0x98, 0x1d, 0xc4,
	0xbc, 0xd2, 0xfd, 0x40, 0xab, 0x5a, 0xbf, 0x49, 0x4e, 0x16, 0xe5, 0x74, 0x57, 0x09, 0x30, 0x3c,
	0xb5, 0xdc, 0x04, 0xd9, 0xab, 0xfa, 0x44, 0x2b, 0xeb, 0xfe, 0xb6, 0x73, 0xd0, 0xb4, 0xa1, 0xe4,
	0x89, 0x57, 0xcd, 0x82, 0x5a, 0xce, 0x49, 0xce, 0x76, 0x4d, 0x02, 0x78, 0xe9, 0x88, 0xd9, 0x84,
	0x0b, 0x79, 0x6a, 0x75, 0x2b, 0x25, 0x13, 0x4c, 0x69, 0x75, 0x75, 0x12, 0x86, 0x95, 0x93, 0xda,
	0xc4, 0xa2, 0xdf, 0xfd, 0xc1, 0xaa, 0xeb, 0xf2, 0x68, 0x1b, 0xe3, 0x4d, 0xc2, 0x64, 0x74, 0x1e,
	0x38, 0x4d, 0xec, 0xc6, 0x1e, 0x36, 0xb7, 0x61, 0x96, 0xe9, 0xe7, 0x11, 0x95, 0x64, 0x1f, 0x6d,
	0x3b, 0xd5, 0xb5, 0xbe, 0x36, 0x60, 0x45, 0x1a, 0x11, 0x9d, 0xb1, 0x48, 0x7a, 0xf8, 0x04, 0x45,
	0xee, 0x06, 0xf2, 0x43, 0x44, 0x1a, 0x81, 0x0e, 0xde, 0xc7, 0x70, 0xce, 0xd1, 0x23, 0xea, 0xc0,
	0x51, 0x16, 0xdf, 0x1e, 0x72, 0x89, 0xd1, 0x03, 0x25, 0xce, 0x14, 0x7b, 0xce, 0xc9, 0xbd, 0x99,
	0x1f, 0xc3, 0x52, 0x0a, 0x1b, 0x49, 0xe1, 0x5a, 0x48, 0xa9, 0x37, 0xaa, 0x09, 0x4c, 0x10, 0x15,
	0xfe, 0x3e, 0xa5, 0x9e, 0x7d, 0xc1, 0xe9, 0x19, 0x63, 0x56, 0xa8, 0x13, 0x48, 0x87, 0x3b, 0x9b,
	0x84, 0xf1, 0x88, 0xd4, 0xd5, 0xd5, 0xc9, 0x43, 0x58, 0x48, 0xb2, 0x81, 0xb2, 0x9f, 0x6c, 0xca,
	0x41, 0x15, 0xd8, 0x9a, 0x92, 0x56, 0x50, 0xcc, 0x9e, 0x47, 0x1d, 0xef, 0xd6, 0xef, 0x0d, 0xb0,
	0x92, 0x82, 0x76, 0x83, 0x06, 0xae, 0x6c, 0x45, 0xd0, 0x64, 0x81, 0xfd, 0xbd, 0xce, 0x5a, 0xf0,
	0xf6, 0xc8, 0x80, 0x52, 0x35, 0xa8, 0x52, 0x32, 0x4d, 0x98, 0x6e, 0x22, 0xd6, 0x94, 0x91, 0x3e,
	0x67, 0xcb, 0x67, 0x61, 0x8e, 0x24, 0xf5, 0x82, 0x0c, 0xd3, 0x59, 0x7b, 0x96, 0xe8, 0x93, 0xde,
	0xfa, 0x55, 0x01, 0x6e, 0xe5, 0xf6, 0xe0, 0x69, 0xbd, 0xfe, 0xdf, 0x6d, 0xc7, 0xee, 0x4c, 0x37,
	0xfd, 0x42, 0x32, 0x9d, 0xf5, 0x6f, 0x03, 0x6e, 0x2b, 0x5e, 0x06, 0x32, 0xf2, 0x28, 0x22, 0x8d,
	0x46, 0x3f, 0x62, 0xe6, 0x72, 0xc4, 0xdc, 0x86, 0x79, 0xcd, 0x81, 0x16, 0xd7, 0xcc, 0x74, 0x8d,
	0x8a, 0xb6, 0x97, 0xab, 0x47, 0xec, 0xea, 0xc4, 0x92, 0x5b, 0x48, 0x33, 0xfd, 0x26, 0x2d, 0x3f,
	0x10, 0xcb, 0x7a, 0x17, 0x16, 0x43, 0x0f, 0x39, 0x9d, 0xe2, 0xd3, 0x52, 0x7c, 0x41, 0x7d, 0xc8,
	0x64, 0x2b, 0x70, 0xa1, 0x1b, 0xdd, 0x21, 0xae, 0x2a, 0x67, 0xec, 0xc5, 0x4e, 0xf0, 0x0d, 0xe2,
	0x5a, 0x1e, 0xcc, 0xcb, 0xc9, 0xcb, 0x81, 0x6d, 0x44, 0x3c, 0xb3, 0x0c, 0x2f, 0xe9, 0x60, 0xd7,
	0x53, 0x4c, 0x5e, 0xcd, 0x4b, 0x30, 0x23, 0x4c, 0x63, 0xb5, 0x6d, 0xe7, 0x6c, 0xfd, 0x66, 0x5e,
	0x84, 0xb3, 0x87, 0x1e, 0x6a, 0xa8, 0x8e, 0xea, 0x9c, 0xad, 0x5e, 0x44, 0x80, 0x3a, 0xc4, 0x55,
	0xd7, 0xa0, 0x45, 0x5b, 0x3e, 0x5b, 0x9f, 0x19, 0xf0, 0x86, 0x6a, 0xe0, 0x39, 0xf5, 0x89, 0x93,
	0x5b, 0x99, 0x6d, 0x8c, 0xf7, 0x62, 0x8f, 0x93, 0xd0, 0x23, 0x38, 0x62, 0x2a, 0x1b, 0xb9, 0xe6,
	0x4f, 0xe1, 0x52, 0x72, 0x35, 0x80, 0x71, 0xcd, 0xcf, 0x04, 0xf4, 0xee, 0x1d, 0x94, 0x09, 0x75,
	0x71, 0x99, 0xc7, 0xb4, 0x2f, 0xfa, 0xbd, 0x83, 0xcc, 0xfa, 0xa3, 0xa1, 0xdb, 0x38, 0xe9, 0x45,
	0x9d, 0xd2, 0x23, 0x9d, 0x09, 0x77, 0x60, 0x8e, 0x85, 0xb4, 0xfb, 0x0c, 0x1f, 0xb4, 0x49, 0xbb,
	0xb4, 0xed, 0x92, 0xd0, 0xd5, 0x47, 0xb8, 0xf9, 0x18, 0x4c, 0x37, 0x0d, 0xa8, 0x14, 0xb0, 0x30,
	0x11, 0xe0, 0x62, 0x86, 0x90, 0x54, 0x06, 0x0e, 0x2c, 0x74, 0x3b, 0x7d, 0x1e, 0xa6, 0x18, 0x3e,
	0x96, 0xeb, 0x36, 0x6d, 0x8b, 0x47, 0xf3, 0x07, 0x50, 0xa4, 0x89, 0x90, 0x4e, 0x34, 0x2b, 0xa3,
	0x4c, 0xda, 0x99, 0x8a, 0xf5, 0x5b, 0x03, 0x8a, 0xe9, 0x87, 0xe1, 0x1b, 0xe0, 0xbb, 0xaa, 0x55,
	0xf7, 0x70, 0x0b, 0xa7, 0x99, 0xfd, 0x95, 0x01, 0xb6, 0x76, 0x85, 0x90, 0xec, 0xcd, 0xe5, 0x13,
	0x33, 0xbf, 0xaf, 0x7b, 0x73, 0xad, 0x3d, 0x35, 0x86, 0xb6, 0x6c, 0xc6, 0x95, 0xba, 0x75, 0xa2,
	0x0f, 0xd0, 0xfb, 0x11, 0x0a, 0xf8, 0x5a, 0xcc, 0x9b, 0x34, 0x22, 0x3f, 0x93, 0xb7, 0xba, 0x4c,
	0x04, 0x74, 0x43, 0x0c, 0xeb, 0xe2, 0xa8, 0x68, 0x27, 0xaf, 0xe6, 0x1a, 0xcc, 0xc8, 0xc7, 0x51,
	0xe7, 0x50, 0x2f, 0xaa, 0xad, 0x15, 0xad, 0x9f, 0x27, 0xf1, 0xa3, 0x64, 0x84, 0xae, 0xba, 0x4c,
	0x4e, 0xad, 0xe2, 0x4e, 0xab, 0x38, 0xef, 0x4f, 0xa1, 0xd3, 0x9f, 0xef, 0x74, 0x94, 0xa3, 0xc5,
	0xf5, 0x6b, 0xba, 0xd6, 0x5a, 0xea, 0xad, 0xb5, 0x76, 0x02, 0x9e, 0x16, 0xa3, 0xf7, 0x61, 0x51,
	0xba, 0xb0, 0x13, 0xb4, 0x90, 0x47, 0x5c, 0xe9, 0xc9, 0x69, 0xec, 0x5b, 0xbf, 0xeb, 0xd8, 0x0c,
	0x2a, 0x95, 0xcb, 0x9c, 0x30, 0xf9, 0xcd, 0x78, 0xb1, 0xab, 0x7d, 0xb8, 0x06, 0xd0, 0x95, 0xeb,
	0x8a, 0x3a, 0xcc, 0x64, 0xda, 0x3a, 0x0f, 0x53, 0x22, 0x4d, 0xa9, 0x1b, 0x53, 0xf1, 0x68, 0xae,
	0x40, 0xc9, 0xc5, 0xcc, 0x89, 0x88, 0xbc, 0x18, 0xd3, 0x09, 0x2c, 0x3f, 0x24, 0x12, 0xf7, 0x4a,
	0xd7, 0x25, 0xb0, 0xba, 0x9a, 0xf9, 0x70, 0x75, 0x8f, 0x34, 0xa2, 0x31, 0xee, 0xf4, 0x7f, 0x02,
	0x8b, 0xe9, 0xe5, 0x52, 0x4d, 0x2d, 0x77, 0x12, 0x0a, 0xd5, 0xf1, 0x4e, 0xe3, 0x0f, 0x57, 0x37,
	0x94, 0x9a, 0xbd, 0x90, 0xdc, 0x33, 0xe9, 0x01, 0xf3, 0x63, 0x30, 0xb3, 0xdb, 0xa6, 0x14, 0x7d,
	0xea, 0x74, 0xe8, 0xe7, 0xd3, 0x8b, 0x27, 0x3d, 0x62, 0xfd, 0xa5, 0x00, 0xe5, 0x41, 0xe2, 0x09,
	0x9d, 0x46, 0x46, 0x67, 0x52, 0x2e, 0x14, 0x72, 0xe5, 0xc2, 0x3d, 0x30, 0xc2, 0x49, 0xfe, 0x43,
	0x18, 0xa1, 0x50, 0x39, 0x9e, 0xe4, 0x57, 0x82, 0x71, 0x2c, 0x54, 0xfc, 0x5c, 0x3b, 0x3d, 0x5a,
	0xc5, 0x17, 0x2a, 0x87, 0xe5, 0x99, 0x09, 0x54, 0x0e, 0xcd, 0x77, 0xa0, 0xc0, 0xc3, 0xf2, 0x4b,
	0xe3, 0x77, 0xed, 0x05, 0x1e, 0x5a, 0xff, 0x32, 0x74, 0x5b, 0x92, 0xdd, 0xaa, 0x8e, 0x1d, 0x3b,
	0x8f, 0x07, 0xc7, 0xce, 0xeb, 0x43, 0x2e, 0xde, 0x46, 0x45, 0xcd, 0x47, 0x43, 0xa2, 0x66, 0x02,
	0xdc, 0xde, 0x78, 0xf9, 0xb4, 0x00, 0x66, 0xaf, 0xe0, 0xff, 0x5b, 0xa4, 0x1c, 0x4e, 0x14, 0x29,
	0xc9, 0xb2, 0xcf, 0x4c, 0xb6, 0xec, 0x47, 0xba, 0x76, 0xef, 0xfd, 0x7d, 0x95, 0x5f, 0xfd, 0x2d,
	0x98, 0x4d, 0x7e, 0x38, 0xe9, 0x2e, 0x68, 0xf4, 0x4f, 0xc7, 0xf4, 0x5f, 0x55, 0xaa, 0xba, 0x7e,
	0xf4, 0xe5, 0xd3, 0x65, 0xe3, 0xab, 0xa7, 0xcb, 0xc6, 0x3f, 0x9f, 0x2e, 0x1b, 0xbf, 0x7c, 0xb6,
	0x7c, 0xe6, 0xab, 0x67, 0xcb, 0x67, 0xbe, 0x7e, 0xb6, 0x7c, 0xe6, 0xc7, 0x1f, 0x34, 0x08, 0x6f,
	0xc6, 0xf5, 0x8a, 0x43, 0xfd, 0xea, 0x4e, 0x02, 0xbc, 0x8b, 0xea, 0xac, 0x9a, 0x9a, 0x79, 0xcb,
	0xa1, 0x11, 0xce, 0xbf, 0x36, 0x11, 0x09, 0xaa, 0x3e, 0x15, 0x0d, 0x1d, 0xcb, 0x7e, 0x8f, 0xf3,
	0x76, 0x88, 0x59, 0xb5, 0xb5, 0x5a, 0x9f, 0x91, 0xff, 0xc7, 0xdf, 0xf9, 0x4f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xd7, 0x30, 0xc2, 0x2d, 0x26, 0x20, 0x00, 0x00,
}

func (m *EventBatchSpotExecution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBatchSpotExecution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBatchSpotExecution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Trades) > 0 {
		for iNdEx := len(m.Trades) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Trades[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ExecutionType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ExecutionType))
		i--
		dAtA[i] = 0x18
	}
	if m.IsBuy {
		i--
		if m.IsBuy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBatchDerivativeExecution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBatchDerivativeExecution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBatchDerivativeExecution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Trades) > 0 {
		for iNdEx := len(m.Trades) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Trades[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.ExecutionType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ExecutionType))
		i--
		dAtA[i] = 0x28
	}
	if m.CumulativeFunding != nil {
		{
			size := m.CumulativeFunding.Size()
			i -= size
			if _, err := m.CumulativeFunding.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.IsLiquidation {
		i--
		if m.IsLiquidation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.IsBuy {
		i--
		if m.IsBuy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventLostFundsFromLiquidation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventLostFundsFromLiquidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventLostFundsFromLiquidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.LostFundsFromOrderCancels.Size()
		i -= size
		if _, err := m.LostFundsFromOrderCancels.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.LostFundsFromAvailableDuringPayout.Size()
		i -= size
		if _, err := m.LostFundsFromAvailableDuringPayout.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBatchDerivativePosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBatchDerivativePosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBatchDerivativePosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Positions) > 0 {
		for iNdEx := len(m.Positions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Positions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventDerivativeMarketPaused) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDerivativeMarketPaused) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDerivativeMarketPaused) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MissingFundsRate) > 0 {
		i -= len(m.MissingFundsRate)
		copy(dAtA[i:], m.MissingFundsRate)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MissingFundsRate)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TotalMissingFunds) > 0 {
		i -= len(m.TotalMissingFunds)
		copy(dAtA[i:], m.TotalMissingFunds)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.TotalMissingFunds)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SettlePrice) > 0 {
		i -= len(m.SettlePrice)
		copy(dAtA[i:], m.SettlePrice)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SettlePrice)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSettledMarketBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSettledMarketBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSettledMarketBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventNotSettledMarketBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventNotSettledMarketBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventNotSettledMarketBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventMarketBeyondBankruptcy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventMarketBeyondBankruptcy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMarketBeyondBankruptcy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MissingMarketFunds) > 0 {
		i -= len(m.MissingMarketFunds)
		copy(dAtA[i:], m.MissingMarketFunds)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MissingMarketFunds)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SettlePrice) > 0 {
		i -= len(m.SettlePrice)
		copy(dAtA[i:], m.SettlePrice)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SettlePrice)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAllPositionsHaircut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAllPositionsHaircut) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAllPositionsHaircut) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MissingFundsRate) > 0 {
		i -= len(m.MissingFundsRate)
		copy(dAtA[i:], m.MissingFundsRate)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MissingFundsRate)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SettlePrice) > 0 {
		i -= len(m.SettlePrice)
		copy(dAtA[i:], m.SettlePrice)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SettlePrice)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBinaryOptionsMarketUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBinaryOptionsMarketUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBinaryOptionsMarketUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Market.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EventNewSpotOrders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventNewSpotOrders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventNewSpotOrders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SellOrders) > 0 {
		for iNdEx := len(m.SellOrders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SellOrders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.BuyOrders) > 0 {
		for iNdEx := len(m.BuyOrders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuyOrders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventNewDerivativeOrders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventNewDerivativeOrders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventNewDerivativeOrders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SellOrders) > 0 {
		for iNdEx := len(m.SellOrders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SellOrders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.BuyOrders) > 0 {
		for iNdEx := len(m.BuyOrders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuyOrders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCancelSpotOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCancelSpotOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCancelSpotOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Order.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSpotMarketUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSpotMarketUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSpotMarketUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Market.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EventPerpetualMarketUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPerpetualMarketUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPerpetualMarketUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Funding != nil {
		{
			size, err := m.Funding.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PerpetualMarketInfo != nil {
		{
			size, err := m.PerpetualMarketInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Market.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EventExpiryFuturesMarketUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventExpiryFuturesMarketUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventExpiryFuturesMarketUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpiryFuturesMarketInfo != nil {
		{
			size, err := m.ExpiryFuturesMarketInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Market.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EventPerpetualMarketFundingUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPerpetualMarketFundingUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPerpetualMarketFundingUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MarkPrice != nil {
		{
			size := m.MarkPrice.Size()
			i -= size
			if _, err := m.MarkPrice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.FundingRate != nil {
		{
			size := m.FundingRate.Size()
			i -= size
			if _, err := m.FundingRate.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.IsHourlyFunding {
		i--
		if m.IsHourlyFunding {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.Funding.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSubaccountDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSubaccountDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSubaccountDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SrcAddress) > 0 {
		i -= len(m.SrcAddress)
		copy(dAtA[i:], m.SrcAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SrcAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSubaccountWithdraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSubaccountWithdraw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSubaccountWithdraw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.DstAddress) > 0 {
		i -= len(m.DstAddress)
		copy(dAtA[i:], m.DstAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DstAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSubaccountBalanceTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSubaccountBalanceTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSubaccountBalanceTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.DstSubaccountId) > 0 {
		i -= len(m.DstSubaccountId)
		copy(dAtA[i:], m.DstSubaccountId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DstSubaccountId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SrcSubaccountId) > 0 {
		i -= len(m.SrcSubaccountId)
		copy(dAtA[i:], m.SrcSubaccountId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SrcSubaccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBatchDepositUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBatchDepositUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBatchDepositUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DepositUpdates) > 0 {
		for iNdEx := len(m.DepositUpdates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DepositUpdates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DerivativeMarketOrderCancel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DerivativeMarketOrderCancel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DerivativeMarketOrderCancel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.CancelQuantity.Size()
		i -= size
		if _, err := m.CancelQuantity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.MarketOrder != nil {
		{
			size, err := m.MarketOrder.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCancelDerivativeOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCancelDerivativeOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCancelDerivativeOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MarketOrderCancel != nil {
		{
			size, err := m.MarketOrderCancel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.LimitOrder != nil {
		{
			size, err := m.LimitOrder.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.IsLimitCancel {
		i--
		if m.IsLimitCancel {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventFeeDiscountSchedule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventFeeDiscountSchedule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventFeeDiscountSchedule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Schedule != nil {
		{
			size, err := m.Schedule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventTradingRewardCampaignUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventTradingRewardCampaignUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventTradingRewardCampaignUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CampaignRewardPools) > 0 {
		for iNdEx := len(m.CampaignRewardPools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CampaignRewardPools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.CampaignInfo != nil {
		{
			size, err := m.CampaignInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventTradingRewardDistribution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventTradingRewardDistribution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventTradingRewardDistribution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccountRewards) > 0 {
		for iNdEx := len(m.AccountRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccountRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EventNewConditionalDerivativeOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventNewConditionalDerivativeOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventNewConditionalDerivativeOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsMarket {
		i--
		if m.IsMarket {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Order != nil {
		{
			size, err := m.Order.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCancelConditionalDerivativeOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCancelConditionalDerivativeOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCancelConditionalDerivativeOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MarketOrder != nil {
		{
			size, err := m.MarketOrder.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.LimitOrder != nil {
		{
			size, err := m.LimitOrder.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.IsLimitCancel {
		i--
		if m.IsLimitCancel {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventConditionalDerivativeOrderTrigger) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventConditionalDerivativeOrderTrigger) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventConditionalDerivativeOrderTrigger) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TriggeredOrderCid) > 0 {
		i -= len(m.TriggeredOrderCid)
		copy(dAtA[i:], m.TriggeredOrderCid)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.TriggeredOrderCid)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PlacedOrderHash) > 0 {
		i -= len(m.PlacedOrderHash)
		copy(dAtA[i:], m.PlacedOrderHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PlacedOrderHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TriggeredOrderHash) > 0 {
		i -= len(m.TriggeredOrderHash)
		copy(dAtA[i:], m.TriggeredOrderHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.TriggeredOrderHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.IsLimitTrigger {
		i--
		if m.IsLimitTrigger {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventOrderFail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOrderFail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOrderFail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cids) > 0 {
		for iNdEx := len(m.Cids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Cids[iNdEx])
			copy(dAtA[i:], m.Cids[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.Cids[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Flags) > 0 {
		dAtA22 := make([]byte, len(m.Flags)*10)
		var j21 int
		for _, num := range m.Flags {
			for num >= 1<<7 {
				dAtA22[j21] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j21++
			}
			dAtA22[j21] = uint8(num)
			j21++
		}
		i -= j21
		copy(dAtA[i:], dAtA22[:j21])
		i = encodeVarintEvents(dAtA, i, uint64(j21))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Hashes) > 0 {
		for iNdEx := len(m.Hashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Hashes[iNdEx])
			copy(dAtA[i:], m.Hashes[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.Hashes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAtomicMarketOrderFeeMultipliersUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAtomicMarketOrderFeeMultipliersUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAtomicMarketOrderFeeMultipliersUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketFeeMultipliers) > 0 {
		for iNdEx := len(m.MarketFeeMultipliers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MarketFeeMultipliers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EventOrderbookUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOrderbookUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOrderbookUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DerivativeUpdates) > 0 {
		for iNdEx := len(m.DerivativeUpdates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DerivativeUpdates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SpotUpdates) > 0 {
		for iNdEx := len(m.SpotUpdates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SpotUpdates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OrderbookUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderbookUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderbookUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Orderbook != nil {
		{
			size, err := m.Orderbook.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Seq != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Orderbook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Orderbook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Orderbook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SellLevels) > 0 {
		for iNdEx := len(m.SellLevels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SellLevels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.BuyLevels) > 0 {
		for iNdEx := len(m.BuyLevels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuyLevels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventGrantAuthorizations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventGrantAuthorizations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventGrantAuthorizations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Grants) > 0 {
		for iNdEx := len(m.Grants) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Grants[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Granter) > 0 {
		i -= len(m.Granter)
		copy(dAtA[i:], m.Granter)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Granter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventGrantActivation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventGrantActivation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventGrantActivation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Granter) > 0 {
		i -= len(m.Granter)
		copy(dAtA[i:], m.Granter)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Granter)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Grantee) > 0 {
		i -= len(m.Grantee)
		copy(dAtA[i:], m.Grantee)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Grantee)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventInvalidGrant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventInvalidGrant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventInvalidGrant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Granter) > 0 {
		i -= len(m.Granter)
		copy(dAtA[i:], m.Granter)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Granter)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Grantee) > 0 {
		i -= len(m.Grantee)
		copy(dAtA[i:], m.Grantee)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Grantee)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventOrderCancelFail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOrderCancelFail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOrderCancelFail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OrderHash) > 0 {
		i -= len(m.OrderHash)
		copy(dAtA[i:], m.OrderHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OrderHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventDerivativeOrdersV2Migration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDerivativeOrdersV2Migration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDerivativeOrdersV2Migration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SellOrderChanges) > 0 {
		for iNdEx := len(m.SellOrderChanges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SellOrderChanges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.BuyOrderChanges) > 0 {
		for iNdEx := len(m.BuyOrderChanges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuyOrderChanges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DerivativeOrderV2Changes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DerivativeOrderV2Changes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DerivativeOrderV2Changes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tp != nil {
		{
			size := m.Tp.Size()
			i -= size
			if _, err := m.Tp.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	{
		size := m.F.Size()
		i -= size
		if _, err := m.F.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.M.Size()
		i -= size
		if _, err := m.M.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Q.Size()
		i -= size
		if _, err := m.Q.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.P.Size()
		i -= size
		if _, err := m.P.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSpotOrdersV2Migration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSpotOrdersV2Migration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSpotOrdersV2Migration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SellOrderChanges) > 0 {
		for iNdEx := len(m.SellOrderChanges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SellOrderChanges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.BuyOrderChanges) > 0 {
		for iNdEx := len(m.BuyOrderChanges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuyOrderChanges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpotOrderV2Changes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpotOrderV2Changes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpotOrderV2Changes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tp != nil {
		{
			size := m.Tp.Size()
			i -= size
			if _, err := m.Tp.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	{
		size := m.F.Size()
		i -= size
		if _, err := m.F.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Q.Size()
		i -= size
		if _, err := m.Q.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.P.Size()
		i -= size
		if _, err := m.P.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventDerivativePositionV2Migration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDerivativePositionV2Migration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDerivativePositionV2Migration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Position != nil {
		{
			size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventBatchSpotExecution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.IsBuy {
		n += 2
	}
	if m.ExecutionType != 0 {
		n += 1 + sovEvents(uint64(m.ExecutionType))
	}
	if len(m.Trades) > 0 {
		for _, e := range m.Trades {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventBatchDerivativeExecution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.IsBuy {
		n += 2
	}
	if m.IsLiquidation {
		n += 2
	}
	if m.CumulativeFunding != nil {
		l = m.CumulativeFunding.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ExecutionType != 0 {
		n += 1 + sovEvents(uint64(m.ExecutionType))
	}
	if len(m.Trades) > 0 {
		for _, e := range m.Trades {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventLostFundsFromLiquidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.LostFundsFromAvailableDuringPayout.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.LostFundsFromOrderCancels.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventBatchDerivativePosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.Positions) > 0 {
		for _, e := range m.Positions {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventDerivativeMarketPaused) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.SettlePrice)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.TotalMissingFunds)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.MissingFundsRate)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventSettledMarketBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventNotSettledMarketBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventMarketBeyondBankruptcy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.SettlePrice)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.MissingMarketFunds)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventAllPositionsHaircut) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.SettlePrice)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.MissingFundsRate)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventBinaryOptionsMarketUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Market.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventNewSpotOrders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.BuyOrders) > 0 {
		for _, e := range m.BuyOrders {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if len(m.SellOrders) > 0 {
		for _, e := range m.SellOrders {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventNewDerivativeOrders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.BuyOrders) > 0 {
		for _, e := range m.BuyOrders {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if len(m.SellOrders) > 0 {
		for _, e := range m.SellOrders {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventCancelSpotOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.Order.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventSpotMarketUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Market.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventPerpetualMarketUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Market.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.PerpetualMarketInfo != nil {
		l = m.PerpetualMarketInfo.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Funding != nil {
		l = m.Funding.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventExpiryFuturesMarketUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Market.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.ExpiryFuturesMarketInfo != nil {
		l = m.ExpiryFuturesMarketInfo.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventPerpetualMarketFundingUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.Funding.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.IsHourlyFunding {
		n += 2
	}
	if m.FundingRate != nil {
		l = m.FundingRate.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.MarkPrice != nil {
		l = m.MarkPrice.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventSubaccountDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SrcAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventSubaccountWithdraw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.DstAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventSubaccountBalanceTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SrcSubaccountId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.DstSubaccountId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventBatchDepositUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DepositUpdates) > 0 {
		for _, e := range m.DepositUpdates {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *DerivativeMarketOrderCancel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MarketOrder != nil {
		l = m.MarketOrder.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.CancelQuantity.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventCancelDerivativeOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.IsLimitCancel {
		n += 2
	}
	if m.LimitOrder != nil {
		l = m.LimitOrder.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.MarketOrderCancel != nil {
		l = m.MarketOrderCancel.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventFeeDiscountSchedule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Schedule != nil {
		l = m.Schedule.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventTradingRewardCampaignUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CampaignInfo != nil {
		l = m.CampaignInfo.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.CampaignRewardPools) > 0 {
		for _, e := range m.CampaignRewardPools {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventTradingRewardDistribution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AccountRewards) > 0 {
		for _, e := range m.AccountRewards {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventNewConditionalDerivativeOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Order != nil {
		l = m.Order.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.IsMarket {
		n += 2
	}
	return n
}

func (m *EventCancelConditionalDerivativeOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.IsLimitCancel {
		n += 2
	}
	if m.LimitOrder != nil {
		l = m.LimitOrder.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.MarketOrder != nil {
		l = m.MarketOrder.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventConditionalDerivativeOrderTrigger) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.IsLimitTrigger {
		n += 2
	}
	l = len(m.TriggeredOrderHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.PlacedOrderHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.TriggeredOrderCid)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventOrderFail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.Hashes) > 0 {
		for _, b := range m.Hashes {
			l = len(b)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if len(m.Flags) > 0 {
		l = 0
		for _, e := range m.Flags {
			l += sovEvents(uint64(e))
		}
		n += 1 + sovEvents(uint64(l)) + l
	}
	if len(m.Cids) > 0 {
		for _, s := range m.Cids {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventAtomicMarketOrderFeeMultipliersUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MarketFeeMultipliers) > 0 {
		for _, e := range m.MarketFeeMultipliers {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventOrderbookUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SpotUpdates) > 0 {
		for _, e := range m.SpotUpdates {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if len(m.DerivativeUpdates) > 0 {
		for _, e := range m.DerivativeUpdates {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *OrderbookUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovEvents(uint64(m.Seq))
	}
	if m.Orderbook != nil {
		l = m.Orderbook.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *Orderbook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.BuyLevels) > 0 {
		for _, e := range m.BuyLevels {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if len(m.SellLevels) > 0 {
		for _, e := range m.SellLevels {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventGrantAuthorizations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Granter)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.Grants) > 0 {
		for _, e := range m.Grants {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventGrantActivation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Grantee)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Granter)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventInvalidGrant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Grantee)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Granter)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventOrderCancelFail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.OrderHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventDerivativeOrdersV2Migration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.BuyOrderChanges) > 0 {
		for _, e := range m.BuyOrderChanges {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if len(m.SellOrderChanges) > 0 {
		for _, e := range m.SellOrderChanges {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *DerivativeOrderV2Changes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.P.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.Q.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.M.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.F.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.Tp != nil {
		l = m.Tp.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventSpotOrdersV2Migration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.BuyOrderChanges) > 0 {
		for _, e := range m.BuyOrderChanges {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if len(m.SellOrderChanges) > 0 {
		for _, e := range m.SellOrderChanges {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *SpotOrderV2Changes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.P.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.Q.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.F.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.Tp != nil {
		l = m.Tp.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventDerivativePositionV2Migration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Position != nil {
		l = m.Position.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventBatchSpotExecution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBatchSpotExecution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBatchSpotExecution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBuy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBuy = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionType", wireType)
			}
			m.ExecutionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionType |= ExecutionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trades", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trades = append(m.Trades, &TradeLog{})
			if err := m.Trades[len(m.Trades)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBatchDerivativeExecution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBatchDerivativeExecution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBatchDerivativeExecution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBuy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBuy = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLiquidation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLiquidation = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumulativeFunding", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.CumulativeFunding = &v
			if err := m.CumulativeFunding.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionType", wireType)
			}
			m.ExecutionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionType |= ExecutionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trades", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trades = append(m.Trades, &DerivativeTradeLog{})
			if err := m.Trades[len(m.Trades)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventLostFundsFromLiquidation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventLostFundsFromLiquidation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventLostFundsFromLiquidation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = append(m.SubaccountId[:0], dAtA[iNdEx:postIndex]...)
			if m.SubaccountId == nil {
				m.SubaccountId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LostFundsFromAvailableDuringPayout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LostFundsFromAvailableDuringPayout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LostFundsFromOrderCancels", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LostFundsFromOrderCancels.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBatchDerivativePosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBatchDerivativePosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBatchDerivativePosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Positions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Positions = append(m.Positions, &SubaccountPosition{})
			if err := m.Positions[len(m.Positions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDerivativeMarketPaused) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDerivativeMarketPaused: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDerivativeMarketPaused: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SettlePrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalMissingFunds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalMissingFunds = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissingFundsRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MissingFundsRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSettledMarketBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSettledMarketBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSettledMarketBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventNotSettledMarketBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventNotSettledMarketBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventNotSettledMarketBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventMarketBeyondBankruptcy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMarketBeyondBankruptcy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMarketBeyondBankruptcy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SettlePrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissingMarketFunds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MissingMarketFunds = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAllPositionsHaircut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAllPositionsHaircut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAllPositionsHaircut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SettlePrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissingFundsRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MissingFundsRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBinaryOptionsMarketUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBinaryOptionsMarketUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBinaryOptionsMarketUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Market", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Market.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventNewSpotOrders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventNewSpotOrders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventNewSpotOrders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyOrders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyOrders = append(m.BuyOrders, &SpotLimitOrder{})
			if err := m.BuyOrders[len(m.BuyOrders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellOrders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellOrders = append(m.SellOrders, &SpotLimitOrder{})
			if err := m.SellOrders[len(m.SellOrders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventNewDerivativeOrders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventNewDerivativeOrders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventNewDerivativeOrders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyOrders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyOrders = append(m.BuyOrders, &DerivativeLimitOrder{})
			if err := m.BuyOrders[len(m.BuyOrders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellOrders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellOrders = append(m.SellOrders, &DerivativeLimitOrder{})
			if err := m.SellOrders[len(m.SellOrders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCancelSpotOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCancelSpotOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCancelSpotOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Order.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSpotMarketUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSpotMarketUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSpotMarketUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Market", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Market.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPerpetualMarketUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPerpetualMarketUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPerpetualMarketUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Market", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Market.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerpetualMarketInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PerpetualMarketInfo == nil {
				m.PerpetualMarketInfo = &PerpetualMarketInfo{}
			}
			if err := m.PerpetualMarketInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Funding", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Funding == nil {
				m.Funding = &PerpetualMarketFunding{}
			}
			if err := m.Funding.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventExpiryFuturesMarketUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventExpiryFuturesMarketUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventExpiryFuturesMarketUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Market", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Market.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryFuturesMarketInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpiryFuturesMarketInfo == nil {
				m.ExpiryFuturesMarketInfo = &ExpiryFuturesMarketInfo{}
			}
			if err := m.ExpiryFuturesMarketInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPerpetualMarketFundingUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPerpetualMarketFundingUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPerpetualMarketFundingUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Funding", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Funding.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHourlyFunding", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsHourlyFunding = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundingRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.FundingRate = &v
			if err := m.FundingRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.MarkPrice = &v
			if err := m.MarkPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSubaccountDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSubaccountDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSubaccountDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = append(m.SubaccountId[:0], dAtA[iNdEx:postIndex]...)
			if m.SubaccountId == nil {
				m.SubaccountId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSubaccountWithdraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSubaccountWithdraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSubaccountWithdraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = append(m.SubaccountId[:0], dAtA[iNdEx:postIndex]...)
			if m.SubaccountId == nil {
				m.SubaccountId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSubaccountBalanceTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSubaccountBalanceTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSubaccountBalanceTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcSubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcSubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstSubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstSubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBatchDepositUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBatchDepositUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBatchDepositUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositUpdates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositUpdates = append(m.DepositUpdates, &DepositUpdate{})
			if err := m.DepositUpdates[len(m.DepositUpdates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DerivativeMarketOrderCancel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DerivativeMarketOrderCancel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DerivativeMarketOrderCancel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MarketOrder == nil {
				m.MarketOrder = &DerivativeMarketOrder{}
			}
			if err := m.MarketOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelQuantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CancelQuantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCancelDerivativeOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCancelDerivativeOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCancelDerivativeOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLimitCancel", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLimitCancel = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LimitOrder == nil {
				m.LimitOrder = &DerivativeLimitOrder{}
			}
			if err := m.LimitOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketOrderCancel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MarketOrderCancel == nil {
				m.MarketOrderCancel = &DerivativeMarketOrderCancel{}
			}
			if err := m.MarketOrderCancel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventFeeDiscountSchedule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventFeeDiscountSchedule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventFeeDiscountSchedule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Schedule == nil {
				m.Schedule = &FeeDiscountSchedule{}
			}
			if err := m.Schedule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventTradingRewardCampaignUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventTradingRewardCampaignUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventTradingRewardCampaignUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CampaignInfo == nil {
				m.CampaignInfo = &TradingRewardCampaignInfo{}
			}
			if err := m.CampaignInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignRewardPools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CampaignRewardPools = append(m.CampaignRewardPools, &CampaignRewardPool{})
			if err := m.CampaignRewardPools[len(m.CampaignRewardPools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventTradingRewardDistribution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventTradingRewardDistribution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventTradingRewardDistribution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountRewards = append(m.AccountRewards, &AccountRewards{})
			if err := m.AccountRewards[len(m.AccountRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventNewConditionalDerivativeOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventNewConditionalDerivativeOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventNewConditionalDerivativeOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Order == nil {
				m.Order = &DerivativeOrder{}
			}
			if err := m.Order.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMarket", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMarket = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCancelConditionalDerivativeOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCancelConditionalDerivativeOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCancelConditionalDerivativeOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLimitCancel", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLimitCancel = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LimitOrder == nil {
				m.LimitOrder = &DerivativeLimitOrder{}
			}
			if err := m.LimitOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MarketOrder == nil {
				m.MarketOrder = &DerivativeMarketOrder{}
			}
			if err := m.MarketOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventConditionalDerivativeOrderTrigger) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventConditionalDerivativeOrderTrigger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventConditionalDerivativeOrderTrigger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = append(m.MarketId[:0], dAtA[iNdEx:postIndex]...)
			if m.MarketId == nil {
				m.MarketId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLimitTrigger", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLimitTrigger = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggeredOrderHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TriggeredOrderHash = append(m.TriggeredOrderHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TriggeredOrderHash == nil {
				m.TriggeredOrderHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacedOrderHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlacedOrderHash = append(m.PlacedOrderHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PlacedOrderHash == nil {
				m.PlacedOrderHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggeredOrderCid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TriggeredOrderCid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventOrderFail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOrderFail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOrderFail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = append(m.Account[:0], dAtA[iNdEx:postIndex]...)
			if m.Account == nil {
				m.Account = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hashes = append(m.Hashes, make([]byte, postIndex-iNdEx))
			copy(m.Hashes[len(m.Hashes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Flags = append(m.Flags, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEvents
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEvents
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Flags) == 0 {
					m.Flags = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvents
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Flags = append(m.Flags, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cids = append(m.Cids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAtomicMarketOrderFeeMultipliersUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAtomicMarketOrderFeeMultipliersUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAtomicMarketOrderFeeMultipliersUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketFeeMultipliers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketFeeMultipliers = append(m.MarketFeeMultipliers, &MarketFeeMultiplier{})
			if err := m.MarketFeeMultipliers[len(m.MarketFeeMultipliers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventOrderbookUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOrderbookUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOrderbookUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpotUpdates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpotUpdates = append(m.SpotUpdates, &OrderbookUpdate{})
			if err := m.SpotUpdates[len(m.SpotUpdates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DerivativeUpdates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DerivativeUpdates = append(m.DerivativeUpdates, &OrderbookUpdate{})
			if err := m.DerivativeUpdates[len(m.DerivativeUpdates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderbookUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderbookUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderbookUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orderbook", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Orderbook == nil {
				m.Orderbook = &Orderbook{}
			}
			if err := m.Orderbook.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Orderbook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Orderbook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Orderbook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = append(m.MarketId[:0], dAtA[iNdEx:postIndex]...)
			if m.MarketId == nil {
				m.MarketId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyLevels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyLevels = append(m.BuyLevels, &Level{})
			if err := m.BuyLevels[len(m.BuyLevels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellLevels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellLevels = append(m.SellLevels, &Level{})
			if err := m.SellLevels[len(m.SellLevels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventGrantAuthorizations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventGrantAuthorizations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventGrantAuthorizations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Granter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Granter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grants = append(m.Grants, &GrantAuthorization{})
			if err := m.Grants[len(m.Grants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventGrantActivation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventGrantActivation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventGrantActivation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grantee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grantee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Granter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Granter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventInvalidGrant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventInvalidGrant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventInvalidGrant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grantee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grantee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Granter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Granter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventOrderCancelFail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOrderCancelFail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOrderCancelFail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDerivativeOrdersV2Migration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDerivativeOrdersV2Migration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDerivativeOrdersV2Migration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyOrderChanges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyOrderChanges = append(m.BuyOrderChanges, &DerivativeOrderV2Changes{})
			if err := m.BuyOrderChanges[len(m.BuyOrderChanges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellOrderChanges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellOrderChanges = append(m.SellOrderChanges, &DerivativeOrderV2Changes{})
			if err := m.SellOrderChanges[len(m.SellOrderChanges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DerivativeOrderV2Changes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DerivativeOrderV2Changes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DerivativeOrderV2Changes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.P.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Q.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field M", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.M.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.F.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.Tp = &v
			if err := m.Tp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSpotOrdersV2Migration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSpotOrdersV2Migration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSpotOrdersV2Migration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyOrderChanges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyOrderChanges = append(m.BuyOrderChanges, &SpotOrderV2Changes{})
			if err := m.BuyOrderChanges[len(m.BuyOrderChanges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellOrderChanges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellOrderChanges = append(m.SellOrderChanges, &SpotOrderV2Changes{})
			if err := m.SellOrderChanges[len(m.SellOrderChanges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpotOrderV2Changes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpotOrderV2Changes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpotOrderV2Changes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.P.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Q.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.F.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.Tp = &v
			if err := m.Tp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDerivativePositionV2Migration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDerivativePositionV2Migration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDerivativePositionV2Migration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Position == nil {
				m.Position = &DerivativePosition{}
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
