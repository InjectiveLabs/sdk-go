package types

import (
	"cosmossdk.io/errors"
)

var (
	ErrOrderInvalid                             = errors.Register(ModuleName, 1, "failed to validate order")
	ErrSpotMarketNotFound                       = errors.Register(ModuleName, 2, "spot market not found")
	ErrSpotMarketExists                         = errors.Register(ModuleName, 3, "spot market exists")
	ErrBadField                                 = errors.Register(ModuleName, 4, "struct field error")
	ErrMarketInvalid                            = errors.Register(ModuleName, 5, "failed to validate market")
	ErrInsufficientDeposit                      = errors.Register(ModuleName, 6, "subaccount has insufficient deposits")
	ErrUnrecognizedOrderType                    = errors.Register(ModuleName, 7, "unrecognized order type")
	ErrInsufficientPositionQuantity             = errors.Register(ModuleName, 8, "position quantity insufficient for order")
	ErrOrderHashInvalid                         = errors.Register(ModuleName, 9, "order hash is not valid")
	ErrBadSubaccountID                          = errors.Register(ModuleName, 10, "subaccount id is not valid")
	ErrInvalidTicker                            = errors.Register(ModuleName, 11, "invalid ticker")
	ErrInvalidBaseDenom                         = errors.Register(ModuleName, 12, "invalid base denom")
	ErrInvalidQuoteDenom                        = errors.Register(ModuleName, 13, "invalid quote denom")
	ErrInvalidOracle                            = errors.Register(ModuleName, 14, "invalid oracle")
	ErrInvalidExpiry                            = errors.Register(ModuleName, 15, "invalid expiry")
	ErrInvalidPrice                             = errors.Register(ModuleName, 16, "invalid price")
	ErrInvalidQuantity                          = errors.Register(ModuleName, 17, "invalid quantity")
	ErrUnsupportedOracleType                    = errors.Register(ModuleName, 18, "unsupported oracle type")
	ErrOrderDoesntExist                         = errors.Register(ModuleName, 19, "order doesnt exist")
	ErrOrderbookFillInvalid                     = errors.Register(ModuleName, 20, "spot limit orderbook fill invalid")
	ErrPerpetualMarketExists                    = errors.Register(ModuleName, 21, "perpetual market exists")
	ErrExpiryFuturesMarketExists                = errors.Register(ModuleName, 22, "expiry futures market exists")
	ErrExpiryFuturesMarketExpired               = errors.Register(ModuleName, 23, "expiry futures market expired")
	ErrNoLiquidity                              = errors.Register(ModuleName, 24, "no liquidity on the orderbook!")
	ErrSlippageExceedsWorstPrice                = errors.Register(ModuleName, 25, "Orderbook liquidity cannot satisfy current worst price")
	ErrInsufficientOrderMargin                  = errors.Register(ModuleName, 26, "Order has insufficient margin")
	ErrDerivativeMarketNotFound                 = errors.Register(ModuleName, 27, "Derivative market not found")
	ErrPositionNotFound                         = errors.Register(ModuleName, 28, "Position not found")
	ErrInvalidReduceOnlyPositionDirection       = errors.Register(ModuleName, 29, "Position direction does not oppose the reduce-only order")
	ErrPriceSurpassesBankruptcyPrice            = errors.Register(ModuleName, 30, "Price Surpasses Bankruptcy Price")
	ErrPositionNotLiquidable                    = errors.Register(ModuleName, 31, "Position not liquidable")
	ErrInvalidTriggerPrice                      = errors.Register(ModuleName, 32, "invalid trigger price")
	ErrInvalidOracleType                        = errors.Register(ModuleName, 33, "invalid oracle type")
	ErrInvalidPriceTickSize                     = errors.Register(ModuleName, 34, "invalid minimum price tick size")
	ErrInvalidQuantityTickSize                  = errors.Register(ModuleName, 35, "invalid minimum quantity tick size")
	ErrInvalidMargin                            = errors.Register(ModuleName, 36, "invalid minimum order margin")
	ErrExceedsOrderSideCount                    = errors.Register(ModuleName, 37, "Exceeds order side count")
	ErrMarketOrderAlreadyExists                 = errors.Register(ModuleName, 38, "Subaccount cannot place a market order when a market order in the same market was already placed in same block")
	ErrConditionalMarketOrderAlreadyExists      = errors.Register(ModuleName, 39, "cannot place a conditional market order when a conditional market order in same relative direction already exists")
	ErrMarketLaunchProposalAlreadyExists        = errors.Register(ModuleName, 40, "An equivalent market launch proposal already exists.")
	ErrInvalidMarketStatus                      = errors.Register(ModuleName, 41, "Invalid Market Status")
	ErrSameDenoms                               = errors.Register(ModuleName, 42, "base denom cannot be same with quote denom")
	ErrSameOracles                              = errors.Register(ModuleName, 43, "oracle base cannot be same with oracle quote")
	ErrFeeRatesRelation                         = errors.Register(ModuleName, 44, "MakerFeeRate does not match TakerFeeRate requirements")
	ErrMarginsRelation                          = errors.Register(ModuleName, 45, "MaintenanceMarginRatio cannot be greater than InitialMarginRatio")
	ErrExceedsMaxOracleScaleFactor              = errors.Register(ModuleName, 46, "OracleScaleFactor cannot be greater than MaxOracleScaleFactor")
	ErrSpotExchangeNotEnabled                   = errors.Register(ModuleName, 47, "Spot exchange is not enabled yet")
	ErrDerivativesExchangeNotEnabled            = errors.Register(ModuleName, 48, "Derivatives exchange is not enabled yet")
	ErrOraclePriceDeltaExceedsThreshold         = errors.Register(ModuleName, 49, "Oracle price delta exceeds threshold")
	ErrInvalidHourlyInterestRate                = errors.Register(ModuleName, 50, "Invalid hourly interest rate")
	ErrInvalidHourlyFundingRateCap              = errors.Register(ModuleName, 51, "Invalid hourly funding rate cap")
	ErrInvalidMarketFundingParamUpdate          = errors.Register(ModuleName, 52, "Only perpetual markets can update funding parameters")
	ErrInvalidTradingRewardCampaign             = errors.Register(ModuleName, 53, "Invalid trading reward campaign")
	ErrInvalidFeeDiscountSchedule               = errors.Register(ModuleName, 54, "Invalid fee discount schedule")
	ErrInvalidLiquidationOrder                  = errors.Register(ModuleName, 55, "invalid liquidation order")
	ErrTradingRewardCampaignDistributionError   = errors.Register(ModuleName, 56, "Unknown error happened for campaign distributions")
	ErrInvalidTradingRewardsPendingPointsUpdate = errors.Register(ModuleName, 57, "Invalid trading reward points update")
	ErrInvalidBatchMsgUpdate                    = errors.Register(ModuleName, 58, "Invalid batch msg update")
	ErrExceedsTopOfBookPrice                    = errors.Register(ModuleName, 59, "Post-only order exceeds top of book price")
	ErrInvalidOrderTypeForMessage               = errors.Register(ModuleName, 60, "Order type not supported for given message")
	ErrInvalidDMMSender                         = errors.Register(ModuleName, 61, "Sender must match dmm account")
	ErrAlreadyOptedOutOfRewards                 = errors.Register(ModuleName, 62, "already opted out of rewards")
	ErrInvalidMarginRatio                       = errors.Register(ModuleName, 63, "Invalid margin ratio")
	ErrBelowMinimalContribution                 = errors.Register(ModuleName, 64, "Provided funds are below minimum")
	ErrLowPositionMargin                        = errors.Register(ModuleName, 65, "Position is below initial margin requirement")
	ErrInvalidTotalSupply                       = errors.Register(ModuleName, 66, "Pool has non-positive total lp token supply")
	ErrInvalidLpTokenBurnAmount                 = errors.Register(ModuleName, 67, "Passed lp token burn amount is greater than total lp token supply")
	ErrUnsupportedAction                        = errors.Register(ModuleName, 68, "unsupported action")
	ErrNegativePositionQuantity                 = errors.Register(ModuleName, 69, "position quantity cannot be negative")
	ErrBinaryOptionsMarketExists                = errors.Register(ModuleName, 70, "binary options market exists")
	ErrBinaryOptionsMarketNotFound              = errors.Register(ModuleName, 71, "binary options market not found")
	ErrInvalidSettlement                        = errors.Register(ModuleName, 72, "invalid settlement")
	ErrAccountDoesntExist                       = errors.Register(ModuleName, 73, "account doesnt exist")
	ErrSenderIsNotAnAdmin                       = errors.Register(ModuleName, 74, "sender should be a market admin")
	ErrMarketAlreadyScheduledToSettle           = errors.Register(ModuleName, 75, "market is already scheduled to settle")
	ErrGenericMarketNotFound                    = errors.Register(ModuleName, 76, "market not found")
	ErrInvalidDenomDecimal                      = errors.Register(ModuleName, 77, "denom decimal cannot be below 1 or above max scale factor")
	ErrInvalidState                             = errors.Register(ModuleName, 78, "state is invalid")
	ErrTransientOrdersUpToCancelNotSupported    = errors.Register(ModuleName, 79, "transient orders up to cancellation not supported")
	ErrInvalidTrade                             = errors.Register(ModuleName, 80, "invalid trade")
	ErrNoMarginLocked                           = errors.Register(ModuleName, 81, "no margin locked in subaccount")
	ErrInvalidAccessLevel                       = errors.Register(ModuleName, 82, "Invalid access level to perform action")
	ErrInvalidAddress                           = errors.Register(ModuleName, 83, "Invalid address")
	ErrInvalidArgument                          = errors.Register(ModuleName, 84, "Invalid argument")
	ErrInvalidFundsDirection                    = errors.Register(ModuleName, 85, "Invalid funds direction")
	ErrNoFundsProvided                          = errors.Register(ModuleName, 86, "No funds provided")
	ErrInvalidSignature                         = errors.Register(ModuleName, 87, "Invalid signature")
	ErrNoFundsToUnlock                          = errors.Register(ModuleName, 88, "no funds to unlock")
	ErrNoMsgsProvided                           = errors.Register(ModuleName, 89, "No msgs provided")
	ErrNoMsgProvided                            = errors.Register(ModuleName, 90, "No msg provided")
	ErrInvalidAmount                            = errors.Register(ModuleName, 91, "Invalid amount")
	ErrFeatureDisabled                          = errors.Register(ModuleName, 92, "The current feature has been disabled")
	ErrTooMuchOrderMargin                       = errors.Register(ModuleName, 93, "Order has too much margin")
	ErrBadSubaccountNonce                       = errors.Register(ModuleName, 94, "Subaccount nonce is invalid")
	ErrInsufficientFunds                        = errors.Register(ModuleName, 95, "insufficient funds")
)
