// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: injective/exchange/v1beta1/query.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	types "github.com/InjectiveLabs/sdk-go/chain/oracle/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OrderSide int32

const (
	// will return both
	OrderSide_Side_Unspecified OrderSide = 0
	OrderSide_Buy              OrderSide = 1
	OrderSide_Sell             OrderSide = 2
)

var OrderSide_name = map[int32]string{
	0: "Side_Unspecified",
	1: "Buy",
	2: "Sell",
}

var OrderSide_value = map[string]int32{
	"Side_Unspecified": 0,
	"Buy":              1,
	"Sell":             2,
}

func (x OrderSide) String() string {
	return proto.EnumName(OrderSide_name, int32(x))
}

func (OrderSide) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{0}
}

// CancellationStrategy is the list of cancellation strategies.
type CancellationStrategy int32

const (
	// just cancelling in random order in most efficient way
	CancellationStrategy_UnspecifiedOrder CancellationStrategy = 0
	// e.g. for buy orders from lowest to highest price
	CancellationStrategy_FromWorstToBest CancellationStrategy = 1
	// e.g. for buy orders from higest to lowest price
	CancellationStrategy_FromBestToWorst CancellationStrategy = 2
)

var CancellationStrategy_name = map[int32]string{
	0: "UnspecifiedOrder",
	1: "FromWorstToBest",
	2: "FromBestToWorst",
}

var CancellationStrategy_value = map[string]int32{
	"UnspecifiedOrder": 0,
	"FromWorstToBest":  1,
	"FromBestToWorst":  2,
}

func (x CancellationStrategy) String() string {
	return proto.EnumName(CancellationStrategy_name, int32(x))
}

func (CancellationStrategy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{1}
}

type Subaccount struct {
	Trader          string `protobuf:"bytes,1,opt,name=trader,proto3" json:"trader,omitempty"`
	SubaccountNonce uint32 `protobuf:"varint,2,opt,name=subaccount_nonce,json=subaccountNonce,proto3" json:"subaccount_nonce,omitempty"`
}

func (m *Subaccount) Reset()         { *m = Subaccount{} }
func (m *Subaccount) String() string { return proto.CompactTextString(m) }
func (*Subaccount) ProtoMessage()    {}
func (*Subaccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{0}
}
func (m *Subaccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Subaccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Subaccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Subaccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subaccount.Merge(m, src)
}
func (m *Subaccount) XXX_Size() int {
	return m.Size()
}
func (m *Subaccount) XXX_DiscardUnknown() {
	xxx_messageInfo_Subaccount.DiscardUnknown(m)
}

var xxx_messageInfo_Subaccount proto.InternalMessageInfo

func (m *Subaccount) GetTrader() string {
	if m != nil {
		return m.Trader
	}
	return ""
}

func (m *Subaccount) GetSubaccountNonce() uint32 {
	if m != nil {
		return m.SubaccountNonce
	}
	return 0
}

type QuerySubaccountOrdersRequest struct {
	SubaccountId string `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	MarketId     string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QuerySubaccountOrdersRequest) Reset()         { *m = QuerySubaccountOrdersRequest{} }
func (m *QuerySubaccountOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySubaccountOrdersRequest) ProtoMessage()    {}
func (*QuerySubaccountOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{1}
}
func (m *QuerySubaccountOrdersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubaccountOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubaccountOrdersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubaccountOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubaccountOrdersRequest.Merge(m, src)
}
func (m *QuerySubaccountOrdersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubaccountOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubaccountOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubaccountOrdersRequest proto.InternalMessageInfo

func (m *QuerySubaccountOrdersRequest) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

func (m *QuerySubaccountOrdersRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

type QuerySubaccountOrdersResponse struct {
	BuyOrders  []*SubaccountOrderData `protobuf:"bytes,1,rep,name=buy_orders,json=buyOrders,proto3" json:"buy_orders,omitempty"`
	SellOrders []*SubaccountOrderData `protobuf:"bytes,2,rep,name=sell_orders,json=sellOrders,proto3" json:"sell_orders,omitempty"`
}

func (m *QuerySubaccountOrdersResponse) Reset()         { *m = QuerySubaccountOrdersResponse{} }
func (m *QuerySubaccountOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySubaccountOrdersResponse) ProtoMessage()    {}
func (*QuerySubaccountOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{2}
}
func (m *QuerySubaccountOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubaccountOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubaccountOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubaccountOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubaccountOrdersResponse.Merge(m, src)
}
func (m *QuerySubaccountOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubaccountOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubaccountOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubaccountOrdersResponse proto.InternalMessageInfo

func (m *QuerySubaccountOrdersResponse) GetBuyOrders() []*SubaccountOrderData {
	if m != nil {
		return m.BuyOrders
	}
	return nil
}

func (m *QuerySubaccountOrdersResponse) GetSellOrders() []*SubaccountOrderData {
	if m != nil {
		return m.SellOrders
	}
	return nil
}

type SubaccountOrderbookMetadataWithMarket struct {
	Metadata *SubaccountOrderbookMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	MarketId string                       `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	IsBuy    bool                         `protobuf:"varint,3,opt,name=isBuy,proto3" json:"isBuy,omitempty"`
}

func (m *SubaccountOrderbookMetadataWithMarket) Reset()         { *m = SubaccountOrderbookMetadataWithMarket{} }
func (m *SubaccountOrderbookMetadataWithMarket) String() string { return proto.CompactTextString(m) }
func (*SubaccountOrderbookMetadataWithMarket) ProtoMessage()    {}
func (*SubaccountOrderbookMetadataWithMarket) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{3}
}
func (m *SubaccountOrderbookMetadataWithMarket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubaccountOrderbookMetadataWithMarket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubaccountOrderbookMetadataWithMarket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubaccountOrderbookMetadataWithMarket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubaccountOrderbookMetadataWithMarket.Merge(m, src)
}
func (m *SubaccountOrderbookMetadataWithMarket) XXX_Size() int {
	return m.Size()
}
func (m *SubaccountOrderbookMetadataWithMarket) XXX_DiscardUnknown() {
	xxx_messageInfo_SubaccountOrderbookMetadataWithMarket.DiscardUnknown(m)
}

var xxx_messageInfo_SubaccountOrderbookMetadataWithMarket proto.InternalMessageInfo

func (m *SubaccountOrderbookMetadataWithMarket) GetMetadata() *SubaccountOrderbookMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *SubaccountOrderbookMetadataWithMarket) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *SubaccountOrderbookMetadataWithMarket) GetIsBuy() bool {
	if m != nil {
		return m.IsBuy
	}
	return false
}

// QueryExchangeParamsRequest is the request type for the Query/ExchangeParams
// RPC method.
type QueryExchangeParamsRequest struct {
}

func (m *QueryExchangeParamsRequest) Reset()         { *m = QueryExchangeParamsRequest{} }
func (m *QueryExchangeParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryExchangeParamsRequest) ProtoMessage()    {}
func (*QueryExchangeParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{4}
}
func (m *QueryExchangeParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExchangeParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExchangeParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExchangeParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExchangeParamsRequest.Merge(m, src)
}
func (m *QueryExchangeParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExchangeParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExchangeParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExchangeParamsRequest proto.InternalMessageInfo

// QueryExchangeParamsRequest is the response type for the Query/ExchangeParams
// RPC method.
type QueryExchangeParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryExchangeParamsResponse) Reset()         { *m = QueryExchangeParamsResponse{} }
func (m *QueryExchangeParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExchangeParamsResponse) ProtoMessage()    {}
func (*QueryExchangeParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{5}
}
func (m *QueryExchangeParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExchangeParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExchangeParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExchangeParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExchangeParamsResponse.Merge(m, src)
}
func (m *QueryExchangeParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExchangeParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExchangeParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExchangeParamsResponse proto.InternalMessageInfo

func (m *QueryExchangeParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QuerySubaccountDepositsRequest is the request type for the
// Query/SubaccountDeposits RPC method.
type QuerySubaccountDepositsRequest struct {
	SubaccountId string      `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	Subaccount   *Subaccount `protobuf:"bytes,2,opt,name=subaccount,proto3" json:"subaccount,omitempty"`
}

func (m *QuerySubaccountDepositsRequest) Reset()         { *m = QuerySubaccountDepositsRequest{} }
func (m *QuerySubaccountDepositsRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySubaccountDepositsRequest) ProtoMessage()    {}
func (*QuerySubaccountDepositsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{6}
}
func (m *QuerySubaccountDepositsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubaccountDepositsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubaccountDepositsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubaccountDepositsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubaccountDepositsRequest.Merge(m, src)
}
func (m *QuerySubaccountDepositsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubaccountDepositsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubaccountDepositsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubaccountDepositsRequest proto.InternalMessageInfo

func (m *QuerySubaccountDepositsRequest) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

func (m *QuerySubaccountDepositsRequest) GetSubaccount() *Subaccount {
	if m != nil {
		return m.Subaccount
	}
	return nil
}

// QuerySubaccountDepositsResponse is the response type for the
// Query/SubaccountDeposits RPC method.
type QuerySubaccountDepositsResponse struct {
	Deposits map[string]*Deposit `protobuf:"bytes,1,rep,name=deposits,proto3" json:"deposits,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *QuerySubaccountDepositsResponse) Reset()         { *m = QuerySubaccountDepositsResponse{} }
func (m *QuerySubaccountDepositsResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySubaccountDepositsResponse) ProtoMessage()    {}
func (*QuerySubaccountDepositsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{7}
}
func (m *QuerySubaccountDepositsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubaccountDepositsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubaccountDepositsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubaccountDepositsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubaccountDepositsResponse.Merge(m, src)
}
func (m *QuerySubaccountDepositsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubaccountDepositsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubaccountDepositsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubaccountDepositsResponse proto.InternalMessageInfo

func (m *QuerySubaccountDepositsResponse) GetDeposits() map[string]*Deposit {
	if m != nil {
		return m.Deposits
	}
	return nil
}

// QueryExchangeBalancesRequest is the request type for the
// Query/ExchangeBalances RPC method.
type QueryExchangeBalancesRequest struct {
}

func (m *QueryExchangeBalancesRequest) Reset()         { *m = QueryExchangeBalancesRequest{} }
func (m *QueryExchangeBalancesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryExchangeBalancesRequest) ProtoMessage()    {}
func (*QueryExchangeBalancesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{8}
}
func (m *QueryExchangeBalancesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExchangeBalancesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExchangeBalancesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExchangeBalancesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExchangeBalancesRequest.Merge(m, src)
}
func (m *QueryExchangeBalancesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExchangeBalancesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExchangeBalancesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExchangeBalancesRequest proto.InternalMessageInfo

// QuerySubaccountDepositsResponse is the response type for the
// Query/SubaccountDeposits RPC method.
type QueryExchangeBalancesResponse struct {
	Balances []Balance `protobuf:"bytes,1,rep,name=balances,proto3" json:"balances"`
}

func (m *QueryExchangeBalancesResponse) Reset()         { *m = QueryExchangeBalancesResponse{} }
func (m *QueryExchangeBalancesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExchangeBalancesResponse) ProtoMessage()    {}
func (*QueryExchangeBalancesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{9}
}
func (m *QueryExchangeBalancesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExchangeBalancesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExchangeBalancesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExchangeBalancesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExchangeBalancesResponse.Merge(m, src)
}
func (m *QueryExchangeBalancesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExchangeBalancesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExchangeBalancesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExchangeBalancesResponse proto.InternalMessageInfo

func (m *QueryExchangeBalancesResponse) GetBalances() []Balance {
	if m != nil {
		return m.Balances
	}
	return nil
}

// QueryAggregateVolumeRequest is the request type for the Query/AggregateVolume
// RPC method.
type QueryAggregateVolumeRequest struct {
	// can either be an address or a subaccount
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *QueryAggregateVolumeRequest) Reset()         { *m = QueryAggregateVolumeRequest{} }
func (m *QueryAggregateVolumeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAggregateVolumeRequest) ProtoMessage()    {}
func (*QueryAggregateVolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{10}
}
func (m *QueryAggregateVolumeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAggregateVolumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAggregateVolumeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAggregateVolumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAggregateVolumeRequest.Merge(m, src)
}
func (m *QueryAggregateVolumeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAggregateVolumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAggregateVolumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAggregateVolumeRequest proto.InternalMessageInfo

func (m *QueryAggregateVolumeRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

// QueryAggregateVolumeResponse is the response type for the
// Query/AggregateVolume RPC method.
type QueryAggregateVolumeResponse struct {
	// if an address is specified, then the aggregate_volumes will aggregate the
	// volumes across all subaccounts for the address
	AggregateVolumes []*MarketVolume `protobuf:"bytes,1,rep,name=aggregate_volumes,json=aggregateVolumes,proto3" json:"aggregate_volumes,omitempty"`
}

func (m *QueryAggregateVolumeResponse) Reset()         { *m = QueryAggregateVolumeResponse{} }
func (m *QueryAggregateVolumeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAggregateVolumeResponse) ProtoMessage()    {}
func (*QueryAggregateVolumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{11}
}
func (m *QueryAggregateVolumeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAggregateVolumeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAggregateVolumeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAggregateVolumeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAggregateVolumeResponse.Merge(m, src)
}
func (m *QueryAggregateVolumeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAggregateVolumeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAggregateVolumeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAggregateVolumeResponse proto.InternalMessageInfo

func (m *QueryAggregateVolumeResponse) GetAggregateVolumes() []*MarketVolume {
	if m != nil {
		return m.AggregateVolumes
	}
	return nil
}

// QueryAggregateVolumesRequest is the request type for the
// Query/AggregateVolumes RPC method.
type QueryAggregateVolumesRequest struct {
	Accounts  []string `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
	MarketIds []string `protobuf:"bytes,2,rep,name=market_ids,json=marketIds,proto3" json:"market_ids,omitempty"`
}

func (m *QueryAggregateVolumesRequest) Reset()         { *m = QueryAggregateVolumesRequest{} }
func (m *QueryAggregateVolumesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAggregateVolumesRequest) ProtoMessage()    {}
func (*QueryAggregateVolumesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{12}
}
func (m *QueryAggregateVolumesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAggregateVolumesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAggregateVolumesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAggregateVolumesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAggregateVolumesRequest.Merge(m, src)
}
func (m *QueryAggregateVolumesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAggregateVolumesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAggregateVolumesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAggregateVolumesRequest proto.InternalMessageInfo

func (m *QueryAggregateVolumesRequest) GetAccounts() []string {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *QueryAggregateVolumesRequest) GetMarketIds() []string {
	if m != nil {
		return m.MarketIds
	}
	return nil
}

// QueryAggregateVolumesResponse is the response type for the
// Query/AggregateVolumes RPC method.
type QueryAggregateVolumesResponse struct {
	// the aggregate volume records for the accounts specified
	AggregateAccountVolumes []*AggregateAccountVolumeRecord `protobuf:"bytes,1,rep,name=aggregate_account_volumes,json=aggregateAccountVolumes,proto3" json:"aggregate_account_volumes,omitempty"`
	// the aggregate volumes for the markets specified
	AggregateMarketVolumes []*MarketVolume `protobuf:"bytes,2,rep,name=aggregate_market_volumes,json=aggregateMarketVolumes,proto3" json:"aggregate_market_volumes,omitempty"`
}

func (m *QueryAggregateVolumesResponse) Reset()         { *m = QueryAggregateVolumesResponse{} }
func (m *QueryAggregateVolumesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAggregateVolumesResponse) ProtoMessage()    {}
func (*QueryAggregateVolumesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{13}
}
func (m *QueryAggregateVolumesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAggregateVolumesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAggregateVolumesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAggregateVolumesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAggregateVolumesResponse.Merge(m, src)
}
func (m *QueryAggregateVolumesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAggregateVolumesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAggregateVolumesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAggregateVolumesResponse proto.InternalMessageInfo

func (m *QueryAggregateVolumesResponse) GetAggregateAccountVolumes() []*AggregateAccountVolumeRecord {
	if m != nil {
		return m.AggregateAccountVolumes
	}
	return nil
}

func (m *QueryAggregateVolumesResponse) GetAggregateMarketVolumes() []*MarketVolume {
	if m != nil {
		return m.AggregateMarketVolumes
	}
	return nil
}

// QueryAggregateMarketVolumeRequest is the request type for the
// Query/AggregateMarketVolume RPC method.
type QueryAggregateMarketVolumeRequest struct {
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QueryAggregateMarketVolumeRequest) Reset()         { *m = QueryAggregateMarketVolumeRequest{} }
func (m *QueryAggregateMarketVolumeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAggregateMarketVolumeRequest) ProtoMessage()    {}
func (*QueryAggregateMarketVolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{14}
}
func (m *QueryAggregateMarketVolumeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAggregateMarketVolumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAggregateMarketVolumeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAggregateMarketVolumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAggregateMarketVolumeRequest.Merge(m, src)
}
func (m *QueryAggregateMarketVolumeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAggregateMarketVolumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAggregateMarketVolumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAggregateMarketVolumeRequest proto.InternalMessageInfo

func (m *QueryAggregateMarketVolumeRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

// QueryAggregateMarketVolumeResponse is the response type for the
// Query/AggregateMarketVolume RPC method.
type QueryAggregateMarketVolumeResponse struct {
	Volume VolumeRecord `protobuf:"bytes,1,opt,name=volume,proto3" json:"volume"`
}

func (m *QueryAggregateMarketVolumeResponse) Reset()         { *m = QueryAggregateMarketVolumeResponse{} }
func (m *QueryAggregateMarketVolumeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAggregateMarketVolumeResponse) ProtoMessage()    {}
func (*QueryAggregateMarketVolumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{15}
}
func (m *QueryAggregateMarketVolumeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAggregateMarketVolumeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAggregateMarketVolumeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAggregateMarketVolumeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAggregateMarketVolumeResponse.Merge(m, src)
}
func (m *QueryAggregateMarketVolumeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAggregateMarketVolumeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAggregateMarketVolumeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAggregateMarketVolumeResponse proto.InternalMessageInfo

func (m *QueryAggregateMarketVolumeResponse) GetVolume() VolumeRecord {
	if m != nil {
		return m.Volume
	}
	return VolumeRecord{}
}

// QueryDenomDecimalRequest is the request type for the Query/DenomDecimal RPC
// method.
type QueryDenomDecimalRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryDenomDecimalRequest) Reset()         { *m = QueryDenomDecimalRequest{} }
func (m *QueryDenomDecimalRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDenomDecimalRequest) ProtoMessage()    {}
func (*QueryDenomDecimalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{16}
}
func (m *QueryDenomDecimalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDenomDecimalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDenomDecimalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDenomDecimalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDenomDecimalRequest.Merge(m, src)
}
func (m *QueryDenomDecimalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDenomDecimalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDenomDecimalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDenomDecimalRequest proto.InternalMessageInfo

func (m *QueryDenomDecimalRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// QueryDenomDecimalResponse is the response type for the Query/DenomDecimal RPC
// method.
type QueryDenomDecimalResponse struct {
	Decimal uint64 `protobuf:"varint,1,opt,name=decimal,proto3" json:"decimal,omitempty"`
}

func (m *QueryDenomDecimalResponse) Reset()         { *m = QueryDenomDecimalResponse{} }
func (m *QueryDenomDecimalResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDenomDecimalResponse) ProtoMessage()    {}
func (*QueryDenomDecimalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{17}
}
func (m *QueryDenomDecimalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDenomDecimalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDenomDecimalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDenomDecimalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDenomDecimalResponse.Merge(m, src)
}
func (m *QueryDenomDecimalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDenomDecimalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDenomDecimalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDenomDecimalResponse proto.InternalMessageInfo

func (m *QueryDenomDecimalResponse) GetDecimal() uint64 {
	if m != nil {
		return m.Decimal
	}
	return 0
}

// QueryDenomDecimalsRequest is the request type for the Query/DenomDecimals RPC
// method.
type QueryDenomDecimalsRequest struct {
	// denoms can be empty to query all denom decimals
	Denoms []string `protobuf:"bytes,1,rep,name=denoms,proto3" json:"denoms,omitempty"`
}

func (m *QueryDenomDecimalsRequest) Reset()         { *m = QueryDenomDecimalsRequest{} }
func (m *QueryDenomDecimalsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDenomDecimalsRequest) ProtoMessage()    {}
func (*QueryDenomDecimalsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{18}
}
func (m *QueryDenomDecimalsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDenomDecimalsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDenomDecimalsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDenomDecimalsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDenomDecimalsRequest.Merge(m, src)
}
func (m *QueryDenomDecimalsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDenomDecimalsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDenomDecimalsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDenomDecimalsRequest proto.InternalMessageInfo

func (m *QueryDenomDecimalsRequest) GetDenoms() []string {
	if m != nil {
		return m.Denoms
	}
	return nil
}

// QueryDenomDecimalsRequest is the response type for the Query/DenomDecimals
// RPC method.
type QueryDenomDecimalsResponse struct {
	DenomDecimals []DenomDecimals `protobuf:"bytes,1,rep,name=denom_decimals,json=denomDecimals,proto3" json:"denom_decimals"`
}

func (m *QueryDenomDecimalsResponse) Reset()         { *m = QueryDenomDecimalsResponse{} }
func (m *QueryDenomDecimalsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDenomDecimalsResponse) ProtoMessage()    {}
func (*QueryDenomDecimalsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{19}
}
func (m *QueryDenomDecimalsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDenomDecimalsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDenomDecimalsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDenomDecimalsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDenomDecimalsResponse.Merge(m, src)
}
func (m *QueryDenomDecimalsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDenomDecimalsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDenomDecimalsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDenomDecimalsResponse proto.InternalMessageInfo

func (m *QueryDenomDecimalsResponse) GetDenomDecimals() []DenomDecimals {
	if m != nil {
		return m.DenomDecimals
	}
	return nil
}

// QueryAggregateMarketVolumesRequest is the request type for the
// Query/AggregateMarketVolumes RPC method.
type QueryAggregateMarketVolumesRequest struct {
	MarketIds []string `protobuf:"bytes,1,rep,name=market_ids,json=marketIds,proto3" json:"market_ids,omitempty"`
}

func (m *QueryAggregateMarketVolumesRequest) Reset()         { *m = QueryAggregateMarketVolumesRequest{} }
func (m *QueryAggregateMarketVolumesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAggregateMarketVolumesRequest) ProtoMessage()    {}
func (*QueryAggregateMarketVolumesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{20}
}
func (m *QueryAggregateMarketVolumesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAggregateMarketVolumesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAggregateMarketVolumesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAggregateMarketVolumesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAggregateMarketVolumesRequest.Merge(m, src)
}
func (m *QueryAggregateMarketVolumesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAggregateMarketVolumesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAggregateMarketVolumesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAggregateMarketVolumesRequest proto.InternalMessageInfo

func (m *QueryAggregateMarketVolumesRequest) GetMarketIds() []string {
	if m != nil {
		return m.MarketIds
	}
	return nil
}

// QueryAggregateMarketVolumesResponse is the response type for the
// Query/AggregateMarketVolumes RPC method.
type QueryAggregateMarketVolumesResponse struct {
	// the aggregate volumes for the entire market
	Volumes []*MarketVolume `protobuf:"bytes,1,rep,name=volumes,proto3" json:"volumes,omitempty"`
}

func (m *QueryAggregateMarketVolumesResponse) Reset()         { *m = QueryAggregateMarketVolumesResponse{} }
func (m *QueryAggregateMarketVolumesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAggregateMarketVolumesResponse) ProtoMessage()    {}
func (*QueryAggregateMarketVolumesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{21}
}
func (m *QueryAggregateMarketVolumesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAggregateMarketVolumesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAggregateMarketVolumesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAggregateMarketVolumesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAggregateMarketVolumesResponse.Merge(m, src)
}
func (m *QueryAggregateMarketVolumesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAggregateMarketVolumesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAggregateMarketVolumesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAggregateMarketVolumesResponse proto.InternalMessageInfo

func (m *QueryAggregateMarketVolumesResponse) GetVolumes() []*MarketVolume {
	if m != nil {
		return m.Volumes
	}
	return nil
}

// QuerySubaccountDepositsRequest is the request type for the
// Query/SubaccountDeposits RPC method.
type QuerySubaccountDepositRequest struct {
	SubaccountId string `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	Denom        string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QuerySubaccountDepositRequest) Reset()         { *m = QuerySubaccountDepositRequest{} }
func (m *QuerySubaccountDepositRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySubaccountDepositRequest) ProtoMessage()    {}
func (*QuerySubaccountDepositRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{22}
}
func (m *QuerySubaccountDepositRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubaccountDepositRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubaccountDepositRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubaccountDepositRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubaccountDepositRequest.Merge(m, src)
}
func (m *QuerySubaccountDepositRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubaccountDepositRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubaccountDepositRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubaccountDepositRequest proto.InternalMessageInfo

func (m *QuerySubaccountDepositRequest) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

func (m *QuerySubaccountDepositRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// QuerySubaccountDepositsResponse is the response type for the
// Query/SubaccountDeposits RPC method.
type QuerySubaccountDepositResponse struct {
	Deposits *Deposit `protobuf:"bytes,1,opt,name=deposits,proto3" json:"deposits,omitempty"`
}

func (m *QuerySubaccountDepositResponse) Reset()         { *m = QuerySubaccountDepositResponse{} }
func (m *QuerySubaccountDepositResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySubaccountDepositResponse) ProtoMessage()    {}
func (*QuerySubaccountDepositResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{23}
}
func (m *QuerySubaccountDepositResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubaccountDepositResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubaccountDepositResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubaccountDepositResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubaccountDepositResponse.Merge(m, src)
}
func (m *QuerySubaccountDepositResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubaccountDepositResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubaccountDepositResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubaccountDepositResponse proto.InternalMessageInfo

func (m *QuerySubaccountDepositResponse) GetDeposits() *Deposit {
	if m != nil {
		return m.Deposits
	}
	return nil
}

// QuerySpotMarketsRequest is the request type for the Query/SpotMarkets RPC
// method.
type QuerySpotMarketsRequest struct {
	// Status of the market, for convenience it is set to string - not enum
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Filter by market IDs
	MarketIds []string `protobuf:"bytes,2,rep,name=market_ids,json=marketIds,proto3" json:"market_ids,omitempty"`
}

func (m *QuerySpotMarketsRequest) Reset()         { *m = QuerySpotMarketsRequest{} }
func (m *QuerySpotMarketsRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySpotMarketsRequest) ProtoMessage()    {}
func (*QuerySpotMarketsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{24}
}
func (m *QuerySpotMarketsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpotMarketsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpotMarketsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpotMarketsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpotMarketsRequest.Merge(m, src)
}
func (m *QuerySpotMarketsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpotMarketsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpotMarketsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpotMarketsRequest proto.InternalMessageInfo

func (m *QuerySpotMarketsRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *QuerySpotMarketsRequest) GetMarketIds() []string {
	if m != nil {
		return m.MarketIds
	}
	return nil
}

// QuerySpotMarketsResponse is the response type for the Query/SpotMarkets RPC
// method.
type QuerySpotMarketsResponse struct {
	Markets []*SpotMarket `protobuf:"bytes,1,rep,name=markets,proto3" json:"markets,omitempty"`
}

func (m *QuerySpotMarketsResponse) Reset()         { *m = QuerySpotMarketsResponse{} }
func (m *QuerySpotMarketsResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySpotMarketsResponse) ProtoMessage()    {}
func (*QuerySpotMarketsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{25}
}
func (m *QuerySpotMarketsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpotMarketsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpotMarketsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpotMarketsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpotMarketsResponse.Merge(m, src)
}
func (m *QuerySpotMarketsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpotMarketsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpotMarketsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpotMarketsResponse proto.InternalMessageInfo

func (m *QuerySpotMarketsResponse) GetMarkets() []*SpotMarket {
	if m != nil {
		return m.Markets
	}
	return nil
}

// QuerySpotMarketRequest is the request type for the Query/SpotMarket RPC
// method.
type QuerySpotMarketRequest struct {
	// Market ID for the market
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QuerySpotMarketRequest) Reset()         { *m = QuerySpotMarketRequest{} }
func (m *QuerySpotMarketRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySpotMarketRequest) ProtoMessage()    {}
func (*QuerySpotMarketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{26}
}
func (m *QuerySpotMarketRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpotMarketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpotMarketRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpotMarketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpotMarketRequest.Merge(m, src)
}
func (m *QuerySpotMarketRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpotMarketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpotMarketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpotMarketRequest proto.InternalMessageInfo

func (m *QuerySpotMarketRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

// QuerySpotMarketResponse is the response type for the Query/SpotMarket RPC
// method.
type QuerySpotMarketResponse struct {
	Market *SpotMarket `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
}

func (m *QuerySpotMarketResponse) Reset()         { *m = QuerySpotMarketResponse{} }
func (m *QuerySpotMarketResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySpotMarketResponse) ProtoMessage()    {}
func (*QuerySpotMarketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{27}
}
func (m *QuerySpotMarketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpotMarketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpotMarketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpotMarketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpotMarketResponse.Merge(m, src)
}
func (m *QuerySpotMarketResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpotMarketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpotMarketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpotMarketResponse proto.InternalMessageInfo

func (m *QuerySpotMarketResponse) GetMarket() *SpotMarket {
	if m != nil {
		return m.Market
	}
	return nil
}

// QuerySpotOrderbookRequest is the request type for the Query/SpotOrderbook RPC
// method.
type QuerySpotOrderbookRequest struct {
	// Market ID for the market
	MarketId                string                       `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	Limit                   uint64                       `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	OrderSide               OrderSide                    `protobuf:"varint,3,opt,name=order_side,json=orderSide,proto3,enum=injective.exchange.v1beta1.OrderSide" json:"order_side,omitempty"`
	LimitCumulativeNotional *cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=limit_cumulative_notional,json=limitCumulativeNotional,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"limit_cumulative_notional,omitempty"`
	LimitCumulativeQuantity *cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=limit_cumulative_quantity,json=limitCumulativeQuantity,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"limit_cumulative_quantity,omitempty"`
}

func (m *QuerySpotOrderbookRequest) Reset()         { *m = QuerySpotOrderbookRequest{} }
func (m *QuerySpotOrderbookRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySpotOrderbookRequest) ProtoMessage()    {}
func (*QuerySpotOrderbookRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{28}
}
func (m *QuerySpotOrderbookRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpotOrderbookRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpotOrderbookRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpotOrderbookRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpotOrderbookRequest.Merge(m, src)
}
func (m *QuerySpotOrderbookRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpotOrderbookRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpotOrderbookRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpotOrderbookRequest proto.InternalMessageInfo

func (m *QuerySpotOrderbookRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *QuerySpotOrderbookRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *QuerySpotOrderbookRequest) GetOrderSide() OrderSide {
	if m != nil {
		return m.OrderSide
	}
	return OrderSide_Side_Unspecified
}

// QuerySpotOrderbookResponse is the response type for the Query/SpotOrderbook
// RPC method.
type QuerySpotOrderbookResponse struct {
	BuysPriceLevel  []*Level `protobuf:"bytes,1,rep,name=buys_price_level,json=buysPriceLevel,proto3" json:"buys_price_level,omitempty"`
	SellsPriceLevel []*Level `protobuf:"bytes,2,rep,name=sells_price_level,json=sellsPriceLevel,proto3" json:"sells_price_level,omitempty"`
}

func (m *QuerySpotOrderbookResponse) Reset()         { *m = QuerySpotOrderbookResponse{} }
func (m *QuerySpotOrderbookResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySpotOrderbookResponse) ProtoMessage()    {}
func (*QuerySpotOrderbookResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{29}
}
func (m *QuerySpotOrderbookResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpotOrderbookResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpotOrderbookResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpotOrderbookResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpotOrderbookResponse.Merge(m, src)
}
func (m *QuerySpotOrderbookResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpotOrderbookResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpotOrderbookResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpotOrderbookResponse proto.InternalMessageInfo

func (m *QuerySpotOrderbookResponse) GetBuysPriceLevel() []*Level {
	if m != nil {
		return m.BuysPriceLevel
	}
	return nil
}

func (m *QuerySpotOrderbookResponse) GetSellsPriceLevel() []*Level {
	if m != nil {
		return m.SellsPriceLevel
	}
	return nil
}

type FullSpotMarket struct {
	Market *SpotMarket `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	// mid_price_and_tob defines the mid price for this market and the best ask
	// and bid orders
	MidPriceAndTob *MidPriceAndTOB `protobuf:"bytes,2,opt,name=mid_price_and_tob,json=midPriceAndTob,proto3" json:"mid_price_and_tob,omitempty"`
}

func (m *FullSpotMarket) Reset()         { *m = FullSpotMarket{} }
func (m *FullSpotMarket) String() string { return proto.CompactTextString(m) }
func (*FullSpotMarket) ProtoMessage()    {}
func (*FullSpotMarket) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{30}
}
func (m *FullSpotMarket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FullSpotMarket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FullSpotMarket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FullSpotMarket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FullSpotMarket.Merge(m, src)
}
func (m *FullSpotMarket) XXX_Size() int {
	return m.Size()
}
func (m *FullSpotMarket) XXX_DiscardUnknown() {
	xxx_messageInfo_FullSpotMarket.DiscardUnknown(m)
}

var xxx_messageInfo_FullSpotMarket proto.InternalMessageInfo

func (m *FullSpotMarket) GetMarket() *SpotMarket {
	if m != nil {
		return m.Market
	}
	return nil
}

func (m *FullSpotMarket) GetMidPriceAndTob() *MidPriceAndTOB {
	if m != nil {
		return m.MidPriceAndTob
	}
	return nil
}

// QueryFullSpotMarketsRequest is the request type for the Query/FullSpotMarkets
// RPC method.
type QueryFullSpotMarketsRequest struct {
	// Status of the market, for convenience it is set to string - not enum
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Filter by market IDs
	MarketIds []string `protobuf:"bytes,2,rep,name=market_ids,json=marketIds,proto3" json:"market_ids,omitempty"`
	// Flag to return the markets mid price and top of the book buy and sell
	// orders.
	WithMidPriceAndTob bool `protobuf:"varint,3,opt,name=with_mid_price_and_tob,json=withMidPriceAndTob,proto3" json:"with_mid_price_and_tob,omitempty"`
}

func (m *QueryFullSpotMarketsRequest) Reset()         { *m = QueryFullSpotMarketsRequest{} }
func (m *QueryFullSpotMarketsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFullSpotMarketsRequest) ProtoMessage()    {}
func (*QueryFullSpotMarketsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{31}
}
func (m *QueryFullSpotMarketsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFullSpotMarketsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFullSpotMarketsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFullSpotMarketsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFullSpotMarketsRequest.Merge(m, src)
}
func (m *QueryFullSpotMarketsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFullSpotMarketsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFullSpotMarketsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFullSpotMarketsRequest proto.InternalMessageInfo

func (m *QueryFullSpotMarketsRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *QueryFullSpotMarketsRequest) GetMarketIds() []string {
	if m != nil {
		return m.MarketIds
	}
	return nil
}

func (m *QueryFullSpotMarketsRequest) GetWithMidPriceAndTob() bool {
	if m != nil {
		return m.WithMidPriceAndTob
	}
	return false
}

// QueryFullSpotMarketsResponse is the response type for the
// Query/FullSpotMarkets RPC method.
type QueryFullSpotMarketsResponse struct {
	Markets []*FullSpotMarket `protobuf:"bytes,1,rep,name=markets,proto3" json:"markets,omitempty"`
}

func (m *QueryFullSpotMarketsResponse) Reset()         { *m = QueryFullSpotMarketsResponse{} }
func (m *QueryFullSpotMarketsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFullSpotMarketsResponse) ProtoMessage()    {}
func (*QueryFullSpotMarketsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{32}
}
func (m *QueryFullSpotMarketsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFullSpotMarketsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFullSpotMarketsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFullSpotMarketsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFullSpotMarketsResponse.Merge(m, src)
}
func (m *QueryFullSpotMarketsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFullSpotMarketsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFullSpotMarketsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFullSpotMarketsResponse proto.InternalMessageInfo

func (m *QueryFullSpotMarketsResponse) GetMarkets() []*FullSpotMarket {
	if m != nil {
		return m.Markets
	}
	return nil
}

// QuerySpotMarketRequest is the request type for the Query/SpotMarket RPC
// method.
type QueryFullSpotMarketRequest struct {
	// Market ID for the market
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Flag to return the markets mid price and top of the book buy and sell
	// orders.
	WithMidPriceAndTob bool `protobuf:"varint,2,opt,name=with_mid_price_and_tob,json=withMidPriceAndTob,proto3" json:"with_mid_price_and_tob,omitempty"`
}

func (m *QueryFullSpotMarketRequest) Reset()         { *m = QueryFullSpotMarketRequest{} }
func (m *QueryFullSpotMarketRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFullSpotMarketRequest) ProtoMessage()    {}
func (*QueryFullSpotMarketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{33}
}
func (m *QueryFullSpotMarketRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFullSpotMarketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFullSpotMarketRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFullSpotMarketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFullSpotMarketRequest.Merge(m, src)
}
func (m *QueryFullSpotMarketRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFullSpotMarketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFullSpotMarketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFullSpotMarketRequest proto.InternalMessageInfo

func (m *QueryFullSpotMarketRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *QueryFullSpotMarketRequest) GetWithMidPriceAndTob() bool {
	if m != nil {
		return m.WithMidPriceAndTob
	}
	return false
}

// QuerySpotMarketResponse is the response type for the Query/SpotMarket RPC
// method.
type QueryFullSpotMarketResponse struct {
	Market *FullSpotMarket `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
}

func (m *QueryFullSpotMarketResponse) Reset()         { *m = QueryFullSpotMarketResponse{} }
func (m *QueryFullSpotMarketResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFullSpotMarketResponse) ProtoMessage()    {}
func (*QueryFullSpotMarketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{34}
}
func (m *QueryFullSpotMarketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFullSpotMarketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFullSpotMarketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFullSpotMarketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFullSpotMarketResponse.Merge(m, src)
}
func (m *QueryFullSpotMarketResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFullSpotMarketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFullSpotMarketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFullSpotMarketResponse proto.InternalMessageInfo

func (m *QueryFullSpotMarketResponse) GetMarket() *FullSpotMarket {
	if m != nil {
		return m.Market
	}
	return nil
}

// QuerySpotOrdersByHashesRequest is the request type for the
// Query/SpotOrdersByHashes RPC method.
type QuerySpotOrdersByHashesRequest struct {
	// Market ID for the market
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// SubaccountID of the trader
	SubaccountId string `protobuf:"bytes,2,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	// the order hashes
	OrderHashes []string `protobuf:"bytes,3,rep,name=order_hashes,json=orderHashes,proto3" json:"order_hashes,omitempty"`
}

func (m *QuerySpotOrdersByHashesRequest) Reset()         { *m = QuerySpotOrdersByHashesRequest{} }
func (m *QuerySpotOrdersByHashesRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySpotOrdersByHashesRequest) ProtoMessage()    {}
func (*QuerySpotOrdersByHashesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{35}
}
func (m *QuerySpotOrdersByHashesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpotOrdersByHashesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpotOrdersByHashesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpotOrdersByHashesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpotOrdersByHashesRequest.Merge(m, src)
}
func (m *QuerySpotOrdersByHashesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpotOrdersByHashesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpotOrdersByHashesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpotOrdersByHashesRequest proto.InternalMessageInfo

func (m *QuerySpotOrdersByHashesRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *QuerySpotOrdersByHashesRequest) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

func (m *QuerySpotOrdersByHashesRequest) GetOrderHashes() []string {
	if m != nil {
		return m.OrderHashes
	}
	return nil
}

// QuerySpotOrdersByHashesResponse is the response type for the
// Query/SpotOrdersByHashes RPC method.
type QuerySpotOrdersByHashesResponse struct {
	Orders []*TrimmedSpotLimitOrder `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (m *QuerySpotOrdersByHashesResponse) Reset()         { *m = QuerySpotOrdersByHashesResponse{} }
func (m *QuerySpotOrdersByHashesResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySpotOrdersByHashesResponse) ProtoMessage()    {}
func (*QuerySpotOrdersByHashesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{36}
}
func (m *QuerySpotOrdersByHashesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpotOrdersByHashesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpotOrdersByHashesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpotOrdersByHashesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpotOrdersByHashesResponse.Merge(m, src)
}
func (m *QuerySpotOrdersByHashesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpotOrdersByHashesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpotOrdersByHashesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpotOrdersByHashesResponse proto.InternalMessageInfo

func (m *QuerySpotOrdersByHashesResponse) GetOrders() []*TrimmedSpotLimitOrder {
	if m != nil {
		return m.Orders
	}
	return nil
}

// QueryTraderSpotOrdersRequest is the request type for the
// Query/TraderSpotOrders RPC method.
type QueryTraderSpotOrdersRequest struct {
	// Market ID for the market
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// SubaccountID of the trader
	SubaccountId string `protobuf:"bytes,2,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
}

func (m *QueryTraderSpotOrdersRequest) Reset()         { *m = QueryTraderSpotOrdersRequest{} }
func (m *QueryTraderSpotOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTraderSpotOrdersRequest) ProtoMessage()    {}
func (*QueryTraderSpotOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{37}
}
func (m *QueryTraderSpotOrdersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTraderSpotOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTraderSpotOrdersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTraderSpotOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTraderSpotOrdersRequest.Merge(m, src)
}
func (m *QueryTraderSpotOrdersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTraderSpotOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTraderSpotOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTraderSpotOrdersRequest proto.InternalMessageInfo

func (m *QueryTraderSpotOrdersRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *QueryTraderSpotOrdersRequest) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

// QueryAccountAddressSpotOrdersRequest is the request type for the
// Query/AccountAddressSpotOrders RPC method.
type QueryAccountAddressSpotOrdersRequest struct {
	// Market ID for the market
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Account address of the trader
	AccountAddress string `protobuf:"bytes,2,opt,name=account_address,json=accountAddress,proto3" json:"account_address,omitempty"`
}

func (m *QueryAccountAddressSpotOrdersRequest) Reset()         { *m = QueryAccountAddressSpotOrdersRequest{} }
func (m *QueryAccountAddressSpotOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAccountAddressSpotOrdersRequest) ProtoMessage()    {}
func (*QueryAccountAddressSpotOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{38}
}
func (m *QueryAccountAddressSpotOrdersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAccountAddressSpotOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAccountAddressSpotOrdersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAccountAddressSpotOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAccountAddressSpotOrdersRequest.Merge(m, src)
}
func (m *QueryAccountAddressSpotOrdersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAccountAddressSpotOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAccountAddressSpotOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAccountAddressSpotOrdersRequest proto.InternalMessageInfo

func (m *QueryAccountAddressSpotOrdersRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *QueryAccountAddressSpotOrdersRequest) GetAccountAddress() string {
	if m != nil {
		return m.AccountAddress
	}
	return ""
}

type TrimmedSpotLimitOrder struct {
	// price of the order
	Price cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=price,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"price"`
	// quantity of the order
	Quantity cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=quantity,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"quantity"`
	// the amount of the quantity remaining fillable
	Fillable cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=fillable,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"fillable"`
	// true if the order is a buy
	IsBuy     bool   `protobuf:"varint,4,opt,name=isBuy,proto3" json:"isBuy,omitempty"`
	OrderHash string `protobuf:"bytes,5,opt,name=order_hash,json=orderHash,proto3" json:"order_hash,omitempty"`
	Cid       string `protobuf:"bytes,6,opt,name=cid,proto3" json:"cid,omitempty"`
}

func (m *TrimmedSpotLimitOrder) Reset()         { *m = TrimmedSpotLimitOrder{} }
func (m *TrimmedSpotLimitOrder) String() string { return proto.CompactTextString(m) }
func (*TrimmedSpotLimitOrder) ProtoMessage()    {}
func (*TrimmedSpotLimitOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{39}
}
func (m *TrimmedSpotLimitOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrimmedSpotLimitOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrimmedSpotLimitOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrimmedSpotLimitOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrimmedSpotLimitOrder.Merge(m, src)
}
func (m *TrimmedSpotLimitOrder) XXX_Size() int {
	return m.Size()
}
func (m *TrimmedSpotLimitOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_TrimmedSpotLimitOrder.DiscardUnknown(m)
}

var xxx_messageInfo_TrimmedSpotLimitOrder proto.InternalMessageInfo

func (m *TrimmedSpotLimitOrder) GetIsBuy() bool {
	if m != nil {
		return m.IsBuy
	}
	return false
}

func (m *TrimmedSpotLimitOrder) GetOrderHash() string {
	if m != nil {
		return m.OrderHash
	}
	return ""
}

func (m *TrimmedSpotLimitOrder) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

// QueryTraderSpotOrdersResponse is the response type for the
// Query/TraderSpotOrders RPC method.
type QueryTraderSpotOrdersResponse struct {
	Orders []*TrimmedSpotLimitOrder `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (m *QueryTraderSpotOrdersResponse) Reset()         { *m = QueryTraderSpotOrdersResponse{} }
func (m *QueryTraderSpotOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTraderSpotOrdersResponse) ProtoMessage()    {}
func (*QueryTraderSpotOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{40}
}
func (m *QueryTraderSpotOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTraderSpotOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTraderSpotOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTraderSpotOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTraderSpotOrdersResponse.Merge(m, src)
}
func (m *QueryTraderSpotOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTraderSpotOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTraderSpotOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTraderSpotOrdersResponse proto.InternalMessageInfo

func (m *QueryTraderSpotOrdersResponse) GetOrders() []*TrimmedSpotLimitOrder {
	if m != nil {
		return m.Orders
	}
	return nil
}

// QueryAccountAddressSpotOrdersResponse is the response type for the
// Query/AccountAddressSpotOrders RPC method.
type QueryAccountAddressSpotOrdersResponse struct {
	Orders []*TrimmedSpotLimitOrder `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (m *QueryAccountAddressSpotOrdersResponse) Reset()         { *m = QueryAccountAddressSpotOrdersResponse{} }
func (m *QueryAccountAddressSpotOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAccountAddressSpotOrdersResponse) ProtoMessage()    {}
func (*QueryAccountAddressSpotOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{41}
}
func (m *QueryAccountAddressSpotOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAccountAddressSpotOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAccountAddressSpotOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAccountAddressSpotOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAccountAddressSpotOrdersResponse.Merge(m, src)
}
func (m *QueryAccountAddressSpotOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAccountAddressSpotOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAccountAddressSpotOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAccountAddressSpotOrdersResponse proto.InternalMessageInfo

func (m *QueryAccountAddressSpotOrdersResponse) GetOrders() []*TrimmedSpotLimitOrder {
	if m != nil {
		return m.Orders
	}
	return nil
}

// QuerySpotMidPriceAndTOBRequest is the request type for the
// Query/SpotMidPriceAndTOB RPC method.
type QuerySpotMidPriceAndTOBRequest struct {
	// Market ID for the market
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QuerySpotMidPriceAndTOBRequest) Reset()         { *m = QuerySpotMidPriceAndTOBRequest{} }
func (m *QuerySpotMidPriceAndTOBRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySpotMidPriceAndTOBRequest) ProtoMessage()    {}
func (*QuerySpotMidPriceAndTOBRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{42}
}
func (m *QuerySpotMidPriceAndTOBRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpotMidPriceAndTOBRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpotMidPriceAndTOBRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpotMidPriceAndTOBRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpotMidPriceAndTOBRequest.Merge(m, src)
}
func (m *QuerySpotMidPriceAndTOBRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpotMidPriceAndTOBRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpotMidPriceAndTOBRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpotMidPriceAndTOBRequest proto.InternalMessageInfo

func (m *QuerySpotMidPriceAndTOBRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

// QuerySpotMidPriceAndTOBResponse is the response type for the
// Query/SpotMidPriceAndTOB RPC method.
type QuerySpotMidPriceAndTOBResponse struct {
	// mid price of the market
	MidPrice *cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=mid_price,json=midPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"mid_price,omitempty"`
	// best buy price of the market
	BestBuyPrice *cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=best_buy_price,json=bestBuyPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"best_buy_price,omitempty"`
	// best sell price of the market
	BestSellPrice *cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=best_sell_price,json=bestSellPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"best_sell_price,omitempty"`
}

func (m *QuerySpotMidPriceAndTOBResponse) Reset()         { *m = QuerySpotMidPriceAndTOBResponse{} }
func (m *QuerySpotMidPriceAndTOBResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySpotMidPriceAndTOBResponse) ProtoMessage()    {}
func (*QuerySpotMidPriceAndTOBResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{43}
}
func (m *QuerySpotMidPriceAndTOBResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpotMidPriceAndTOBResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpotMidPriceAndTOBResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpotMidPriceAndTOBResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpotMidPriceAndTOBResponse.Merge(m, src)
}
func (m *QuerySpotMidPriceAndTOBResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpotMidPriceAndTOBResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpotMidPriceAndTOBResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpotMidPriceAndTOBResponse proto.InternalMessageInfo

// QueryDerivativeMidPriceAndTOBRequest is the request type for the
// Query/GetDerivativeMidPriceAndTOB RPC method.
type QueryDerivativeMidPriceAndTOBRequest struct {
	// Market ID for the market
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QueryDerivativeMidPriceAndTOBRequest) Reset()         { *m = QueryDerivativeMidPriceAndTOBRequest{} }
func (m *QueryDerivativeMidPriceAndTOBRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDerivativeMidPriceAndTOBRequest) ProtoMessage()    {}
func (*QueryDerivativeMidPriceAndTOBRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{44}
}
func (m *QueryDerivativeMidPriceAndTOBRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDerivativeMidPriceAndTOBRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDerivativeMidPriceAndTOBRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDerivativeMidPriceAndTOBRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDerivativeMidPriceAndTOBRequest.Merge(m, src)
}
func (m *QueryDerivativeMidPriceAndTOBRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDerivativeMidPriceAndTOBRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDerivativeMidPriceAndTOBRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDerivativeMidPriceAndTOBRequest proto.InternalMessageInfo

func (m *QueryDerivativeMidPriceAndTOBRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

// QueryDerivativeMidPriceAndTOBResponse is the response type for the
// Query/GetDerivativeMidPriceAndTOB RPC method.
type QueryDerivativeMidPriceAndTOBResponse struct {
	// mid price of the market
	MidPrice *cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=mid_price,json=midPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"mid_price,omitempty"`
	// best buy price of the market
	BestBuyPrice *cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=best_buy_price,json=bestBuyPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"best_buy_price,omitempty"`
	// best sell price of the market
	BestSellPrice *cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=best_sell_price,json=bestSellPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"best_sell_price,omitempty"`
}

func (m *QueryDerivativeMidPriceAndTOBResponse) Reset()         { *m = QueryDerivativeMidPriceAndTOBResponse{} }
func (m *QueryDerivativeMidPriceAndTOBResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDerivativeMidPriceAndTOBResponse) ProtoMessage()    {}
func (*QueryDerivativeMidPriceAndTOBResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{45}
}
func (m *QueryDerivativeMidPriceAndTOBResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDerivativeMidPriceAndTOBResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDerivativeMidPriceAndTOBResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDerivativeMidPriceAndTOBResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDerivativeMidPriceAndTOBResponse.Merge(m, src)
}
func (m *QueryDerivativeMidPriceAndTOBResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDerivativeMidPriceAndTOBResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDerivativeMidPriceAndTOBResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDerivativeMidPriceAndTOBResponse proto.InternalMessageInfo

// QueryDerivativeOrderbookRequest is the request type for the
// Query/DerivativeOrderbook RPC method.
type QueryDerivativeOrderbookRequest struct {
	// Market ID for the market
	MarketId                string                       `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	Limit                   uint64                       `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	LimitCumulativeNotional *cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=limit_cumulative_notional,json=limitCumulativeNotional,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"limit_cumulative_notional,omitempty"`
}

func (m *QueryDerivativeOrderbookRequest) Reset()         { *m = QueryDerivativeOrderbookRequest{} }
func (m *QueryDerivativeOrderbookRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDerivativeOrderbookRequest) ProtoMessage()    {}
func (*QueryDerivativeOrderbookRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{46}
}
func (m *QueryDerivativeOrderbookRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDerivativeOrderbookRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDerivativeOrderbookRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDerivativeOrderbookRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDerivativeOrderbookRequest.Merge(m, src)
}
func (m *QueryDerivativeOrderbookRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDerivativeOrderbookRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDerivativeOrderbookRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDerivativeOrderbookRequest proto.InternalMessageInfo

func (m *QueryDerivativeOrderbookRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *QueryDerivativeOrderbookRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// QueryDerivativeOrderbookResponse is the response type for the
// Query/DerivativeOrderbook RPC method.
type QueryDerivativeOrderbookResponse struct {
	BuysPriceLevel  []*Level `protobuf:"bytes,1,rep,name=buys_price_level,json=buysPriceLevel,proto3" json:"buys_price_level,omitempty"`
	SellsPriceLevel []*Level `protobuf:"bytes,2,rep,name=sells_price_level,json=sellsPriceLevel,proto3" json:"sells_price_level,omitempty"`
}

func (m *QueryDerivativeOrderbookResponse) Reset()         { *m = QueryDerivativeOrderbookResponse{} }
func (m *QueryDerivativeOrderbookResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDerivativeOrderbookResponse) ProtoMessage()    {}
func (*QueryDerivativeOrderbookResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{47}
}
func (m *QueryDerivativeOrderbookResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDerivativeOrderbookResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDerivativeOrderbookResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDerivativeOrderbookResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDerivativeOrderbookResponse.Merge(m, src)
}
func (m *QueryDerivativeOrderbookResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDerivativeOrderbookResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDerivativeOrderbookResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDerivativeOrderbookResponse proto.InternalMessageInfo

func (m *QueryDerivativeOrderbookResponse) GetBuysPriceLevel() []*Level {
	if m != nil {
		return m.BuysPriceLevel
	}
	return nil
}

func (m *QueryDerivativeOrderbookResponse) GetSellsPriceLevel() []*Level {
	if m != nil {
		return m.SellsPriceLevel
	}
	return nil
}

// QueryTraderSpotOrdersToCancelUpToAmountRequest is the request type for the
// Query/TraderSpotOrdersToCancelUpToAmountRequest RPC method.
type QueryTraderSpotOrdersToCancelUpToAmountRequest struct {
	// Market ID for the market
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// SubaccountID of the trader
	SubaccountId string `protobuf:"bytes,2,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	// the base amount to cancel (free up)
	BaseAmount cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=base_amount,json=baseAmount,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"base_amount"`
	// the quote amount to cancel (free up)
	QuoteAmount cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=quote_amount,json=quoteAmount,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"quote_amount"`
	// The cancellation strategy
	Strategy CancellationStrategy `protobuf:"varint,5,opt,name=strategy,proto3,enum=injective.exchange.v1beta1.CancellationStrategy" json:"strategy,omitempty"`
	// The reference price for the cancellation strategy, e.g. mid price or mark
	// price
	ReferencePrice *cosmossdk_io_math.LegacyDec `protobuf:"bytes,6,opt,name=reference_price,json=referencePrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"reference_price,omitempty"`
}

func (m *QueryTraderSpotOrdersToCancelUpToAmountRequest) Reset() {
	*m = QueryTraderSpotOrdersToCancelUpToAmountRequest{}
}
func (m *QueryTraderSpotOrdersToCancelUpToAmountRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryTraderSpotOrdersToCancelUpToAmountRequest) ProtoMessage() {}
func (*QueryTraderSpotOrdersToCancelUpToAmountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{48}
}
func (m *QueryTraderSpotOrdersToCancelUpToAmountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTraderSpotOrdersToCancelUpToAmountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTraderSpotOrdersToCancelUpToAmountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTraderSpotOrdersToCancelUpToAmountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTraderSpotOrdersToCancelUpToAmountRequest.Merge(m, src)
}
func (m *QueryTraderSpotOrdersToCancelUpToAmountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTraderSpotOrdersToCancelUpToAmountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTraderSpotOrdersToCancelUpToAmountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTraderSpotOrdersToCancelUpToAmountRequest proto.InternalMessageInfo

func (m *QueryTraderSpotOrdersToCancelUpToAmountRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *QueryTraderSpotOrdersToCancelUpToAmountRequest) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

func (m *QueryTraderSpotOrdersToCancelUpToAmountRequest) GetStrategy() CancellationStrategy {
	if m != nil {
		return m.Strategy
	}
	return CancellationStrategy_UnspecifiedOrder
}

// QueryTraderDerivativeOrdersToCancelUpToAmountRequest is the request type for
// the Query/TraderDerivativeOrdersToCancelUpToAmountRequest RPC method.
type QueryTraderDerivativeOrdersToCancelUpToAmountRequest struct {
	// Market ID for the market
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// SubaccountID of the trader
	SubaccountId string `protobuf:"bytes,2,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	// the quote amount to cancel (free up)
	QuoteAmount cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=quote_amount,json=quoteAmount,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"quote_amount"`
	// The cancellation strategy
	Strategy CancellationStrategy `protobuf:"varint,4,opt,name=strategy,proto3,enum=injective.exchange.v1beta1.CancellationStrategy" json:"strategy,omitempty"`
	// The reference price for the cancellation strategy, e.g. mid price or mark
	// price
	ReferencePrice *cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=reference_price,json=referencePrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"reference_price,omitempty"`
}

func (m *QueryTraderDerivativeOrdersToCancelUpToAmountRequest) Reset() {
	*m = QueryTraderDerivativeOrdersToCancelUpToAmountRequest{}
}
func (m *QueryTraderDerivativeOrdersToCancelUpToAmountRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryTraderDerivativeOrdersToCancelUpToAmountRequest) ProtoMessage() {}
func (*QueryTraderDerivativeOrdersToCancelUpToAmountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{49}
}
func (m *QueryTraderDerivativeOrdersToCancelUpToAmountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTraderDerivativeOrdersToCancelUpToAmountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTraderDerivativeOrdersToCancelUpToAmountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTraderDerivativeOrdersToCancelUpToAmountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTraderDerivativeOrdersToCancelUpToAmountRequest.Merge(m, src)
}
func (m *QueryTraderDerivativeOrdersToCancelUpToAmountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTraderDerivativeOrdersToCancelUpToAmountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTraderDerivativeOrdersToCancelUpToAmountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTraderDerivativeOrdersToCancelUpToAmountRequest proto.InternalMessageInfo

func (m *QueryTraderDerivativeOrdersToCancelUpToAmountRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *QueryTraderDerivativeOrdersToCancelUpToAmountRequest) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

func (m *QueryTraderDerivativeOrdersToCancelUpToAmountRequest) GetStrategy() CancellationStrategy {
	if m != nil {
		return m.Strategy
	}
	return CancellationStrategy_UnspecifiedOrder
}

// QueryTraderDerivativeOrdersRequest is the request type for the
// Query/TraderDerivativeOrders RPC method.
type QueryTraderDerivativeOrdersRequest struct {
	// Market ID for the market
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// SubaccountID of the trader
	SubaccountId string `protobuf:"bytes,2,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
}

func (m *QueryTraderDerivativeOrdersRequest) Reset()         { *m = QueryTraderDerivativeOrdersRequest{} }
func (m *QueryTraderDerivativeOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTraderDerivativeOrdersRequest) ProtoMessage()    {}
func (*QueryTraderDerivativeOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{50}
}
func (m *QueryTraderDerivativeOrdersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTraderDerivativeOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTraderDerivativeOrdersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTraderDerivativeOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTraderDerivativeOrdersRequest.Merge(m, src)
}
func (m *QueryTraderDerivativeOrdersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTraderDerivativeOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTraderDerivativeOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTraderDerivativeOrdersRequest proto.InternalMessageInfo

func (m *QueryTraderDerivativeOrdersRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *QueryTraderDerivativeOrdersRequest) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

// QueryAccountAddressSpotOrdersRequest is the request type for the
// Query/AccountAddressDerivativeOrders RPC method.
type QueryAccountAddressDerivativeOrdersRequest struct {
	// Market ID for the market
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Account address of the trader
	AccountAddress string `protobuf:"bytes,2,opt,name=account_address,json=accountAddress,proto3" json:"account_address,omitempty"`
}

func (m *QueryAccountAddressDerivativeOrdersRequest) Reset() {
	*m = QueryAccountAddressDerivativeOrdersRequest{}
}
func (m *QueryAccountAddressDerivativeOrdersRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAccountAddressDerivativeOrdersRequest) ProtoMessage() {}
func (*QueryAccountAddressDerivativeOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{51}
}
func (m *QueryAccountAddressDerivativeOrdersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAccountAddressDerivativeOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAccountAddressDerivativeOrdersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAccountAddressDerivativeOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAccountAddressDerivativeOrdersRequest.Merge(m, src)
}
func (m *QueryAccountAddressDerivativeOrdersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAccountAddressDerivativeOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAccountAddressDerivativeOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAccountAddressDerivativeOrdersRequest proto.InternalMessageInfo

func (m *QueryAccountAddressDerivativeOrdersRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *QueryAccountAddressDerivativeOrdersRequest) GetAccountAddress() string {
	if m != nil {
		return m.AccountAddress
	}
	return ""
}

type TrimmedDerivativeLimitOrder struct {
	// price of the order
	Price cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=price,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"price"`
	// quantity of the order
	Quantity cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=quantity,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"quantity"`
	// margin of the order
	Margin cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=margin,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"margin"`
	// the amount of the quantity remaining fillable
	Fillable cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=fillable,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"fillable"`
	// true if the order is a buy
	IsBuy     bool   `protobuf:"varint,5,opt,name=isBuy,proto3" json:"isBuy"`
	OrderHash string `protobuf:"bytes,6,opt,name=order_hash,json=orderHash,proto3" json:"order_hash,omitempty"`
	Cid       string `protobuf:"bytes,7,opt,name=cid,proto3" json:"cid,omitempty"`
}

func (m *TrimmedDerivativeLimitOrder) Reset()         { *m = TrimmedDerivativeLimitOrder{} }
func (m *TrimmedDerivativeLimitOrder) String() string { return proto.CompactTextString(m) }
func (*TrimmedDerivativeLimitOrder) ProtoMessage()    {}
func (*TrimmedDerivativeLimitOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{52}
}
func (m *TrimmedDerivativeLimitOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrimmedDerivativeLimitOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrimmedDerivativeLimitOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrimmedDerivativeLimitOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrimmedDerivativeLimitOrder.Merge(m, src)
}
func (m *TrimmedDerivativeLimitOrder) XXX_Size() int {
	return m.Size()
}
func (m *TrimmedDerivativeLimitOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_TrimmedDerivativeLimitOrder.DiscardUnknown(m)
}

var xxx_messageInfo_TrimmedDerivativeLimitOrder proto.InternalMessageInfo

func (m *TrimmedDerivativeLimitOrder) GetIsBuy() bool {
	if m != nil {
		return m.IsBuy
	}
	return false
}

func (m *TrimmedDerivativeLimitOrder) GetOrderHash() string {
	if m != nil {
		return m.OrderHash
	}
	return ""
}

func (m *TrimmedDerivativeLimitOrder) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

// QueryTraderDerivativeOrdersResponse is the response type for the
// Query/TraderDerivativeOrders RPC method.
type QueryTraderDerivativeOrdersResponse struct {
	Orders []*TrimmedDerivativeLimitOrder `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (m *QueryTraderDerivativeOrdersResponse) Reset()         { *m = QueryTraderDerivativeOrdersResponse{} }
func (m *QueryTraderDerivativeOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTraderDerivativeOrdersResponse) ProtoMessage()    {}
func (*QueryTraderDerivativeOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{53}
}
func (m *QueryTraderDerivativeOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTraderDerivativeOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTraderDerivativeOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTraderDerivativeOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTraderDerivativeOrdersResponse.Merge(m, src)
}
func (m *QueryTraderDerivativeOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTraderDerivativeOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTraderDerivativeOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTraderDerivativeOrdersResponse proto.InternalMessageInfo

func (m *QueryTraderDerivativeOrdersResponse) GetOrders() []*TrimmedDerivativeLimitOrder {
	if m != nil {
		return m.Orders
	}
	return nil
}

// QueryAccountAddressDerivativeOrdersResponse is the response type for the
// Query/AccountAddressDerivativeOrders RPC method.
type QueryAccountAddressDerivativeOrdersResponse struct {
	Orders []*TrimmedDerivativeLimitOrder `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (m *QueryAccountAddressDerivativeOrdersResponse) Reset() {
	*m = QueryAccountAddressDerivativeOrdersResponse{}
}
func (m *QueryAccountAddressDerivativeOrdersResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAccountAddressDerivativeOrdersResponse) ProtoMessage() {}
func (*QueryAccountAddressDerivativeOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{54}
}
func (m *QueryAccountAddressDerivativeOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAccountAddressDerivativeOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAccountAddressDerivativeOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAccountAddressDerivativeOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAccountAddressDerivativeOrdersResponse.Merge(m, src)
}
func (m *QueryAccountAddressDerivativeOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAccountAddressDerivativeOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAccountAddressDerivativeOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAccountAddressDerivativeOrdersResponse proto.InternalMessageInfo

func (m *QueryAccountAddressDerivativeOrdersResponse) GetOrders() []*TrimmedDerivativeLimitOrder {
	if m != nil {
		return m.Orders
	}
	return nil
}

// QueryTraderDerivativeOrdersRequest is the request type for the
// Query/TraderDerivativeOrders RPC method.
type QueryDerivativeOrdersByHashesRequest struct {
	// Market ID for the market
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// SubaccountID of the trader
	SubaccountId string `protobuf:"bytes,2,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	// the order hashes
	OrderHashes []string `protobuf:"bytes,3,rep,name=order_hashes,json=orderHashes,proto3" json:"order_hashes,omitempty"`
}

func (m *QueryDerivativeOrdersByHashesRequest) Reset()         { *m = QueryDerivativeOrdersByHashesRequest{} }
func (m *QueryDerivativeOrdersByHashesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDerivativeOrdersByHashesRequest) ProtoMessage()    {}
func (*QueryDerivativeOrdersByHashesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{55}
}
func (m *QueryDerivativeOrdersByHashesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDerivativeOrdersByHashesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDerivativeOrdersByHashesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDerivativeOrdersByHashesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDerivativeOrdersByHashesRequest.Merge(m, src)
}
func (m *QueryDerivativeOrdersByHashesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDerivativeOrdersByHashesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDerivativeOrdersByHashesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDerivativeOrdersByHashesRequest proto.InternalMessageInfo

func (m *QueryDerivativeOrdersByHashesRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *QueryDerivativeOrdersByHashesRequest) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

func (m *QueryDerivativeOrdersByHashesRequest) GetOrderHashes() []string {
	if m != nil {
		return m.OrderHashes
	}
	return nil
}

// QueryDerivativeOrdersByHashesResponse is the response type for the
// Query/DerivativeOrdersByHashes RPC method.
type QueryDerivativeOrdersByHashesResponse struct {
	Orders []*TrimmedDerivativeLimitOrder `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (m *QueryDerivativeOrdersByHashesResponse) Reset()         { *m = QueryDerivativeOrdersByHashesResponse{} }
func (m *QueryDerivativeOrdersByHashesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDerivativeOrdersByHashesResponse) ProtoMessage()    {}
func (*QueryDerivativeOrdersByHashesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{56}
}
func (m *QueryDerivativeOrdersByHashesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDerivativeOrdersByHashesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDerivativeOrdersByHashesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDerivativeOrdersByHashesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDerivativeOrdersByHashesResponse.Merge(m, src)
}
func (m *QueryDerivativeOrdersByHashesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDerivativeOrdersByHashesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDerivativeOrdersByHashesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDerivativeOrdersByHashesResponse proto.InternalMessageInfo

func (m *QueryDerivativeOrdersByHashesResponse) GetOrders() []*TrimmedDerivativeLimitOrder {
	if m != nil {
		return m.Orders
	}
	return nil
}

// QueryDerivativeMarketsRequest is the request type for the
// Query/DerivativeMarkets RPC method.
type QueryDerivativeMarketsRequest struct {
	// Status of the market, for convenience it is set to string - not enum
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Filter by market IDs
	MarketIds []string `protobuf:"bytes,2,rep,name=market_ids,json=marketIds,proto3" json:"market_ids,omitempty"`
	// Flag to return the markets mid price and top of the book buy and sell
	// orders.
	WithMidPriceAndTob bool `protobuf:"varint,3,opt,name=with_mid_price_and_tob,json=withMidPriceAndTob,proto3" json:"with_mid_price_and_tob,omitempty"`
}

func (m *QueryDerivativeMarketsRequest) Reset()         { *m = QueryDerivativeMarketsRequest{} }
func (m *QueryDerivativeMarketsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDerivativeMarketsRequest) ProtoMessage()    {}
func (*QueryDerivativeMarketsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{57}
}
func (m *QueryDerivativeMarketsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDerivativeMarketsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDerivativeMarketsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDerivativeMarketsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDerivativeMarketsRequest.Merge(m, src)
}
func (m *QueryDerivativeMarketsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDerivativeMarketsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDerivativeMarketsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDerivativeMarketsRequest proto.InternalMessageInfo

func (m *QueryDerivativeMarketsRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *QueryDerivativeMarketsRequest) GetMarketIds() []string {
	if m != nil {
		return m.MarketIds
	}
	return nil
}

func (m *QueryDerivativeMarketsRequest) GetWithMidPriceAndTob() bool {
	if m != nil {
		return m.WithMidPriceAndTob
	}
	return false
}

type PriceLevel struct {
	Price cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=price,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"price"`
	// quantity
	Quantity cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=quantity,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"quantity"`
}

func (m *PriceLevel) Reset()         { *m = PriceLevel{} }
func (m *PriceLevel) String() string { return proto.CompactTextString(m) }
func (*PriceLevel) ProtoMessage()    {}
func (*PriceLevel) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{58}
}
func (m *PriceLevel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PriceLevel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PriceLevel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PriceLevel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceLevel.Merge(m, src)
}
func (m *PriceLevel) XXX_Size() int {
	return m.Size()
}
func (m *PriceLevel) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceLevel.DiscardUnknown(m)
}

var xxx_messageInfo_PriceLevel proto.InternalMessageInfo

type PerpetualMarketState struct {
	MarketInfo  *PerpetualMarketInfo    `protobuf:"bytes,1,opt,name=market_info,json=marketInfo,proto3" json:"market_info,omitempty"`
	FundingInfo *PerpetualMarketFunding `protobuf:"bytes,2,opt,name=funding_info,json=fundingInfo,proto3" json:"funding_info,omitempty"`
}

func (m *PerpetualMarketState) Reset()         { *m = PerpetualMarketState{} }
func (m *PerpetualMarketState) String() string { return proto.CompactTextString(m) }
func (*PerpetualMarketState) ProtoMessage()    {}
func (*PerpetualMarketState) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{59}
}
func (m *PerpetualMarketState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PerpetualMarketState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PerpetualMarketState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PerpetualMarketState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerpetualMarketState.Merge(m, src)
}
func (m *PerpetualMarketState) XXX_Size() int {
	return m.Size()
}
func (m *PerpetualMarketState) XXX_DiscardUnknown() {
	xxx_messageInfo_PerpetualMarketState.DiscardUnknown(m)
}

var xxx_messageInfo_PerpetualMarketState proto.InternalMessageInfo

func (m *PerpetualMarketState) GetMarketInfo() *PerpetualMarketInfo {
	if m != nil {
		return m.MarketInfo
	}
	return nil
}

func (m *PerpetualMarketState) GetFundingInfo() *PerpetualMarketFunding {
	if m != nil {
		return m.FundingInfo
	}
	return nil
}

type FullDerivativeMarket struct {
	Market *DerivativeMarket `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	// Types that are valid to be assigned to Info:
	//	*FullDerivativeMarket_PerpetualInfo
	//	*FullDerivativeMarket_FuturesInfo
	Info      isFullDerivativeMarket_Info `protobuf_oneof:"info"`
	MarkPrice cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=mark_price,json=markPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"mark_price"`
	// mid_price_and_tob defines the mid price for this market and the best ask
	// and bid orders
	MidPriceAndTob *MidPriceAndTOB `protobuf:"bytes,5,opt,name=mid_price_and_tob,json=midPriceAndTob,proto3" json:"mid_price_and_tob,omitempty"`
}

func (m *FullDerivativeMarket) Reset()         { *m = FullDerivativeMarket{} }
func (m *FullDerivativeMarket) String() string { return proto.CompactTextString(m) }
func (*FullDerivativeMarket) ProtoMessage()    {}
func (*FullDerivativeMarket) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{60}
}
func (m *FullDerivativeMarket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FullDerivativeMarket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FullDerivativeMarket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FullDerivativeMarket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FullDerivativeMarket.Merge(m, src)
}
func (m *FullDerivativeMarket) XXX_Size() int {
	return m.Size()
}
func (m *FullDerivativeMarket) XXX_DiscardUnknown() {
	xxx_messageInfo_FullDerivativeMarket.DiscardUnknown(m)
}

var xxx_messageInfo_FullDerivativeMarket proto.InternalMessageInfo

type isFullDerivativeMarket_Info interface {
	isFullDerivativeMarket_Info()
	MarshalTo([]byte) (int, error)
	Size() int
}

type FullDerivativeMarket_PerpetualInfo struct {
	PerpetualInfo *PerpetualMarketState `protobuf:"bytes,2,opt,name=perpetual_info,json=perpetualInfo,proto3,oneof" json:"perpetual_info,omitempty"`
}
type FullDerivativeMarket_FuturesInfo struct {
	FuturesInfo *ExpiryFuturesMarketInfo `protobuf:"bytes,3,opt,name=futures_info,json=futuresInfo,proto3,oneof" json:"futures_info,omitempty"`
}

func (*FullDerivativeMarket_PerpetualInfo) isFullDerivativeMarket_Info() {}
func (*FullDerivativeMarket_FuturesInfo) isFullDerivativeMarket_Info()   {}

func (m *FullDerivativeMarket) GetInfo() isFullDerivativeMarket_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *FullDerivativeMarket) GetMarket() *DerivativeMarket {
	if m != nil {
		return m.Market
	}
	return nil
}

func (m *FullDerivativeMarket) GetPerpetualInfo() *PerpetualMarketState {
	if x, ok := m.GetInfo().(*FullDerivativeMarket_PerpetualInfo); ok {
		return x.PerpetualInfo
	}
	return nil
}

func (m *FullDerivativeMarket) GetFuturesInfo() *ExpiryFuturesMarketInfo {
	if x, ok := m.GetInfo().(*FullDerivativeMarket_FuturesInfo); ok {
		return x.FuturesInfo
	}
	return nil
}

func (m *FullDerivativeMarket) GetMidPriceAndTob() *MidPriceAndTOB {
	if m != nil {
		return m.MidPriceAndTob
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FullDerivativeMarket) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FullDerivativeMarket_PerpetualInfo)(nil),
		(*FullDerivativeMarket_FuturesInfo)(nil),
	}
}

// QueryDerivativeMarketsResponse is the response type for the
// Query/DerivativeMarkets RPC method.
type QueryDerivativeMarketsResponse struct {
	Markets []*FullDerivativeMarket `protobuf:"bytes,1,rep,name=markets,proto3" json:"markets,omitempty"`
}

func (m *QueryDerivativeMarketsResponse) Reset()         { *m = QueryDerivativeMarketsResponse{} }
func (m *QueryDerivativeMarketsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDerivativeMarketsResponse) ProtoMessage()    {}
func (*QueryDerivativeMarketsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{61}
}
func (m *QueryDerivativeMarketsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDerivativeMarketsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDerivativeMarketsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDerivativeMarketsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDerivativeMarketsResponse.Merge(m, src)
}
func (m *QueryDerivativeMarketsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDerivativeMarketsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDerivativeMarketsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDerivativeMarketsResponse proto.InternalMessageInfo

func (m *QueryDerivativeMarketsResponse) GetMarkets() []*FullDerivativeMarket {
	if m != nil {
		return m.Markets
	}
	return nil
}

// QueryDerivativeMarketRequest is the request type for the
// Query/DerivativeMarket RPC method.
type QueryDerivativeMarketRequest struct {
	// Market ID for the market
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QueryDerivativeMarketRequest) Reset()         { *m = QueryDerivativeMarketRequest{} }
func (m *QueryDerivativeMarketRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDerivativeMarketRequest) ProtoMessage()    {}
func (*QueryDerivativeMarketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{62}
}
func (m *QueryDerivativeMarketRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDerivativeMarketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDerivativeMarketRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDerivativeMarketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDerivativeMarketRequest.Merge(m, src)
}
func (m *QueryDerivativeMarketRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDerivativeMarketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDerivativeMarketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDerivativeMarketRequest proto.InternalMessageInfo

func (m *QueryDerivativeMarketRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

// QueryDerivativeMarketResponse is the response type for the
// Query/DerivativeMarket RPC method.
type QueryDerivativeMarketResponse struct {
	Market *FullDerivativeMarket `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
}

func (m *QueryDerivativeMarketResponse) Reset()         { *m = QueryDerivativeMarketResponse{} }
func (m *QueryDerivativeMarketResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDerivativeMarketResponse) ProtoMessage()    {}
func (*QueryDerivativeMarketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{63}
}
func (m *QueryDerivativeMarketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDerivativeMarketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDerivativeMarketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDerivativeMarketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDerivativeMarketResponse.Merge(m, src)
}
func (m *QueryDerivativeMarketResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDerivativeMarketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDerivativeMarketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDerivativeMarketResponse proto.InternalMessageInfo

func (m *QueryDerivativeMarketResponse) GetMarket() *FullDerivativeMarket {
	if m != nil {
		return m.Market
	}
	return nil
}

// QueryDerivativeMarketAddressRequest is the request type for the
// Query/DerivativeMarketAddress RPC method.
type QueryDerivativeMarketAddressRequest struct {
	// Market ID for the market
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QueryDerivativeMarketAddressRequest) Reset()         { *m = QueryDerivativeMarketAddressRequest{} }
func (m *QueryDerivativeMarketAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDerivativeMarketAddressRequest) ProtoMessage()    {}
func (*QueryDerivativeMarketAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{64}
}
func (m *QueryDerivativeMarketAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDerivativeMarketAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDerivativeMarketAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDerivativeMarketAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDerivativeMarketAddressRequest.Merge(m, src)
}
func (m *QueryDerivativeMarketAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDerivativeMarketAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDerivativeMarketAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDerivativeMarketAddressRequest proto.InternalMessageInfo

func (m *QueryDerivativeMarketAddressRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

// QueryDerivativeMarketAddressResponse is the response type for the
// Query/DerivativeMarketAddress RPC method.
type QueryDerivativeMarketAddressResponse struct {
	// address for the market
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// subaccountID for the market
	SubaccountId string `protobuf:"bytes,2,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
}

func (m *QueryDerivativeMarketAddressResponse) Reset()         { *m = QueryDerivativeMarketAddressResponse{} }
func (m *QueryDerivativeMarketAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDerivativeMarketAddressResponse) ProtoMessage()    {}
func (*QueryDerivativeMarketAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{65}
}
func (m *QueryDerivativeMarketAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDerivativeMarketAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDerivativeMarketAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDerivativeMarketAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDerivativeMarketAddressResponse.Merge(m, src)
}
func (m *QueryDerivativeMarketAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDerivativeMarketAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDerivativeMarketAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDerivativeMarketAddressResponse proto.InternalMessageInfo

func (m *QueryDerivativeMarketAddressResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryDerivativeMarketAddressResponse) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

// QuerySubaccountTradeNonceRequest is the request type for the
// Query/SubaccountTradeNonce RPC method.
type QuerySubaccountTradeNonceRequest struct {
	SubaccountId string `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
}

func (m *QuerySubaccountTradeNonceRequest) Reset()         { *m = QuerySubaccountTradeNonceRequest{} }
func (m *QuerySubaccountTradeNonceRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySubaccountTradeNonceRequest) ProtoMessage()    {}
func (*QuerySubaccountTradeNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{66}
}
func (m *QuerySubaccountTradeNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubaccountTradeNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubaccountTradeNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubaccountTradeNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubaccountTradeNonceRequest.Merge(m, src)
}
func (m *QuerySubaccountTradeNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubaccountTradeNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubaccountTradeNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubaccountTradeNonceRequest proto.InternalMessageInfo

func (m *QuerySubaccountTradeNonceRequest) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

// QuerySubaccountPositionsRequest is the request type for the
// Query/SubaccountPositions RPC method.
type QuerySubaccountPositionsRequest struct {
	SubaccountId string `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
}

func (m *QuerySubaccountPositionsRequest) Reset()         { *m = QuerySubaccountPositionsRequest{} }
func (m *QuerySubaccountPositionsRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySubaccountPositionsRequest) ProtoMessage()    {}
func (*QuerySubaccountPositionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{67}
}
func (m *QuerySubaccountPositionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubaccountPositionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubaccountPositionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubaccountPositionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubaccountPositionsRequest.Merge(m, src)
}
func (m *QuerySubaccountPositionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubaccountPositionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubaccountPositionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubaccountPositionsRequest proto.InternalMessageInfo

func (m *QuerySubaccountPositionsRequest) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

// QuerySubaccountPositionInMarketRequest is the request type for the
// Query/SubaccountPositionInMarket RPC method.
type QuerySubaccountPositionInMarketRequest struct {
	SubaccountId string `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	MarketId     string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QuerySubaccountPositionInMarketRequest) Reset() {
	*m = QuerySubaccountPositionInMarketRequest{}
}
func (m *QuerySubaccountPositionInMarketRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySubaccountPositionInMarketRequest) ProtoMessage()    {}
func (*QuerySubaccountPositionInMarketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{68}
}
func (m *QuerySubaccountPositionInMarketRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubaccountPositionInMarketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubaccountPositionInMarketRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubaccountPositionInMarketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubaccountPositionInMarketRequest.Merge(m, src)
}
func (m *QuerySubaccountPositionInMarketRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubaccountPositionInMarketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubaccountPositionInMarketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubaccountPositionInMarketRequest proto.InternalMessageInfo

func (m *QuerySubaccountPositionInMarketRequest) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

func (m *QuerySubaccountPositionInMarketRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

// QuerySubaccountEffectivePositionInMarketRequest is the request type for the
// Query/SubaccountEffectivePositionInMarket RPC method.
type QuerySubaccountEffectivePositionInMarketRequest struct {
	SubaccountId string `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	MarketId     string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QuerySubaccountEffectivePositionInMarketRequest) Reset() {
	*m = QuerySubaccountEffectivePositionInMarketRequest{}
}
func (m *QuerySubaccountEffectivePositionInMarketRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QuerySubaccountEffectivePositionInMarketRequest) ProtoMessage() {}
func (*QuerySubaccountEffectivePositionInMarketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{69}
}
func (m *QuerySubaccountEffectivePositionInMarketRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubaccountEffectivePositionInMarketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubaccountEffectivePositionInMarketRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubaccountEffectivePositionInMarketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubaccountEffectivePositionInMarketRequest.Merge(m, src)
}
func (m *QuerySubaccountEffectivePositionInMarketRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubaccountEffectivePositionInMarketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubaccountEffectivePositionInMarketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubaccountEffectivePositionInMarketRequest proto.InternalMessageInfo

func (m *QuerySubaccountEffectivePositionInMarketRequest) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

func (m *QuerySubaccountEffectivePositionInMarketRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

// QuerySubaccountOrderMetadataRequest is the request type for the
// Query/SubaccountOrderMetadata RPC method.
type QuerySubaccountOrderMetadataRequest struct {
	SubaccountId string `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
}

func (m *QuerySubaccountOrderMetadataRequest) Reset()         { *m = QuerySubaccountOrderMetadataRequest{} }
func (m *QuerySubaccountOrderMetadataRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySubaccountOrderMetadataRequest) ProtoMessage()    {}
func (*QuerySubaccountOrderMetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{70}
}
func (m *QuerySubaccountOrderMetadataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubaccountOrderMetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubaccountOrderMetadataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubaccountOrderMetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubaccountOrderMetadataRequest.Merge(m, src)
}
func (m *QuerySubaccountOrderMetadataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubaccountOrderMetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubaccountOrderMetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubaccountOrderMetadataRequest proto.InternalMessageInfo

func (m *QuerySubaccountOrderMetadataRequest) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

// QuerySubaccountPositionsResponse is the response type for the
// Query/SubaccountPositions RPC method.
type QuerySubaccountPositionsResponse struct {
	State []DerivativePosition `protobuf:"bytes,1,rep,name=state,proto3" json:"state"`
}

func (m *QuerySubaccountPositionsResponse) Reset()         { *m = QuerySubaccountPositionsResponse{} }
func (m *QuerySubaccountPositionsResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySubaccountPositionsResponse) ProtoMessage()    {}
func (*QuerySubaccountPositionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{71}
}
func (m *QuerySubaccountPositionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubaccountPositionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubaccountPositionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubaccountPositionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubaccountPositionsResponse.Merge(m, src)
}
func (m *QuerySubaccountPositionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubaccountPositionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubaccountPositionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubaccountPositionsResponse proto.InternalMessageInfo

func (m *QuerySubaccountPositionsResponse) GetState() []DerivativePosition {
	if m != nil {
		return m.State
	}
	return nil
}

// QuerySubaccountPositionInMarketResponse is the response type for the
// Query/SubaccountPositionInMarket RPC method.
type QuerySubaccountPositionInMarketResponse struct {
	State *Position `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *QuerySubaccountPositionInMarketResponse) Reset() {
	*m = QuerySubaccountPositionInMarketResponse{}
}
func (m *QuerySubaccountPositionInMarketResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySubaccountPositionInMarketResponse) ProtoMessage()    {}
func (*QuerySubaccountPositionInMarketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{72}
}
func (m *QuerySubaccountPositionInMarketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubaccountPositionInMarketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubaccountPositionInMarketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubaccountPositionInMarketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubaccountPositionInMarketResponse.Merge(m, src)
}
func (m *QuerySubaccountPositionInMarketResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubaccountPositionInMarketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubaccountPositionInMarketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubaccountPositionInMarketResponse proto.InternalMessageInfo

func (m *QuerySubaccountPositionInMarketResponse) GetState() *Position {
	if m != nil {
		return m.State
	}
	return nil
}

type EffectivePosition struct {
	IsLong          bool                        `protobuf:"varint,1,opt,name=is_long,json=isLong,proto3" json:"is_long,omitempty"`
	Quantity        cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=quantity,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"quantity"`
	EntryPrice      cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=entry_price,json=entryPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"entry_price"`
	EffectiveMargin cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=effective_margin,json=effectiveMargin,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"effective_margin"`
}

func (m *EffectivePosition) Reset()         { *m = EffectivePosition{} }
func (m *EffectivePosition) String() string { return proto.CompactTextString(m) }
func (*EffectivePosition) ProtoMessage()    {}
func (*EffectivePosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{73}
}
func (m *EffectivePosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EffectivePosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EffectivePosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EffectivePosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EffectivePosition.Merge(m, src)
}
func (m *EffectivePosition) XXX_Size() int {
	return m.Size()
}
func (m *EffectivePosition) XXX_DiscardUnknown() {
	xxx_messageInfo_EffectivePosition.DiscardUnknown(m)
}

var xxx_messageInfo_EffectivePosition proto.InternalMessageInfo

func (m *EffectivePosition) GetIsLong() bool {
	if m != nil {
		return m.IsLong
	}
	return false
}

// QuerySubaccountEffectivePositionInMarketResponse is the response type for the
// Query/SubaccountEffectivePositionInMarket RPC method.
type QuerySubaccountEffectivePositionInMarketResponse struct {
	State *EffectivePosition `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *QuerySubaccountEffectivePositionInMarketResponse) Reset() {
	*m = QuerySubaccountEffectivePositionInMarketResponse{}
}
func (m *QuerySubaccountEffectivePositionInMarketResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QuerySubaccountEffectivePositionInMarketResponse) ProtoMessage() {}
func (*QuerySubaccountEffectivePositionInMarketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{74}
}
func (m *QuerySubaccountEffectivePositionInMarketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubaccountEffectivePositionInMarketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubaccountEffectivePositionInMarketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubaccountEffectivePositionInMarketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubaccountEffectivePositionInMarketResponse.Merge(m, src)
}
func (m *QuerySubaccountEffectivePositionInMarketResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubaccountEffectivePositionInMarketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubaccountEffectivePositionInMarketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubaccountEffectivePositionInMarketResponse proto.InternalMessageInfo

func (m *QuerySubaccountEffectivePositionInMarketResponse) GetState() *EffectivePosition {
	if m != nil {
		return m.State
	}
	return nil
}

// QueryPerpetualMarketInfoRequest is the request type for the
// Query/PerpetualMarketInfo RPC method.
type QueryPerpetualMarketInfoRequest struct {
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QueryPerpetualMarketInfoRequest) Reset()         { *m = QueryPerpetualMarketInfoRequest{} }
func (m *QueryPerpetualMarketInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPerpetualMarketInfoRequest) ProtoMessage()    {}
func (*QueryPerpetualMarketInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{75}
}
func (m *QueryPerpetualMarketInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPerpetualMarketInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPerpetualMarketInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPerpetualMarketInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPerpetualMarketInfoRequest.Merge(m, src)
}
func (m *QueryPerpetualMarketInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPerpetualMarketInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPerpetualMarketInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPerpetualMarketInfoRequest proto.InternalMessageInfo

func (m *QueryPerpetualMarketInfoRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

// QueryPerpetualMarketInfoResponse is the response type for the
// Query/PerpetualMarketInfo RPC method.
type QueryPerpetualMarketInfoResponse struct {
	Info PerpetualMarketInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info"`
}

func (m *QueryPerpetualMarketInfoResponse) Reset()         { *m = QueryPerpetualMarketInfoResponse{} }
func (m *QueryPerpetualMarketInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPerpetualMarketInfoResponse) ProtoMessage()    {}
func (*QueryPerpetualMarketInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{76}
}
func (m *QueryPerpetualMarketInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPerpetualMarketInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPerpetualMarketInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPerpetualMarketInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPerpetualMarketInfoResponse.Merge(m, src)
}
func (m *QueryPerpetualMarketInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPerpetualMarketInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPerpetualMarketInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPerpetualMarketInfoResponse proto.InternalMessageInfo

func (m *QueryPerpetualMarketInfoResponse) GetInfo() PerpetualMarketInfo {
	if m != nil {
		return m.Info
	}
	return PerpetualMarketInfo{}
}

// QueryExpiryFuturesMarketInfoRequest is the request type for the Query/
// ExpiryFuturesMarketInfo RPC method.
type QueryExpiryFuturesMarketInfoRequest struct {
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QueryExpiryFuturesMarketInfoRequest) Reset()         { *m = QueryExpiryFuturesMarketInfoRequest{} }
func (m *QueryExpiryFuturesMarketInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryExpiryFuturesMarketInfoRequest) ProtoMessage()    {}
func (*QueryExpiryFuturesMarketInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{77}
}
func (m *QueryExpiryFuturesMarketInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExpiryFuturesMarketInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExpiryFuturesMarketInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExpiryFuturesMarketInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExpiryFuturesMarketInfoRequest.Merge(m, src)
}
func (m *QueryExpiryFuturesMarketInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExpiryFuturesMarketInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExpiryFuturesMarketInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExpiryFuturesMarketInfoRequest proto.InternalMessageInfo

func (m *QueryExpiryFuturesMarketInfoRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

// QueryExpiryFuturesMarketInfoResponse is the response type for the Query/
// ExpiryFuturesMarketInfo RPC method.
type QueryExpiryFuturesMarketInfoResponse struct {
	Info ExpiryFuturesMarketInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info"`
}

func (m *QueryExpiryFuturesMarketInfoResponse) Reset()         { *m = QueryExpiryFuturesMarketInfoResponse{} }
func (m *QueryExpiryFuturesMarketInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExpiryFuturesMarketInfoResponse) ProtoMessage()    {}
func (*QueryExpiryFuturesMarketInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{78}
}
func (m *QueryExpiryFuturesMarketInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExpiryFuturesMarketInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExpiryFuturesMarketInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExpiryFuturesMarketInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExpiryFuturesMarketInfoResponse.Merge(m, src)
}
func (m *QueryExpiryFuturesMarketInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExpiryFuturesMarketInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExpiryFuturesMarketInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExpiryFuturesMarketInfoResponse proto.InternalMessageInfo

func (m *QueryExpiryFuturesMarketInfoResponse) GetInfo() ExpiryFuturesMarketInfo {
	if m != nil {
		return m.Info
	}
	return ExpiryFuturesMarketInfo{}
}

// QueryPerpetualMarketFundingRequest is the request type for the
// Query/PerpetualMarketFunding RPC method.
type QueryPerpetualMarketFundingRequest struct {
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QueryPerpetualMarketFundingRequest) Reset()         { *m = QueryPerpetualMarketFundingRequest{} }
func (m *QueryPerpetualMarketFundingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPerpetualMarketFundingRequest) ProtoMessage()    {}
func (*QueryPerpetualMarketFundingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{79}
}
func (m *QueryPerpetualMarketFundingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPerpetualMarketFundingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPerpetualMarketFundingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPerpetualMarketFundingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPerpetualMarketFundingRequest.Merge(m, src)
}
func (m *QueryPerpetualMarketFundingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPerpetualMarketFundingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPerpetualMarketFundingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPerpetualMarketFundingRequest proto.InternalMessageInfo

func (m *QueryPerpetualMarketFundingRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

// QueryPerpetualMarketFundingResponse is the response type for the
// Query/PerpetualMarketFunding RPC method.
type QueryPerpetualMarketFundingResponse struct {
	State PerpetualMarketFunding `protobuf:"bytes,1,opt,name=state,proto3" json:"state"`
}

func (m *QueryPerpetualMarketFundingResponse) Reset()         { *m = QueryPerpetualMarketFundingResponse{} }
func (m *QueryPerpetualMarketFundingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPerpetualMarketFundingResponse) ProtoMessage()    {}
func (*QueryPerpetualMarketFundingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{80}
}
func (m *QueryPerpetualMarketFundingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPerpetualMarketFundingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPerpetualMarketFundingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPerpetualMarketFundingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPerpetualMarketFundingResponse.Merge(m, src)
}
func (m *QueryPerpetualMarketFundingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPerpetualMarketFundingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPerpetualMarketFundingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPerpetualMarketFundingResponse proto.InternalMessageInfo

func (m *QueryPerpetualMarketFundingResponse) GetState() PerpetualMarketFunding {
	if m != nil {
		return m.State
	}
	return PerpetualMarketFunding{}
}

// QuerySubaccountOrderMetadataResponse is the response type for the
// Query/SubaccountOrderMetadata RPC method.
type QuerySubaccountOrderMetadataResponse struct {
	Metadata []SubaccountOrderbookMetadataWithMarket `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata"`
}

func (m *QuerySubaccountOrderMetadataResponse) Reset()         { *m = QuerySubaccountOrderMetadataResponse{} }
func (m *QuerySubaccountOrderMetadataResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySubaccountOrderMetadataResponse) ProtoMessage()    {}
func (*QuerySubaccountOrderMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{81}
}
func (m *QuerySubaccountOrderMetadataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubaccountOrderMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubaccountOrderMetadataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubaccountOrderMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubaccountOrderMetadataResponse.Merge(m, src)
}
func (m *QuerySubaccountOrderMetadataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubaccountOrderMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubaccountOrderMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubaccountOrderMetadataResponse proto.InternalMessageInfo

func (m *QuerySubaccountOrderMetadataResponse) GetMetadata() []SubaccountOrderbookMetadataWithMarket {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// QuerySubaccountTradeNonceResponse is the response type for the
// Query/SubaccountTradeNonce RPC method.
type QuerySubaccountTradeNonceResponse struct {
	Nonce uint32 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QuerySubaccountTradeNonceResponse) Reset()         { *m = QuerySubaccountTradeNonceResponse{} }
func (m *QuerySubaccountTradeNonceResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySubaccountTradeNonceResponse) ProtoMessage()    {}
func (*QuerySubaccountTradeNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{82}
}
func (m *QuerySubaccountTradeNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubaccountTradeNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubaccountTradeNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubaccountTradeNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubaccountTradeNonceResponse.Merge(m, src)
}
func (m *QuerySubaccountTradeNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubaccountTradeNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubaccountTradeNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubaccountTradeNonceResponse proto.InternalMessageInfo

func (m *QuerySubaccountTradeNonceResponse) GetNonce() uint32 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// QueryModuleStateRequest is the request type for the Query/ExchangeModuleState
// RPC method.
type QueryModuleStateRequest struct {
}

func (m *QueryModuleStateRequest) Reset()         { *m = QueryModuleStateRequest{} }
func (m *QueryModuleStateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryModuleStateRequest) ProtoMessage()    {}
func (*QueryModuleStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{83}
}
func (m *QueryModuleStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryModuleStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryModuleStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryModuleStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryModuleStateRequest.Merge(m, src)
}
func (m *QueryModuleStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryModuleStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryModuleStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryModuleStateRequest proto.InternalMessageInfo

// QueryModuleStateResponse is the response type for the
// Query/ExchangeModuleState RPC method.
type QueryModuleStateResponse struct {
	State *GenesisState `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *QueryModuleStateResponse) Reset()         { *m = QueryModuleStateResponse{} }
func (m *QueryModuleStateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryModuleStateResponse) ProtoMessage()    {}
func (*QueryModuleStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{84}
}
func (m *QueryModuleStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryModuleStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryModuleStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryModuleStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryModuleStateResponse.Merge(m, src)
}
func (m *QueryModuleStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryModuleStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryModuleStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryModuleStateResponse proto.InternalMessageInfo

func (m *QueryModuleStateResponse) GetState() *GenesisState {
	if m != nil {
		return m.State
	}
	return nil
}

// QueryPositionsRequest is the request type for the Query/Positions RPC method.
type QueryPositionsRequest struct {
}

func (m *QueryPositionsRequest) Reset()         { *m = QueryPositionsRequest{} }
func (m *QueryPositionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPositionsRequest) ProtoMessage()    {}
func (*QueryPositionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{85}
}
func (m *QueryPositionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPositionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPositionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPositionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPositionsRequest.Merge(m, src)
}
func (m *QueryPositionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPositionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPositionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPositionsRequest proto.InternalMessageInfo

// QueryPositionsResponse is the response type for the Query/Positions RPC
// method.
type QueryPositionsResponse struct {
	State []DerivativePosition `protobuf:"bytes,1,rep,name=state,proto3" json:"state"`
}

func (m *QueryPositionsResponse) Reset()         { *m = QueryPositionsResponse{} }
func (m *QueryPositionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPositionsResponse) ProtoMessage()    {}
func (*QueryPositionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{86}
}
func (m *QueryPositionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPositionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPositionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPositionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPositionsResponse.Merge(m, src)
}
func (m *QueryPositionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPositionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPositionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPositionsResponse proto.InternalMessageInfo

func (m *QueryPositionsResponse) GetState() []DerivativePosition {
	if m != nil {
		return m.State
	}
	return nil
}

// QueryTradeRewardPointsRequest is the request type for the
// Query/TradeRewardPoints RPC method.
type QueryTradeRewardPointsRequest struct {
	Accounts             []string `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
	PendingPoolTimestamp int64    `protobuf:"varint,2,opt,name=pending_pool_timestamp,json=pendingPoolTimestamp,proto3" json:"pending_pool_timestamp,omitempty"`
}

func (m *QueryTradeRewardPointsRequest) Reset()         { *m = QueryTradeRewardPointsRequest{} }
func (m *QueryTradeRewardPointsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTradeRewardPointsRequest) ProtoMessage()    {}
func (*QueryTradeRewardPointsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{87}
}
func (m *QueryTradeRewardPointsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTradeRewardPointsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTradeRewardPointsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTradeRewardPointsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTradeRewardPointsRequest.Merge(m, src)
}
func (m *QueryTradeRewardPointsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTradeRewardPointsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTradeRewardPointsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTradeRewardPointsRequest proto.InternalMessageInfo

func (m *QueryTradeRewardPointsRequest) GetAccounts() []string {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *QueryTradeRewardPointsRequest) GetPendingPoolTimestamp() int64 {
	if m != nil {
		return m.PendingPoolTimestamp
	}
	return 0
}

// QueryTradeRewardPointsResponse is the response type for the
// Query/TradeRewardPoints RPC method.
type QueryTradeRewardPointsResponse struct {
	AccountTradeRewardPoints []cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,rep,name=account_trade_reward_points,json=accountTradeRewardPoints,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"account_trade_reward_points"`
}

func (m *QueryTradeRewardPointsResponse) Reset()         { *m = QueryTradeRewardPointsResponse{} }
func (m *QueryTradeRewardPointsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTradeRewardPointsResponse) ProtoMessage()    {}
func (*QueryTradeRewardPointsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{88}
}
func (m *QueryTradeRewardPointsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTradeRewardPointsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTradeRewardPointsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTradeRewardPointsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTradeRewardPointsResponse.Merge(m, src)
}
func (m *QueryTradeRewardPointsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTradeRewardPointsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTradeRewardPointsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTradeRewardPointsResponse proto.InternalMessageInfo

// QueryTradeRewardCampaignRequest is the request type for the
// Query/TradeRewardCampaign RPC method.
type QueryTradeRewardCampaignRequest struct {
}

func (m *QueryTradeRewardCampaignRequest) Reset()         { *m = QueryTradeRewardCampaignRequest{} }
func (m *QueryTradeRewardCampaignRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTradeRewardCampaignRequest) ProtoMessage()    {}
func (*QueryTradeRewardCampaignRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{89}
}
func (m *QueryTradeRewardCampaignRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTradeRewardCampaignRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTradeRewardCampaignRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTradeRewardCampaignRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTradeRewardCampaignRequest.Merge(m, src)
}
func (m *QueryTradeRewardCampaignRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTradeRewardCampaignRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTradeRewardCampaignRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTradeRewardCampaignRequest proto.InternalMessageInfo

// QueryTradeRewardCampaignResponse is the response type for the
// Query/TradeRewardCampaign RPC method.
type QueryTradeRewardCampaignResponse struct {
	TradingRewardCampaignInfo                *TradingRewardCampaignInfo    `protobuf:"bytes,1,opt,name=trading_reward_campaign_info,json=tradingRewardCampaignInfo,proto3" json:"trading_reward_campaign_info,omitempty"`
	TradingRewardPoolCampaignSchedule        []*CampaignRewardPool         `protobuf:"bytes,2,rep,name=trading_reward_pool_campaign_schedule,json=tradingRewardPoolCampaignSchedule,proto3" json:"trading_reward_pool_campaign_schedule,omitempty"`
	TotalTradeRewardPoints                   cosmossdk_io_math.LegacyDec   `protobuf:"bytes,3,opt,name=total_trade_reward_points,json=totalTradeRewardPoints,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"total_trade_reward_points"`
	PendingTradingRewardPoolCampaignSchedule []*CampaignRewardPool         `protobuf:"bytes,4,rep,name=pending_trading_reward_pool_campaign_schedule,json=pendingTradingRewardPoolCampaignSchedule,proto3" json:"pending_trading_reward_pool_campaign_schedule,omitempty"`
	PendingTotalTradeRewardPoints            []cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,rep,name=pending_total_trade_reward_points,json=pendingTotalTradeRewardPoints,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"pending_total_trade_reward_points"`
}

func (m *QueryTradeRewardCampaignResponse) Reset()         { *m = QueryTradeRewardCampaignResponse{} }
func (m *QueryTradeRewardCampaignResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTradeRewardCampaignResponse) ProtoMessage()    {}
func (*QueryTradeRewardCampaignResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{90}
}
func (m *QueryTradeRewardCampaignResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTradeRewardCampaignResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTradeRewardCampaignResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTradeRewardCampaignResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTradeRewardCampaignResponse.Merge(m, src)
}
func (m *QueryTradeRewardCampaignResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTradeRewardCampaignResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTradeRewardCampaignResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTradeRewardCampaignResponse proto.InternalMessageInfo

func (m *QueryTradeRewardCampaignResponse) GetTradingRewardCampaignInfo() *TradingRewardCampaignInfo {
	if m != nil {
		return m.TradingRewardCampaignInfo
	}
	return nil
}

func (m *QueryTradeRewardCampaignResponse) GetTradingRewardPoolCampaignSchedule() []*CampaignRewardPool {
	if m != nil {
		return m.TradingRewardPoolCampaignSchedule
	}
	return nil
}

func (m *QueryTradeRewardCampaignResponse) GetPendingTradingRewardPoolCampaignSchedule() []*CampaignRewardPool {
	if m != nil {
		return m.PendingTradingRewardPoolCampaignSchedule
	}
	return nil
}

// QueryIsRegisteredDMMRequest is the request type for the Query/IsRegisteredDMM
// RPC method.
type QueryIsOptedOutOfRewardsRequest struct {
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *QueryIsOptedOutOfRewardsRequest) Reset()         { *m = QueryIsOptedOutOfRewardsRequest{} }
func (m *QueryIsOptedOutOfRewardsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIsOptedOutOfRewardsRequest) ProtoMessage()    {}
func (*QueryIsOptedOutOfRewardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{91}
}
func (m *QueryIsOptedOutOfRewardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsOptedOutOfRewardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsOptedOutOfRewardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsOptedOutOfRewardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsOptedOutOfRewardsRequest.Merge(m, src)
}
func (m *QueryIsOptedOutOfRewardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsOptedOutOfRewardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsOptedOutOfRewardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsOptedOutOfRewardsRequest proto.InternalMessageInfo

func (m *QueryIsOptedOutOfRewardsRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

// QueryIsRegisteredDMMResponse is the response type for the
// Query/IsRegisteredDMM RPC method.
type QueryIsOptedOutOfRewardsResponse struct {
	IsOptedOut bool `protobuf:"varint,1,opt,name=is_opted_out,json=isOptedOut,proto3" json:"is_opted_out,omitempty"`
}

func (m *QueryIsOptedOutOfRewardsResponse) Reset()         { *m = QueryIsOptedOutOfRewardsResponse{} }
func (m *QueryIsOptedOutOfRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIsOptedOutOfRewardsResponse) ProtoMessage()    {}
func (*QueryIsOptedOutOfRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{92}
}
func (m *QueryIsOptedOutOfRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsOptedOutOfRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsOptedOutOfRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsOptedOutOfRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsOptedOutOfRewardsResponse.Merge(m, src)
}
func (m *QueryIsOptedOutOfRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsOptedOutOfRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsOptedOutOfRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsOptedOutOfRewardsResponse proto.InternalMessageInfo

func (m *QueryIsOptedOutOfRewardsResponse) GetIsOptedOut() bool {
	if m != nil {
		return m.IsOptedOut
	}
	return false
}

// QueryRegisteredDMMsRequest is the request type for the Query/RegisteredDMMs
// RPC method.
type QueryOptedOutOfRewardsAccountsRequest struct {
}

func (m *QueryOptedOutOfRewardsAccountsRequest) Reset()         { *m = QueryOptedOutOfRewardsAccountsRequest{} }
func (m *QueryOptedOutOfRewardsAccountsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOptedOutOfRewardsAccountsRequest) ProtoMessage()    {}
func (*QueryOptedOutOfRewardsAccountsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{93}
}
func (m *QueryOptedOutOfRewardsAccountsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOptedOutOfRewardsAccountsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOptedOutOfRewardsAccountsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOptedOutOfRewardsAccountsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOptedOutOfRewardsAccountsRequest.Merge(m, src)
}
func (m *QueryOptedOutOfRewardsAccountsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOptedOutOfRewardsAccountsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOptedOutOfRewardsAccountsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOptedOutOfRewardsAccountsRequest proto.InternalMessageInfo

// QueryRegisteredDMMsResponse is the response type for the Query/RegisteredDMMs
// RPC method.
type QueryOptedOutOfRewardsAccountsResponse struct {
	Accounts []string `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (m *QueryOptedOutOfRewardsAccountsResponse) Reset() {
	*m = QueryOptedOutOfRewardsAccountsResponse{}
}
func (m *QueryOptedOutOfRewardsAccountsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOptedOutOfRewardsAccountsResponse) ProtoMessage()    {}
func (*QueryOptedOutOfRewardsAccountsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{94}
}
func (m *QueryOptedOutOfRewardsAccountsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOptedOutOfRewardsAccountsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOptedOutOfRewardsAccountsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOptedOutOfRewardsAccountsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOptedOutOfRewardsAccountsResponse.Merge(m, src)
}
func (m *QueryOptedOutOfRewardsAccountsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOptedOutOfRewardsAccountsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOptedOutOfRewardsAccountsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOptedOutOfRewardsAccountsResponse proto.InternalMessageInfo

func (m *QueryOptedOutOfRewardsAccountsResponse) GetAccounts() []string {
	if m != nil {
		return m.Accounts
	}
	return nil
}

// QueryFeeDiscountAccountInfoRequest is the request type for the
// Query/FeeDiscountAccountInfo RPC method.
type QueryFeeDiscountAccountInfoRequest struct {
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *QueryFeeDiscountAccountInfoRequest) Reset()         { *m = QueryFeeDiscountAccountInfoRequest{} }
func (m *QueryFeeDiscountAccountInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFeeDiscountAccountInfoRequest) ProtoMessage()    {}
func (*QueryFeeDiscountAccountInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{95}
}
func (m *QueryFeeDiscountAccountInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeDiscountAccountInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeDiscountAccountInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeDiscountAccountInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeDiscountAccountInfoRequest.Merge(m, src)
}
func (m *QueryFeeDiscountAccountInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeDiscountAccountInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeDiscountAccountInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeDiscountAccountInfoRequest proto.InternalMessageInfo

func (m *QueryFeeDiscountAccountInfoRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

// QueryFeeDiscountAccountInfoResponse is the response type for the
// Query/FeeDiscountAccountInfo RPC method.
type QueryFeeDiscountAccountInfoResponse struct {
	TierLevel   uint64               `protobuf:"varint,1,opt,name=tier_level,json=tierLevel,proto3" json:"tier_level,omitempty"`
	AccountInfo *FeeDiscountTierInfo `protobuf:"bytes,2,opt,name=account_info,json=accountInfo,proto3" json:"account_info,omitempty"`
	AccountTtl  *FeeDiscountTierTTL  `protobuf:"bytes,3,opt,name=account_ttl,json=accountTtl,proto3" json:"account_ttl,omitempty"`
}

func (m *QueryFeeDiscountAccountInfoResponse) Reset()         { *m = QueryFeeDiscountAccountInfoResponse{} }
func (m *QueryFeeDiscountAccountInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeeDiscountAccountInfoResponse) ProtoMessage()    {}
func (*QueryFeeDiscountAccountInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{96}
}
func (m *QueryFeeDiscountAccountInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeDiscountAccountInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeDiscountAccountInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeDiscountAccountInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeDiscountAccountInfoResponse.Merge(m, src)
}
func (m *QueryFeeDiscountAccountInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeDiscountAccountInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeDiscountAccountInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeDiscountAccountInfoResponse proto.InternalMessageInfo

func (m *QueryFeeDiscountAccountInfoResponse) GetTierLevel() uint64 {
	if m != nil {
		return m.TierLevel
	}
	return 0
}

func (m *QueryFeeDiscountAccountInfoResponse) GetAccountInfo() *FeeDiscountTierInfo {
	if m != nil {
		return m.AccountInfo
	}
	return nil
}

func (m *QueryFeeDiscountAccountInfoResponse) GetAccountTtl() *FeeDiscountTierTTL {
	if m != nil {
		return m.AccountTtl
	}
	return nil
}

// QueryFeeDiscountScheduleRequest is the request type for the
// Query/FeeDiscountSchedule RPC method.
type QueryFeeDiscountScheduleRequest struct {
}

func (m *QueryFeeDiscountScheduleRequest) Reset()         { *m = QueryFeeDiscountScheduleRequest{} }
func (m *QueryFeeDiscountScheduleRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFeeDiscountScheduleRequest) ProtoMessage()    {}
func (*QueryFeeDiscountScheduleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{97}
}
func (m *QueryFeeDiscountScheduleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeDiscountScheduleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeDiscountScheduleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeDiscountScheduleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeDiscountScheduleRequest.Merge(m, src)
}
func (m *QueryFeeDiscountScheduleRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeDiscountScheduleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeDiscountScheduleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeDiscountScheduleRequest proto.InternalMessageInfo

// QueryFeeDiscountScheduleResponse is the response type for the
// Query/FeeDiscountSchedule RPC method.
type QueryFeeDiscountScheduleResponse struct {
	FeeDiscountSchedule *FeeDiscountSchedule `protobuf:"bytes,1,opt,name=fee_discount_schedule,json=feeDiscountSchedule,proto3" json:"fee_discount_schedule,omitempty"`
}

func (m *QueryFeeDiscountScheduleResponse) Reset()         { *m = QueryFeeDiscountScheduleResponse{} }
func (m *QueryFeeDiscountScheduleResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeeDiscountScheduleResponse) ProtoMessage()    {}
func (*QueryFeeDiscountScheduleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{98}
}
func (m *QueryFeeDiscountScheduleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeDiscountScheduleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeDiscountScheduleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeDiscountScheduleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeDiscountScheduleResponse.Merge(m, src)
}
func (m *QueryFeeDiscountScheduleResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeDiscountScheduleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeDiscountScheduleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeDiscountScheduleResponse proto.InternalMessageInfo

func (m *QueryFeeDiscountScheduleResponse) GetFeeDiscountSchedule() *FeeDiscountSchedule {
	if m != nil {
		return m.FeeDiscountSchedule
	}
	return nil
}

// QueryBalanceMismatchesRequest is the request type for the
// Query/QueryBalanceMismatches RPC method.
type QueryBalanceMismatchesRequest struct {
	DustFactor int64 `protobuf:"varint,1,opt,name=dust_factor,json=dustFactor,proto3" json:"dust_factor,omitempty"`
}

func (m *QueryBalanceMismatchesRequest) Reset()         { *m = QueryBalanceMismatchesRequest{} }
func (m *QueryBalanceMismatchesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBalanceMismatchesRequest) ProtoMessage()    {}
func (*QueryBalanceMismatchesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{99}
}
func (m *QueryBalanceMismatchesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBalanceMismatchesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBalanceMismatchesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBalanceMismatchesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBalanceMismatchesRequest.Merge(m, src)
}
func (m *QueryBalanceMismatchesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBalanceMismatchesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBalanceMismatchesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBalanceMismatchesRequest proto.InternalMessageInfo

func (m *QueryBalanceMismatchesRequest) GetDustFactor() int64 {
	if m != nil {
		return m.DustFactor
	}
	return 0
}

type BalanceMismatch struct {
	SubaccountId  string                      `protobuf:"bytes,1,opt,name=subaccountId,proto3" json:"subaccountId,omitempty"`
	Denom         string                      `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Available     cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=available,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"available"`
	Total         cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=total,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"total"`
	BalanceHold   cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=balance_hold,json=balanceHold,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"balance_hold"`
	ExpectedTotal cosmossdk_io_math.LegacyDec `protobuf:"bytes,6,opt,name=expected_total,json=expectedTotal,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"expected_total"`
	Difference    cosmossdk_io_math.LegacyDec `protobuf:"bytes,7,opt,name=difference,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"difference"`
}

func (m *BalanceMismatch) Reset()         { *m = BalanceMismatch{} }
func (m *BalanceMismatch) String() string { return proto.CompactTextString(m) }
func (*BalanceMismatch) ProtoMessage()    {}
func (*BalanceMismatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{100}
}
func (m *BalanceMismatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BalanceMismatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BalanceMismatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BalanceMismatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BalanceMismatch.Merge(m, src)
}
func (m *BalanceMismatch) XXX_Size() int {
	return m.Size()
}
func (m *BalanceMismatch) XXX_DiscardUnknown() {
	xxx_messageInfo_BalanceMismatch.DiscardUnknown(m)
}

var xxx_messageInfo_BalanceMismatch proto.InternalMessageInfo

func (m *BalanceMismatch) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

func (m *BalanceMismatch) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// QueryBalanceMismatchesResponse is the response type for the
// Query/QueryBalanceMismatches RPC method.
type QueryBalanceMismatchesResponse struct {
	BalanceMismatches []*BalanceMismatch `protobuf:"bytes,1,rep,name=balance_mismatches,json=balanceMismatches,proto3" json:"balance_mismatches,omitempty"`
}

func (m *QueryBalanceMismatchesResponse) Reset()         { *m = QueryBalanceMismatchesResponse{} }
func (m *QueryBalanceMismatchesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBalanceMismatchesResponse) ProtoMessage()    {}
func (*QueryBalanceMismatchesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{101}
}
func (m *QueryBalanceMismatchesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBalanceMismatchesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBalanceMismatchesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBalanceMismatchesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBalanceMismatchesResponse.Merge(m, src)
}
func (m *QueryBalanceMismatchesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBalanceMismatchesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBalanceMismatchesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBalanceMismatchesResponse proto.InternalMessageInfo

func (m *QueryBalanceMismatchesResponse) GetBalanceMismatches() []*BalanceMismatch {
	if m != nil {
		return m.BalanceMismatches
	}
	return nil
}

// QueryBalanceWithBalanceHoldsRequest is the request type for the
// Query/QueryBalanceWithBalanceHolds RPC method.
type QueryBalanceWithBalanceHoldsRequest struct {
}

func (m *QueryBalanceWithBalanceHoldsRequest) Reset()         { *m = QueryBalanceWithBalanceHoldsRequest{} }
func (m *QueryBalanceWithBalanceHoldsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBalanceWithBalanceHoldsRequest) ProtoMessage()    {}
func (*QueryBalanceWithBalanceHoldsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{102}
}
func (m *QueryBalanceWithBalanceHoldsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBalanceWithBalanceHoldsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBalanceWithBalanceHoldsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBalanceWithBalanceHoldsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBalanceWithBalanceHoldsRequest.Merge(m, src)
}
func (m *QueryBalanceWithBalanceHoldsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBalanceWithBalanceHoldsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBalanceWithBalanceHoldsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBalanceWithBalanceHoldsRequest proto.InternalMessageInfo

type BalanceWithMarginHold struct {
	SubaccountId string                      `protobuf:"bytes,1,opt,name=subaccountId,proto3" json:"subaccountId,omitempty"`
	Denom        string                      `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Available    cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=available,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"available"`
	Total        cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=total,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"total"`
	BalanceHold  cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=balance_hold,json=balanceHold,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"balance_hold"`
}

func (m *BalanceWithMarginHold) Reset()         { *m = BalanceWithMarginHold{} }
func (m *BalanceWithMarginHold) String() string { return proto.CompactTextString(m) }
func (*BalanceWithMarginHold) ProtoMessage()    {}
func (*BalanceWithMarginHold) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{103}
}
func (m *BalanceWithMarginHold) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BalanceWithMarginHold) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BalanceWithMarginHold.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BalanceWithMarginHold) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BalanceWithMarginHold.Merge(m, src)
}
func (m *BalanceWithMarginHold) XXX_Size() int {
	return m.Size()
}
func (m *BalanceWithMarginHold) XXX_DiscardUnknown() {
	xxx_messageInfo_BalanceWithMarginHold.DiscardUnknown(m)
}

var xxx_messageInfo_BalanceWithMarginHold proto.InternalMessageInfo

func (m *BalanceWithMarginHold) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

func (m *BalanceWithMarginHold) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// QueryBalanceWithBalanceHoldsResponse is the response type for the
// Query/QueryBalanceWithBalanceHolds RPC method.
type QueryBalanceWithBalanceHoldsResponse struct {
	BalanceWithBalanceHolds []*BalanceWithMarginHold `protobuf:"bytes,1,rep,name=balance_with_balance_holds,json=balanceWithBalanceHolds,proto3" json:"balance_with_balance_holds,omitempty"`
}

func (m *QueryBalanceWithBalanceHoldsResponse) Reset()         { *m = QueryBalanceWithBalanceHoldsResponse{} }
func (m *QueryBalanceWithBalanceHoldsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBalanceWithBalanceHoldsResponse) ProtoMessage()    {}
func (*QueryBalanceWithBalanceHoldsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{104}
}
func (m *QueryBalanceWithBalanceHoldsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBalanceWithBalanceHoldsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBalanceWithBalanceHoldsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBalanceWithBalanceHoldsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBalanceWithBalanceHoldsResponse.Merge(m, src)
}
func (m *QueryBalanceWithBalanceHoldsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBalanceWithBalanceHoldsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBalanceWithBalanceHoldsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBalanceWithBalanceHoldsResponse proto.InternalMessageInfo

func (m *QueryBalanceWithBalanceHoldsResponse) GetBalanceWithBalanceHolds() []*BalanceWithMarginHold {
	if m != nil {
		return m.BalanceWithBalanceHolds
	}
	return nil
}

// QueryFeeDiscountTierStatisticsRequest is the request type for the
// Query/QueryFeeDiscountTierStatistics RPC method.
type QueryFeeDiscountTierStatisticsRequest struct {
}

func (m *QueryFeeDiscountTierStatisticsRequest) Reset()         { *m = QueryFeeDiscountTierStatisticsRequest{} }
func (m *QueryFeeDiscountTierStatisticsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFeeDiscountTierStatisticsRequest) ProtoMessage()    {}
func (*QueryFeeDiscountTierStatisticsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{105}
}
func (m *QueryFeeDiscountTierStatisticsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeDiscountTierStatisticsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeDiscountTierStatisticsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeDiscountTierStatisticsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeDiscountTierStatisticsRequest.Merge(m, src)
}
func (m *QueryFeeDiscountTierStatisticsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeDiscountTierStatisticsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeDiscountTierStatisticsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeDiscountTierStatisticsRequest proto.InternalMessageInfo

type TierStatistic struct {
	Tier  uint64 `protobuf:"varint,1,opt,name=tier,proto3" json:"tier,omitempty"`
	Count uint64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *TierStatistic) Reset()         { *m = TierStatistic{} }
func (m *TierStatistic) String() string { return proto.CompactTextString(m) }
func (*TierStatistic) ProtoMessage()    {}
func (*TierStatistic) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{106}
}
func (m *TierStatistic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TierStatistic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TierStatistic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TierStatistic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TierStatistic.Merge(m, src)
}
func (m *TierStatistic) XXX_Size() int {
	return m.Size()
}
func (m *TierStatistic) XXX_DiscardUnknown() {
	xxx_messageInfo_TierStatistic.DiscardUnknown(m)
}

var xxx_messageInfo_TierStatistic proto.InternalMessageInfo

func (m *TierStatistic) GetTier() uint64 {
	if m != nil {
		return m.Tier
	}
	return 0
}

func (m *TierStatistic) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// QueryFeeDiscountTierStatisticsResponse is the response type for the
// Query/QueryFeeDiscountTierStatistics RPC method.
type QueryFeeDiscountTierStatisticsResponse struct {
	Statistics []*TierStatistic `protobuf:"bytes,1,rep,name=statistics,proto3" json:"statistics,omitempty"`
}

func (m *QueryFeeDiscountTierStatisticsResponse) Reset() {
	*m = QueryFeeDiscountTierStatisticsResponse{}
}
func (m *QueryFeeDiscountTierStatisticsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeeDiscountTierStatisticsResponse) ProtoMessage()    {}
func (*QueryFeeDiscountTierStatisticsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{107}
}
func (m *QueryFeeDiscountTierStatisticsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeDiscountTierStatisticsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeDiscountTierStatisticsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeDiscountTierStatisticsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeDiscountTierStatisticsResponse.Merge(m, src)
}
func (m *QueryFeeDiscountTierStatisticsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeDiscountTierStatisticsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeDiscountTierStatisticsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeDiscountTierStatisticsResponse proto.InternalMessageInfo

func (m *QueryFeeDiscountTierStatisticsResponse) GetStatistics() []*TierStatistic {
	if m != nil {
		return m.Statistics
	}
	return nil
}

// MitoVaultInfosRequest is the request type for the Query/MitoVaultInfos RPC
// method.
type MitoVaultInfosRequest struct {
}

func (m *MitoVaultInfosRequest) Reset()         { *m = MitoVaultInfosRequest{} }
func (m *MitoVaultInfosRequest) String() string { return proto.CompactTextString(m) }
func (*MitoVaultInfosRequest) ProtoMessage()    {}
func (*MitoVaultInfosRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{108}
}
func (m *MitoVaultInfosRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MitoVaultInfosRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MitoVaultInfosRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MitoVaultInfosRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MitoVaultInfosRequest.Merge(m, src)
}
func (m *MitoVaultInfosRequest) XXX_Size() int {
	return m.Size()
}
func (m *MitoVaultInfosRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MitoVaultInfosRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MitoVaultInfosRequest proto.InternalMessageInfo

// MitoVaultInfosResponse is the response type for the Query/MitoVaultInfos RPC
// method.
type MitoVaultInfosResponse struct {
	MasterAddresses     []string `protobuf:"bytes,1,rep,name=master_addresses,json=masterAddresses,proto3" json:"master_addresses,omitempty"`
	DerivativeAddresses []string `protobuf:"bytes,2,rep,name=derivative_addresses,json=derivativeAddresses,proto3" json:"derivative_addresses,omitempty"`
	SpotAddresses       []string `protobuf:"bytes,3,rep,name=spot_addresses,json=spotAddresses,proto3" json:"spot_addresses,omitempty"`
	Cw20Addresses       []string `protobuf:"bytes,4,rep,name=cw20_addresses,json=cw20Addresses,proto3" json:"cw20_addresses,omitempty"`
}

func (m *MitoVaultInfosResponse) Reset()         { *m = MitoVaultInfosResponse{} }
func (m *MitoVaultInfosResponse) String() string { return proto.CompactTextString(m) }
func (*MitoVaultInfosResponse) ProtoMessage()    {}
func (*MitoVaultInfosResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{109}
}
func (m *MitoVaultInfosResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MitoVaultInfosResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MitoVaultInfosResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MitoVaultInfosResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MitoVaultInfosResponse.Merge(m, src)
}
func (m *MitoVaultInfosResponse) XXX_Size() int {
	return m.Size()
}
func (m *MitoVaultInfosResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MitoVaultInfosResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MitoVaultInfosResponse proto.InternalMessageInfo

func (m *MitoVaultInfosResponse) GetMasterAddresses() []string {
	if m != nil {
		return m.MasterAddresses
	}
	return nil
}

func (m *MitoVaultInfosResponse) GetDerivativeAddresses() []string {
	if m != nil {
		return m.DerivativeAddresses
	}
	return nil
}

func (m *MitoVaultInfosResponse) GetSpotAddresses() []string {
	if m != nil {
		return m.SpotAddresses
	}
	return nil
}

func (m *MitoVaultInfosResponse) GetCw20Addresses() []string {
	if m != nil {
		return m.Cw20Addresses
	}
	return nil
}

// QueryMarketIDFromVaultRequest is the request type for the
// Query/QueryMarketIDFromVault RPC method.
type QueryMarketIDFromVaultRequest struct {
	VaultAddress string `protobuf:"bytes,1,opt,name=vault_address,json=vaultAddress,proto3" json:"vault_address,omitempty"`
}

func (m *QueryMarketIDFromVaultRequest) Reset()         { *m = QueryMarketIDFromVaultRequest{} }
func (m *QueryMarketIDFromVaultRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMarketIDFromVaultRequest) ProtoMessage()    {}
func (*QueryMarketIDFromVaultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{110}
}
func (m *QueryMarketIDFromVaultRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMarketIDFromVaultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMarketIDFromVaultRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMarketIDFromVaultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMarketIDFromVaultRequest.Merge(m, src)
}
func (m *QueryMarketIDFromVaultRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMarketIDFromVaultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMarketIDFromVaultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMarketIDFromVaultRequest proto.InternalMessageInfo

func (m *QueryMarketIDFromVaultRequest) GetVaultAddress() string {
	if m != nil {
		return m.VaultAddress
	}
	return ""
}

// QueryMarketIDFromVaultResponse is the response type for the
// Query/QueryMarketIDFromVault RPC method.
type QueryMarketIDFromVaultResponse struct {
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QueryMarketIDFromVaultResponse) Reset()         { *m = QueryMarketIDFromVaultResponse{} }
func (m *QueryMarketIDFromVaultResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMarketIDFromVaultResponse) ProtoMessage()    {}
func (*QueryMarketIDFromVaultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{111}
}
func (m *QueryMarketIDFromVaultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMarketIDFromVaultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMarketIDFromVaultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMarketIDFromVaultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMarketIDFromVaultResponse.Merge(m, src)
}
func (m *QueryMarketIDFromVaultResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMarketIDFromVaultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMarketIDFromVaultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMarketIDFromVaultResponse proto.InternalMessageInfo

func (m *QueryMarketIDFromVaultResponse) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

type QueryHistoricalTradeRecordsRequest struct {
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QueryHistoricalTradeRecordsRequest) Reset()         { *m = QueryHistoricalTradeRecordsRequest{} }
func (m *QueryHistoricalTradeRecordsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryHistoricalTradeRecordsRequest) ProtoMessage()    {}
func (*QueryHistoricalTradeRecordsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{112}
}
func (m *QueryHistoricalTradeRecordsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHistoricalTradeRecordsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHistoricalTradeRecordsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHistoricalTradeRecordsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHistoricalTradeRecordsRequest.Merge(m, src)
}
func (m *QueryHistoricalTradeRecordsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHistoricalTradeRecordsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHistoricalTradeRecordsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHistoricalTradeRecordsRequest proto.InternalMessageInfo

func (m *QueryHistoricalTradeRecordsRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

type QueryHistoricalTradeRecordsResponse struct {
	TradeRecords []*TradeRecords `protobuf:"bytes,1,rep,name=trade_records,json=tradeRecords,proto3" json:"trade_records,omitempty"`
}

func (m *QueryHistoricalTradeRecordsResponse) Reset()         { *m = QueryHistoricalTradeRecordsResponse{} }
func (m *QueryHistoricalTradeRecordsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryHistoricalTradeRecordsResponse) ProtoMessage()    {}
func (*QueryHistoricalTradeRecordsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{113}
}
func (m *QueryHistoricalTradeRecordsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHistoricalTradeRecordsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHistoricalTradeRecordsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHistoricalTradeRecordsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHistoricalTradeRecordsResponse.Merge(m, src)
}
func (m *QueryHistoricalTradeRecordsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryHistoricalTradeRecordsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHistoricalTradeRecordsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHistoricalTradeRecordsResponse proto.InternalMessageInfo

func (m *QueryHistoricalTradeRecordsResponse) GetTradeRecords() []*TradeRecords {
	if m != nil {
		return m.TradeRecords
	}
	return nil
}

// TradeHistoryOptions are the optional params for Query/MarketVolatility RPC
// method.
type TradeHistoryOptions struct {
	// TradeGroupingSec of 0 means use the chain's default grouping
	TradeGroupingSec uint64 `protobuf:"varint,1,opt,name=trade_grouping_sec,json=tradeGroupingSec,proto3" json:"trade_grouping_sec,omitempty"`
	// MaxAge restricts the trade records oldest age in seconds from the current
	// block time to consider. A value of 0 means use all the records present on
	// the chain.
	MaxAge uint64 `protobuf:"varint,2,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
	// If IncludeRawHistory is true, the raw underlying data used for the
	// computation is included in the response
	IncludeRawHistory bool `protobuf:"varint,4,opt,name=include_raw_history,json=includeRawHistory,proto3" json:"include_raw_history,omitempty"`
	// If IncludeMetadata is true, metadata on the computation is included in the
	// response
	IncludeMetadata bool `protobuf:"varint,5,opt,name=include_metadata,json=includeMetadata,proto3" json:"include_metadata,omitempty"`
}

func (m *TradeHistoryOptions) Reset()         { *m = TradeHistoryOptions{} }
func (m *TradeHistoryOptions) String() string { return proto.CompactTextString(m) }
func (*TradeHistoryOptions) ProtoMessage()    {}
func (*TradeHistoryOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{114}
}
func (m *TradeHistoryOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TradeHistoryOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TradeHistoryOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TradeHistoryOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeHistoryOptions.Merge(m, src)
}
func (m *TradeHistoryOptions) XXX_Size() int {
	return m.Size()
}
func (m *TradeHistoryOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeHistoryOptions.DiscardUnknown(m)
}

var xxx_messageInfo_TradeHistoryOptions proto.InternalMessageInfo

func (m *TradeHistoryOptions) GetTradeGroupingSec() uint64 {
	if m != nil {
		return m.TradeGroupingSec
	}
	return 0
}

func (m *TradeHistoryOptions) GetMaxAge() uint64 {
	if m != nil {
		return m.MaxAge
	}
	return 0
}

func (m *TradeHistoryOptions) GetIncludeRawHistory() bool {
	if m != nil {
		return m.IncludeRawHistory
	}
	return false
}

func (m *TradeHistoryOptions) GetIncludeMetadata() bool {
	if m != nil {
		return m.IncludeMetadata
	}
	return false
}

// QueryMarketVolatilityRequest are the request params for the
// Query/MarketVolatility RPC method.
type QueryMarketVolatilityRequest struct {
	MarketId            string               `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	TradeHistoryOptions *TradeHistoryOptions `protobuf:"bytes,2,opt,name=trade_history_options,json=tradeHistoryOptions,proto3" json:"trade_history_options,omitempty"`
}

func (m *QueryMarketVolatilityRequest) Reset()         { *m = QueryMarketVolatilityRequest{} }
func (m *QueryMarketVolatilityRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMarketVolatilityRequest) ProtoMessage()    {}
func (*QueryMarketVolatilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{115}
}
func (m *QueryMarketVolatilityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMarketVolatilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMarketVolatilityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMarketVolatilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMarketVolatilityRequest.Merge(m, src)
}
func (m *QueryMarketVolatilityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMarketVolatilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMarketVolatilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMarketVolatilityRequest proto.InternalMessageInfo

func (m *QueryMarketVolatilityRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *QueryMarketVolatilityRequest) GetTradeHistoryOptions() *TradeHistoryOptions {
	if m != nil {
		return m.TradeHistoryOptions
	}
	return nil
}

// QueryMarketVolatilityResponse is the response type for the
// Query/MarketVolatility RPC method.
type QueryMarketVolatilityResponse struct {
	Volatility      *cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=volatility,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"volatility,omitempty"`
	HistoryMetadata *types.MetadataStatistics    `protobuf:"bytes,2,opt,name=history_metadata,json=historyMetadata,proto3" json:"history_metadata,omitempty"`
	RawHistory      []*TradeRecord               `protobuf:"bytes,3,rep,name=raw_history,json=rawHistory,proto3" json:"raw_history,omitempty"`
}

func (m *QueryMarketVolatilityResponse) Reset()         { *m = QueryMarketVolatilityResponse{} }
func (m *QueryMarketVolatilityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMarketVolatilityResponse) ProtoMessage()    {}
func (*QueryMarketVolatilityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{116}
}
func (m *QueryMarketVolatilityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMarketVolatilityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMarketVolatilityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMarketVolatilityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMarketVolatilityResponse.Merge(m, src)
}
func (m *QueryMarketVolatilityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMarketVolatilityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMarketVolatilityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMarketVolatilityResponse proto.InternalMessageInfo

func (m *QueryMarketVolatilityResponse) GetHistoryMetadata() *types.MetadataStatistics {
	if m != nil {
		return m.HistoryMetadata
	}
	return nil
}

func (m *QueryMarketVolatilityResponse) GetRawHistory() []*TradeRecord {
	if m != nil {
		return m.RawHistory
	}
	return nil
}

// QuerBinaryMarketsRequest is the request type for the Query/BinaryMarkets RPC
// method.
type QueryBinaryMarketsRequest struct {
	// Status of the market, for convenience it is set to string - not enum
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *QueryBinaryMarketsRequest) Reset()         { *m = QueryBinaryMarketsRequest{} }
func (m *QueryBinaryMarketsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBinaryMarketsRequest) ProtoMessage()    {}
func (*QueryBinaryMarketsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{117}
}
func (m *QueryBinaryMarketsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBinaryMarketsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBinaryMarketsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBinaryMarketsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBinaryMarketsRequest.Merge(m, src)
}
func (m *QueryBinaryMarketsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBinaryMarketsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBinaryMarketsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBinaryMarketsRequest proto.InternalMessageInfo

func (m *QueryBinaryMarketsRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

// QueryBinaryMarketsResponse is the response type for the Query/BinaryMarkets
// RPC method.
type QueryBinaryMarketsResponse struct {
	Markets []*BinaryOptionsMarket `protobuf:"bytes,1,rep,name=markets,proto3" json:"markets,omitempty"`
}

func (m *QueryBinaryMarketsResponse) Reset()         { *m = QueryBinaryMarketsResponse{} }
func (m *QueryBinaryMarketsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBinaryMarketsResponse) ProtoMessage()    {}
func (*QueryBinaryMarketsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{118}
}
func (m *QueryBinaryMarketsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBinaryMarketsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBinaryMarketsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBinaryMarketsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBinaryMarketsResponse.Merge(m, src)
}
func (m *QueryBinaryMarketsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBinaryMarketsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBinaryMarketsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBinaryMarketsResponse proto.InternalMessageInfo

func (m *QueryBinaryMarketsResponse) GetMarkets() []*BinaryOptionsMarket {
	if m != nil {
		return m.Markets
	}
	return nil
}

// QueryConditionalOrdersRequest is the request type for the
// Query/ConditionalOrders RPC method.
type QueryTraderDerivativeConditionalOrdersRequest struct {
	SubaccountId string `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	MarketId     string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QueryTraderDerivativeConditionalOrdersRequest) Reset() {
	*m = QueryTraderDerivativeConditionalOrdersRequest{}
}
func (m *QueryTraderDerivativeConditionalOrdersRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryTraderDerivativeConditionalOrdersRequest) ProtoMessage() {}
func (*QueryTraderDerivativeConditionalOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{119}
}
func (m *QueryTraderDerivativeConditionalOrdersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTraderDerivativeConditionalOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTraderDerivativeConditionalOrdersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTraderDerivativeConditionalOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTraderDerivativeConditionalOrdersRequest.Merge(m, src)
}
func (m *QueryTraderDerivativeConditionalOrdersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTraderDerivativeConditionalOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTraderDerivativeConditionalOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTraderDerivativeConditionalOrdersRequest proto.InternalMessageInfo

func (m *QueryTraderDerivativeConditionalOrdersRequest) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

func (m *QueryTraderDerivativeConditionalOrdersRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

type TrimmedDerivativeConditionalOrder struct {
	// price of the order
	Price cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=price,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"price"`
	// quantity of the order
	Quantity cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=quantity,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"quantity"`
	// margin of the order
	Margin cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=margin,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"margin"`
	// price to trigger the order
	TriggerPrice cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=triggerPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"triggerPrice"`
	// true if the order is a buy
	IsBuy     bool   `protobuf:"varint,5,opt,name=isBuy,proto3" json:"isBuy"`
	IsLimit   bool   `protobuf:"varint,6,opt,name=isLimit,proto3" json:"isLimit"`
	OrderHash string `protobuf:"bytes,7,opt,name=order_hash,json=orderHash,proto3" json:"order_hash,omitempty"`
	Cid       string `protobuf:"bytes,8,opt,name=cid,proto3" json:"cid,omitempty"`
}

func (m *TrimmedDerivativeConditionalOrder) Reset()         { *m = TrimmedDerivativeConditionalOrder{} }
func (m *TrimmedDerivativeConditionalOrder) String() string { return proto.CompactTextString(m) }
func (*TrimmedDerivativeConditionalOrder) ProtoMessage()    {}
func (*TrimmedDerivativeConditionalOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{120}
}
func (m *TrimmedDerivativeConditionalOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrimmedDerivativeConditionalOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrimmedDerivativeConditionalOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrimmedDerivativeConditionalOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrimmedDerivativeConditionalOrder.Merge(m, src)
}
func (m *TrimmedDerivativeConditionalOrder) XXX_Size() int {
	return m.Size()
}
func (m *TrimmedDerivativeConditionalOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_TrimmedDerivativeConditionalOrder.DiscardUnknown(m)
}

var xxx_messageInfo_TrimmedDerivativeConditionalOrder proto.InternalMessageInfo

func (m *TrimmedDerivativeConditionalOrder) GetIsBuy() bool {
	if m != nil {
		return m.IsBuy
	}
	return false
}

func (m *TrimmedDerivativeConditionalOrder) GetIsLimit() bool {
	if m != nil {
		return m.IsLimit
	}
	return false
}

func (m *TrimmedDerivativeConditionalOrder) GetOrderHash() string {
	if m != nil {
		return m.OrderHash
	}
	return ""
}

func (m *TrimmedDerivativeConditionalOrder) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

// QueryTraderDerivativeOrdersResponse is the response type for the
// Query/TraderDerivativeOrders RPC method.
type QueryTraderDerivativeConditionalOrdersResponse struct {
	Orders []*TrimmedDerivativeConditionalOrder `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (m *QueryTraderDerivativeConditionalOrdersResponse) Reset() {
	*m = QueryTraderDerivativeConditionalOrdersResponse{}
}
func (m *QueryTraderDerivativeConditionalOrdersResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryTraderDerivativeConditionalOrdersResponse) ProtoMessage() {}
func (*QueryTraderDerivativeConditionalOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{121}
}
func (m *QueryTraderDerivativeConditionalOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTraderDerivativeConditionalOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTraderDerivativeConditionalOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTraderDerivativeConditionalOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTraderDerivativeConditionalOrdersResponse.Merge(m, src)
}
func (m *QueryTraderDerivativeConditionalOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTraderDerivativeConditionalOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTraderDerivativeConditionalOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTraderDerivativeConditionalOrdersResponse proto.InternalMessageInfo

func (m *QueryTraderDerivativeConditionalOrdersResponse) GetOrders() []*TrimmedDerivativeConditionalOrder {
	if m != nil {
		return m.Orders
	}
	return nil
}

type QueryFullSpotOrderbookRequest struct {
	// market id
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QueryFullSpotOrderbookRequest) Reset()         { *m = QueryFullSpotOrderbookRequest{} }
func (m *QueryFullSpotOrderbookRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFullSpotOrderbookRequest) ProtoMessage()    {}
func (*QueryFullSpotOrderbookRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{122}
}
func (m *QueryFullSpotOrderbookRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFullSpotOrderbookRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFullSpotOrderbookRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFullSpotOrderbookRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFullSpotOrderbookRequest.Merge(m, src)
}
func (m *QueryFullSpotOrderbookRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFullSpotOrderbookRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFullSpotOrderbookRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFullSpotOrderbookRequest proto.InternalMessageInfo

func (m *QueryFullSpotOrderbookRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

type QueryFullSpotOrderbookResponse struct {
	Bids []*TrimmedLimitOrder `protobuf:"bytes,1,rep,name=Bids,proto3" json:"Bids,omitempty"`
	Asks []*TrimmedLimitOrder `protobuf:"bytes,2,rep,name=Asks,proto3" json:"Asks,omitempty"`
}

func (m *QueryFullSpotOrderbookResponse) Reset()         { *m = QueryFullSpotOrderbookResponse{} }
func (m *QueryFullSpotOrderbookResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFullSpotOrderbookResponse) ProtoMessage()    {}
func (*QueryFullSpotOrderbookResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{123}
}
func (m *QueryFullSpotOrderbookResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFullSpotOrderbookResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFullSpotOrderbookResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFullSpotOrderbookResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFullSpotOrderbookResponse.Merge(m, src)
}
func (m *QueryFullSpotOrderbookResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFullSpotOrderbookResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFullSpotOrderbookResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFullSpotOrderbookResponse proto.InternalMessageInfo

func (m *QueryFullSpotOrderbookResponse) GetBids() []*TrimmedLimitOrder {
	if m != nil {
		return m.Bids
	}
	return nil
}

func (m *QueryFullSpotOrderbookResponse) GetAsks() []*TrimmedLimitOrder {
	if m != nil {
		return m.Asks
	}
	return nil
}

type QueryFullDerivativeOrderbookRequest struct {
	// market id
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QueryFullDerivativeOrderbookRequest) Reset()         { *m = QueryFullDerivativeOrderbookRequest{} }
func (m *QueryFullDerivativeOrderbookRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFullDerivativeOrderbookRequest) ProtoMessage()    {}
func (*QueryFullDerivativeOrderbookRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{124}
}
func (m *QueryFullDerivativeOrderbookRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFullDerivativeOrderbookRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFullDerivativeOrderbookRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFullDerivativeOrderbookRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFullDerivativeOrderbookRequest.Merge(m, src)
}
func (m *QueryFullDerivativeOrderbookRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFullDerivativeOrderbookRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFullDerivativeOrderbookRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFullDerivativeOrderbookRequest proto.InternalMessageInfo

func (m *QueryFullDerivativeOrderbookRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

type QueryFullDerivativeOrderbookResponse struct {
	Bids []*TrimmedLimitOrder `protobuf:"bytes,1,rep,name=Bids,proto3" json:"Bids,omitempty"`
	Asks []*TrimmedLimitOrder `protobuf:"bytes,2,rep,name=Asks,proto3" json:"Asks,omitempty"`
}

func (m *QueryFullDerivativeOrderbookResponse) Reset()         { *m = QueryFullDerivativeOrderbookResponse{} }
func (m *QueryFullDerivativeOrderbookResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFullDerivativeOrderbookResponse) ProtoMessage()    {}
func (*QueryFullDerivativeOrderbookResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{125}
}
func (m *QueryFullDerivativeOrderbookResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFullDerivativeOrderbookResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFullDerivativeOrderbookResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFullDerivativeOrderbookResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFullDerivativeOrderbookResponse.Merge(m, src)
}
func (m *QueryFullDerivativeOrderbookResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFullDerivativeOrderbookResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFullDerivativeOrderbookResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFullDerivativeOrderbookResponse proto.InternalMessageInfo

func (m *QueryFullDerivativeOrderbookResponse) GetBids() []*TrimmedLimitOrder {
	if m != nil {
		return m.Bids
	}
	return nil
}

func (m *QueryFullDerivativeOrderbookResponse) GetAsks() []*TrimmedLimitOrder {
	if m != nil {
		return m.Asks
	}
	return nil
}

type TrimmedLimitOrder struct {
	Price cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=price,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"price"`
	// quantity of the order
	Quantity     cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=quantity,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"quantity"`
	OrderHash    string                      `protobuf:"bytes,3,opt,name=order_hash,json=orderHash,proto3" json:"order_hash,omitempty"`
	SubaccountId string                      `protobuf:"bytes,4,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
}

func (m *TrimmedLimitOrder) Reset()         { *m = TrimmedLimitOrder{} }
func (m *TrimmedLimitOrder) String() string { return proto.CompactTextString(m) }
func (*TrimmedLimitOrder) ProtoMessage()    {}
func (*TrimmedLimitOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{126}
}
func (m *TrimmedLimitOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrimmedLimitOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrimmedLimitOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrimmedLimitOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrimmedLimitOrder.Merge(m, src)
}
func (m *TrimmedLimitOrder) XXX_Size() int {
	return m.Size()
}
func (m *TrimmedLimitOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_TrimmedLimitOrder.DiscardUnknown(m)
}

var xxx_messageInfo_TrimmedLimitOrder proto.InternalMessageInfo

func (m *TrimmedLimitOrder) GetOrderHash() string {
	if m != nil {
		return m.OrderHash
	}
	return ""
}

func (m *TrimmedLimitOrder) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

type QueryMarketAtomicExecutionFeeMultiplierRequest struct {
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QueryMarketAtomicExecutionFeeMultiplierRequest) Reset() {
	*m = QueryMarketAtomicExecutionFeeMultiplierRequest{}
}
func (m *QueryMarketAtomicExecutionFeeMultiplierRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryMarketAtomicExecutionFeeMultiplierRequest) ProtoMessage() {}
func (*QueryMarketAtomicExecutionFeeMultiplierRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{127}
}
func (m *QueryMarketAtomicExecutionFeeMultiplierRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMarketAtomicExecutionFeeMultiplierRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMarketAtomicExecutionFeeMultiplierRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMarketAtomicExecutionFeeMultiplierRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMarketAtomicExecutionFeeMultiplierRequest.Merge(m, src)
}
func (m *QueryMarketAtomicExecutionFeeMultiplierRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMarketAtomicExecutionFeeMultiplierRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMarketAtomicExecutionFeeMultiplierRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMarketAtomicExecutionFeeMultiplierRequest proto.InternalMessageInfo

func (m *QueryMarketAtomicExecutionFeeMultiplierRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

type QueryMarketAtomicExecutionFeeMultiplierResponse struct {
	Multiplier cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=multiplier,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"multiplier"`
}

func (m *QueryMarketAtomicExecutionFeeMultiplierResponse) Reset() {
	*m = QueryMarketAtomicExecutionFeeMultiplierResponse{}
}
func (m *QueryMarketAtomicExecutionFeeMultiplierResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryMarketAtomicExecutionFeeMultiplierResponse) ProtoMessage() {}
func (*QueryMarketAtomicExecutionFeeMultiplierResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{128}
}
func (m *QueryMarketAtomicExecutionFeeMultiplierResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMarketAtomicExecutionFeeMultiplierResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMarketAtomicExecutionFeeMultiplierResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMarketAtomicExecutionFeeMultiplierResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMarketAtomicExecutionFeeMultiplierResponse.Merge(m, src)
}
func (m *QueryMarketAtomicExecutionFeeMultiplierResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMarketAtomicExecutionFeeMultiplierResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMarketAtomicExecutionFeeMultiplierResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMarketAtomicExecutionFeeMultiplierResponse proto.InternalMessageInfo

type QueryActiveStakeGrantRequest struct {
	Grantee string `protobuf:"bytes,1,opt,name=grantee,proto3" json:"grantee,omitempty"`
}

func (m *QueryActiveStakeGrantRequest) Reset()         { *m = QueryActiveStakeGrantRequest{} }
func (m *QueryActiveStakeGrantRequest) String() string { return proto.CompactTextString(m) }
func (*QueryActiveStakeGrantRequest) ProtoMessage()    {}
func (*QueryActiveStakeGrantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{129}
}
func (m *QueryActiveStakeGrantRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActiveStakeGrantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActiveStakeGrantRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActiveStakeGrantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActiveStakeGrantRequest.Merge(m, src)
}
func (m *QueryActiveStakeGrantRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryActiveStakeGrantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActiveStakeGrantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActiveStakeGrantRequest proto.InternalMessageInfo

func (m *QueryActiveStakeGrantRequest) GetGrantee() string {
	if m != nil {
		return m.Grantee
	}
	return ""
}

type QueryActiveStakeGrantResponse struct {
	Grant          *ActiveGrant    `protobuf:"bytes,1,opt,name=grant,proto3" json:"grant,omitempty"`
	EffectiveGrant *EffectiveGrant `protobuf:"bytes,2,opt,name=effective_grant,json=effectiveGrant,proto3" json:"effective_grant,omitempty"`
}

func (m *QueryActiveStakeGrantResponse) Reset()         { *m = QueryActiveStakeGrantResponse{} }
func (m *QueryActiveStakeGrantResponse) String() string { return proto.CompactTextString(m) }
func (*QueryActiveStakeGrantResponse) ProtoMessage()    {}
func (*QueryActiveStakeGrantResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{130}
}
func (m *QueryActiveStakeGrantResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActiveStakeGrantResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActiveStakeGrantResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActiveStakeGrantResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActiveStakeGrantResponse.Merge(m, src)
}
func (m *QueryActiveStakeGrantResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryActiveStakeGrantResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActiveStakeGrantResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActiveStakeGrantResponse proto.InternalMessageInfo

func (m *QueryActiveStakeGrantResponse) GetGrant() *ActiveGrant {
	if m != nil {
		return m.Grant
	}
	return nil
}

func (m *QueryActiveStakeGrantResponse) GetEffectiveGrant() *EffectiveGrant {
	if m != nil {
		return m.EffectiveGrant
	}
	return nil
}

type QueryGrantAuthorizationRequest struct {
	Granter string `protobuf:"bytes,1,opt,name=granter,proto3" json:"granter,omitempty"`
	Grantee string `protobuf:"bytes,2,opt,name=grantee,proto3" json:"grantee,omitempty"`
}

func (m *QueryGrantAuthorizationRequest) Reset()         { *m = QueryGrantAuthorizationRequest{} }
func (m *QueryGrantAuthorizationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGrantAuthorizationRequest) ProtoMessage()    {}
func (*QueryGrantAuthorizationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{131}
}
func (m *QueryGrantAuthorizationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGrantAuthorizationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGrantAuthorizationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGrantAuthorizationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGrantAuthorizationRequest.Merge(m, src)
}
func (m *QueryGrantAuthorizationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGrantAuthorizationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGrantAuthorizationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGrantAuthorizationRequest proto.InternalMessageInfo

func (m *QueryGrantAuthorizationRequest) GetGranter() string {
	if m != nil {
		return m.Granter
	}
	return ""
}

func (m *QueryGrantAuthorizationRequest) GetGrantee() string {
	if m != nil {
		return m.Grantee
	}
	return ""
}

type QueryGrantAuthorizationResponse struct {
	Amount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *QueryGrantAuthorizationResponse) Reset()         { *m = QueryGrantAuthorizationResponse{} }
func (m *QueryGrantAuthorizationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGrantAuthorizationResponse) ProtoMessage()    {}
func (*QueryGrantAuthorizationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{132}
}
func (m *QueryGrantAuthorizationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGrantAuthorizationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGrantAuthorizationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGrantAuthorizationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGrantAuthorizationResponse.Merge(m, src)
}
func (m *QueryGrantAuthorizationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGrantAuthorizationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGrantAuthorizationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGrantAuthorizationResponse proto.InternalMessageInfo

type QueryGrantAuthorizationsRequest struct {
	Granter string `protobuf:"bytes,1,opt,name=granter,proto3" json:"granter,omitempty"`
}

func (m *QueryGrantAuthorizationsRequest) Reset()         { *m = QueryGrantAuthorizationsRequest{} }
func (m *QueryGrantAuthorizationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGrantAuthorizationsRequest) ProtoMessage()    {}
func (*QueryGrantAuthorizationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{133}
}
func (m *QueryGrantAuthorizationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGrantAuthorizationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGrantAuthorizationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGrantAuthorizationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGrantAuthorizationsRequest.Merge(m, src)
}
func (m *QueryGrantAuthorizationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGrantAuthorizationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGrantAuthorizationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGrantAuthorizationsRequest proto.InternalMessageInfo

func (m *QueryGrantAuthorizationsRequest) GetGranter() string {
	if m != nil {
		return m.Granter
	}
	return ""
}

type QueryGrantAuthorizationsResponse struct {
	TotalGrantAmount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=total_grant_amount,json=totalGrantAmount,proto3,customtype=cosmossdk.io/math.Int" json:"total_grant_amount"`
	Grants           []*GrantAuthorization `protobuf:"bytes,2,rep,name=grants,proto3" json:"grants,omitempty"`
}

func (m *QueryGrantAuthorizationsResponse) Reset()         { *m = QueryGrantAuthorizationsResponse{} }
func (m *QueryGrantAuthorizationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGrantAuthorizationsResponse) ProtoMessage()    {}
func (*QueryGrantAuthorizationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{134}
}
func (m *QueryGrantAuthorizationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGrantAuthorizationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGrantAuthorizationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGrantAuthorizationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGrantAuthorizationsResponse.Merge(m, src)
}
func (m *QueryGrantAuthorizationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGrantAuthorizationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGrantAuthorizationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGrantAuthorizationsResponse proto.InternalMessageInfo

func (m *QueryGrantAuthorizationsResponse) GetGrants() []*GrantAuthorization {
	if m != nil {
		return m.Grants
	}
	return nil
}

func init() {
	proto.RegisterEnum("injective.exchange.v1beta1.OrderSide", OrderSide_name, OrderSide_value)
	proto.RegisterEnum("injective.exchange.v1beta1.CancellationStrategy", CancellationStrategy_name, CancellationStrategy_value)
	proto.RegisterType((*Subaccount)(nil), "injective.exchange.v1beta1.Subaccount")
	proto.RegisterType((*QuerySubaccountOrdersRequest)(nil), "injective.exchange.v1beta1.QuerySubaccountOrdersRequest")
	proto.RegisterType((*QuerySubaccountOrdersResponse)(nil), "injective.exchange.v1beta1.QuerySubaccountOrdersResponse")
	proto.RegisterType((*SubaccountOrderbookMetadataWithMarket)(nil), "injective.exchange.v1beta1.SubaccountOrderbookMetadataWithMarket")
	proto.RegisterType((*QueryExchangeParamsRequest)(nil), "injective.exchange.v1beta1.QueryExchangeParamsRequest")
	proto.RegisterType((*QueryExchangeParamsResponse)(nil), "injective.exchange.v1beta1.QueryExchangeParamsResponse")
	proto.RegisterType((*QuerySubaccountDepositsRequest)(nil), "injective.exchange.v1beta1.QuerySubaccountDepositsRequest")
	proto.RegisterType((*QuerySubaccountDepositsResponse)(nil), "injective.exchange.v1beta1.QuerySubaccountDepositsResponse")
	proto.RegisterMapType((map[string]*Deposit)(nil), "injective.exchange.v1beta1.QuerySubaccountDepositsResponse.DepositsEntry")
	proto.RegisterType((*QueryExchangeBalancesRequest)(nil), "injective.exchange.v1beta1.QueryExchangeBalancesRequest")
	proto.RegisterType((*QueryExchangeBalancesResponse)(nil), "injective.exchange.v1beta1.QueryExchangeBalancesResponse")
	proto.RegisterType((*QueryAggregateVolumeRequest)(nil), "injective.exchange.v1beta1.QueryAggregateVolumeRequest")
	proto.RegisterType((*QueryAggregateVolumeResponse)(nil), "injective.exchange.v1beta1.QueryAggregateVolumeResponse")
	proto.RegisterType((*QueryAggregateVolumesRequest)(nil), "injective.exchange.v1beta1.QueryAggregateVolumesRequest")
	proto.RegisterType((*QueryAggregateVolumesResponse)(nil), "injective.exchange.v1beta1.QueryAggregateVolumesResponse")
	proto.RegisterType((*QueryAggregateMarketVolumeRequest)(nil), "injective.exchange.v1beta1.QueryAggregateMarketVolumeRequest")
	proto.RegisterType((*QueryAggregateMarketVolumeResponse)(nil), "injective.exchange.v1beta1.QueryAggregateMarketVolumeResponse")
	proto.RegisterType((*QueryDenomDecimalRequest)(nil), "injective.exchange.v1beta1.QueryDenomDecimalRequest")
	proto.RegisterType((*QueryDenomDecimalResponse)(nil), "injective.exchange.v1beta1.QueryDenomDecimalResponse")
	proto.RegisterType((*QueryDenomDecimalsRequest)(nil), "injective.exchange.v1beta1.QueryDenomDecimalsRequest")
	proto.RegisterType((*QueryDenomDecimalsResponse)(nil), "injective.exchange.v1beta1.QueryDenomDecimalsResponse")
	proto.RegisterType((*QueryAggregateMarketVolumesRequest)(nil), "injective.exchange.v1beta1.QueryAggregateMarketVolumesRequest")
	proto.RegisterType((*QueryAggregateMarketVolumesResponse)(nil), "injective.exchange.v1beta1.QueryAggregateMarketVolumesResponse")
	proto.RegisterType((*QuerySubaccountDepositRequest)(nil), "injective.exchange.v1beta1.QuerySubaccountDepositRequest")
	proto.RegisterType((*QuerySubaccountDepositResponse)(nil), "injective.exchange.v1beta1.QuerySubaccountDepositResponse")
	proto.RegisterType((*QuerySpotMarketsRequest)(nil), "injective.exchange.v1beta1.QuerySpotMarketsRequest")
	proto.RegisterType((*QuerySpotMarketsResponse)(nil), "injective.exchange.v1beta1.QuerySpotMarketsResponse")
	proto.RegisterType((*QuerySpotMarketRequest)(nil), "injective.exchange.v1beta1.QuerySpotMarketRequest")
	proto.RegisterType((*QuerySpotMarketResponse)(nil), "injective.exchange.v1beta1.QuerySpotMarketResponse")
	proto.RegisterType((*QuerySpotOrderbookRequest)(nil), "injective.exchange.v1beta1.QuerySpotOrderbookRequest")
	proto.RegisterType((*QuerySpotOrderbookResponse)(nil), "injective.exchange.v1beta1.QuerySpotOrderbookResponse")
	proto.RegisterType((*FullSpotMarket)(nil), "injective.exchange.v1beta1.FullSpotMarket")
	proto.RegisterType((*QueryFullSpotMarketsRequest)(nil), "injective.exchange.v1beta1.QueryFullSpotMarketsRequest")
	proto.RegisterType((*QueryFullSpotMarketsResponse)(nil), "injective.exchange.v1beta1.QueryFullSpotMarketsResponse")
	proto.RegisterType((*QueryFullSpotMarketRequest)(nil), "injective.exchange.v1beta1.QueryFullSpotMarketRequest")
	proto.RegisterType((*QueryFullSpotMarketResponse)(nil), "injective.exchange.v1beta1.QueryFullSpotMarketResponse")
	proto.RegisterType((*QuerySpotOrdersByHashesRequest)(nil), "injective.exchange.v1beta1.QuerySpotOrdersByHashesRequest")
	proto.RegisterType((*QuerySpotOrdersByHashesResponse)(nil), "injective.exchange.v1beta1.QuerySpotOrdersByHashesResponse")
	proto.RegisterType((*QueryTraderSpotOrdersRequest)(nil), "injective.exchange.v1beta1.QueryTraderSpotOrdersRequest")
	proto.RegisterType((*QueryAccountAddressSpotOrdersRequest)(nil), "injective.exchange.v1beta1.QueryAccountAddressSpotOrdersRequest")
	proto.RegisterType((*TrimmedSpotLimitOrder)(nil), "injective.exchange.v1beta1.TrimmedSpotLimitOrder")
	proto.RegisterType((*QueryTraderSpotOrdersResponse)(nil), "injective.exchange.v1beta1.QueryTraderSpotOrdersResponse")
	proto.RegisterType((*QueryAccountAddressSpotOrdersResponse)(nil), "injective.exchange.v1beta1.QueryAccountAddressSpotOrdersResponse")
	proto.RegisterType((*QuerySpotMidPriceAndTOBRequest)(nil), "injective.exchange.v1beta1.QuerySpotMidPriceAndTOBRequest")
	proto.RegisterType((*QuerySpotMidPriceAndTOBResponse)(nil), "injective.exchange.v1beta1.QuerySpotMidPriceAndTOBResponse")
	proto.RegisterType((*QueryDerivativeMidPriceAndTOBRequest)(nil), "injective.exchange.v1beta1.QueryDerivativeMidPriceAndTOBRequest")
	proto.RegisterType((*QueryDerivativeMidPriceAndTOBResponse)(nil), "injective.exchange.v1beta1.QueryDerivativeMidPriceAndTOBResponse")
	proto.RegisterType((*QueryDerivativeOrderbookRequest)(nil), "injective.exchange.v1beta1.QueryDerivativeOrderbookRequest")
	proto.RegisterType((*QueryDerivativeOrderbookResponse)(nil), "injective.exchange.v1beta1.QueryDerivativeOrderbookResponse")
	proto.RegisterType((*QueryTraderSpotOrdersToCancelUpToAmountRequest)(nil), "injective.exchange.v1beta1.QueryTraderSpotOrdersToCancelUpToAmountRequest")
	proto.RegisterType((*QueryTraderDerivativeOrdersToCancelUpToAmountRequest)(nil), "injective.exchange.v1beta1.QueryTraderDerivativeOrdersToCancelUpToAmountRequest")
	proto.RegisterType((*QueryTraderDerivativeOrdersRequest)(nil), "injective.exchange.v1beta1.QueryTraderDerivativeOrdersRequest")
	proto.RegisterType((*QueryAccountAddressDerivativeOrdersRequest)(nil), "injective.exchange.v1beta1.QueryAccountAddressDerivativeOrdersRequest")
	proto.RegisterType((*TrimmedDerivativeLimitOrder)(nil), "injective.exchange.v1beta1.TrimmedDerivativeLimitOrder")
	proto.RegisterType((*QueryTraderDerivativeOrdersResponse)(nil), "injective.exchange.v1beta1.QueryTraderDerivativeOrdersResponse")
	proto.RegisterType((*QueryAccountAddressDerivativeOrdersResponse)(nil), "injective.exchange.v1beta1.QueryAccountAddressDerivativeOrdersResponse")
	proto.RegisterType((*QueryDerivativeOrdersByHashesRequest)(nil), "injective.exchange.v1beta1.QueryDerivativeOrdersByHashesRequest")
	proto.RegisterType((*QueryDerivativeOrdersByHashesResponse)(nil), "injective.exchange.v1beta1.QueryDerivativeOrdersByHashesResponse")
	proto.RegisterType((*QueryDerivativeMarketsRequest)(nil), "injective.exchange.v1beta1.QueryDerivativeMarketsRequest")
	proto.RegisterType((*PriceLevel)(nil), "injective.exchange.v1beta1.PriceLevel")
	proto.RegisterType((*PerpetualMarketState)(nil), "injective.exchange.v1beta1.PerpetualMarketState")
	proto.RegisterType((*FullDerivativeMarket)(nil), "injective.exchange.v1beta1.FullDerivativeMarket")
	proto.RegisterType((*QueryDerivativeMarketsResponse)(nil), "injective.exchange.v1beta1.QueryDerivativeMarketsResponse")
	proto.RegisterType((*QueryDerivativeMarketRequest)(nil), "injective.exchange.v1beta1.QueryDerivativeMarketRequest")
	proto.RegisterType((*QueryDerivativeMarketResponse)(nil), "injective.exchange.v1beta1.QueryDerivativeMarketResponse")
	proto.RegisterType((*QueryDerivativeMarketAddressRequest)(nil), "injective.exchange.v1beta1.QueryDerivativeMarketAddressRequest")
	proto.RegisterType((*QueryDerivativeMarketAddressResponse)(nil), "injective.exchange.v1beta1.QueryDerivativeMarketAddressResponse")
	proto.RegisterType((*QuerySubaccountTradeNonceRequest)(nil), "injective.exchange.v1beta1.QuerySubaccountTradeNonceRequest")
	proto.RegisterType((*QuerySubaccountPositionsRequest)(nil), "injective.exchange.v1beta1.QuerySubaccountPositionsRequest")
	proto.RegisterType((*QuerySubaccountPositionInMarketRequest)(nil), "injective.exchange.v1beta1.QuerySubaccountPositionInMarketRequest")
	proto.RegisterType((*QuerySubaccountEffectivePositionInMarketRequest)(nil), "injective.exchange.v1beta1.QuerySubaccountEffectivePositionInMarketRequest")
	proto.RegisterType((*QuerySubaccountOrderMetadataRequest)(nil), "injective.exchange.v1beta1.QuerySubaccountOrderMetadataRequest")
	proto.RegisterType((*QuerySubaccountPositionsResponse)(nil), "injective.exchange.v1beta1.QuerySubaccountPositionsResponse")
	proto.RegisterType((*QuerySubaccountPositionInMarketResponse)(nil), "injective.exchange.v1beta1.QuerySubaccountPositionInMarketResponse")
	proto.RegisterType((*EffectivePosition)(nil), "injective.exchange.v1beta1.EffectivePosition")
	proto.RegisterType((*QuerySubaccountEffectivePositionInMarketResponse)(nil), "injective.exchange.v1beta1.QuerySubaccountEffectivePositionInMarketResponse")
	proto.RegisterType((*QueryPerpetualMarketInfoRequest)(nil), "injective.exchange.v1beta1.QueryPerpetualMarketInfoRequest")
	proto.RegisterType((*QueryPerpetualMarketInfoResponse)(nil), "injective.exchange.v1beta1.QueryPerpetualMarketInfoResponse")
	proto.RegisterType((*QueryExpiryFuturesMarketInfoRequest)(nil), "injective.exchange.v1beta1.QueryExpiryFuturesMarketInfoRequest")
	proto.RegisterType((*QueryExpiryFuturesMarketInfoResponse)(nil), "injective.exchange.v1beta1.QueryExpiryFuturesMarketInfoResponse")
	proto.RegisterType((*QueryPerpetualMarketFundingRequest)(nil), "injective.exchange.v1beta1.QueryPerpetualMarketFundingRequest")
	proto.RegisterType((*QueryPerpetualMarketFundingResponse)(nil), "injective.exchange.v1beta1.QueryPerpetualMarketFundingResponse")
	proto.RegisterType((*QuerySubaccountOrderMetadataResponse)(nil), "injective.exchange.v1beta1.QuerySubaccountOrderMetadataResponse")
	proto.RegisterType((*QuerySubaccountTradeNonceResponse)(nil), "injective.exchange.v1beta1.QuerySubaccountTradeNonceResponse")
	proto.RegisterType((*QueryModuleStateRequest)(nil), "injective.exchange.v1beta1.QueryModuleStateRequest")
	proto.RegisterType((*QueryModuleStateResponse)(nil), "injective.exchange.v1beta1.QueryModuleStateResponse")
	proto.RegisterType((*QueryPositionsRequest)(nil), "injective.exchange.v1beta1.QueryPositionsRequest")
	proto.RegisterType((*QueryPositionsResponse)(nil), "injective.exchange.v1beta1.QueryPositionsResponse")
	proto.RegisterType((*QueryTradeRewardPointsRequest)(nil), "injective.exchange.v1beta1.QueryTradeRewardPointsRequest")
	proto.RegisterType((*QueryTradeRewardPointsResponse)(nil), "injective.exchange.v1beta1.QueryTradeRewardPointsResponse")
	proto.RegisterType((*QueryTradeRewardCampaignRequest)(nil), "injective.exchange.v1beta1.QueryTradeRewardCampaignRequest")
	proto.RegisterType((*QueryTradeRewardCampaignResponse)(nil), "injective.exchange.v1beta1.QueryTradeRewardCampaignResponse")
	proto.RegisterType((*QueryIsOptedOutOfRewardsRequest)(nil), "injective.exchange.v1beta1.QueryIsOptedOutOfRewardsRequest")
	proto.RegisterType((*QueryIsOptedOutOfRewardsResponse)(nil), "injective.exchange.v1beta1.QueryIsOptedOutOfRewardsResponse")
	proto.RegisterType((*QueryOptedOutOfRewardsAccountsRequest)(nil), "injective.exchange.v1beta1.QueryOptedOutOfRewardsAccountsRequest")
	proto.RegisterType((*QueryOptedOutOfRewardsAccountsResponse)(nil), "injective.exchange.v1beta1.QueryOptedOutOfRewardsAccountsResponse")
	proto.RegisterType((*QueryFeeDiscountAccountInfoRequest)(nil), "injective.exchange.v1beta1.QueryFeeDiscountAccountInfoRequest")
	proto.RegisterType((*QueryFeeDiscountAccountInfoResponse)(nil), "injective.exchange.v1beta1.QueryFeeDiscountAccountInfoResponse")
	proto.RegisterType((*QueryFeeDiscountScheduleRequest)(nil), "injective.exchange.v1beta1.QueryFeeDiscountScheduleRequest")
	proto.RegisterType((*QueryFeeDiscountScheduleResponse)(nil), "injective.exchange.v1beta1.QueryFeeDiscountScheduleResponse")
	proto.RegisterType((*QueryBalanceMismatchesRequest)(nil), "injective.exchange.v1beta1.QueryBalanceMismatchesRequest")
	proto.RegisterType((*BalanceMismatch)(nil), "injective.exchange.v1beta1.BalanceMismatch")
	proto.RegisterType((*QueryBalanceMismatchesResponse)(nil), "injective.exchange.v1beta1.QueryBalanceMismatchesResponse")
	proto.RegisterType((*QueryBalanceWithBalanceHoldsRequest)(nil), "injective.exchange.v1beta1.QueryBalanceWithBalanceHoldsRequest")
	proto.RegisterType((*BalanceWithMarginHold)(nil), "injective.exchange.v1beta1.BalanceWithMarginHold")
	proto.RegisterType((*QueryBalanceWithBalanceHoldsResponse)(nil), "injective.exchange.v1beta1.QueryBalanceWithBalanceHoldsResponse")
	proto.RegisterType((*QueryFeeDiscountTierStatisticsRequest)(nil), "injective.exchange.v1beta1.QueryFeeDiscountTierStatisticsRequest")
	proto.RegisterType((*TierStatistic)(nil), "injective.exchange.v1beta1.TierStatistic")
	proto.RegisterType((*QueryFeeDiscountTierStatisticsResponse)(nil), "injective.exchange.v1beta1.QueryFeeDiscountTierStatisticsResponse")
	proto.RegisterType((*MitoVaultInfosRequest)(nil), "injective.exchange.v1beta1.MitoVaultInfosRequest")
	proto.RegisterType((*MitoVaultInfosResponse)(nil), "injective.exchange.v1beta1.MitoVaultInfosResponse")
	proto.RegisterType((*QueryMarketIDFromVaultRequest)(nil), "injective.exchange.v1beta1.QueryMarketIDFromVaultRequest")
	proto.RegisterType((*QueryMarketIDFromVaultResponse)(nil), "injective.exchange.v1beta1.QueryMarketIDFromVaultResponse")
	proto.RegisterType((*QueryHistoricalTradeRecordsRequest)(nil), "injective.exchange.v1beta1.QueryHistoricalTradeRecordsRequest")
	proto.RegisterType((*QueryHistoricalTradeRecordsResponse)(nil), "injective.exchange.v1beta1.QueryHistoricalTradeRecordsResponse")
	proto.RegisterType((*TradeHistoryOptions)(nil), "injective.exchange.v1beta1.TradeHistoryOptions")
	proto.RegisterType((*QueryMarketVolatilityRequest)(nil), "injective.exchange.v1beta1.QueryMarketVolatilityRequest")
	proto.RegisterType((*QueryMarketVolatilityResponse)(nil), "injective.exchange.v1beta1.QueryMarketVolatilityResponse")
	proto.RegisterType((*QueryBinaryMarketsRequest)(nil), "injective.exchange.v1beta1.QueryBinaryMarketsRequest")
	proto.RegisterType((*QueryBinaryMarketsResponse)(nil), "injective.exchange.v1beta1.QueryBinaryMarketsResponse")
	proto.RegisterType((*QueryTraderDerivativeConditionalOrdersRequest)(nil), "injective.exchange.v1beta1.QueryTraderDerivativeConditionalOrdersRequest")
	proto.RegisterType((*TrimmedDerivativeConditionalOrder)(nil), "injective.exchange.v1beta1.TrimmedDerivativeConditionalOrder")
	proto.RegisterType((*QueryTraderDerivativeConditionalOrdersResponse)(nil), "injective.exchange.v1beta1.QueryTraderDerivativeConditionalOrdersResponse")
	proto.RegisterType((*QueryFullSpotOrderbookRequest)(nil), "injective.exchange.v1beta1.QueryFullSpotOrderbookRequest")
	proto.RegisterType((*QueryFullSpotOrderbookResponse)(nil), "injective.exchange.v1beta1.QueryFullSpotOrderbookResponse")
	proto.RegisterType((*QueryFullDerivativeOrderbookRequest)(nil), "injective.exchange.v1beta1.QueryFullDerivativeOrderbookRequest")
	proto.RegisterType((*QueryFullDerivativeOrderbookResponse)(nil), "injective.exchange.v1beta1.QueryFullDerivativeOrderbookResponse")
	proto.RegisterType((*TrimmedLimitOrder)(nil), "injective.exchange.v1beta1.TrimmedLimitOrder")
	proto.RegisterType((*QueryMarketAtomicExecutionFeeMultiplierRequest)(nil), "injective.exchange.v1beta1.QueryMarketAtomicExecutionFeeMultiplierRequest")
	proto.RegisterType((*QueryMarketAtomicExecutionFeeMultiplierResponse)(nil), "injective.exchange.v1beta1.QueryMarketAtomicExecutionFeeMultiplierResponse")
	proto.RegisterType((*QueryActiveStakeGrantRequest)(nil), "injective.exchange.v1beta1.QueryActiveStakeGrantRequest")
	proto.RegisterType((*QueryActiveStakeGrantResponse)(nil), "injective.exchange.v1beta1.QueryActiveStakeGrantResponse")
	proto.RegisterType((*QueryGrantAuthorizationRequest)(nil), "injective.exchange.v1beta1.QueryGrantAuthorizationRequest")
	proto.RegisterType((*QueryGrantAuthorizationResponse)(nil), "injective.exchange.v1beta1.QueryGrantAuthorizationResponse")
	proto.RegisterType((*QueryGrantAuthorizationsRequest)(nil), "injective.exchange.v1beta1.QueryGrantAuthorizationsRequest")
	proto.RegisterType((*QueryGrantAuthorizationsResponse)(nil), "injective.exchange.v1beta1.QueryGrantAuthorizationsResponse")
}

func init() {
	proto.RegisterFile("injective/exchange/v1beta1/query.proto", fileDescriptor_523db28b8af54781)
}

var fileDescriptor_523db28b8af54781 = []byte{
	// 5988 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x3d, 0x6d, 0x8c, 0x1c, 0xc9,
	0x55, 0xee, 0xd9, 0x0f, 0xef, 0xbe, 0xfd, 0x74, 0xed, 0x7a, 0xbd, 0x9e, 0xbb, 0xf3, 0x47, 0x3b,
	0xbe, 0xf3, 0x39, 0xe7, 0x1d, 0x7b, 0xfd, 0xfd, 0xed, 0x9d, 0x5d, 0xaf, 0xbd, 0xe7, 0x5d, 0xdb,
	0x37, 0xbb, 0xbe, 0xcb, 0x5d, 0x80, 0x49, 0xef, 0x4c, 0xef, 0x6c, 0x9f, 0x7b, 0xa6, 0xc7, 0xd3,
	0x3d, 0x7b, 0x5e, 0x8c, 0x11, 0x10, 0x50, 0x22, 0x90, 0x00, 0x29, 0x02, 0x84, 0x40, 0x08, 0xf8,
	0xc1, 0x0f, 0x44, 0x84, 0x44, 0x84, 0x40, 0x89, 0x94, 0x28, 0x04, 0xa1, 0x70, 0x41, 0x70, 0x90,
	0x23, 0xa0, 0x08, 0x8e, 0xe8, 0x2e, 0x10, 0xe5, 0x04, 0x12, 0xbf, 0x90, 0x10, 0x28, 0x41, 0x5d,
	0xf5, 0xaa, 0xa6, 0xbf, 0xa7, 0x7a, 0x76, 0x4f, 0xbe, 0x90, 0x5f, 0xde, 0xa9, 0xae, 0xf7, 0xea,
	0xbd, 0x7a, 0xaf, 0xde, 0x7b, 0x55, 0xf5, 0x5e, 0x19, 0x9e, 0x35, 0x6a, 0xaf, 0xeb, 0x25, 0xc7,
	0xd8, 0xd0, 0x73, 0xfa, 0xc3, 0xd2, 0xba, 0x56, 0xab, 0xe8, 0xb9, 0x8d, 0x13, 0xab, 0xba, 0xa3,
	0x9d, 0xc8, 0x3d, 0x68, 0xea, 0x8d, 0xcd, 0xa9, 0x7a, 0xc3, 0x72, 0x2c, 0x92, 0x15, 0xfd, 0xa6,
	0x78, 0xbf, 0x29, 0xec, 0x97, 0x7d, 0xba, 0x62, 0x59, 0x15, 0x53, 0xcf, 0x69, 0x75, 0x23, 0xa7,
	0xd5, 0x6a, 0x96, 0xa3, 0x39, 0x86, 0x55, 0xb3, 0x19, 0x64, 0xf6, 0xf9, 0x84, 0x11, 0x04, 0x2a,
	0xd6, 0xf5, 0x48, 0x42, 0xd7, 0x8a, 0x5e, 0xd3, 0x6d, 0x83, 0x23, 0x3d, 0xdc, 0xea, 0x69, 0x35,
	0xb4, 0x92, 0xd9, 0xea, 0xc7, 0x7e, 0x62, 0xb7, 0xf1, 0x8a, 0x55, 0xb1, 0xe8, 0x9f, 0x39, 0xf7,
	0x2f, 0xd6, 0xaa, 0xde, 0x01, 0x58, 0x6e, 0xae, 0x6a, 0xa5, 0x92, 0xd5, 0xac, 0x39, 0x64, 0x02,
	0x7a, 0x9d, 0x86, 0x56, 0xd6, 0x1b, 0x93, 0xca, 0x01, 0xe5, 0x48, 0x7f, 0x01, 0x7f, 0x91, 0xe7,
	0x61, 0xd4, 0x16, 0xbd, 0x8a, 0x35, 0xab, 0x56, 0xd2, 0x27, 0x33, 0x07, 0x94, 0x23, 0x43, 0x85,
	0x91, 0x56, 0xfb, 0x6d, 0xb7, 0x59, 0xfd, 0x04, 0x3c, 0xfd, 0x92, 0x3b, 0x57, 0x2d, 0xac, 0x77,
	0x1a, 0x65, 0xbd, 0x61, 0x17, 0xf4, 0x07, 0x4d, 0xdd, 0x76, 0xc8, 0x21, 0x18, 0xf2, 0xa0, 0x32,
	0xca, 0x38, 0xd2, 0x60, 0xab, 0x71, 0xa1, 0x4c, 0x9e, 0x82, 0xfe, 0xaa, 0xd6, 0xb8, 0xaf, 0xd3,
	0x0e, 0x19, 0xda, 0xa1, 0x8f, 0x35, 0x2c, 0x94, 0xd5, 0x2f, 0x2b, 0xf0, 0x4c, 0xcc, 0x10, 0x76,
	0xdd, 0xaa, 0xd9, 0x3a, 0xb9, 0x0d, 0xb0, 0xda, 0xdc, 0x2c, 0x5a, 0xb4, 0x75, 0x52, 0x39, 0xd0,
	0x75, 0x64, 0x60, 0x3a, 0x37, 0x15, 0x2f, 0xb5, 0xa9, 0x00, 0xa6, 0x39, 0xcd, 0xd1, 0x0a, 0xfd,
	0xab, 0xcd, 0x4d, 0x86, 0x97, 0xdc, 0x85, 0x01, 0x5b, 0x37, 0x4d, 0x8e, 0x30, 0xd3, 0x19, 0x42,
	0x70, 0x71, 0x30, 0x8c, 0xea, 0x1f, 0x2a, 0x70, 0x38, 0xd0, 0x67, 0xd5, 0xb2, 0xee, 0x2f, 0xe9,
	0x8e, 0x56, 0xd6, 0x1c, 0xed, 0x15, 0xc3, 0x59, 0x5f, 0xa2, 0xfc, 0x92, 0x65, 0xe8, 0xab, 0x62,
	0x2b, 0x9d, 0xaa, 0x81, 0xe9, 0xb3, 0x29, 0x06, 0xf6, 0x22, 0x2d, 0x08, 0x44, 0x89, 0xf3, 0x4b,
	0xc6, 0xa1, 0xc7, 0xb0, 0xf3, 0xcd, 0xcd, 0xc9, 0xae, 0x03, 0xca, 0x91, 0xbe, 0x02, 0xfb, 0xa1,
	0x3e, 0x0d, 0x59, 0x3a, 0xe9, 0xd7, 0x71, 0xc4, 0xbb, 0x5a, 0x43, 0xab, 0x72, 0xa9, 0xaa, 0x45,
	0x78, 0x2a, 0xf2, 0x2b, 0x0a, 0xe4, 0x1a, 0xf4, 0xd6, 0x69, 0x0b, 0xb2, 0xa0, 0x26, 0xb1, 0xc0,
	0x60, 0xf3, 0xdd, 0x5f, 0x7d, 0x67, 0xff, 0x8e, 0x02, 0xc2, 0xa9, 0x9f, 0x51, 0x60, 0x5f, 0x40,
	0xe8, 0x73, 0x7a, 0xdd, 0xb2, 0x0d, 0x27, 0x9d, 0x66, 0x2d, 0x02, 0xb4, 0x7e, 0x53, 0xd6, 0x07,
	0xa6, 0x9f, 0x95, 0x9b, 0x50, 0x4a, 0x91, 0x52, 0xf0, 0xc0, 0xab, 0xef, 0x2b, 0xb0, 0x3f, 0x96,
	0x2a, 0xe4, 0x5d, 0x87, 0xbe, 0x32, 0xb6, 0xa1, 0x2a, 0x2e, 0x24, 0x8d, 0xd7, 0x06, 0xdd, 0x14,
	0x6f, 0xb8, 0x5e, 0x73, 0x1a, 0x9b, 0x05, 0x81, 0x3a, 0xfb, 0x09, 0x18, 0xf2, 0x7d, 0x22, 0xa3,
	0xd0, 0x75, 0x5f, 0xdf, 0xc4, 0x49, 0x70, 0xff, 0x24, 0xe7, 0xa1, 0x67, 0x43, 0x33, 0x9b, 0x3a,
	0xb2, 0x7d, 0x28, 0x89, 0x0c, 0xc4, 0x55, 0x60, 0x10, 0x17, 0x32, 0xe7, 0x14, 0x75, 0x1f, 0xae,
	0x6c, 0x2e, 0xe3, 0xbc, 0x66, 0x6a, 0xb5, 0x92, 0x2e, 0x74, 0x60, 0x0d, 0x97, 0x65, 0xf8, 0x3b,
	0xce, 0xc4, 0x75, 0xe8, 0x5b, 0xc5, 0x36, 0x9c, 0x89, 0x44, 0x12, 0x10, 0x1e, 0x15, 0x41, 0x80,
	0xaa, 0x67, 0x51, 0xd7, 0x66, 0x2a, 0x95, 0x86, 0x5e, 0xd1, 0x1c, 0xfd, 0x65, 0xcb, 0x6c, 0x56,
	0x75, 0xae, 0x06, 0x93, 0xb0, 0x93, 0x8b, 0x97, 0xf1, 0xce, 0x7f, 0xaa, 0x4d, 0x64, 0x20, 0x04,
	0x88, 0xf4, 0xdd, 0x83, 0x5d, 0x1a, 0xff, 0x54, 0xdc, 0xa0, 0xdf, 0x38, 0xa1, 0x47, 0x92, 0x08,
	0x65, 0x2b, 0x15, 0x91, 0x8d, 0x6a, 0x7e, 0xec, 0xb6, 0xfa, 0x6a, 0xf4, 0xb0, 0x42, 0x6f, 0xb3,
	0xd0, 0x87, 0x14, 0xb2, 0xd1, 0xfa, 0x0b, 0xe2, 0x37, 0x79, 0x06, 0x40, 0x2c, 0x54, 0x66, 0x78,
	0xfa, 0x0b, 0xfd, 0x7c, 0xa5, 0xda, 0xea, 0x7f, 0x73, 0x53, 0x18, 0xc6, 0x8d, 0x3c, 0x39, 0xb0,
	0xb7, 0xc5, 0x13, 0x5f, 0x1b, 0x7e, 0xde, 0xce, 0x25, 0xf1, 0x26, 0x10, 0xcf, 0x30, 0x58, 0x3e,
	0x65, 0x25, 0xab, 0x51, 0x2e, 0xec, 0xd1, 0x22, 0xbf, 0xda, 0x64, 0x15, 0x26, 0x5b, 0xa3, 0x22,
	0x03, 0x7c, 0xd0, 0x4c, 0xca, 0x09, 0x9d, 0x10, 0x98, 0xbc, 0xcd, 0xb6, 0x7a, 0x0d, 0x0e, 0xfa,
	0x59, 0xf7, 0x41, 0xe1, 0xdc, 0xfa, 0x0c, 0x9d, 0x12, 0x70, 0x24, 0x26, 0xa8, 0x49, 0x18, 0x70,
	0x06, 0xe7, 0xa1, 0x97, 0x91, 0x8e, 0xb6, 0x2b, 0x91, 0x72, 0xef, 0xf4, 0x70, 0x0b, 0xc6, 0xa0,
	0xd5, 0xe3, 0x30, 0x49, 0x47, 0x9b, 0xd3, 0x6b, 0x56, 0x75, 0x4e, 0x2f, 0x19, 0x55, 0xcd, 0xe4,
	0x64, 0x8e, 0x43, 0x4f, 0xd9, 0x6d, 0x46, 0x12, 0xd9, 0x0f, 0xf5, 0x34, 0xec, 0x8d, 0x80, 0x40,
	0xb2, 0x26, 0x61, 0x67, 0x99, 0x35, 0x51, 0xa0, 0xee, 0x02, 0xff, 0xa9, 0x9e, 0x8c, 0x00, 0x13,
	0xca, 0x36, 0x01, 0xbd, 0x14, 0x39, 0x57, 0x35, 0xfc, 0xa5, 0x3a, 0x68, 0xde, 0x03, 0x40, 0x38,
	0xd8, 0xcb, 0x30, 0x4c, 0xfb, 0x15, 0x71, 0x0c, 0xae, 0x3a, 0xcf, 0x27, 0x9b, 0x10, 0x0f, 0x2a,
	0x9c, 0x8c, 0xa1, 0xb2, 0xb7, 0x51, 0x9d, 0x4d, 0x92, 0x80, 0xa0, 0xd9, 0xbf, 0x08, 0x94, 0xe0,
	0x22, 0x30, 0xe0, 0x50, 0x22, 0x12, 0xe4, 0x21, 0x0f, 0x3b, 0x3b, 0x5d, 0xd3, 0x1c, 0x50, 0x7d,
	0x2d, 0x14, 0x79, 0x70, 0x3b, 0x99, 0xc6, 0x07, 0x09, 0x69, 0x67, 0xbc, 0xd2, 0xd6, 0xe2, 0x1c,
	0x9c, 0xe0, 0xe0, 0xaa, 0xcf, 0x93, 0x48, 0x9b, 0x70, 0x01, 0xa4, 0xde, 0x85, 0x3d, 0x6c, 0x88,
	0xba, 0xe5, 0x30, 0x06, 0xbd, 0x7a, 0x61, 0x3b, 0x9a, 0xd3, 0xb4, 0x79, 0xe4, 0xc7, 0x7e, 0xb5,
	0x33, 0x40, 0x3f, 0x82, 0x4a, 0xed, 0xc3, 0x28, 0x9c, 0xfe, 0x4e, 0xd6, 0x91, 0x4f, 0x78, 0xb2,
	0x9f, 0x15, 0x18, 0x0a, 0x1c, 0x4c, 0x3d, 0x0d, 0x13, 0x01, 0xec, 0x52, 0xeb, 0xfa, 0xd5, 0x10,
	0x9b, 0x82, 0xa6, 0x2b, 0xd0, 0xcb, 0xba, 0xe1, 0x04, 0xca, 0x92, 0x84, 0x50, 0xea, 0x37, 0x32,
	0xb8, 0xb8, 0xdc, 0x6f, 0x22, 0xc2, 0x92, 0xa1, 0xca, 0x95, 0xba, 0x69, 0x54, 0x0d, 0x16, 0x74,
	0x74, 0x17, 0xd8, 0x0f, 0x32, 0x07, 0x40, 0xa3, 0xca, 0xa2, 0x6d, 0x94, 0x75, 0x1a, 0x71, 0x0d,
	0x4f, 0x1f, 0x4e, 0x22, 0x8a, 0x0e, 0xba, 0x6c, 0x94, 0xf5, 0x42, 0xbf, 0xc5, 0xff, 0x24, 0x45,
	0xd8, 0x4b, 0xd1, 0x15, 0x4b, 0xcd, 0x6a, 0xd3, 0xd4, 0x5c, 0xc8, 0x62, 0xcd, 0x72, 0x77, 0x1e,
	0x9a, 0x39, 0xd9, 0xed, 0x12, 0x92, 0x3f, 0xe4, 0x06, 0x2f, 0xdf, 0x7c, 0x67, 0xff, 0x53, 0x25,
	0xcb, 0xae, 0x5a, 0xb6, 0x5d, 0xbe, 0x3f, 0x65, 0x58, 0xb9, 0xaa, 0xe6, 0xac, 0x4f, 0x2d, 0xea,
	0x15, 0xad, 0xb4, 0x39, 0xa7, 0x97, 0x0a, 0x7b, 0x28, 0x96, 0x59, 0x81, 0xe4, 0x36, 0xe2, 0x88,
	0x1c, 0xe0, 0x41, 0x53, 0xab, 0x39, 0x86, 0xb3, 0x39, 0xd9, 0xd3, 0xf9, 0x00, 0x2f, 0x21, 0x0e,
	0xf5, 0x4f, 0x15, 0x34, 0x40, 0x81, 0x89, 0x45, 0xb9, 0xdd, 0x82, 0xd1, 0xd5, 0xe6, 0xa6, 0x5d,
	0xac, 0x37, 0x8c, 0x92, 0x5e, 0x34, 0xf5, 0x0d, 0xdd, 0x44, 0xa5, 0x3a, 0x98, 0x34, 0x59, 0x8b,
	0x6e, 0xc7, 0xc2, 0xb0, 0x0b, 0x7a, 0xd7, 0x85, 0xa4, 0xbf, 0xc9, 0x12, 0xec, 0x72, 0x43, 0x71,
	0x3f, 0xb6, 0x8c, 0x2c, 0xb6, 0x11, 0x0a, 0xdb, 0x42, 0xa7, 0x7e, 0x56, 0x81, 0xe1, 0xf9, 0xa6,
	0x69, 0xb6, 0xd4, 0x65, 0xab, 0x6a, 0x46, 0x3e, 0x0e, 0xbb, 0xaa, 0x46, 0x19, 0xe9, 0xd3, 0x6a,
	0xe5, 0xa2, 0x63, 0xad, 0x62, 0xd4, 0x76, 0x34, 0xd1, 0x6a, 0x19, 0x65, 0x4a, 0xd8, 0x4c, 0xad,
	0xbc, 0x72, 0x27, 0x8f, 0x01, 0xeb, 0x70, 0xd5, 0xd3, 0x6a, 0xad, 0xaa, 0x9f, 0x56, 0x30, 0x80,
	0xf2, 0x13, 0xbd, 0x45, 0x53, 0x40, 0xa6, 0x61, 0xe2, 0x0d, 0xc3, 0x59, 0x2f, 0x86, 0x09, 0x67,
	0xfb, 0x08, 0xe2, 0x7e, 0x5d, 0xf2, 0x93, 0x52, 0xc6, 0xd0, 0x28, 0x44, 0x09, 0x8a, 0x7d, 0x2e,
	0x68, 0x42, 0x12, 0xb9, 0xf7, 0x63, 0x69, 0x99, 0x91, 0x2a, 0xaa, 0x56, 0xe0, 0xbb, 0xcc, 0xa2,
	0x8d, 0x67, 0x2a, 0x13, 0xcb, 0x94, 0x16, 0x39, 0xbd, 0x1e, 0x3f, 0xe4, 0xd7, 0x8d, 0x34, 0x2c,
	0x71, 0x33, 0xf4, 0x73, 0x62, 0x37, 0xc4, 0x57, 0x8b, 0x9d, 0xdf, 0xbc, 0xa9, 0xd9, 0xeb, 0x2d,
	0xa7, 0x99, 0xc8, 0x56, 0xc8, 0x4d, 0x65, 0x22, 0xdc, 0xd4, 0x41, 0x18, 0x64, 0xa6, 0x69, 0x9d,
	0x22, 0x9e, 0xec, 0xa2, 0x12, 0x1f, 0xa0, 0x6d, 0x6c, 0x2c, 0xd5, 0xe4, 0xdb, 0x9f, 0x08, 0x32,
	0x90, 0xdd, 0x05, 0xe8, 0xf5, 0xed, 0xc3, 0x4f, 0x24, 0xb1, 0xbb, 0xd2, 0x30, 0xaa, 0x55, 0xbd,
	0xec, 0xa2, 0x5b, 0x74, 0x0d, 0x05, 0xc5, 0x59, 0x40, 0x04, 0xe2, 0x68, 0x61, 0x85, 0x1e, 0x4a,
	0xb4, 0xc6, 0xdc, 0x36, 0x96, 0x55, 0x13, 0x3e, 0xc2, 0x42, 0x09, 0xd6, 0x32, 0x53, 0x2e, 0x37,
	0x74, 0xdb, 0x4e, 0x39, 0xd2, 0x73, 0x30, 0xc2, 0x87, 0xd1, 0x18, 0x02, 0x1c, 0x6b, 0x58, 0xf3,
	0xa1, 0x55, 0x7f, 0x23, 0x03, 0xbb, 0x23, 0x39, 0x76, 0x77, 0x6a, 0x54, 0xdb, 0x18, 0x6e, 0x6a,
	0x5a, 0x77, 0xb4, 0x33, 0xad, 0x0c, 0xc2, 0x0d, 0x12, 0x84, 0x61, 0xce, 0xc8, 0x43, 0x0b, 0x20,
	0x17, 0xc1, 0x9a, 0x61, 0x9a, 0xda, 0xaa, 0xc9, 0xfc, 0x91, 0x2c, 0x02, 0x0e, 0xd4, 0x3a, 0x3f,
	0xe8, 0xf6, 0x9c, 0x1f, 0xb8, 0xd6, 0xa3, 0xa5, 0x4d, 0xcc, 0x65, 0xa0, 0x07, 0x73, 0x15, 0xc6,
	0xdd, 0xad, 0x96, 0x8c, 0xf2, 0x64, 0x2f, 0xdb, 0xad, 0x96, 0x8c, 0xb2, 0xfa, 0x3a, 0xc6, 0x5a,
	0x61, 0x69, 0x6f, 0xbf, 0x66, 0x35, 0xe0, 0x70, 0x1b, 0xb9, 0x6f, 0xff, 0x98, 0x97, 0x3d, 0x4b,
	0xd8, 0x6f, 0xb7, 0xa5, 0x82, 0x9c, 0xff, 0x51, 0x3c, 0x6b, 0x2f, 0x08, 0x2f, 0x22, 0xb0, 0x7e,
	0x61, 0xb8, 0x3c, 0xaa, 0xd4, 0xd6, 0x4b, 0xf7, 0x71, 0x8f, 0x41, 0x16, 0x60, 0x78, 0x55, 0xb7,
	0x9d, 0xe2, 0x6a, 0x73, 0x13, 0xd1, 0x64, 0xe4, 0xd1, 0x0c, 0xba, 0xa0, 0xf9, 0xe6, 0x26, 0x43,
	0x75, 0x0b, 0x46, 0x28, 0x2a, 0x7a, 0x92, 0xc6, 0x70, 0x75, 0xc9, 0xe3, 0x1a, 0x72, 0x61, 0x97,
	0x75, 0xd3, 0xa4, 0xc8, 0xd4, 0x59, 0x5c, 0xa8, 0x73, 0x7a, 0xc3, 0xd8, 0xa0, 0x91, 0x44, 0x07,
	0x53, 0xf8, 0xd3, 0x19, 0x14, 0x7b, 0x3c, 0x96, 0xff, 0xf7, 0x13, 0xf9, 0xc7, 0x5c, 0x8d, 0x5a,
	0x73, 0xb0, 0x1d, 0x61, 0x6d, 0x62, 0x40, 0xda, 0xb5, 0xf5, 0x80, 0x54, 0xfd, 0xa2, 0x02, 0x07,
	0xe2, 0xe9, 0xfe, 0x01, 0x88, 0x1a, 0x7f, 0xb3, 0x0b, 0xa6, 0x22, 0xed, 0xdb, 0x8a, 0x35, 0xab,
	0xd5, 0x4a, 0xba, 0x79, 0xaf, 0xbe, 0x62, 0xcd, 0x54, 0x5d, 0x73, 0xb4, 0x7d, 0x2e, 0x7d, 0x0e,
	0x06, 0x56, 0x35, 0x5b, 0x2f, 0x6a, 0x14, 0x6f, 0x1a, 0xf3, 0x0e, 0x2e, 0x1c, 0x23, 0x87, 0xcc,
	0xc3, 0xe0, 0x83, 0xa6, 0xe5, 0x08, 0x34, 0xdd, 0xf2, 0x68, 0x06, 0x28, 0x20, 0xe2, 0x59, 0x84,
	0x3e, 0xdb, 0x69, 0x68, 0x8e, 0x5e, 0x61, 0x7b, 0x88, 0xe1, 0xe9, 0xe3, 0x49, 0x13, 0xc9, 0xa6,
	0xc5, 0xa4, 0x17, 0x2a, 0xcb, 0x08, 0x57, 0x10, 0x18, 0xc8, 0x22, 0x8c, 0x34, 0xf4, 0x35, 0xbd,
	0xa1, 0xd7, 0x4a, 0x3a, 0x2e, 0x8b, 0x5e, 0x79, 0x45, 0x1b, 0x16, 0xb0, 0x6c, 0x5d, 0xfc, 0x53,
	0x06, 0x4e, 0x79, 0xc4, 0x13, 0xd0, 0xb2, 0x0f, 0x54, 0x48, 0xc1, 0xe9, 0xed, 0xda, 0x86, 0xe9,
	0xed, 0xfe, 0x20, 0xa6, 0xb7, 0xa7, 0xf3, 0xe9, 0x5d, 0xc3, 0x83, 0x9f, 0xe8, 0xd9, 0xdd, 0xbe,
	0x80, 0xae, 0x01, 0x47, 0x23, 0x1c, 0x7b, 0x47, 0xe3, 0x49, 0x87, 0x75, 0xdf, 0xcd, 0xc0, 0x53,
	0xe8, 0xfa, 0x5b, 0x03, 0x7d, 0x48, 0x82, 0xbb, 0x8b, 0x74, 0xf3, 0x51, 0x31, 0x6a, 0x69, 0xb4,
	0x0a, 0x41, 0x7c, 0x91, 0x61, 0x77, 0x27, 0x91, 0xe1, 0x7e, 0x1e, 0x19, 0xba, 0x9a, 0xd3, 0x97,
	0xef, 0x7f, 0xff, 0x9d, 0xfd, 0xac, 0x21, 0x3a, 0x48, 0xec, 0x8d, 0x09, 0x12, 0x77, 0xb6, 0x82,
	0xc4, 0x0d, 0x3c, 0xfb, 0x8b, 0xd3, 0x23, 0x74, 0x04, 0x77, 0x02, 0x61, 0xdb, 0x59, 0x89, 0xb0,
	0x2d, 0x4a, 0x76, 0x22, 0x78, 0xfb, 0x49, 0xf8, 0xa8, 0x94, 0x5e, 0x7d, 0x50, 0xe3, 0xff, 0x82,
	0x12, 0x0a, 0x80, 0x9e, 0xe0, 0x36, 0xf0, 0x61, 0x28, 0x8e, 0x8a, 0xd9, 0x0c, 0x6e, 0xfb, 0x3c,
	0xfc, 0x3c, 0xbf, 0x00, 0xf1, 0x84, 0x70, 0x4f, 0xec, 0x34, 0xe3, 0xd3, 0x0a, 0x80, 0x27, 0x60,
	0x78, 0x82, 0xeb, 0x5c, 0xfd, 0x92, 0x02, 0xe3, 0x77, 0xf5, 0x46, 0x5d, 0x77, 0x9a, 0x9a, 0xc9,
	0x66, 0x64, 0xd9, 0xd1, 0x1c, 0x9d, 0xdc, 0x85, 0x01, 0xce, 0x76, 0x6d, 0xcd, 0xc2, 0x23, 0x88,
	0xc4, 0xab, 0xec, 0x00, 0x9a, 0x85, 0xda, 0x9a, 0x55, 0xc0, 0xa9, 0x73, 0xff, 0x26, 0xf7, 0x60,
	0x70, 0xad, 0x59, 0x2b, 0x1b, 0xb5, 0x0a, 0x43, 0xc9, 0x8e, 0xa9, 0xa6, 0x53, 0xa0, 0x9c, 0x67,
	0xe0, 0x85, 0x01, 0xc4, 0xe3, 0xa2, 0x55, 0x3f, 0xdf, 0x05, 0xe3, 0xf3, 0x4d, 0xd3, 0x0c, 0x0a,
	0x96, 0xcc, 0x05, 0xce, 0x4f, 0x5e, 0x48, 0x3e, 0x03, 0xf7, 0x43, 0x8b, 0x13, 0xb6, 0x57, 0x61,
	0xb8, 0xce, 0xa9, 0xf0, 0xd2, 0x7d, 0x3c, 0x05, 0xdd, 0x74, 0x46, 0x6f, 0xee, 0x28, 0x0c, 0x09,
	0x4c, 0x74, 0x42, 0x3e, 0xe6, 0x4e, 0x88, 0xd3, 0x6c, 0xe8, 0x36, 0x43, 0xdc, 0x45, 0x11, 0x9f,
	0x4c, 0x42, 0x7c, 0xfd, 0x61, 0xdd, 0x68, 0x6c, 0xce, 0x33, 0xa8, 0xd6, 0x3c, 0xdf, 0xdc, 0xe1,
	0xce, 0x09, 0x6d, 0xa4, 0x98, 0xf3, 0x4c, 0x67, 0xd1, 0xfd, 0xa6, 0x30, 0xc1, 0x54, 0xb1, 0xd9,
	0xee, 0x21, 0xf2, 0x68, 0xb1, 0x67, 0x7b, 0x8e, 0x16, 0xf3, 0xbd, 0xd0, 0xed, 0xb2, 0xac, 0x9a,
	0xb8, 0xb7, 0x8d, 0x58, 0x95, 0x68, 0x09, 0x5e, 0x0c, 0x9e, 0xec, 0x1d, 0x6f, 0x77, 0x0c, 0x16,
	0x12, 0xa5, 0x38, 0xdf, 0xbb, 0x88, 0xe7, 0x42, 0xa1, 0x1e, 0x32, 0x9b, 0x40, 0x23, 0xc6, 0x80,
	0x08, 0x4a, 0x6f, 0x06, 0xf4, 0x2d, 0x3d, 0xa1, 0xfc, 0xd4, 0x2e, 0x8f, 0xce, 0x2a, 0xd8, 0x01,
	0xbd, 0x87, 0x14, 0xb9, 0x7a, 0x78, 0xe3, 0xeb, 0xc7, 0xd1, 0xba, 0x1e, 0xe4, 0x51, 0x0a, 0xbf,
	0x05, 0x67, 0x3f, 0xe5, 0xe2, 0xa6, 0x1b, 0xb8, 0xbb, 0x6a, 0x5d, 0x46, 0x51, 0x0f, 0x4b, 0x53,
	0x7c, 0xd2, 0xdc, 0x75, 0xa9, 0xf3, 0xa1, 0x04, 0x89, 0xbb, 0x96, 0x6d, 0xd0, 0x9c, 0xa8, 0x54,
	0x78, 0x5e, 0x87, 0x67, 0x63, 0xf0, 0x2c, 0xd4, 0xfc, 0xd2, 0xde, 0x7a, 0x82, 0x91, 0x0d, 0xb9,
	0xc0, 0x58, 0xd7, 0xd7, 0xd6, 0x98, 0xc4, 0x3f, 0xb8, 0x41, 0x5f, 0x44, 0xe5, 0x08, 0x24, 0xf0,
	0x88, 0xe4, 0x9d, 0x34, 0x93, 0x55, 0x0b, 0x49, 0xcf, 0x33, 0xe9, 0x62, 0x01, 0xf6, 0xb8, 0x9e,
	0x50, 0xc7, 0xe5, 0x37, 0x25, 0x67, 0x45, 0x39, 0x1e, 0xbc, 0xce, 0x65, 0x28, 0xd4, 0xfb, 0xf0,
	0x5c, 0x5b, 0xe1, 0x88, 0x93, 0x14, 0x31, 0xac, 0xbb, 0x98, 0x3e, 0x92, 0x68, 0x6e, 0xbd, 0x83,
	0x29, 0x7c, 0xb0, 0x4f, 0x66, 0x60, 0x57, 0x48, 0x1e, 0x64, 0x0f, 0xec, 0x34, 0xec, 0xa2, 0x69,
	0xd5, 0x2a, 0x14, 0x73, 0x5f, 0xa1, 0xd7, 0xb0, 0x17, 0xad, 0x5a, 0x65, 0xeb, 0x21, 0xf3, 0x1c,
	0x0c, 0xe8, 0x35, 0xa7, 0xb1, 0x19, 0x3a, 0x6a, 0x69, 0xbf, 0x67, 0xa6, 0x70, 0xcc, 0xec, 0xde,
	0x86, 0x51, 0x9d, 0x13, 0x5d, 0xc4, 0x10, 0x3c, 0x85, 0x01, 0x1f, 0x11, 0xc0, 0x4b, 0x14, 0x56,
	0x7d, 0x0c, 0xc7, 0xe5, 0x75, 0x54, 0x1c, 0x5e, 0xfa, 0xe6, 0xfe, 0x58, 0xa2, 0x47, 0x0a, 0x62,
	0xf3, 0x0b, 0xe1, 0x0a, 0x2e, 0xeb, 0xa8, 0xe0, 0x40, 0xc6, 0x8c, 0x55, 0x51, 0x43, 0x23, 0xe1,
	0x05, 0xb9, 0xdd, 0x5b, 0x88, 0x51, 0x50, 0x43, 0x99, 0x3f, 0xe2, 0x96, 0x37, 0xc6, 0xcf, 0x4a,
	0x91, 0xdc, 0x44, 0xcb, 0x1b, 0x8b, 0x03, 0xc9, 0x5e, 0xf2, 0x91, 0xdd, 0x89, 0xdb, 0xf7, 0x91,
	0x3e, 0x83, 0x3b, 0xe5, 0x98, 0x98, 0x49, 0x8e, 0xf2, 0x43, 0x89, 0x28, 0x44, 0xd6, 0xa4, 0x4f,
	0x3d, 0x3a, 0x88, 0xe0, 0xfc, 0x56, 0x41, 0xec, 0x51, 0x62, 0x4d, 0x1a, 0x0e, 0x5c, 0xf2, 0xa5,
	0x38, 0xba, 0xd6, 0x68, 0xa6, 0xc3, 0x14, 0xc7, 0x56, 0xde, 0x24, 0xcf, 0x1a, 0xe3, 0x88, 0xd5,
	0xf3, 0x98, 0x2e, 0x14, 0xed, 0xd1, 0x90, 0x92, 0x71, 0xe8, 0x61, 0xc9, 0xad, 0x0a, 0x4d, 0x6e,
	0x65, 0x3f, 0xd4, 0xbd, 0x98, 0x4f, 0xb0, 0x64, 0x95, 0x9b, 0xa6, 0x4e, 0xa3, 0x3e, 0x9e, 0xf3,
	0xf6, 0x1a, 0xe6, 0x3f, 0xf8, 0x3e, 0x89, 0x5c, 0x03, 0xdf, 0x7c, 0x26, 0xa6, 0x9b, 0xdc, 0x60,
	0x19, 0xbd, 0x0c, 0x01, 0xce, 0xdf, 0x1e, 0xd8, 0xcd, 0xc4, 0x16, 0x70, 0x98, 0x6a, 0x19, 0xd3,
	0x22, 0x3e, 0x58, 0xa3, 0xfe, 0xc0, 0x7b, 0xff, 0x52, 0xd0, 0xdf, 0xd0, 0x1a, 0xe5, 0xbb, 0x96,
	0x51, 0x73, 0xa4, 0xf2, 0xd6, 0x4e, 0xc1, 0x44, 0x5d, 0x67, 0x9b, 0x82, 0xba, 0x65, 0x99, 0x45,
	0xc7, 0xa8, 0xea, 0xb6, 0xa3, 0x55, 0xeb, 0xd4, 0x06, 0x77, 0x15, 0xc6, 0xf1, 0xeb, 0x5d, 0xcb,
	0x32, 0x57, 0xf8, 0x37, 0xf5, 0x67, 0xf9, 0xb5, 0x66, 0xc4, 0x98, 0xc8, 0xe1, 0x2a, 0x3c, 0xc5,
	0x9d, 0x1f, 0xcd, 0x4d, 0x2e, 0x36, 0x68, 0xaf, 0x62, 0x9d, 0x76, 0x63, 0x74, 0xc8, 0x99, 0xd4,
	0x49, 0xaf, 0x1a, 0x78, 0xc7, 0x52, 0x0f, 0xa2, 0x71, 0xf3, 0x7c, 0x99, 0xd5, 0xaa, 0x75, 0xcd,
	0xa8, 0xd4, 0xb8, 0x08, 0xbe, 0xd7, 0x8d, 0x06, 0x2c, 0xb2, 0x0f, 0xd2, 0xba, 0x01, 0x4f, 0xbb,
	0x34, 0xba, 0x93, 0x80, 0x54, 0x96, 0xb0, 0x8b, 0x77, 0xf3, 0x75, 0x3a, 0x79, 0x0f, 0xac, 0xb1,
	0x35, 0xea, 0x1d, 0x80, 0x9a, 0x9b, 0xbd, 0x4e, 0xdc, 0x27, 0xf2, 0x53, 0x0a, 0x1c, 0x0e, 0x0c,
	0x4c, 0x85, 0x20, 0x46, 0xb7, 0x4b, 0xeb, 0xba, 0xab, 0xaf, 0x78, 0x7c, 0x3d, 0x95, 0x7c, 0x2c,
	0xc8, 0xb9, 0x62, 0x33, 0x64, 0x99, 0x85, 0x83, 0xbe, 0xa1, 0xdd, 0x26, 0xde, 0x69, 0x19, 0x11,
	0x93, 0x1f, 0x83, 0xbd, 0x8e, 0xe5, 0x68, 0x66, 0xa4, 0x90, 0x52, 0xb8, 0xd0, 0x09, 0x8a, 0x25,
	0x24, 0x22, 0xf2, 0x4b, 0x0a, 0x1c, 0xe3, 0x0a, 0x26, 0xc7, 0x6a, 0x77, 0x47, 0xac, 0x1e, 0xc1,
	0x41, 0x56, 0xda, 0x72, 0x5c, 0x85, 0x83, 0x82, 0xa0, 0x58, 0xce, 0x7b, 0xe4, 0xd5, 0xf3, 0x19,
	0x3e, 0x72, 0xe4, 0x04, 0xa8, 0x17, 0x51, 0x47, 0x17, 0xec, 0x3b, 0x75, 0x47, 0x2f, 0xdf, 0x69,
	0x3a, 0x77, 0xd6, 0x58, 0x07, 0xbb, 0x7d, 0x22, 0xec, 0x1c, 0x2a, 0x6f, 0x24, 0x30, 0x2a, 0xef,
	0x01, 0x18, 0x34, 0xec, 0xa2, 0xe5, 0x7e, 0x2f, 0x5a, 0x4d, 0x07, 0xa3, 0x2a, 0x30, 0x04, 0x88,
	0xfa, 0x1c, 0x9e, 0xfa, 0x84, 0x70, 0xe0, 0xa1, 0x98, 0xb0, 0x57, 0x73, 0x18, 0xbb, 0x27, 0x74,
	0xc4, 0x41, 0x13, 0x4c, 0x8a, 0x7a, 0x05, 0x1d, 0xe1, 0xbc, 0xae, 0xcf, 0x19, 0x36, 0x3b, 0x76,
	0xc3, 0x88, 0xd7, 0xe3, 0xc2, 0xe3, 0x99, 0xfe, 0xae, 0x82, 0x6e, 0x30, 0x0e, 0x01, 0xd2, 0xf0,
	0x0c, 0x80, 0x63, 0xe8, 0x0d, 0x71, 0x5d, 0xa4, 0x1c, 0xe9, 0x2e, 0xf4, 0xbb, 0x2d, 0xec, 0x54,
	0xa7, 0x00, 0x83, 0x22, 0xfa, 0x6e, 0x1d, 0x1b, 0x24, 0x46, 0x27, 0x9e, 0x01, 0x57, 0x0c, 0xbd,
	0x41, 0x47, 0x1b, 0xd0, 0x5a, 0x43, 0x93, 0x3b, 0x30, 0x20, 0x8c, 0x9a, 0x63, 0xe2, 0x81, 0xc1,
	0x54, 0x0a, 0x94, 0x2b, 0x2b, 0x8b, 0x05, 0xe0, 0xf6, 0xcc, 0x31, 0x85, 0x05, 0xf3, 0x74, 0xe3,
	0x8a, 0xca, 0x85, 0xf2, 0x29, 0x7e, 0x81, 0x16, 0xd9, 0x47, 0x78, 0xe6, 0xdd, 0x6b, 0xba, 0x5e,
	0x2c, 0xe3, 0xf7, 0xd6, 0x6a, 0x52, 0x52, 0x71, 0x2d, 0xf0, 0x8e, 0xad, 0x85, 0x1b, 0xd5, 0x6b,
	0xe8, 0x68, 0x30, 0xdf, 0x7b, 0xc9, 0xb0, 0xab, 0x9a, 0x53, 0xf2, 0x9c, 0x61, 0xee, 0x87, 0x81,
	0x72, 0xd3, 0x76, 0x8a, 0x6b, 0x5a, 0xc9, 0xb1, 0x58, 0x69, 0x4a, 0x57, 0x01, 0xdc, 0xa6, 0x79,
	0xda, 0xa2, 0xfe, 0x6e, 0x17, 0x8c, 0x04, 0xa0, 0x89, 0x0a, 0xbe, 0x3d, 0x91, 0x7c, 0x22, 0x26,
	0x99, 0x81, 0x7e, 0x6d, 0x43, 0x33, 0x52, 0x67, 0x40, 0xb4, 0xa0, 0xc8, 0x79, 0xe8, 0xa1, 0x46,
	0x20, 0x4d, 0x88, 0xcf, 0x20, 0xc8, 0x3c, 0x0c, 0x62, 0xa6, 0x7b, 0x71, 0xdd, 0x32, 0xcb, 0x9e,
	0x4b, 0x96, 0xf6, 0xb7, 0x3f, 0x08, 0x78, 0xd3, 0x32, 0xcb, 0xe4, 0x45, 0x18, 0xd6, 0x1f, 0xd6,
	0xf5, 0x92, 0xbb, 0x7e, 0x19, 0x2d, 0xbd, 0xf2, 0x98, 0x86, 0x38, 0x28, 0xb5, 0x3e, 0x64, 0x16,
	0xa0, 0x6c, 0xac, 0xe1, 0x05, 0x0e, 0x3b, 0x7e, 0x97, 0xdc, 0x01, 0xb5, 0xc0, 0xd4, 0x9f, 0x40,
	0xdf, 0x1e, 0x21, 0x66, 0xd4, 0xb6, 0xd7, 0x80, 0x70, 0xd6, 0xab, 0xe2, 0x2b, 0x86, 0x32, 0x1f,
	0x95, 0xa8, 0x14, 0xe0, 0x28, 0x0b, 0xbb, 0x56, 0x83, 0x63, 0xa8, 0x87, 0x71, 0xf1, 0x63, 0x57,
	0x37, 0x50, 0xcc, 0xb7, 0x66, 0x4b, 0x98, 0xaa, 0x5f, 0xcb, 0xc0, 0x6e, 0x4f, 0x17, 0xb6, 0xd9,
	0xa2, 0xf3, 0xf9, 0x43, 0xae, 0x4f, 0xea, 0xaf, 0xf2, 0x68, 0x3e, 0x76, 0x06, 0x51, 0x8a, 0x35,
	0xc8, 0xf2, 0x01, 0xe9, 0x09, 0xba, 0x77, 0x74, 0xa9, 0xb4, 0x99, 0xc8, 0xf9, 0x2f, 0xec, 0x59,
	0x8d, 0x1e, 0x57, 0xb8, 0xa1, 0x80, 0x49, 0x74, 0x43, 0x69, 0xc3, 0x76, 0x8c, 0x92, 0x90, 0xed,
	0x79, 0x18, 0xf2, 0x7d, 0x20, 0x04, 0xba, 0x5d, 0xbb, 0x8e, 0x36, 0x9e, 0xfe, 0xed, 0x8a, 0xb0,
	0x55, 0x1a, 0xd4, 0x5d, 0x60, 0x3f, 0x54, 0x1b, 0x3d, 0x58, 0xc2, 0x18, 0x62, 0xd3, 0x0a, 0xb6,
	0x68, 0x95, 0xc9, 0x92, 0xf7, 0xe1, 0x29, 0x78, 0x80, 0xdd, 0xf8, 0x7f, 0xc9, 0x70, 0xac, 0x97,
	0xb5, 0xa6, 0x49, 0xdd, 0x84, 0x60, 0xe4, 0xcf, 0x15, 0x98, 0x08, 0x7e, 0xc1, 0xe1, 0x9f, 0x87,
	0xd1, 0xaa, 0x66, 0x3b, 0x7a, 0x83, 0xdf, 0x51, 0xea, 0xdc, 0x91, 0x8e, 0xb0, 0xf6, 0x19, 0xde,
	0x4c, 0x4e, 0xc0, 0x78, 0x59, 0x6c, 0x01, 0x3c, 0xdd, 0xd9, 0x55, 0xc8, 0x58, 0xeb, 0x5b, 0x0b,
	0xe4, 0x30, 0x0c, 0xdb, 0x75, 0xcb, 0xf1, 0x74, 0x66, 0x97, 0x41, 0x43, 0x6e, 0xab, 0xaf, 0x5b,
	0xe9, 0x8d, 0xe9, 0xe3, 0x9e, 0x6e, 0xdd, 0xac, 0x9b, 0xdb, 0x2a, 0xba, 0xa9, 0x73, 0x68, 0xf7,
	0x71, 0xe3, 0x3b, 0x37, 0xdf, 0xb0, 0xaa, 0x94, 0x25, 0xcf, 0x59, 0xd7, 0x86, 0xfb, 0xbb, 0xe8,
	0x3f, 0xc9, 0x1c, 0xa4, 0x8d, 0xfc, 0xb6, 0x95, 0xa7, 0x51, 0x45, 0x60, 0xc1, 0x39, 0x49, 0xdc,
	0x1b, 0xf3, 0xed, 0xf5, 0x4d, 0xc3, 0x76, 0xac, 0x86, 0x51, 0x12, 0xb1, 0x56, 0xc9, 0xf2, 0x84,
	0x52, 0x89, 0x28, 0x1c, 0x34, 0x2d, 0x71, 0x28, 0xc4, 0xb9, 0xc0, 0x10, 0x0f, 0x09, 0xe9, 0x07,
	0x99, 0x2a, 0x04, 0x1f, 0xa2, 0x41, 0xc7, 0xf3, 0x4b, 0xfd, 0x13, 0x05, 0xc6, 0xe8, 0x67, 0x36,
	0xac, 0x1b, 0x5c, 0xb9, 0x5b, 0x41, 0xf2, 0x02, 0x10, 0x36, 0x4c, 0xa5, 0x61, 0x35, 0xeb, 0x6e,
	0x38, 0x6a, 0xeb, 0x25, 0x54, 0xf1, 0x51, 0xfa, 0xe5, 0x06, 0x7e, 0x58, 0xd6, 0x4b, 0x64, 0x0f,
	0xec, 0xac, 0x6a, 0x0f, 0x8b, 0x5a, 0x45, 0x47, 0x85, 0xef, 0xad, 0x6a, 0x0f, 0x67, 0x2a, 0x3a,
	0x99, 0x82, 0x31, 0xa3, 0x56, 0x32, 0x9b, 0x2e, 0xbd, 0xda, 0x1b, 0xc5, 0x75, 0x36, 0x08, 0xa6,
	0xf4, 0xed, 0xc2, 0x4f, 0x05, 0xed, 0x0d, 0x1c, 0xdd, 0x55, 0x3c, 0xde, 0x5f, 0xec, 0xe5, 0xe9,
	0x2d, 0x6f, 0x61, 0x04, 0xdb, 0xf9, 0x1e, 0x5d, 0xfd, 0x6d, 0x05, 0xcf, 0xeb, 0x45, 0x8d, 0x85,
	0xe6, 0x18, 0xa6, 0xe1, 0x6c, 0x4a, 0xdd, 0x59, 0x96, 0x60, 0x37, 0xe3, 0x0f, 0x49, 0x72, 0x43,
	0x54, 0x97, 0x71, 0x99, 0x40, 0x2c, 0x62, 0xbe, 0x0a, 0x63, 0x4e, 0xb8, 0x51, 0xfd, 0x64, 0xc6,
	0xa7, 0x9b, 0x5e, 0x12, 0x45, 0x2d, 0x06, 0x6c, 0x88, 0x56, 0xbc, 0xe1, 0xdb, 0xdf, 0xd6, 0x1d,
	0xb6, 0x40, 0xc8, 0x2b, 0x30, 0xca, 0x39, 0x10, 0x13, 0x96, 0x09, 0x5d, 0x68, 0x61, 0x05, 0xaf,
	0xb8, 0x84, 0xc1, 0x9e, 0x1e, 0xc3, 0x33, 0x82, 0x58, 0xf8, 0x27, 0x72, 0x13, 0x06, 0xbc, 0x12,
	0xeb, 0xa2, 0x5a, 0xf6, 0x9c, 0xa4, 0x96, 0x15, 0xa0, 0x21, 0x64, 0x2a, 0x0a, 0x89, 0xf2, 0x46,
	0x4d, 0xe3, 0x53, 0xd1, 0xee, 0x5e, 0x55, 0xad, 0x60, 0xb2, 0x75, 0x00, 0x48, 0x98, 0xc7, 0xc0,
	0xb5, 0x4f, 0xa2, 0xbc, 0x18, 0x0e, 0x14, 0x4a, 0xf0, 0xd6, 0xe7, 0x01, 0x1c, 0x8b, 0xbc, 0xfa,
	0x9f, 0xb5, 0x6a, 0x65, 0x83, 0x65, 0x89, 0x6d, 0x77, 0xe5, 0xf1, 0x6f, 0x75, 0xc1, 0xc1, 0xd0,
	0xad, 0x74, 0x70, 0xbc, 0x1f, 0xdc, 0xfc, 0x8e, 0x1b, 0x30, 0xe8, 0x34, 0x8c, 0x4a, 0x45, 0x6f,
	0xdc, 0x4d, 0x7b, 0xc1, 0xe8, 0x03, 0x6c, 0x9f, 0xe7, 0x71, 0x18, 0x76, 0x1a, 0x36, 0xbd, 0xce,
	0xa7, 0x51, 0x69, 0x5f, 0x7e, 0xe0, 0xfd, 0x77, 0xf6, 0xf3, 0xa6, 0x02, 0xff, 0x23, 0x90, 0x0e,
	0xb2, 0x33, 0x26, 0x1d, 0xa4, 0xaf, 0x95, 0x0e, 0xf2, 0x29, 0xc5, 0x97, 0x54, 0x97, 0xa8, 0x14,
	0xa2, 0xe8, 0xd3, 0x9f, 0x92, 0x70, 0x39, 0x55, 0x4a, 0x42, 0x10, 0xaf, 0x48, 0x4c, 0xb8, 0x84,
	0x06, 0x84, 0x27, 0xf0, 0xa7, 0x4a, 0xaa, 0x54, 0x7f, 0x8f, 0x1f, 0x84, 0x45, 0x80, 0x23, 0xdd,
	0x33, 0xd0, 0x9d, 0x37, 0x84, 0x17, 0x39, 0x26, 0x41, 0xb5, 0x27, 0x7d, 0x82, 0x82, 0xba, 0x28,
	0x66, 0xec, 0xfb, 0xbc, 0x22, 0x33, 0x2d, 0x0a, 0x17, 0x54, 0x1c, 0xac, 0xfb, 0xef, 0x3d, 0xd3,
	0x31, 0xfb, 0x07, 0x3c, 0xb2, 0x8c, 0x45, 0xf2, 0xa1, 0x62, 0xf9, 0xeb, 0x0a, 0xec, 0x0a, 0x7d,
	0x7b, 0xa2, 0x8b, 0xde, 0xbf, 0x4c, 0xba, 0x82, 0xcb, 0x24, 0x64, 0xf7, 0xba, 0x23, 0xae, 0x0c,
	0x97, 0x70, 0xe1, 0xe0, 0x6d, 0xb2, 0x63, 0x55, 0x8d, 0xd2, 0xf5, 0x87, 0x7a, 0xa9, 0xe9, 0x2a,
	0xf7, 0xbc, 0xae, 0x2f, 0x35, 0x4d, 0xc7, 0xa8, 0x9b, 0x86, 0xde, 0x90, 0x92, 0xe9, 0x06, 0x5e,
	0xa1, 0xca, 0xa0, 0x43, 0xe9, 0xce, 0x02, 0x54, 0x45, 0x6b, 0x9a, 0x69, 0xf4, 0x80, 0xa9, 0xe7,
	0x78, 0xad, 0x35, 0x15, 0xea, 0xb2, 0xa3, 0xdd, 0xd7, 0x6f, 0x34, 0xb4, 0x56, 0x76, 0xe6, 0x24,
	0xec, 0xac, 0xb8, 0xbf, 0x75, 0x9d, 0x1f, 0x0f, 0xe1, 0x4f, 0xf5, 0x73, 0xa2, 0x94, 0x3a, 0x04,
	0x8a, 0x04, 0x5e, 0x86, 0x1e, 0xda, 0x19, 0x0f, 0x3f, 0x12, 0x5d, 0x2a, 0x43, 0xc2, 0xe0, 0x19,
	0x14, 0x59, 0x86, 0xd6, 0x25, 0x5e, 0x91, 0x21, 0x92, 0xa8, 0xe8, 0x12, 0xf7, 0x70, 0x0c, 0xd7,
	0xb0, 0xee, 0xfb, 0xad, 0xae, 0xa0, 0x9d, 0xa0, 0xbf, 0x66, 0x9a, 0xce, 0xba, 0xd5, 0x30, 0x7e,
	0x9c, 0xa6, 0x70, 0x86, 0x38, 0x6e, 0xf8, 0x39, 0x6e, 0x78, 0xe7, 0x22, 0xe3, 0x9f, 0x8b, 0x8f,
	0xe1, 0xf1, 0x51, 0x14, 0x56, 0x9c, 0x8c, 0xd3, 0xd0, 0x8b, 0xe9, 0xa9, 0x4c, 0x52, 0xcf, 0xa0,
	0xa4, 0x76, 0x87, 0x25, 0xb5, 0x50, 0x73, 0x0a, 0xd8, 0x59, 0x1c, 0x5b, 0x86, 0x31, 0xdb, 0x6d,
	0x09, 0x76, 0x43, 0xde, 0x03, 0xf1, 0xd0, 0x22, 0xe7, 0x9b, 0xb0, 0xf3, 0x57, 0x0a, 0x55, 0x4c,
	0x43, 0xe4, 0x28, 0x05, 0x64, 0xc8, 0x79, 0xa6, 0x73, 0x2f, 0x45, 0x63, 0xcb, 0x9c, 0x94, 0x47,
	0xcc, 0x16, 0x42, 0x1f, 0x3d, 0x05, 0xfd, 0xa2, 0x6e, 0x93, 0x8c, 0xc3, 0xa8, 0xfb, 0x6f, 0xf1,
	0x5e, 0xcd, 0xae, 0xeb, 0x25, 0x63, 0xcd, 0xd0, 0xcb, 0xa3, 0x3b, 0xc8, 0x4e, 0xe8, 0xca, 0x37,
	0x37, 0x47, 0x15, 0xd2, 0x07, 0xdd, 0xcb, 0xba, 0x69, 0x8e, 0x66, 0x8e, 0xbe, 0x0c, 0xe3, 0x51,
	0x49, 0xb9, 0x2e, 0x02, 0x0f, 0x2c, 0x45, 0x3c, 0xba, 0x83, 0x8c, 0xc1, 0x88, 0xbb, 0xf7, 0x79,
	0xc5, 0x6a, 0xd8, 0xce, 0x8a, 0x95, 0xd7, 0x6d, 0x67, 0x54, 0xe1, 0x8d, 0xee, 0xaf, 0x15, 0x8b,
	0x7e, 0x1a, 0xcd, 0x4c, 0x7f, 0x7f, 0x1d, 0x7a, 0xe8, 0x3c, 0x92, 0x77, 0x15, 0xd8, 0xbd, 0x78,
	0x32, 0x60, 0x73, 0xf3, 0x96, 0x75, 0x9f, 0x5c, 0x6d, 0xfb, 0x46, 0x45, 0xb2, 0xc9, 0xcf, 0x5e,
	0xeb, 0x1c, 0x01, 0x93, 0xa4, 0x3a, 0xff, 0x33, 0x5f, 0xff, 0xf6, 0x67, 0x32, 0xd7, 0xc8, 0x95,
	0x5c, 0xc2, 0x53, 0x38, 0xad, 0x6d, 0x6a, 0x6e, 0xf1, 0xa4, 0x20, 0x3f, 0xf7, 0x48, 0x98, 0xa6,
	0xc7, 0xe4, 0x4d, 0x05, 0x46, 0x16, 0x4f, 0x0a, 0x2f, 0x4a, 0xd9, 0x3b, 0x2f, 0x45, 0x5d, 0x94,
	0xe3, 0xce, 0x5e, 0xe8, 0x04, 0x14, 0x59, 0xba, 0x46, 0x59, 0xba, 0x40, 0xce, 0x25, 0xb1, 0xe4,
	0x6e, 0xa6, 0x63, 0x99, 0xf9, 0xbc, 0x02, 0x63, 0x11, 0x2f, 0xad, 0x90, 0x33, 0x6d, 0xa9, 0x8a,
	0x7c, 0xb8, 0x25, 0x7b, 0x36, 0x35, 0x1c, 0xb2, 0x32, 0x4d, 0x59, 0x79, 0x81, 0x1c, 0xcd, 0x49,
	0xbc, 0x69, 0x84, 0x44, 0xfe, 0xb5, 0x02, 0x24, 0xfc, 0xb4, 0x09, 0xb9, 0xd0, 0xd1, 0x7b, 0x28,
	0x8c, 0xfe, 0x8b, 0x5b, 0x78, 0x4b, 0x45, 0xbd, 0x4a, 0x79, 0x38, 0x4f, 0xce, 0xca, 0xf0, 0x90,
	0xb3, 0xc3, 0x94, 0xbf, 0xa9, 0xc0, 0xae, 0x10, 0x7e, 0x09, 0xe5, 0x8a, 0x7b, 0x3f, 0x20, 0x7b,
	0xa1, 0x13, 0x50, 0xe4, 0xe6, 0x0a, 0xe5, 0xe6, 0x1c, 0x39, 0xd3, 0x19, 0x37, 0xe4, 0x2f, 0x14,
	0x18, 0x0d, 0xbe, 0xdd, 0x42, 0xce, 0x49, 0xeb, 0x47, 0xe0, 0x39, 0x98, 0xec, 0xf9, 0x0e, 0x20,
	0x91, 0x93, 0xcb, 0x94, 0x93, 0xb3, 0xe4, 0xb4, 0x14, 0x27, 0x7a, 0x90, 0xe6, 0xbf, 0x52, 0x60,
	0x24, 0xf0, 0x20, 0x0a, 0x69, 0xaf, 0xe7, 0xd1, 0xcf, 0xc9, 0x64, 0xcf, 0xa5, 0x07, 0x4c, 0x63,
	0xbf, 0x44, 0x43, 0xe0, 0xd9, 0x98, 0xdc, 0x23, 0x94, 0xce, 0x63, 0x2a, 0x97, 0xe0, 0xfb, 0x2e,
	0x24, 0x35, 0x59, 0x29, 0xe4, 0x12, 0xf7, 0x98, 0x4c, 0x4a, 0xb9, 0x04, 0x1f, 0xc2, 0x21, 0xff,
	0xa6, 0xc0, 0xee, 0xc8, 0x47, 0x3a, 0xc8, 0x65, 0x79, 0x9a, 0x22, 0x5e, 0x79, 0xc9, 0x5e, 0xe9,
	0x14, 0x1c, 0xf9, 0xba, 0x4d, 0xf9, 0xba, 0x49, 0xe6, 0xd3, 0xf1, 0xe5, 0xc5, 0xe5, 0x33, 0xd2,
	0xef, 0x28, 0x30, 0x11, 0xfd, 0x1a, 0x09, 0xe9, 0x90, 0x54, 0x21, 0xbd, 0xab, 0x1d, 0xc3, 0x23,
	0xaf, 0xb3, 0x94, 0xd7, 0xcb, 0xe4, 0x62, 0xe7, 0xbc, 0xda, 0xe4, 0x4b, 0x0a, 0x0c, 0x7a, 0x9f,
	0x77, 0x21, 0xa7, 0xda, 0x92, 0x15, 0xf1, 0xec, 0x4d, 0xf6, 0x74, 0x4a, 0x28, 0x64, 0x21, 0x4f,
	0x59, 0xb8, 0x44, 0x2e, 0x48, 0xb1, 0xe0, 0x7b, 0xb8, 0x26, 0xf7, 0x88, 0xfe, 0x7c, 0x4c, 0xbe,
	0xa0, 0xc0, 0x90, 0xef, 0x81, 0x1a, 0x92, 0x8e, 0x18, 0x21, 0x90, 0x33, 0x69, 0xc1, 0x90, 0x89,
	0x8b, 0x94, 0x89, 0xd3, 0xe4, 0x64, 0x7a, 0x26, 0x6c, 0xf2, 0xfb, 0x0a, 0x0c, 0x78, 0xde, 0x4b,
	0x20, 0x27, 0xdb, 0xbb, 0x8d, 0xd0, 0x3b, 0x0f, 0xd9, 0x53, 0xe9, 0x80, 0x90, 0xee, 0xe3, 0x94,
	0xee, 0xa3, 0xe4, 0x48, 0xdb, 0x10, 0x06, 0x0f, 0xea, 0xc8, 0xe7, 0x14, 0x00, 0xcf, 0xdb, 0x18,
	0xd3, 0x29, 0x86, 0xe5, 0xa4, 0x9e, 0x4c, 0x05, 0x83, 0x94, 0x5e, 0xa2, 0x94, 0x9e, 0x21, 0xa7,
	0x64, 0x29, 0xf5, 0xad, 0xe1, 0x2f, 0x28, 0x30, 0x12, 0x78, 0x96, 0x42, 0xc2, 0x89, 0x44, 0x3f,
	0xa9, 0x21, 0xe1, 0x44, 0x62, 0x5e, 0xc0, 0x50, 0x4f, 0x53, 0x26, 0x72, 0xe4, 0x58, 0x5b, 0x26,
	0xd6, 0x9a, 0xa6, 0x59, 0xe4, 0x73, 0xfe, 0x95, 0xf0, 0x9b, 0x24, 0x67, 0x52, 0xd2, 0x20, 0x1f,
	0x21, 0x46, 0x3f, 0x74, 0x91, 0x22, 0xd8, 0xf5, 0x90, 0xee, 0x93, 0xc1, 0x17, 0x15, 0x18, 0xf2,
	0x05, 0xd2, 0x12, 0x8b, 0x34, 0x32, 0x66, 0x3f, 0x93, 0x16, 0x2c, 0x4d, 0x48, 0x45, 0x59, 0xb0,
	0x38, 0xac, 0x8f, 0x81, 0xb7, 0x15, 0x18, 0x0d, 0xd6, 0xf7, 0x4a, 0xb8, 0xee, 0x98, 0x07, 0x2e,
	0x24, 0x5c, 0x77, 0xdc, 0x63, 0x09, 0xea, 0x2d, 0xca, 0xc9, 0x75, 0x32, 0x2b, 0xc7, 0x89, 0x6f,
	0x2d, 0xe4, 0x1e, 0xf9, 0xce, 0x8f, 0x1e, 0x93, 0xff, 0x52, 0x60, 0x32, 0xee, 0xa9, 0x04, 0xd2,
	0x7e, 0xe3, 0xd7, 0xe6, 0x75, 0x8d, 0xec, 0xcc, 0x16, 0x30, 0x20, 0xbb, 0xf7, 0x28, 0xbb, 0x77,
	0xc8, 0x52, 0x27, 0xec, 0x22, 0xab, 0x22, 0x04, 0xe3, 0xf7, 0x8f, 0x8f, 0xc9, 0xb7, 0xdd, 0x0d,
	0x4c, 0xe8, 0xad, 0x13, 0x99, 0x0d, 0x4c, 0xdc, 0x3b, 0x2d, 0x32, 0x1b, 0x98, 0xd8, 0xc7, 0x55,
	0x52, 0xb3, 0x59, 0x5c, 0xdd, 0xc4, 0x32, 0xbe, 0x44, 0xf9, 0x7e, 0x45, 0x81, 0xd1, 0xe0, 0xe3,
	0xaa, 0x12, 0x6a, 0x1b, 0xf3, 0xe4, 0x6b, 0xf6, 0x7c, 0x07, 0x90, 0xc8, 0xe0, 0x05, 0xca, 0xe0,
	0x29, 0x32, 0x9d, 0xc4, 0x20, 0x17, 0x61, 0x80, 0x8b, 0xef, 0x28, 0xb0, 0xb7, 0xb5, 0x1e, 0x56,
	0x1a, 0x5a, 0xcd, 0x36, 0xf4, 0xda, 0x13, 0x5d, 0x85, 0xf2, 0xf2, 0x72, 0x38, 0xb9, 0x45, 0x89,
	0xf5, 0xf8, 0xf7, 0xa8, 0x96, 0xfe, 0x1a, 0x2d, 0x49, 0xb5, 0x8c, 0x7c, 0x38, 0x43, 0x52, 0x2d,
	0xa3, 0x9f, 0xcb, 0x90, 0xdb, 0xf9, 0x30, 0xcf, 0x1b, 0x2c, 0x45, 0xf3, 0x99, 0xcf, 0xff, 0x50,
	0x60, 0x32, 0xee, 0x6d, 0x0e, 0x09, 0x3b, 0xd3, 0xe6, 0x71, 0x10, 0x09, 0x3b, 0xd3, 0xee, 0x61,
	0x10, 0x75, 0x91, 0x72, 0x3a, 0x4f, 0xe6, 0x24, 0xcf, 0xa8, 0x92, 0xf9, 0xfd, 0x86, 0x02, 0x63,
	0x11, 0x27, 0x62, 0xe4, 0x62, 0x0a, 0x42, 0x43, 0xbe, 0xef, 0x52, 0x67, 0xc0, 0xc8, 0xe0, 0x1c,
	0x65, 0xf0, 0x0a, 0xb9, 0x24, 0xc9, 0x60, 0xb4, 0x1f, 0xfc, 0x77, 0x05, 0x26, 0xa2, 0x4b, 0xb4,
	0x25, 0x36, 0x44, 0x89, 0x6f, 0x04, 0x48, 0x6c, 0x88, 0x92, 0x6b, 0xc3, 0xd5, 0x97, 0x28, 0x87,
	0xb7, 0xc8, 0x42, 0x1a, 0x0e, 0x93, 0xd7, 0xe3, 0x2f, 0x66, 0x60, 0x5f, 0x72, 0x65, 0x38, 0x99,
	0x4f, 0xe9, 0xe3, 0xe2, 0xd8, 0xbf, 0xb1, 0x65, 0x3c, 0x38, 0x0d, 0x1f, 0xa7, 0xd3, 0x70, 0x8f,
	0x2c, 0x77, 0x3e, 0x0d, 0xf1, 0x7e, 0xf3, 0x7f, 0x7d, 0x0b, 0x39, 0xe0, 0x3d, 0xaf, 0xa5, 0x55,
	0xd0, 0x90, 0x0f, 0x9d, 0xd9, 0x02, 0x86, 0x2d, 0xb1, 0x2f, 0xe9, 0x4f, 0xbf, 0xaf, 0xc0, 0xfe,
	0xa0, 0x16, 0x06, 0xfd, 0xd1, 0x13, 0x5f, 0x07, 0x69, 0x67, 0x20, 0x95, 0x87, 0xfa, 0x33, 0x05,
	0x76, 0x85, 0x8a, 0x81, 0x25, 0x0e, 0x4a, 0xe3, 0xca, 0xfa, 0x25, 0x0e, 0x4a, 0x63, 0x6b, 0x8f,
	0xd5, 0x33, 0x94, 0xd3, 0xe3, 0x64, 0x4a, 0xd6, 0x68, 0x23, 0xb9, 0x5f, 0x53, 0x60, 0x34, 0x54,
	0x8e, 0x7e, 0x2e, 0x35, 0x21, 0xf2, 0x71, 0x44, 0x5c, 0x4d, 0xb2, 0xdc, 0x09, 0x48, 0x98, 0x03,
	0x9f, 0x4d, 0xfe, 0x8e, 0x02, 0x7b, 0x62, 0xaa, 0x88, 0x25, 0x6e, 0x7f, 0x92, 0x6b, 0x98, 0xb3,
	0xd7, 0x3a, 0x47, 0x80, 0x2c, 0x2e, 0x50, 0x16, 0x67, 0xc9, 0x4c, 0x2a, 0x16, 0xb9, 0xc9, 0xf1,
	0x71, 0xfa, 0xb7, 0x0a, 0x8c, 0x47, 0x95, 0x7d, 0x91, 0x4b, 0x29, 0x02, 0xd3, 0x50, 0xfd, 0x73,
	0xf6, 0x72, 0x87, 0xd0, 0x69, 0x8e, 0x27, 0x44, 0x43, 0x70, 0x41, 0xfd, 0x91, 0x02, 0x63, 0xfc,
	0xfc, 0xdc, 0x53, 0x7c, 0x26, 0x71, 0x12, 0x14, 0xae, 0x62, 0x93, 0x38, 0x09, 0x8a, 0xa8, 0x6f,
	0x93, 0x3b, 0x09, 0xaa, 0x52, 0xc0, 0x22, 0x2d, 0x29, 0x23, 0xbf, 0xa3, 0x40, 0xbf, 0x28, 0x5a,
	0x23, 0x27, 0xda, 0x8e, 0x1a, 0xac, 0x7c, 0xcb, 0x4e, 0xa7, 0x01, 0x41, 0x32, 0x8f, 0x51, 0x32,
	0x9f, 0x23, 0x87, 0x93, 0xc8, 0xac, 0x0b, 0xaa, 0xfe, 0x46, 0x81, 0xb1, 0x88, 0xba, 0x69, 0x92,
	0xe6, 0xa2, 0x29, 0x44, 0xf7, 0xa5, 0xce, 0x80, 0xd3, 0x1c, 0xbb, 0x0b, 0x0e, 0x42, 0xaa, 0xf2,
	0x9f, 0x0a, 0x64, 0xe3, 0x2b, 0xb3, 0x49, 0xbe, 0x03, 0xda, 0x02, 0xe5, 0xef, 0xd9, 0xd9, 0x2d,
	0xe1, 0x48, 0xb3, 0xe2, 0x63, 0xd9, 0xf4, 0xad, 0xf8, 0x5f, 0xc9, 0xc0, 0x21, 0x89, 0xca, 0x68,
	0x72, 0x2b, 0x05, 0xdd, 0xed, 0xde, 0x00, 0xc8, 0x2e, 0x6e, 0x0f, 0x32, 0x9c, 0x8d, 0x65, 0x3a,
	0x1b, 0x4b, 0xe4, 0x56, 0xa2, 0x79, 0x10, 0x09, 0x25, 0x72, 0xf3, 0xf2, 0x0f, 0x0a, 0x8c, 0x45,
	0xd4, 0x4a, 0x4b, 0x28, 0x77, 0x7c, 0xa1, 0xb7, 0x84, 0x72, 0x27, 0x54, 0x79, 0xab, 0xd7, 0x29,
	0x9f, 0x57, 0xc9, 0xe5, 0x44, 0xa9, 0x8b, 0xa7, 0x5a, 0x3c, 0x8f, 0xd7, 0xf8, 0x38, 0xfb, 0x96,
	0x02, 0x7b, 0x62, 0xca, 0xa9, 0x25, 0xbc, 0x59, 0x72, 0x5d, 0xb8, 0x84, 0x37, 0x6b, 0x53, 0x14,
	0x2e, 0x7b, 0x65, 0xe1, 0x22, 0x89, 0x65, 0xf1, 0x3d, 0x05, 0x26, 0xa2, 0xeb, 0xae, 0x25, 0x82,
	0xc7, 0xc4, 0xf2, 0x71, 0x89, 0xe0, 0x31, 0xb9, 0x76, 0x5c, 0xbd, 0x49, 0xf9, 0xcb, 0x93, 0x6b,
	0xa9, 0xa4, 0x88, 0xef, 0xfd, 0x84, 0x04, 0x19, 0x53, 0x30, 0x2e, 0x21, 0xc8, 0xe4, 0xd7, 0x33,
	0x24, 0x04, 0xd9, 0xa6, 0x56, 0x5d, 0x4e, 0x90, 0x2c, 0x1b, 0x8f, 0xa7, 0x75, 0x47, 0x1d, 0xaf,
	0xed, 0x0a, 0x97, 0xb4, 0x4a, 0x1e, 0x2b, 0x45, 0x54, 0x62, 0x4b, 0x04, 0xc3, 0xb1, 0x05, 0xd5,
	0xea, 0x59, 0xca, 0xd0, 0x09, 0x92, 0x4b, 0x62, 0x28, 0xa2, 0x96, 0x95, 0xfc, 0x9d, 0x02, 0x93,
	0x77, 0x5b, 0xd5, 0xb1, 0x1f, 0x0a, 0x66, 0xa4, 0x12, 0x3a, 0xbc, 0x75, 0xc3, 0x41, 0xa6, 0xbe,
	0xc6, 0xab, 0x2a, 0xfc, 0x65, 0xd5, 0x12, 0x06, 0x32, 0xbe, 0x58, 0x5c, 0xc2, 0x40, 0x26, 0x54,
	0x91, 0xab, 0xe7, 0x29, 0x4f, 0x27, 0xc9, 0x09, 0x69, 0x01, 0xf1, 0xe2, 0x67, 0xf2, 0xae, 0x02,
	0x13, 0xd1, 0xd5, 0xae, 0x12, 0x16, 0x23, 0xb1, 0xce, 0x56, 0xc2, 0x62, 0x24, 0x97, 0xd9, 0xaa,
	0x37, 0x28, 0x5b, 0x33, 0xe4, 0x6a, 0x12, 0x5b, 0xbe, 0xe2, 0x53, 0x6f, 0xd9, 0xad, 0x27, 0x3d,
	0xc2, 0x15, 0x59, 0x44, 0xad, 0xa9, 0x84, 0xc8, 0xe2, 0xab, 0x63, 0x25, 0x44, 0x96, 0x50, 0x36,
	0x2b, 0x27, 0xb2, 0xc8, 0xc2, 0x5a, 0xf2, 0x96, 0x02, 0xbb, 0x42, 0x15, 0x92, 0x12, 0xcb, 0x29,
	0xae, 0x78, 0x56, 0x62, 0x39, 0xc5, 0x16, 0x64, 0xca, 0x1d, 0xfe, 0x85, 0x4b, 0x36, 0x73, 0x8f,
	0x3c, 0xe5, 0xba, 0x8f, 0xc9, 0x3f, 0x2b, 0xb0, 0x27, 0xa6, 0x68, 0x50, 0xc2, 0xa2, 0x27, 0x17,
	0x6c, 0x4a, 0x58, 0xf4, 0x36, 0xf5, 0x8a, 0x72, 0x36, 0x83, 0xff, 0xe7, 0x53, 0x11, 0x25, 0x8d,
	0xe4, 0x5f, 0x14, 0xd8, 0x1b, 0x5b, 0x18, 0x48, 0x66, 0xd2, 0x68, 0x52, 0x64, 0xe1, 0x62, 0x36,
	0xbf, 0x15, 0x14, 0x69, 0xd2, 0x0d, 0x7c, 0x2a, 0x49, 0x8b, 0xe0, 0xdd, 0x7d, 0x9b, 0x4d, 0x3e,
	0xab, 0xc0, 0xb0, 0xbf, 0xe0, 0x30, 0x79, 0xf3, 0x16, 0x59, 0xb6, 0x98, 0xbc, 0x79, 0x8b, 0xae,
	0x67, 0x54, 0x4f, 0x51, 0xb2, 0xa7, 0xc8, 0x0b, 0x89, 0x7b, 0x4c, 0xc3, 0xb1, 0x8a, 0xac, 0x52,
	0xd0, 0xa0, 0xc4, 0xbd, 0xad, 0xe0, 0x0b, 0x29, 0xa1, 0xa2, 0x40, 0x89, 0x95, 0x14, 0x57, 0x8e,
	0x28, 0xb1, 0x92, 0x62, 0x6b, 0x10, 0xe5, 0xb2, 0x6e, 0x18, 0x0b, 0x22, 0x16, 0xca, 0x3d, 0xf2,
	0x55, 0x3f, 0xd2, 0xe8, 0x7d, 0x22, 0xba, 0xc8, 0x50, 0xc2, 0x9c, 0x27, 0x16, 0x38, 0x4a, 0x98,
	0xf3, 0xe4, 0xea, 0x46, 0xb9, 0xd3, 0x8c, 0x75, 0x81, 0xa3, 0xe8, 0x2b, 0x85, 0xa4, 0xfb, 0x92,
	0x88, 0xc7, 0x28, 0x24, 0x6c, 0x78, 0xfc, 0xfb, 0x17, 0x12, 0x36, 0x3c, 0xe1, 0xfd, 0x0b, 0xb9,
	0x7d, 0x89, 0xf7, 0x85, 0x8c, 0xa2, 0xb5, 0x86, 0x0e, 0xd8, 0xf6, 0x78, 0xa7, 0x7f, 0x55, 0x60,
	0x6f, 0xec, 0xbb, 0x17, 0x12, 0xc6, 0xa1, 0xdd, 0xe3, 0x1a, 0x12, 0xc6, 0xa1, 0xed, 0xb3, 0x1b,
	0xea, 0x0c, 0xe5, 0xf5, 0x22, 0x39, 0x9f, 0x18, 0xd4, 0x46, 0x30, 0x5a, 0x14, 0x0f, 0xfe, 0xbc,
	0xa9, 0xc0, 0x68, 0xb0, 0x58, 0x52, 0xe2, 0x6c, 0x34, 0xa6, 0x04, 0x34, 0x7b, 0xbe, 0x03, 0xc8,
	0x34, 0xcc, 0xb4, 0xfe, 0x4f, 0x3a, 0x04, 0xf7, 0xed, 0x41, 0xbe, 0xac, 0xc0, 0x78, 0x44, 0xed,
	0xa1, 0x4c, 0x8e, 0x58, 0x54, 0xad, 0xa4, 0x44, 0xfa, 0x49, 0x64, 0xb5, 0xa4, 0xdc, 0xed, 0xf7,
	0x2a, 0x05, 0xe5, 0x65, 0xb0, 0xe2, 0xb0, 0xfa, 0xd7, 0x33, 0x70, 0xb0, 0x6d, 0x15, 0x1c, 0x59,
	0x48, 0x7d, 0x6b, 0x10, 0x57, 0x5e, 0x99, 0x7d, 0x71, 0x3b, 0x50, 0x21, 0xe3, 0x3f, 0x4a, 0x19,
	0x7f, 0x85, 0xdc, 0x4b, 0x77, 0x19, 0x55, 0x6a, 0x21, 0x4c, 0xbc, 0x8d, 0xf8, 0x9e, 0x02, 0x6a,
	0xfb, 0xca, 0x24, 0xf2, 0xa2, 0xa4, 0x12, 0x4a, 0x54, 0x4b, 0x65, 0x6f, 0x6d, 0x0b, 0xae, 0x34,
	0x21, 0x8b, 0x46, 0x31, 0xb1, 0xcb, 0x99, 0xa2, 0xeb, 0xd9, 0x5b, 0x65, 0x52, 0xe4, 0x2f, 0x15,
	0x18, 0x0d, 0xd6, 0x39, 0xc9, 0xa4, 0x14, 0x47, 0x57, 0x55, 0xc9, 0xa4, 0x14, 0xc7, 0x14, 0x55,
	0xc9, 0x25, 0x89, 0x69, 0xec, 0x8c, 0xcb, 0x76, 0xc1, 0x59, 0x5d, 0x4f, 0xee, 0x11, 0xd6, 0x2a,
	0x3d, 0x26, 0xdf, 0x54, 0x80, 0x84, 0x4b, 0x6f, 0x24, 0x92, 0x1f, 0x62, 0x6b, 0xa6, 0x24, 0x92,
	0x1f, 0xe2, 0x2b, 0xa3, 0xe4, 0x32, 0xad, 0xb0, 0x38, 0xc9, 0x8b, 0x80, 0xb3, 0xd4, 0x78, 0xec,
	0x61, 0xee, 0x6d, 0x05, 0xc6, 0x22, 0xaa, 0x9d, 0x48, 0x27, 0x14, 0xa6, 0x70, 0x8c, 0x09, 0x05,
	0x56, 0x72, 0x27, 0x20, 0x11, 0xfc, 0xd9, 0x2d, 0x06, 0xf3, 0xeb, 0x5f, 0x7d, 0x77, 0x9f, 0xf2,
	0xd6, 0xbb, 0xfb, 0x94, 0x6f, 0xbd, 0xbb, 0x4f, 0xf9, 0xe5, 0xf7, 0xf6, 0xed, 0x78, 0xeb, 0xbd,
	0x7d, 0x3b, 0xfe, 0xf1, 0xbd, 0x7d, 0x3b, 0x5e, 0xbb, 0x5d, 0x31, 0x9c, 0xf5, 0xe6, 0xea, 0x54,
	0xc9, 0xaa, 0xe6, 0x16, 0x38, 0xfe, 0x45, 0x6d, 0xd5, 0x6e, 0x8d, 0x76, 0xac, 0x64, 0x35, 0x74,
	0xef, 0xcf, 0x75, 0xcd, 0xa8, 0xe1, 0x45, 0x83, 0xdd, 0x22, 0xc5, 0xd9, 0xac, 0xeb, 0xf6, 0x6a,
	0x2f, 0xfd, 0x6f, 0xae, 0x4f, 0xfe, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x04, 0xe4, 0x86, 0x01,
	0xdc, 0x7b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	L3DerivativeOrderBook(ctx context.Context, in *QueryFullDerivativeOrderbookRequest, opts ...grpc.CallOption) (*QueryFullDerivativeOrderbookResponse, error)
	L3SpotOrderBook(ctx context.Context, in *QueryFullSpotOrderbookRequest, opts ...grpc.CallOption) (*QueryFullSpotOrderbookResponse, error)
	// Retrieves exchange params
	QueryExchangeParams(ctx context.Context, in *QueryExchangeParamsRequest, opts ...grpc.CallOption) (*QueryExchangeParamsResponse, error)
	// Retrieves a Subaccount's Deposits
	SubaccountDeposits(ctx context.Context, in *QuerySubaccountDepositsRequest, opts ...grpc.CallOption) (*QuerySubaccountDepositsResponse, error)
	// Retrieves a Subaccount's Deposits
	SubaccountDeposit(ctx context.Context, in *QuerySubaccountDepositRequest, opts ...grpc.CallOption) (*QuerySubaccountDepositResponse, error)
	// Retrieves all of the balances of all users on the exchange.
	ExchangeBalances(ctx context.Context, in *QueryExchangeBalancesRequest, opts ...grpc.CallOption) (*QueryExchangeBalancesResponse, error)
	// Retrieves the aggregate volumes for the specified account or subaccount
	AggregateVolume(ctx context.Context, in *QueryAggregateVolumeRequest, opts ...grpc.CallOption) (*QueryAggregateVolumeResponse, error)
	// Retrieves the aggregate volumes for specified accounts
	AggregateVolumes(ctx context.Context, in *QueryAggregateVolumesRequest, opts ...grpc.CallOption) (*QueryAggregateVolumesResponse, error)
	// Retrieves the aggregate volume for the specified market
	AggregateMarketVolume(ctx context.Context, in *QueryAggregateMarketVolumeRequest, opts ...grpc.CallOption) (*QueryAggregateMarketVolumeResponse, error)
	// Retrieves the aggregate market volumes for specified markets
	AggregateMarketVolumes(ctx context.Context, in *QueryAggregateMarketVolumesRequest, opts ...grpc.CallOption) (*QueryAggregateMarketVolumesResponse, error)
	// Retrieves the denom decimals for a denom.
	DenomDecimal(ctx context.Context, in *QueryDenomDecimalRequest, opts ...grpc.CallOption) (*QueryDenomDecimalResponse, error)
	// Retrieves the denom decimals for multiple denoms. Returns all denom
	// decimals if unspecified.
	DenomDecimals(ctx context.Context, in *QueryDenomDecimalsRequest, opts ...grpc.CallOption) (*QueryDenomDecimalsResponse, error)
	// Retrieves a list of spot markets.
	SpotMarkets(ctx context.Context, in *QuerySpotMarketsRequest, opts ...grpc.CallOption) (*QuerySpotMarketsResponse, error)
	// Retrieves a spot market by ticker
	SpotMarket(ctx context.Context, in *QuerySpotMarketRequest, opts ...grpc.CallOption) (*QuerySpotMarketResponse, error)
	// Retrieves a list of spot markets with extra information.
	FullSpotMarkets(ctx context.Context, in *QueryFullSpotMarketsRequest, opts ...grpc.CallOption) (*QueryFullSpotMarketsResponse, error)
	// Retrieves a spot market with extra information.
	FullSpotMarket(ctx context.Context, in *QueryFullSpotMarketRequest, opts ...grpc.CallOption) (*QueryFullSpotMarketResponse, error)
	// Retrieves a spot market's orderbook by marketID
	SpotOrderbook(ctx context.Context, in *QuerySpotOrderbookRequest, opts ...grpc.CallOption) (*QuerySpotOrderbookResponse, error)
	// Retrieves a trader's spot orders
	TraderSpotOrders(ctx context.Context, in *QueryTraderSpotOrdersRequest, opts ...grpc.CallOption) (*QueryTraderSpotOrdersResponse, error)
	// Retrieves all account address spot orders
	AccountAddressSpotOrders(ctx context.Context, in *QueryAccountAddressSpotOrdersRequest, opts ...grpc.CallOption) (*QueryAccountAddressSpotOrdersResponse, error)
	// Retrieves spot orders corresponding to specified order hashes for a given
	// subaccountID and marketID
	SpotOrdersByHashes(ctx context.Context, in *QuerySpotOrdersByHashesRequest, opts ...grpc.CallOption) (*QuerySpotOrdersByHashesResponse, error)
	// Retrieves subaccount's orders
	SubaccountOrders(ctx context.Context, in *QuerySubaccountOrdersRequest, opts ...grpc.CallOption) (*QuerySubaccountOrdersResponse, error)
	// Retrieves a trader's transient spot orders
	TraderSpotTransientOrders(ctx context.Context, in *QueryTraderSpotOrdersRequest, opts ...grpc.CallOption) (*QueryTraderSpotOrdersResponse, error)
	// Retrieves a spot market's mid-price
	SpotMidPriceAndTOB(ctx context.Context, in *QuerySpotMidPriceAndTOBRequest, opts ...grpc.CallOption) (*QuerySpotMidPriceAndTOBResponse, error)
	// Retrieves a derivative market's mid-price
	DerivativeMidPriceAndTOB(ctx context.Context, in *QueryDerivativeMidPriceAndTOBRequest, opts ...grpc.CallOption) (*QueryDerivativeMidPriceAndTOBResponse, error)
	// Retrieves a derivative market's orderbook by marketID
	DerivativeOrderbook(ctx context.Context, in *QueryDerivativeOrderbookRequest, opts ...grpc.CallOption) (*QueryDerivativeOrderbookResponse, error)
	// Retrieves a trader's derivative orders
	TraderDerivativeOrders(ctx context.Context, in *QueryTraderDerivativeOrdersRequest, opts ...grpc.CallOption) (*QueryTraderDerivativeOrdersResponse, error)
	// Retrieves all account address derivative orders
	AccountAddressDerivativeOrders(ctx context.Context, in *QueryAccountAddressDerivativeOrdersRequest, opts ...grpc.CallOption) (*QueryAccountAddressDerivativeOrdersResponse, error)
	// Retrieves a trader's derivative orders
	DerivativeOrdersByHashes(ctx context.Context, in *QueryDerivativeOrdersByHashesRequest, opts ...grpc.CallOption) (*QueryDerivativeOrdersByHashesResponse, error)
	// Retrieves a trader's transient derivative orders
	TraderDerivativeTransientOrders(ctx context.Context, in *QueryTraderDerivativeOrdersRequest, opts ...grpc.CallOption) (*QueryTraderDerivativeOrdersResponse, error)
	// Retrieves a list of derivative markets.
	DerivativeMarkets(ctx context.Context, in *QueryDerivativeMarketsRequest, opts ...grpc.CallOption) (*QueryDerivativeMarketsResponse, error)
	// Retrieves a derivative market by ticker
	DerivativeMarket(ctx context.Context, in *QueryDerivativeMarketRequest, opts ...grpc.CallOption) (*QueryDerivativeMarketResponse, error)
	// Retrieves a derivative market's corresponding address for fees that
	// contribute to the market's insurance fund
	DerivativeMarketAddress(ctx context.Context, in *QueryDerivativeMarketAddressRequest, opts ...grpc.CallOption) (*QueryDerivativeMarketAddressResponse, error)
	// Retrieves a subaccount's trade nonce
	SubaccountTradeNonce(ctx context.Context, in *QuerySubaccountTradeNonceRequest, opts ...grpc.CallOption) (*QuerySubaccountTradeNonceResponse, error)
	// Retrieves the entire exchange module's state
	ExchangeModuleState(ctx context.Context, in *QueryModuleStateRequest, opts ...grpc.CallOption) (*QueryModuleStateResponse, error)
	// Retrieves the entire exchange module's positions
	Positions(ctx context.Context, in *QueryPositionsRequest, opts ...grpc.CallOption) (*QueryPositionsResponse, error)
	// Retrieves subaccount's positions
	SubaccountPositions(ctx context.Context, in *QuerySubaccountPositionsRequest, opts ...grpc.CallOption) (*QuerySubaccountPositionsResponse, error)
	// Retrieves subaccount's position in market
	SubaccountPositionInMarket(ctx context.Context, in *QuerySubaccountPositionInMarketRequest, opts ...grpc.CallOption) (*QuerySubaccountPositionInMarketResponse, error)
	// Retrieves subaccount's position in market
	SubaccountEffectivePositionInMarket(ctx context.Context, in *QuerySubaccountEffectivePositionInMarketRequest, opts ...grpc.CallOption) (*QuerySubaccountEffectivePositionInMarketResponse, error)
	// Retrieves perpetual market info
	PerpetualMarketInfo(ctx context.Context, in *QueryPerpetualMarketInfoRequest, opts ...grpc.CallOption) (*QueryPerpetualMarketInfoResponse, error)
	// Retrieves expiry market info
	ExpiryFuturesMarketInfo(ctx context.Context, in *QueryExpiryFuturesMarketInfoRequest, opts ...grpc.CallOption) (*QueryExpiryFuturesMarketInfoResponse, error)
	// Retrieves perpetual market funding
	PerpetualMarketFunding(ctx context.Context, in *QueryPerpetualMarketFundingRequest, opts ...grpc.CallOption) (*QueryPerpetualMarketFundingResponse, error)
	// Retrieves subaccount's order metadata
	SubaccountOrderMetadata(ctx context.Context, in *QuerySubaccountOrderMetadataRequest, opts ...grpc.CallOption) (*QuerySubaccountOrderMetadataResponse, error)
	// Retrieves the account and total trade rewards points
	TradeRewardPoints(ctx context.Context, in *QueryTradeRewardPointsRequest, opts ...grpc.CallOption) (*QueryTradeRewardPointsResponse, error)
	// Retrieves the pending account and total trade rewards points
	PendingTradeRewardPoints(ctx context.Context, in *QueryTradeRewardPointsRequest, opts ...grpc.CallOption) (*QueryTradeRewardPointsResponse, error)
	// Retrieves the trade reward campaign
	TradeRewardCampaign(ctx context.Context, in *QueryTradeRewardCampaignRequest, opts ...grpc.CallOption) (*QueryTradeRewardCampaignResponse, error)
	// Retrieves the account's fee discount info
	FeeDiscountAccountInfo(ctx context.Context, in *QueryFeeDiscountAccountInfoRequest, opts ...grpc.CallOption) (*QueryFeeDiscountAccountInfoResponse, error)
	// Retrieves the fee discount schedule
	FeeDiscountSchedule(ctx context.Context, in *QueryFeeDiscountScheduleRequest, opts ...grpc.CallOption) (*QueryFeeDiscountScheduleResponse, error)
	// Retrieves mismatches between available vs. total balance
	BalanceMismatches(ctx context.Context, in *QueryBalanceMismatchesRequest, opts ...grpc.CallOption) (*QueryBalanceMismatchesResponse, error)
	// Retrieves available and total balances with balance holds
	BalanceWithBalanceHolds(ctx context.Context, in *QueryBalanceWithBalanceHoldsRequest, opts ...grpc.CallOption) (*QueryBalanceWithBalanceHoldsResponse, error)
	// Retrieves fee discount tier stats
	FeeDiscountTierStatistics(ctx context.Context, in *QueryFeeDiscountTierStatisticsRequest, opts ...grpc.CallOption) (*QueryFeeDiscountTierStatisticsResponse, error)
	// Retrieves market making pool info
	MitoVaultInfos(ctx context.Context, in *MitoVaultInfosRequest, opts ...grpc.CallOption) (*MitoVaultInfosResponse, error)
	// QueryMarketIDFromVault returns the market ID for a given vault subaccount
	// ID
	QueryMarketIDFromVault(ctx context.Context, in *QueryMarketIDFromVaultRequest, opts ...grpc.CallOption) (*QueryMarketIDFromVaultResponse, error)
	// Retrieves historical trade records for a given market ID
	HistoricalTradeRecords(ctx context.Context, in *QueryHistoricalTradeRecordsRequest, opts ...grpc.CallOption) (*QueryHistoricalTradeRecordsResponse, error)
	// Retrieves if the account is opted out of rewards
	IsOptedOutOfRewards(ctx context.Context, in *QueryIsOptedOutOfRewardsRequest, opts ...grpc.CallOption) (*QueryIsOptedOutOfRewardsResponse, error)
	// Retrieves all accounts opted out of rewards
	OptedOutOfRewardsAccounts(ctx context.Context, in *QueryOptedOutOfRewardsAccountsRequest, opts ...grpc.CallOption) (*QueryOptedOutOfRewardsAccountsResponse, error)
	// MarketVolatility computes the volatility for spot and derivative markets
	// trading history.
	MarketVolatility(ctx context.Context, in *QueryMarketVolatilityRequest, opts ...grpc.CallOption) (*QueryMarketVolatilityResponse, error)
	// Retrieves a spot market's orderbook by marketID
	BinaryOptionsMarkets(ctx context.Context, in *QueryBinaryMarketsRequest, opts ...grpc.CallOption) (*QueryBinaryMarketsResponse, error)
	// Retrieves a trader's derivative conditional orders
	TraderDerivativeConditionalOrders(ctx context.Context, in *QueryTraderDerivativeConditionalOrdersRequest, opts ...grpc.CallOption) (*QueryTraderDerivativeConditionalOrdersResponse, error)
	MarketAtomicExecutionFeeMultiplier(ctx context.Context, in *QueryMarketAtomicExecutionFeeMultiplierRequest, opts ...grpc.CallOption) (*QueryMarketAtomicExecutionFeeMultiplierResponse, error)
	// Retrieves the active stake grant for a grantee
	ActiveStakeGrant(ctx context.Context, in *QueryActiveStakeGrantRequest, opts ...grpc.CallOption) (*QueryActiveStakeGrantResponse, error)
	// Retrieves the grant authorization amount for a granter and grantee
	GrantAuthorization(ctx context.Context, in *QueryGrantAuthorizationRequest, opts ...grpc.CallOption) (*QueryGrantAuthorizationResponse, error)
	// Retrieves the grant authorization amount for a granter and grantee
	GrantAuthorizations(ctx context.Context, in *QueryGrantAuthorizationsRequest, opts ...grpc.CallOption) (*QueryGrantAuthorizationsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) L3DerivativeOrderBook(ctx context.Context, in *QueryFullDerivativeOrderbookRequest, opts ...grpc.CallOption) (*QueryFullDerivativeOrderbookResponse, error) {
	out := new(QueryFullDerivativeOrderbookResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/L3DerivativeOrderBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) L3SpotOrderBook(ctx context.Context, in *QueryFullSpotOrderbookRequest, opts ...grpc.CallOption) (*QueryFullSpotOrderbookResponse, error) {
	out := new(QueryFullSpotOrderbookResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/L3SpotOrderBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryExchangeParams(ctx context.Context, in *QueryExchangeParamsRequest, opts ...grpc.CallOption) (*QueryExchangeParamsResponse, error) {
	out := new(QueryExchangeParamsResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/QueryExchangeParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubaccountDeposits(ctx context.Context, in *QuerySubaccountDepositsRequest, opts ...grpc.CallOption) (*QuerySubaccountDepositsResponse, error) {
	out := new(QuerySubaccountDepositsResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/SubaccountDeposits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubaccountDeposit(ctx context.Context, in *QuerySubaccountDepositRequest, opts ...grpc.CallOption) (*QuerySubaccountDepositResponse, error) {
	out := new(QuerySubaccountDepositResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/SubaccountDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExchangeBalances(ctx context.Context, in *QueryExchangeBalancesRequest, opts ...grpc.CallOption) (*QueryExchangeBalancesResponse, error) {
	out := new(QueryExchangeBalancesResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/ExchangeBalances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AggregateVolume(ctx context.Context, in *QueryAggregateVolumeRequest, opts ...grpc.CallOption) (*QueryAggregateVolumeResponse, error) {
	out := new(QueryAggregateVolumeResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/AggregateVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AggregateVolumes(ctx context.Context, in *QueryAggregateVolumesRequest, opts ...grpc.CallOption) (*QueryAggregateVolumesResponse, error) {
	out := new(QueryAggregateVolumesResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/AggregateVolumes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AggregateMarketVolume(ctx context.Context, in *QueryAggregateMarketVolumeRequest, opts ...grpc.CallOption) (*QueryAggregateMarketVolumeResponse, error) {
	out := new(QueryAggregateMarketVolumeResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/AggregateMarketVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AggregateMarketVolumes(ctx context.Context, in *QueryAggregateMarketVolumesRequest, opts ...grpc.CallOption) (*QueryAggregateMarketVolumesResponse, error) {
	out := new(QueryAggregateMarketVolumesResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/AggregateMarketVolumes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DenomDecimal(ctx context.Context, in *QueryDenomDecimalRequest, opts ...grpc.CallOption) (*QueryDenomDecimalResponse, error) {
	out := new(QueryDenomDecimalResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/DenomDecimal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DenomDecimals(ctx context.Context, in *QueryDenomDecimalsRequest, opts ...grpc.CallOption) (*QueryDenomDecimalsResponse, error) {
	out := new(QueryDenomDecimalsResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/DenomDecimals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpotMarkets(ctx context.Context, in *QuerySpotMarketsRequest, opts ...grpc.CallOption) (*QuerySpotMarketsResponse, error) {
	out := new(QuerySpotMarketsResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/SpotMarkets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpotMarket(ctx context.Context, in *QuerySpotMarketRequest, opts ...grpc.CallOption) (*QuerySpotMarketResponse, error) {
	out := new(QuerySpotMarketResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/SpotMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FullSpotMarkets(ctx context.Context, in *QueryFullSpotMarketsRequest, opts ...grpc.CallOption) (*QueryFullSpotMarketsResponse, error) {
	out := new(QueryFullSpotMarketsResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/FullSpotMarkets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FullSpotMarket(ctx context.Context, in *QueryFullSpotMarketRequest, opts ...grpc.CallOption) (*QueryFullSpotMarketResponse, error) {
	out := new(QueryFullSpotMarketResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/FullSpotMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpotOrderbook(ctx context.Context, in *QuerySpotOrderbookRequest, opts ...grpc.CallOption) (*QuerySpotOrderbookResponse, error) {
	out := new(QuerySpotOrderbookResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/SpotOrderbook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TraderSpotOrders(ctx context.Context, in *QueryTraderSpotOrdersRequest, opts ...grpc.CallOption) (*QueryTraderSpotOrdersResponse, error) {
	out := new(QueryTraderSpotOrdersResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/TraderSpotOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountAddressSpotOrders(ctx context.Context, in *QueryAccountAddressSpotOrdersRequest, opts ...grpc.CallOption) (*QueryAccountAddressSpotOrdersResponse, error) {
	out := new(QueryAccountAddressSpotOrdersResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/AccountAddressSpotOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpotOrdersByHashes(ctx context.Context, in *QuerySpotOrdersByHashesRequest, opts ...grpc.CallOption) (*QuerySpotOrdersByHashesResponse, error) {
	out := new(QuerySpotOrdersByHashesResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/SpotOrdersByHashes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubaccountOrders(ctx context.Context, in *QuerySubaccountOrdersRequest, opts ...grpc.CallOption) (*QuerySubaccountOrdersResponse, error) {
	out := new(QuerySubaccountOrdersResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/SubaccountOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TraderSpotTransientOrders(ctx context.Context, in *QueryTraderSpotOrdersRequest, opts ...grpc.CallOption) (*QueryTraderSpotOrdersResponse, error) {
	out := new(QueryTraderSpotOrdersResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/TraderSpotTransientOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpotMidPriceAndTOB(ctx context.Context, in *QuerySpotMidPriceAndTOBRequest, opts ...grpc.CallOption) (*QuerySpotMidPriceAndTOBResponse, error) {
	out := new(QuerySpotMidPriceAndTOBResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/SpotMidPriceAndTOB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DerivativeMidPriceAndTOB(ctx context.Context, in *QueryDerivativeMidPriceAndTOBRequest, opts ...grpc.CallOption) (*QueryDerivativeMidPriceAndTOBResponse, error) {
	out := new(QueryDerivativeMidPriceAndTOBResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/DerivativeMidPriceAndTOB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DerivativeOrderbook(ctx context.Context, in *QueryDerivativeOrderbookRequest, opts ...grpc.CallOption) (*QueryDerivativeOrderbookResponse, error) {
	out := new(QueryDerivativeOrderbookResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/DerivativeOrderbook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TraderDerivativeOrders(ctx context.Context, in *QueryTraderDerivativeOrdersRequest, opts ...grpc.CallOption) (*QueryTraderDerivativeOrdersResponse, error) {
	out := new(QueryTraderDerivativeOrdersResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/TraderDerivativeOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountAddressDerivativeOrders(ctx context.Context, in *QueryAccountAddressDerivativeOrdersRequest, opts ...grpc.CallOption) (*QueryAccountAddressDerivativeOrdersResponse, error) {
	out := new(QueryAccountAddressDerivativeOrdersResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/AccountAddressDerivativeOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DerivativeOrdersByHashes(ctx context.Context, in *QueryDerivativeOrdersByHashesRequest, opts ...grpc.CallOption) (*QueryDerivativeOrdersByHashesResponse, error) {
	out := new(QueryDerivativeOrdersByHashesResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/DerivativeOrdersByHashes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TraderDerivativeTransientOrders(ctx context.Context, in *QueryTraderDerivativeOrdersRequest, opts ...grpc.CallOption) (*QueryTraderDerivativeOrdersResponse, error) {
	out := new(QueryTraderDerivativeOrdersResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/TraderDerivativeTransientOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DerivativeMarkets(ctx context.Context, in *QueryDerivativeMarketsRequest, opts ...grpc.CallOption) (*QueryDerivativeMarketsResponse, error) {
	out := new(QueryDerivativeMarketsResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/DerivativeMarkets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DerivativeMarket(ctx context.Context, in *QueryDerivativeMarketRequest, opts ...grpc.CallOption) (*QueryDerivativeMarketResponse, error) {
	out := new(QueryDerivativeMarketResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/DerivativeMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DerivativeMarketAddress(ctx context.Context, in *QueryDerivativeMarketAddressRequest, opts ...grpc.CallOption) (*QueryDerivativeMarketAddressResponse, error) {
	out := new(QueryDerivativeMarketAddressResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/DerivativeMarketAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubaccountTradeNonce(ctx context.Context, in *QuerySubaccountTradeNonceRequest, opts ...grpc.CallOption) (*QuerySubaccountTradeNonceResponse, error) {
	out := new(QuerySubaccountTradeNonceResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/SubaccountTradeNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExchangeModuleState(ctx context.Context, in *QueryModuleStateRequest, opts ...grpc.CallOption) (*QueryModuleStateResponse, error) {
	out := new(QueryModuleStateResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/ExchangeModuleState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Positions(ctx context.Context, in *QueryPositionsRequest, opts ...grpc.CallOption) (*QueryPositionsResponse, error) {
	out := new(QueryPositionsResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/Positions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubaccountPositions(ctx context.Context, in *QuerySubaccountPositionsRequest, opts ...grpc.CallOption) (*QuerySubaccountPositionsResponse, error) {
	out := new(QuerySubaccountPositionsResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/SubaccountPositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubaccountPositionInMarket(ctx context.Context, in *QuerySubaccountPositionInMarketRequest, opts ...grpc.CallOption) (*QuerySubaccountPositionInMarketResponse, error) {
	out := new(QuerySubaccountPositionInMarketResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/SubaccountPositionInMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubaccountEffectivePositionInMarket(ctx context.Context, in *QuerySubaccountEffectivePositionInMarketRequest, opts ...grpc.CallOption) (*QuerySubaccountEffectivePositionInMarketResponse, error) {
	out := new(QuerySubaccountEffectivePositionInMarketResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/SubaccountEffectivePositionInMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PerpetualMarketInfo(ctx context.Context, in *QueryPerpetualMarketInfoRequest, opts ...grpc.CallOption) (*QueryPerpetualMarketInfoResponse, error) {
	out := new(QueryPerpetualMarketInfoResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/PerpetualMarketInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExpiryFuturesMarketInfo(ctx context.Context, in *QueryExpiryFuturesMarketInfoRequest, opts ...grpc.CallOption) (*QueryExpiryFuturesMarketInfoResponse, error) {
	out := new(QueryExpiryFuturesMarketInfoResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/ExpiryFuturesMarketInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PerpetualMarketFunding(ctx context.Context, in *QueryPerpetualMarketFundingRequest, opts ...grpc.CallOption) (*QueryPerpetualMarketFundingResponse, error) {
	out := new(QueryPerpetualMarketFundingResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/PerpetualMarketFunding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubaccountOrderMetadata(ctx context.Context, in *QuerySubaccountOrderMetadataRequest, opts ...grpc.CallOption) (*QuerySubaccountOrderMetadataResponse, error) {
	out := new(QuerySubaccountOrderMetadataResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/SubaccountOrderMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TradeRewardPoints(ctx context.Context, in *QueryTradeRewardPointsRequest, opts ...grpc.CallOption) (*QueryTradeRewardPointsResponse, error) {
	out := new(QueryTradeRewardPointsResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/TradeRewardPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingTradeRewardPoints(ctx context.Context, in *QueryTradeRewardPointsRequest, opts ...grpc.CallOption) (*QueryTradeRewardPointsResponse, error) {
	out := new(QueryTradeRewardPointsResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/PendingTradeRewardPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TradeRewardCampaign(ctx context.Context, in *QueryTradeRewardCampaignRequest, opts ...grpc.CallOption) (*QueryTradeRewardCampaignResponse, error) {
	out := new(QueryTradeRewardCampaignResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/TradeRewardCampaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeeDiscountAccountInfo(ctx context.Context, in *QueryFeeDiscountAccountInfoRequest, opts ...grpc.CallOption) (*QueryFeeDiscountAccountInfoResponse, error) {
	out := new(QueryFeeDiscountAccountInfoResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/FeeDiscountAccountInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeeDiscountSchedule(ctx context.Context, in *QueryFeeDiscountScheduleRequest, opts ...grpc.CallOption) (*QueryFeeDiscountScheduleResponse, error) {
	out := new(QueryFeeDiscountScheduleResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/FeeDiscountSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BalanceMismatches(ctx context.Context, in *QueryBalanceMismatchesRequest, opts ...grpc.CallOption) (*QueryBalanceMismatchesResponse, error) {
	out := new(QueryBalanceMismatchesResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/BalanceMismatches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BalanceWithBalanceHolds(ctx context.Context, in *QueryBalanceWithBalanceHoldsRequest, opts ...grpc.CallOption) (*QueryBalanceWithBalanceHoldsResponse, error) {
	out := new(QueryBalanceWithBalanceHoldsResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/BalanceWithBalanceHolds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeeDiscountTierStatistics(ctx context.Context, in *QueryFeeDiscountTierStatisticsRequest, opts ...grpc.CallOption) (*QueryFeeDiscountTierStatisticsResponse, error) {
	out := new(QueryFeeDiscountTierStatisticsResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/FeeDiscountTierStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MitoVaultInfos(ctx context.Context, in *MitoVaultInfosRequest, opts ...grpc.CallOption) (*MitoVaultInfosResponse, error) {
	out := new(MitoVaultInfosResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/MitoVaultInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryMarketIDFromVault(ctx context.Context, in *QueryMarketIDFromVaultRequest, opts ...grpc.CallOption) (*QueryMarketIDFromVaultResponse, error) {
	out := new(QueryMarketIDFromVaultResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/QueryMarketIDFromVault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HistoricalTradeRecords(ctx context.Context, in *QueryHistoricalTradeRecordsRequest, opts ...grpc.CallOption) (*QueryHistoricalTradeRecordsResponse, error) {
	out := new(QueryHistoricalTradeRecordsResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/HistoricalTradeRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsOptedOutOfRewards(ctx context.Context, in *QueryIsOptedOutOfRewardsRequest, opts ...grpc.CallOption) (*QueryIsOptedOutOfRewardsResponse, error) {
	out := new(QueryIsOptedOutOfRewardsResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/IsOptedOutOfRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OptedOutOfRewardsAccounts(ctx context.Context, in *QueryOptedOutOfRewardsAccountsRequest, opts ...grpc.CallOption) (*QueryOptedOutOfRewardsAccountsResponse, error) {
	out := new(QueryOptedOutOfRewardsAccountsResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/OptedOutOfRewardsAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MarketVolatility(ctx context.Context, in *QueryMarketVolatilityRequest, opts ...grpc.CallOption) (*QueryMarketVolatilityResponse, error) {
	out := new(QueryMarketVolatilityResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/MarketVolatility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BinaryOptionsMarkets(ctx context.Context, in *QueryBinaryMarketsRequest, opts ...grpc.CallOption) (*QueryBinaryMarketsResponse, error) {
	out := new(QueryBinaryMarketsResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/BinaryOptionsMarkets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TraderDerivativeConditionalOrders(ctx context.Context, in *QueryTraderDerivativeConditionalOrdersRequest, opts ...grpc.CallOption) (*QueryTraderDerivativeConditionalOrdersResponse, error) {
	out := new(QueryTraderDerivativeConditionalOrdersResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/TraderDerivativeConditionalOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MarketAtomicExecutionFeeMultiplier(ctx context.Context, in *QueryMarketAtomicExecutionFeeMultiplierRequest, opts ...grpc.CallOption) (*QueryMarketAtomicExecutionFeeMultiplierResponse, error) {
	out := new(QueryMarketAtomicExecutionFeeMultiplierResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/MarketAtomicExecutionFeeMultiplier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActiveStakeGrant(ctx context.Context, in *QueryActiveStakeGrantRequest, opts ...grpc.CallOption) (*QueryActiveStakeGrantResponse, error) {
	out := new(QueryActiveStakeGrantResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/ActiveStakeGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GrantAuthorization(ctx context.Context, in *QueryGrantAuthorizationRequest, opts ...grpc.CallOption) (*QueryGrantAuthorizationResponse, error) {
	out := new(QueryGrantAuthorizationResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/GrantAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GrantAuthorizations(ctx context.Context, in *QueryGrantAuthorizationsRequest, opts ...grpc.CallOption) (*QueryGrantAuthorizationsResponse, error) {
	out := new(QueryGrantAuthorizationsResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/GrantAuthorizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	L3DerivativeOrderBook(context.Context, *QueryFullDerivativeOrderbookRequest) (*QueryFullDerivativeOrderbookResponse, error)
	L3SpotOrderBook(context.Context, *QueryFullSpotOrderbookRequest) (*QueryFullSpotOrderbookResponse, error)
	// Retrieves exchange params
	QueryExchangeParams(context.Context, *QueryExchangeParamsRequest) (*QueryExchangeParamsResponse, error)
	// Retrieves a Subaccount's Deposits
	SubaccountDeposits(context.Context, *QuerySubaccountDepositsRequest) (*QuerySubaccountDepositsResponse, error)
	// Retrieves a Subaccount's Deposits
	SubaccountDeposit(context.Context, *QuerySubaccountDepositRequest) (*QuerySubaccountDepositResponse, error)
	// Retrieves all of the balances of all users on the exchange.
	ExchangeBalances(context.Context, *QueryExchangeBalancesRequest) (*QueryExchangeBalancesResponse, error)
	// Retrieves the aggregate volumes for the specified account or subaccount
	AggregateVolume(context.Context, *QueryAggregateVolumeRequest) (*QueryAggregateVolumeResponse, error)
	// Retrieves the aggregate volumes for specified accounts
	AggregateVolumes(context.Context, *QueryAggregateVolumesRequest) (*QueryAggregateVolumesResponse, error)
	// Retrieves the aggregate volume for the specified market
	AggregateMarketVolume(context.Context, *QueryAggregateMarketVolumeRequest) (*QueryAggregateMarketVolumeResponse, error)
	// Retrieves the aggregate market volumes for specified markets
	AggregateMarketVolumes(context.Context, *QueryAggregateMarketVolumesRequest) (*QueryAggregateMarketVolumesResponse, error)
	// Retrieves the denom decimals for a denom.
	DenomDecimal(context.Context, *QueryDenomDecimalRequest) (*QueryDenomDecimalResponse, error)
	// Retrieves the denom decimals for multiple denoms. Returns all denom
	// decimals if unspecified.
	DenomDecimals(context.Context, *QueryDenomDecimalsRequest) (*QueryDenomDecimalsResponse, error)
	// Retrieves a list of spot markets.
	SpotMarkets(context.Context, *QuerySpotMarketsRequest) (*QuerySpotMarketsResponse, error)
	// Retrieves a spot market by ticker
	SpotMarket(context.Context, *QuerySpotMarketRequest) (*QuerySpotMarketResponse, error)
	// Retrieves a list of spot markets with extra information.
	FullSpotMarkets(context.Context, *QueryFullSpotMarketsRequest) (*QueryFullSpotMarketsResponse, error)
	// Retrieves a spot market with extra information.
	FullSpotMarket(context.Context, *QueryFullSpotMarketRequest) (*QueryFullSpotMarketResponse, error)
	// Retrieves a spot market's orderbook by marketID
	SpotOrderbook(context.Context, *QuerySpotOrderbookRequest) (*QuerySpotOrderbookResponse, error)
	// Retrieves a trader's spot orders
	TraderSpotOrders(context.Context, *QueryTraderSpotOrdersRequest) (*QueryTraderSpotOrdersResponse, error)
	// Retrieves all account address spot orders
	AccountAddressSpotOrders(context.Context, *QueryAccountAddressSpotOrdersRequest) (*QueryAccountAddressSpotOrdersResponse, error)
	// Retrieves spot orders corresponding to specified order hashes for a given
	// subaccountID and marketID
	SpotOrdersByHashes(context.Context, *QuerySpotOrdersByHashesRequest) (*QuerySpotOrdersByHashesResponse, error)
	// Retrieves subaccount's orders
	SubaccountOrders(context.Context, *QuerySubaccountOrdersRequest) (*QuerySubaccountOrdersResponse, error)
	// Retrieves a trader's transient spot orders
	TraderSpotTransientOrders(context.Context, *QueryTraderSpotOrdersRequest) (*QueryTraderSpotOrdersResponse, error)
	// Retrieves a spot market's mid-price
	SpotMidPriceAndTOB(context.Context, *QuerySpotMidPriceAndTOBRequest) (*QuerySpotMidPriceAndTOBResponse, error)
	// Retrieves a derivative market's mid-price
	DerivativeMidPriceAndTOB(context.Context, *QueryDerivativeMidPriceAndTOBRequest) (*QueryDerivativeMidPriceAndTOBResponse, error)
	// Retrieves a derivative market's orderbook by marketID
	DerivativeOrderbook(context.Context, *QueryDerivativeOrderbookRequest) (*QueryDerivativeOrderbookResponse, error)
	// Retrieves a trader's derivative orders
	TraderDerivativeOrders(context.Context, *QueryTraderDerivativeOrdersRequest) (*QueryTraderDerivativeOrdersResponse, error)
	// Retrieves all account address derivative orders
	AccountAddressDerivativeOrders(context.Context, *QueryAccountAddressDerivativeOrdersRequest) (*QueryAccountAddressDerivativeOrdersResponse, error)
	// Retrieves a trader's derivative orders
	DerivativeOrdersByHashes(context.Context, *QueryDerivativeOrdersByHashesRequest) (*QueryDerivativeOrdersByHashesResponse, error)
	// Retrieves a trader's transient derivative orders
	TraderDerivativeTransientOrders(context.Context, *QueryTraderDerivativeOrdersRequest) (*QueryTraderDerivativeOrdersResponse, error)
	// Retrieves a list of derivative markets.
	DerivativeMarkets(context.Context, *QueryDerivativeMarketsRequest) (*QueryDerivativeMarketsResponse, error)
	// Retrieves a derivative market by ticker
	DerivativeMarket(context.Context, *QueryDerivativeMarketRequest) (*QueryDerivativeMarketResponse, error)
	// Retrieves a derivative market's corresponding address for fees that
	// contribute to the market's insurance fund
	DerivativeMarketAddress(context.Context, *QueryDerivativeMarketAddressRequest) (*QueryDerivativeMarketAddressResponse, error)
	// Retrieves a subaccount's trade nonce
	SubaccountTradeNonce(context.Context, *QuerySubaccountTradeNonceRequest) (*QuerySubaccountTradeNonceResponse, error)
	// Retrieves the entire exchange module's state
	ExchangeModuleState(context.Context, *QueryModuleStateRequest) (*QueryModuleStateResponse, error)
	// Retrieves the entire exchange module's positions
	Positions(context.Context, *QueryPositionsRequest) (*QueryPositionsResponse, error)
	// Retrieves subaccount's positions
	SubaccountPositions(context.Context, *QuerySubaccountPositionsRequest) (*QuerySubaccountPositionsResponse, error)
	// Retrieves subaccount's position in market
	SubaccountPositionInMarket(context.Context, *QuerySubaccountPositionInMarketRequest) (*QuerySubaccountPositionInMarketResponse, error)
	// Retrieves subaccount's position in market
	SubaccountEffectivePositionInMarket(context.Context, *QuerySubaccountEffectivePositionInMarketRequest) (*QuerySubaccountEffectivePositionInMarketResponse, error)
	// Retrieves perpetual market info
	PerpetualMarketInfo(context.Context, *QueryPerpetualMarketInfoRequest) (*QueryPerpetualMarketInfoResponse, error)
	// Retrieves expiry market info
	ExpiryFuturesMarketInfo(context.Context, *QueryExpiryFuturesMarketInfoRequest) (*QueryExpiryFuturesMarketInfoResponse, error)
	// Retrieves perpetual market funding
	PerpetualMarketFunding(context.Context, *QueryPerpetualMarketFundingRequest) (*QueryPerpetualMarketFundingResponse, error)
	// Retrieves subaccount's order metadata
	SubaccountOrderMetadata(context.Context, *QuerySubaccountOrderMetadataRequest) (*QuerySubaccountOrderMetadataResponse, error)
	// Retrieves the account and total trade rewards points
	TradeRewardPoints(context.Context, *QueryTradeRewardPointsRequest) (*QueryTradeRewardPointsResponse, error)
	// Retrieves the pending account and total trade rewards points
	PendingTradeRewardPoints(context.Context, *QueryTradeRewardPointsRequest) (*QueryTradeRewardPointsResponse, error)
	// Retrieves the trade reward campaign
	TradeRewardCampaign(context.Context, *QueryTradeRewardCampaignRequest) (*QueryTradeRewardCampaignResponse, error)
	// Retrieves the account's fee discount info
	FeeDiscountAccountInfo(context.Context, *QueryFeeDiscountAccountInfoRequest) (*QueryFeeDiscountAccountInfoResponse, error)
	// Retrieves the fee discount schedule
	FeeDiscountSchedule(context.Context, *QueryFeeDiscountScheduleRequest) (*QueryFeeDiscountScheduleResponse, error)
	// Retrieves mismatches between available vs. total balance
	BalanceMismatches(context.Context, *QueryBalanceMismatchesRequest) (*QueryBalanceMismatchesResponse, error)
	// Retrieves available and total balances with balance holds
	BalanceWithBalanceHolds(context.Context, *QueryBalanceWithBalanceHoldsRequest) (*QueryBalanceWithBalanceHoldsResponse, error)
	// Retrieves fee discount tier stats
	FeeDiscountTierStatistics(context.Context, *QueryFeeDiscountTierStatisticsRequest) (*QueryFeeDiscountTierStatisticsResponse, error)
	// Retrieves market making pool info
	MitoVaultInfos(context.Context, *MitoVaultInfosRequest) (*MitoVaultInfosResponse, error)
	// QueryMarketIDFromVault returns the market ID for a given vault subaccount
	// ID
	QueryMarketIDFromVault(context.Context, *QueryMarketIDFromVaultRequest) (*QueryMarketIDFromVaultResponse, error)
	// Retrieves historical trade records for a given market ID
	HistoricalTradeRecords(context.Context, *QueryHistoricalTradeRecordsRequest) (*QueryHistoricalTradeRecordsResponse, error)
	// Retrieves if the account is opted out of rewards
	IsOptedOutOfRewards(context.Context, *QueryIsOptedOutOfRewardsRequest) (*QueryIsOptedOutOfRewardsResponse, error)
	// Retrieves all accounts opted out of rewards
	OptedOutOfRewardsAccounts(context.Context, *QueryOptedOutOfRewardsAccountsRequest) (*QueryOptedOutOfRewardsAccountsResponse, error)
	// MarketVolatility computes the volatility for spot and derivative markets
	// trading history.
	MarketVolatility(context.Context, *QueryMarketVolatilityRequest) (*QueryMarketVolatilityResponse, error)
	// Retrieves a spot market's orderbook by marketID
	BinaryOptionsMarkets(context.Context, *QueryBinaryMarketsRequest) (*QueryBinaryMarketsResponse, error)
	// Retrieves a trader's derivative conditional orders
	TraderDerivativeConditionalOrders(context.Context, *QueryTraderDerivativeConditionalOrdersRequest) (*QueryTraderDerivativeConditionalOrdersResponse, error)
	MarketAtomicExecutionFeeMultiplier(context.Context, *QueryMarketAtomicExecutionFeeMultiplierRequest) (*QueryMarketAtomicExecutionFeeMultiplierResponse, error)
	// Retrieves the active stake grant for a grantee
	ActiveStakeGrant(context.Context, *QueryActiveStakeGrantRequest) (*QueryActiveStakeGrantResponse, error)
	// Retrieves the grant authorization amount for a granter and grantee
	GrantAuthorization(context.Context, *QueryGrantAuthorizationRequest) (*QueryGrantAuthorizationResponse, error)
	// Retrieves the grant authorization amount for a granter and grantee
	GrantAuthorizations(context.Context, *QueryGrantAuthorizationsRequest) (*QueryGrantAuthorizationsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) L3DerivativeOrderBook(ctx context.Context, req *QueryFullDerivativeOrderbookRequest) (*QueryFullDerivativeOrderbookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method L3DerivativeOrderBook not implemented")
}
func (*UnimplementedQueryServer) L3SpotOrderBook(ctx context.Context, req *QueryFullSpotOrderbookRequest) (*QueryFullSpotOrderbookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method L3SpotOrderBook not implemented")
}
func (*UnimplementedQueryServer) QueryExchangeParams(ctx context.Context, req *QueryExchangeParamsRequest) (*QueryExchangeParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryExchangeParams not implemented")
}
func (*UnimplementedQueryServer) SubaccountDeposits(ctx context.Context, req *QuerySubaccountDepositsRequest) (*QuerySubaccountDepositsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubaccountDeposits not implemented")
}
func (*UnimplementedQueryServer) SubaccountDeposit(ctx context.Context, req *QuerySubaccountDepositRequest) (*QuerySubaccountDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubaccountDeposit not implemented")
}
func (*UnimplementedQueryServer) ExchangeBalances(ctx context.Context, req *QueryExchangeBalancesRequest) (*QueryExchangeBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeBalances not implemented")
}
func (*UnimplementedQueryServer) AggregateVolume(ctx context.Context, req *QueryAggregateVolumeRequest) (*QueryAggregateVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregateVolume not implemented")
}
func (*UnimplementedQueryServer) AggregateVolumes(ctx context.Context, req *QueryAggregateVolumesRequest) (*QueryAggregateVolumesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregateVolumes not implemented")
}
func (*UnimplementedQueryServer) AggregateMarketVolume(ctx context.Context, req *QueryAggregateMarketVolumeRequest) (*QueryAggregateMarketVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregateMarketVolume not implemented")
}
func (*UnimplementedQueryServer) AggregateMarketVolumes(ctx context.Context, req *QueryAggregateMarketVolumesRequest) (*QueryAggregateMarketVolumesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregateMarketVolumes not implemented")
}
func (*UnimplementedQueryServer) DenomDecimal(ctx context.Context, req *QueryDenomDecimalRequest) (*QueryDenomDecimalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenomDecimal not implemented")
}
func (*UnimplementedQueryServer) DenomDecimals(ctx context.Context, req *QueryDenomDecimalsRequest) (*QueryDenomDecimalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenomDecimals not implemented")
}
func (*UnimplementedQueryServer) SpotMarkets(ctx context.Context, req *QuerySpotMarketsRequest) (*QuerySpotMarketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpotMarkets not implemented")
}
func (*UnimplementedQueryServer) SpotMarket(ctx context.Context, req *QuerySpotMarketRequest) (*QuerySpotMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpotMarket not implemented")
}
func (*UnimplementedQueryServer) FullSpotMarkets(ctx context.Context, req *QueryFullSpotMarketsRequest) (*QueryFullSpotMarketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FullSpotMarkets not implemented")
}
func (*UnimplementedQueryServer) FullSpotMarket(ctx context.Context, req *QueryFullSpotMarketRequest) (*QueryFullSpotMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FullSpotMarket not implemented")
}
func (*UnimplementedQueryServer) SpotOrderbook(ctx context.Context, req *QuerySpotOrderbookRequest) (*QuerySpotOrderbookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpotOrderbook not implemented")
}
func (*UnimplementedQueryServer) TraderSpotOrders(ctx context.Context, req *QueryTraderSpotOrdersRequest) (*QueryTraderSpotOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TraderSpotOrders not implemented")
}
func (*UnimplementedQueryServer) AccountAddressSpotOrders(ctx context.Context, req *QueryAccountAddressSpotOrdersRequest) (*QueryAccountAddressSpotOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountAddressSpotOrders not implemented")
}
func (*UnimplementedQueryServer) SpotOrdersByHashes(ctx context.Context, req *QuerySpotOrdersByHashesRequest) (*QuerySpotOrdersByHashesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpotOrdersByHashes not implemented")
}
func (*UnimplementedQueryServer) SubaccountOrders(ctx context.Context, req *QuerySubaccountOrdersRequest) (*QuerySubaccountOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubaccountOrders not implemented")
}
func (*UnimplementedQueryServer) TraderSpotTransientOrders(ctx context.Context, req *QueryTraderSpotOrdersRequest) (*QueryTraderSpotOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TraderSpotTransientOrders not implemented")
}
func (*UnimplementedQueryServer) SpotMidPriceAndTOB(ctx context.Context, req *QuerySpotMidPriceAndTOBRequest) (*QuerySpotMidPriceAndTOBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpotMidPriceAndTOB not implemented")
}
func (*UnimplementedQueryServer) DerivativeMidPriceAndTOB(ctx context.Context, req *QueryDerivativeMidPriceAndTOBRequest) (*QueryDerivativeMidPriceAndTOBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DerivativeMidPriceAndTOB not implemented")
}
func (*UnimplementedQueryServer) DerivativeOrderbook(ctx context.Context, req *QueryDerivativeOrderbookRequest) (*QueryDerivativeOrderbookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DerivativeOrderbook not implemented")
}
func (*UnimplementedQueryServer) TraderDerivativeOrders(ctx context.Context, req *QueryTraderDerivativeOrdersRequest) (*QueryTraderDerivativeOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TraderDerivativeOrders not implemented")
}
func (*UnimplementedQueryServer) AccountAddressDerivativeOrders(ctx context.Context, req *QueryAccountAddressDerivativeOrdersRequest) (*QueryAccountAddressDerivativeOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountAddressDerivativeOrders not implemented")
}
func (*UnimplementedQueryServer) DerivativeOrdersByHashes(ctx context.Context, req *QueryDerivativeOrdersByHashesRequest) (*QueryDerivativeOrdersByHashesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DerivativeOrdersByHashes not implemented")
}
func (*UnimplementedQueryServer) TraderDerivativeTransientOrders(ctx context.Context, req *QueryTraderDerivativeOrdersRequest) (*QueryTraderDerivativeOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TraderDerivativeTransientOrders not implemented")
}
func (*UnimplementedQueryServer) DerivativeMarkets(ctx context.Context, req *QueryDerivativeMarketsRequest) (*QueryDerivativeMarketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DerivativeMarkets not implemented")
}
func (*UnimplementedQueryServer) DerivativeMarket(ctx context.Context, req *QueryDerivativeMarketRequest) (*QueryDerivativeMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DerivativeMarket not implemented")
}
func (*UnimplementedQueryServer) DerivativeMarketAddress(ctx context.Context, req *QueryDerivativeMarketAddressRequest) (*QueryDerivativeMarketAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DerivativeMarketAddress not implemented")
}
func (*UnimplementedQueryServer) SubaccountTradeNonce(ctx context.Context, req *QuerySubaccountTradeNonceRequest) (*QuerySubaccountTradeNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubaccountTradeNonce not implemented")
}
func (*UnimplementedQueryServer) ExchangeModuleState(ctx context.Context, req *QueryModuleStateRequest) (*QueryModuleStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeModuleState not implemented")
}
func (*UnimplementedQueryServer) Positions(ctx context.Context, req *QueryPositionsRequest) (*QueryPositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Positions not implemented")
}
func (*UnimplementedQueryServer) SubaccountPositions(ctx context.Context, req *QuerySubaccountPositionsRequest) (*QuerySubaccountPositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubaccountPositions not implemented")
}
func (*UnimplementedQueryServer) SubaccountPositionInMarket(ctx context.Context, req *QuerySubaccountPositionInMarketRequest) (*QuerySubaccountPositionInMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubaccountPositionInMarket not implemented")
}
func (*UnimplementedQueryServer) SubaccountEffectivePositionInMarket(ctx context.Context, req *QuerySubaccountEffectivePositionInMarketRequest) (*QuerySubaccountEffectivePositionInMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubaccountEffectivePositionInMarket not implemented")
}
func (*UnimplementedQueryServer) PerpetualMarketInfo(ctx context.Context, req *QueryPerpetualMarketInfoRequest) (*QueryPerpetualMarketInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerpetualMarketInfo not implemented")
}
func (*UnimplementedQueryServer) ExpiryFuturesMarketInfo(ctx context.Context, req *QueryExpiryFuturesMarketInfoRequest) (*QueryExpiryFuturesMarketInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpiryFuturesMarketInfo not implemented")
}
func (*UnimplementedQueryServer) PerpetualMarketFunding(ctx context.Context, req *QueryPerpetualMarketFundingRequest) (*QueryPerpetualMarketFundingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerpetualMarketFunding not implemented")
}
func (*UnimplementedQueryServer) SubaccountOrderMetadata(ctx context.Context, req *QuerySubaccountOrderMetadataRequest) (*QuerySubaccountOrderMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubaccountOrderMetadata not implemented")
}
func (*UnimplementedQueryServer) TradeRewardPoints(ctx context.Context, req *QueryTradeRewardPointsRequest) (*QueryTradeRewardPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeRewardPoints not implemented")
}
func (*UnimplementedQueryServer) PendingTradeRewardPoints(ctx context.Context, req *QueryTradeRewardPointsRequest) (*QueryTradeRewardPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingTradeRewardPoints not implemented")
}
func (*UnimplementedQueryServer) TradeRewardCampaign(ctx context.Context, req *QueryTradeRewardCampaignRequest) (*QueryTradeRewardCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeRewardCampaign not implemented")
}
func (*UnimplementedQueryServer) FeeDiscountAccountInfo(ctx context.Context, req *QueryFeeDiscountAccountInfoRequest) (*QueryFeeDiscountAccountInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeDiscountAccountInfo not implemented")
}
func (*UnimplementedQueryServer) FeeDiscountSchedule(ctx context.Context, req *QueryFeeDiscountScheduleRequest) (*QueryFeeDiscountScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeDiscountSchedule not implemented")
}
func (*UnimplementedQueryServer) BalanceMismatches(ctx context.Context, req *QueryBalanceMismatchesRequest) (*QueryBalanceMismatchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BalanceMismatches not implemented")
}
func (*UnimplementedQueryServer) BalanceWithBalanceHolds(ctx context.Context, req *QueryBalanceWithBalanceHoldsRequest) (*QueryBalanceWithBalanceHoldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BalanceWithBalanceHolds not implemented")
}
func (*UnimplementedQueryServer) FeeDiscountTierStatistics(ctx context.Context, req *QueryFeeDiscountTierStatisticsRequest) (*QueryFeeDiscountTierStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeDiscountTierStatistics not implemented")
}
func (*UnimplementedQueryServer) MitoVaultInfos(ctx context.Context, req *MitoVaultInfosRequest) (*MitoVaultInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MitoVaultInfos not implemented")
}
func (*UnimplementedQueryServer) QueryMarketIDFromVault(ctx context.Context, req *QueryMarketIDFromVaultRequest) (*QueryMarketIDFromVaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMarketIDFromVault not implemented")
}
func (*UnimplementedQueryServer) HistoricalTradeRecords(ctx context.Context, req *QueryHistoricalTradeRecordsRequest) (*QueryHistoricalTradeRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoricalTradeRecords not implemented")
}
func (*UnimplementedQueryServer) IsOptedOutOfRewards(ctx context.Context, req *QueryIsOptedOutOfRewardsRequest) (*QueryIsOptedOutOfRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsOptedOutOfRewards not implemented")
}
func (*UnimplementedQueryServer) OptedOutOfRewardsAccounts(ctx context.Context, req *QueryOptedOutOfRewardsAccountsRequest) (*QueryOptedOutOfRewardsAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptedOutOfRewardsAccounts not implemented")
}
func (*UnimplementedQueryServer) MarketVolatility(ctx context.Context, req *QueryMarketVolatilityRequest) (*QueryMarketVolatilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketVolatility not implemented")
}
func (*UnimplementedQueryServer) BinaryOptionsMarkets(ctx context.Context, req *QueryBinaryMarketsRequest) (*QueryBinaryMarketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BinaryOptionsMarkets not implemented")
}
func (*UnimplementedQueryServer) TraderDerivativeConditionalOrders(ctx context.Context, req *QueryTraderDerivativeConditionalOrdersRequest) (*QueryTraderDerivativeConditionalOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TraderDerivativeConditionalOrders not implemented")
}
func (*UnimplementedQueryServer) MarketAtomicExecutionFeeMultiplier(ctx context.Context, req *QueryMarketAtomicExecutionFeeMultiplierRequest) (*QueryMarketAtomicExecutionFeeMultiplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketAtomicExecutionFeeMultiplier not implemented")
}
func (*UnimplementedQueryServer) ActiveStakeGrant(ctx context.Context, req *QueryActiveStakeGrantRequest) (*QueryActiveStakeGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActiveStakeGrant not implemented")
}
func (*UnimplementedQueryServer) GrantAuthorization(ctx context.Context, req *QueryGrantAuthorizationRequest) (*QueryGrantAuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantAuthorization not implemented")
}
func (*UnimplementedQueryServer) GrantAuthorizations(ctx context.Context, req *QueryGrantAuthorizationsRequest) (*QueryGrantAuthorizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantAuthorizations not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_L3DerivativeOrderBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFullDerivativeOrderbookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).L3DerivativeOrderBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/L3DerivativeOrderBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).L3DerivativeOrderBook(ctx, req.(*QueryFullDerivativeOrderbookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_L3SpotOrderBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFullSpotOrderbookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).L3SpotOrderBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/L3SpotOrderBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).L3SpotOrderBook(ctx, req.(*QueryFullSpotOrderbookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryExchangeParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExchangeParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryExchangeParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/QueryExchangeParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryExchangeParams(ctx, req.(*QueryExchangeParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubaccountDeposits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubaccountDepositsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubaccountDeposits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/SubaccountDeposits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubaccountDeposits(ctx, req.(*QuerySubaccountDepositsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubaccountDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubaccountDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubaccountDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/SubaccountDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubaccountDeposit(ctx, req.(*QuerySubaccountDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExchangeBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExchangeBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExchangeBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/ExchangeBalances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExchangeBalances(ctx, req.(*QueryExchangeBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AggregateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAggregateVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AggregateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/AggregateVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AggregateVolume(ctx, req.(*QueryAggregateVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AggregateVolumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAggregateVolumesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AggregateVolumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/AggregateVolumes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AggregateVolumes(ctx, req.(*QueryAggregateVolumesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AggregateMarketVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAggregateMarketVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AggregateMarketVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/AggregateMarketVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AggregateMarketVolume(ctx, req.(*QueryAggregateMarketVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AggregateMarketVolumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAggregateMarketVolumesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AggregateMarketVolumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/AggregateMarketVolumes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AggregateMarketVolumes(ctx, req.(*QueryAggregateMarketVolumesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DenomDecimal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDenomDecimalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DenomDecimal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/DenomDecimal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DenomDecimal(ctx, req.(*QueryDenomDecimalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DenomDecimals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDenomDecimalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DenomDecimals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/DenomDecimals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DenomDecimals(ctx, req.(*QueryDenomDecimalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpotMarkets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpotMarketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpotMarkets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/SpotMarkets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpotMarkets(ctx, req.(*QuerySpotMarketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpotMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpotMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpotMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/SpotMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpotMarket(ctx, req.(*QuerySpotMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FullSpotMarkets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFullSpotMarketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FullSpotMarkets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/FullSpotMarkets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FullSpotMarkets(ctx, req.(*QueryFullSpotMarketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FullSpotMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFullSpotMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FullSpotMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/FullSpotMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FullSpotMarket(ctx, req.(*QueryFullSpotMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpotOrderbook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpotOrderbookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpotOrderbook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/SpotOrderbook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpotOrderbook(ctx, req.(*QuerySpotOrderbookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TraderSpotOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTraderSpotOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TraderSpotOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/TraderSpotOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TraderSpotOrders(ctx, req.(*QueryTraderSpotOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountAddressSpotOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAccountAddressSpotOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountAddressSpotOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/AccountAddressSpotOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountAddressSpotOrders(ctx, req.(*QueryAccountAddressSpotOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpotOrdersByHashes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpotOrdersByHashesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpotOrdersByHashes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/SpotOrdersByHashes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpotOrdersByHashes(ctx, req.(*QuerySpotOrdersByHashesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubaccountOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubaccountOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubaccountOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/SubaccountOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubaccountOrders(ctx, req.(*QuerySubaccountOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TraderSpotTransientOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTraderSpotOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TraderSpotTransientOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/TraderSpotTransientOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TraderSpotTransientOrders(ctx, req.(*QueryTraderSpotOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpotMidPriceAndTOB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpotMidPriceAndTOBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpotMidPriceAndTOB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/SpotMidPriceAndTOB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpotMidPriceAndTOB(ctx, req.(*QuerySpotMidPriceAndTOBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DerivativeMidPriceAndTOB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDerivativeMidPriceAndTOBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DerivativeMidPriceAndTOB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/DerivativeMidPriceAndTOB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DerivativeMidPriceAndTOB(ctx, req.(*QueryDerivativeMidPriceAndTOBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DerivativeOrderbook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDerivativeOrderbookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DerivativeOrderbook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/DerivativeOrderbook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DerivativeOrderbook(ctx, req.(*QueryDerivativeOrderbookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TraderDerivativeOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTraderDerivativeOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TraderDerivativeOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/TraderDerivativeOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TraderDerivativeOrders(ctx, req.(*QueryTraderDerivativeOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountAddressDerivativeOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAccountAddressDerivativeOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountAddressDerivativeOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/AccountAddressDerivativeOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountAddressDerivativeOrders(ctx, req.(*QueryAccountAddressDerivativeOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DerivativeOrdersByHashes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDerivativeOrdersByHashesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DerivativeOrdersByHashes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/DerivativeOrdersByHashes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DerivativeOrdersByHashes(ctx, req.(*QueryDerivativeOrdersByHashesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TraderDerivativeTransientOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTraderDerivativeOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TraderDerivativeTransientOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/TraderDerivativeTransientOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TraderDerivativeTransientOrders(ctx, req.(*QueryTraderDerivativeOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DerivativeMarkets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDerivativeMarketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DerivativeMarkets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/DerivativeMarkets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DerivativeMarkets(ctx, req.(*QueryDerivativeMarketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DerivativeMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDerivativeMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DerivativeMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/DerivativeMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DerivativeMarket(ctx, req.(*QueryDerivativeMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DerivativeMarketAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDerivativeMarketAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DerivativeMarketAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/DerivativeMarketAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DerivativeMarketAddress(ctx, req.(*QueryDerivativeMarketAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubaccountTradeNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubaccountTradeNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubaccountTradeNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/SubaccountTradeNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubaccountTradeNonce(ctx, req.(*QuerySubaccountTradeNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExchangeModuleState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryModuleStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExchangeModuleState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/ExchangeModuleState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExchangeModuleState(ctx, req.(*QueryModuleStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Positions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Positions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/Positions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Positions(ctx, req.(*QueryPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubaccountPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubaccountPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubaccountPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/SubaccountPositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubaccountPositions(ctx, req.(*QuerySubaccountPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubaccountPositionInMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubaccountPositionInMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubaccountPositionInMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/SubaccountPositionInMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubaccountPositionInMarket(ctx, req.(*QuerySubaccountPositionInMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubaccountEffectivePositionInMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubaccountEffectivePositionInMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubaccountEffectivePositionInMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/SubaccountEffectivePositionInMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubaccountEffectivePositionInMarket(ctx, req.(*QuerySubaccountEffectivePositionInMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PerpetualMarketInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPerpetualMarketInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PerpetualMarketInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/PerpetualMarketInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PerpetualMarketInfo(ctx, req.(*QueryPerpetualMarketInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExpiryFuturesMarketInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExpiryFuturesMarketInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExpiryFuturesMarketInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/ExpiryFuturesMarketInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExpiryFuturesMarketInfo(ctx, req.(*QueryExpiryFuturesMarketInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PerpetualMarketFunding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPerpetualMarketFundingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PerpetualMarketFunding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/PerpetualMarketFunding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PerpetualMarketFunding(ctx, req.(*QueryPerpetualMarketFundingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubaccountOrderMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubaccountOrderMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubaccountOrderMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/SubaccountOrderMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubaccountOrderMetadata(ctx, req.(*QuerySubaccountOrderMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TradeRewardPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTradeRewardPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TradeRewardPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/TradeRewardPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TradeRewardPoints(ctx, req.(*QueryTradeRewardPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingTradeRewardPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTradeRewardPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingTradeRewardPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/PendingTradeRewardPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingTradeRewardPoints(ctx, req.(*QueryTradeRewardPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TradeRewardCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTradeRewardCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TradeRewardCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/TradeRewardCampaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TradeRewardCampaign(ctx, req.(*QueryTradeRewardCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeeDiscountAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeeDiscountAccountInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeDiscountAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/FeeDiscountAccountInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeDiscountAccountInfo(ctx, req.(*QueryFeeDiscountAccountInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeeDiscountSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeeDiscountScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeDiscountSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/FeeDiscountSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeDiscountSchedule(ctx, req.(*QueryFeeDiscountScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BalanceMismatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBalanceMismatchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BalanceMismatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/BalanceMismatches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BalanceMismatches(ctx, req.(*QueryBalanceMismatchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BalanceWithBalanceHolds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBalanceWithBalanceHoldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BalanceWithBalanceHolds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/BalanceWithBalanceHolds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BalanceWithBalanceHolds(ctx, req.(*QueryBalanceWithBalanceHoldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeeDiscountTierStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeeDiscountTierStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeDiscountTierStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/FeeDiscountTierStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeDiscountTierStatistics(ctx, req.(*QueryFeeDiscountTierStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MitoVaultInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MitoVaultInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MitoVaultInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/MitoVaultInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MitoVaultInfos(ctx, req.(*MitoVaultInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryMarketIDFromVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMarketIDFromVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryMarketIDFromVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/QueryMarketIDFromVault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryMarketIDFromVault(ctx, req.(*QueryMarketIDFromVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HistoricalTradeRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHistoricalTradeRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HistoricalTradeRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/HistoricalTradeRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HistoricalTradeRecords(ctx, req.(*QueryHistoricalTradeRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsOptedOutOfRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsOptedOutOfRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsOptedOutOfRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/IsOptedOutOfRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsOptedOutOfRewards(ctx, req.(*QueryIsOptedOutOfRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OptedOutOfRewardsAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOptedOutOfRewardsAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OptedOutOfRewardsAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/OptedOutOfRewardsAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OptedOutOfRewardsAccounts(ctx, req.(*QueryOptedOutOfRewardsAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MarketVolatility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMarketVolatilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MarketVolatility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/MarketVolatility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MarketVolatility(ctx, req.(*QueryMarketVolatilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BinaryOptionsMarkets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBinaryMarketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BinaryOptionsMarkets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/BinaryOptionsMarkets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BinaryOptionsMarkets(ctx, req.(*QueryBinaryMarketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TraderDerivativeConditionalOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTraderDerivativeConditionalOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TraderDerivativeConditionalOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/TraderDerivativeConditionalOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TraderDerivativeConditionalOrders(ctx, req.(*QueryTraderDerivativeConditionalOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MarketAtomicExecutionFeeMultiplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMarketAtomicExecutionFeeMultiplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MarketAtomicExecutionFeeMultiplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/MarketAtomicExecutionFeeMultiplier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MarketAtomicExecutionFeeMultiplier(ctx, req.(*QueryMarketAtomicExecutionFeeMultiplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActiveStakeGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryActiveStakeGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActiveStakeGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/ActiveStakeGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActiveStakeGrant(ctx, req.(*QueryActiveStakeGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GrantAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGrantAuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GrantAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/GrantAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GrantAuthorization(ctx, req.(*QueryGrantAuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GrantAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGrantAuthorizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GrantAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/GrantAuthorizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GrantAuthorizations(ctx, req.(*QueryGrantAuthorizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "injective.exchange.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "L3DerivativeOrderBook",
			Handler:    _Query_L3DerivativeOrderBook_Handler,
		},
		{
			MethodName: "L3SpotOrderBook",
			Handler:    _Query_L3SpotOrderBook_Handler,
		},
		{
			MethodName: "QueryExchangeParams",
			Handler:    _Query_QueryExchangeParams_Handler,
		},
		{
			MethodName: "SubaccountDeposits",
			Handler:    _Query_SubaccountDeposits_Handler,
		},
		{
			MethodName: "SubaccountDeposit",
			Handler:    _Query_SubaccountDeposit_Handler,
		},
		{
			MethodName: "ExchangeBalances",
			Handler:    _Query_ExchangeBalances_Handler,
		},
		{
			MethodName: "AggregateVolume",
			Handler:    _Query_AggregateVolume_Handler,
		},
		{
			MethodName: "AggregateVolumes",
			Handler:    _Query_AggregateVolumes_Handler,
		},
		{
			MethodName: "AggregateMarketVolume",
			Handler:    _Query_AggregateMarketVolume_Handler,
		},
		{
			MethodName: "AggregateMarketVolumes",
			Handler:    _Query_AggregateMarketVolumes_Handler,
		},
		{
			MethodName: "DenomDecimal",
			Handler:    _Query_DenomDecimal_Handler,
		},
		{
			MethodName: "DenomDecimals",
			Handler:    _Query_DenomDecimals_Handler,
		},
		{
			MethodName: "SpotMarkets",
			Handler:    _Query_SpotMarkets_Handler,
		},
		{
			MethodName: "SpotMarket",
			Handler:    _Query_SpotMarket_Handler,
		},
		{
			MethodName: "FullSpotMarkets",
			Handler:    _Query_FullSpotMarkets_Handler,
		},
		{
			MethodName: "FullSpotMarket",
			Handler:    _Query_FullSpotMarket_Handler,
		},
		{
			MethodName: "SpotOrderbook",
			Handler:    _Query_SpotOrderbook_Handler,
		},
		{
			MethodName: "TraderSpotOrders",
			Handler:    _Query_TraderSpotOrders_Handler,
		},
		{
			MethodName: "AccountAddressSpotOrders",
			Handler:    _Query_AccountAddressSpotOrders_Handler,
		},
		{
			MethodName: "SpotOrdersByHashes",
			Handler:    _Query_SpotOrdersByHashes_Handler,
		},
		{
			MethodName: "SubaccountOrders",
			Handler:    _Query_SubaccountOrders_Handler,
		},
		{
			MethodName: "TraderSpotTransientOrders",
			Handler:    _Query_TraderSpotTransientOrders_Handler,
		},
		{
			MethodName: "SpotMidPriceAndTOB",
			Handler:    _Query_SpotMidPriceAndTOB_Handler,
		},
		{
			MethodName: "DerivativeMidPriceAndTOB",
			Handler:    _Query_DerivativeMidPriceAndTOB_Handler,
		},
		{
			MethodName: "DerivativeOrderbook",
			Handler:    _Query_DerivativeOrderbook_Handler,
		},
		{
			MethodName: "TraderDerivativeOrders",
			Handler:    _Query_TraderDerivativeOrders_Handler,
		},
		{
			MethodName: "AccountAddressDerivativeOrders",
			Handler:    _Query_AccountAddressDerivativeOrders_Handler,
		},
		{
			MethodName: "DerivativeOrdersByHashes",
			Handler:    _Query_DerivativeOrdersByHashes_Handler,
		},
		{
			MethodName: "TraderDerivativeTransientOrders",
			Handler:    _Query_TraderDerivativeTransientOrders_Handler,
		},
		{
			MethodName: "DerivativeMarkets",
			Handler:    _Query_DerivativeMarkets_Handler,
		},
		{
			MethodName: "DerivativeMarket",
			Handler:    _Query_DerivativeMarket_Handler,
		},
		{
			MethodName: "DerivativeMarketAddress",
			Handler:    _Query_DerivativeMarketAddress_Handler,
		},
		{
			MethodName: "SubaccountTradeNonce",
			Handler:    _Query_SubaccountTradeNonce_Handler,
		},
		{
			MethodName: "ExchangeModuleState",
			Handler:    _Query_ExchangeModuleState_Handler,
		},
		{
			MethodName: "Positions",
			Handler:    _Query_Positions_Handler,
		},
		{
			MethodName: "SubaccountPositions",
			Handler:    _Query_SubaccountPositions_Handler,
		},
		{
			MethodName: "SubaccountPositionInMarket",
			Handler:    _Query_SubaccountPositionInMarket_Handler,
		},
		{
			MethodName: "SubaccountEffectivePositionInMarket",
			Handler:    _Query_SubaccountEffectivePositionInMarket_Handler,
		},
		{
			MethodName: "PerpetualMarketInfo",
			Handler:    _Query_PerpetualMarketInfo_Handler,
		},
		{
			MethodName: "ExpiryFuturesMarketInfo",
			Handler:    _Query_ExpiryFuturesMarketInfo_Handler,
		},
		{
			MethodName: "PerpetualMarketFunding",
			Handler:    _Query_PerpetualMarketFunding_Handler,
		},
		{
			MethodName: "SubaccountOrderMetadata",
			Handler:    _Query_SubaccountOrderMetadata_Handler,
		},
		{
			MethodName: "TradeRewardPoints",
			Handler:    _Query_TradeRewardPoints_Handler,
		},
		{
			MethodName: "PendingTradeRewardPoints",
			Handler:    _Query_PendingTradeRewardPoints_Handler,
		},
		{
			MethodName: "TradeRewardCampaign",
			Handler:    _Query_TradeRewardCampaign_Handler,
		},
		{
			MethodName: "FeeDiscountAccountInfo",
			Handler:    _Query_FeeDiscountAccountInfo_Handler,
		},
		{
			MethodName: "FeeDiscountSchedule",
			Handler:    _Query_FeeDiscountSchedule_Handler,
		},
		{
			MethodName: "BalanceMismatches",
			Handler:    _Query_BalanceMismatches_Handler,
		},
		{
			MethodName: "BalanceWithBalanceHolds",
			Handler:    _Query_BalanceWithBalanceHolds_Handler,
		},
		{
			MethodName: "FeeDiscountTierStatistics",
			Handler:    _Query_FeeDiscountTierStatistics_Handler,
		},
		{
			MethodName: "MitoVaultInfos",
			Handler:    _Query_MitoVaultInfos_Handler,
		},
		{
			MethodName: "QueryMarketIDFromVault",
			Handler:    _Query_QueryMarketIDFromVault_Handler,
		},
		{
			MethodName: "HistoricalTradeRecords",
			Handler:    _Query_HistoricalTradeRecords_Handler,
		},
		{
			MethodName: "IsOptedOutOfRewards",
			Handler:    _Query_IsOptedOutOfRewards_Handler,
		},
		{
			MethodName: "OptedOutOfRewardsAccounts",
			Handler:    _Query_OptedOutOfRewardsAccounts_Handler,
		},
		{
			MethodName: "MarketVolatility",
			Handler:    _Query_MarketVolatility_Handler,
		},
		{
			MethodName: "BinaryOptionsMarkets",
			Handler:    _Query_BinaryOptionsMarkets_Handler,
		},
		{
			MethodName: "TraderDerivativeConditionalOrders",
			Handler:    _Query_TraderDerivativeConditionalOrders_Handler,
		},
		{
			MethodName: "MarketAtomicExecutionFeeMultiplier",
			Handler:    _Query_MarketAtomicExecutionFeeMultiplier_Handler,
		},
		{
			MethodName: "ActiveStakeGrant",
			Handler:    _Query_ActiveStakeGrant_Handler,
		},
		{
			MethodName: "GrantAuthorization",
			Handler:    _Query_GrantAuthorization_Handler,
		},
		{
			MethodName: "GrantAuthorizations",
			Handler:    _Query_GrantAuthorizations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "injective/exchange/v1beta1/query.proto",
}

func (m *Subaccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Subaccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Subaccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SubaccountNonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SubaccountNonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Trader) > 0 {
		i -= len(m.Trader)
		copy(dAtA[i:], m.Trader)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Trader)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubaccountOrdersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubaccountOrdersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubaccountOrdersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubaccountOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubaccountOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubaccountOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SellOrders) > 0 {
		for iNdEx := len(m.SellOrders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SellOrders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.BuyOrders) > 0 {
		for iNdEx := len(m.BuyOrders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuyOrders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SubaccountOrderbookMetadataWithMarket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubaccountOrderbookMetadataWithMarket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubaccountOrderbookMetadataWithMarket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsBuy {
		i--
		if m.IsBuy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryExchangeParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExchangeParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExchangeParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryExchangeParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExchangeParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExchangeParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QuerySubaccountDepositsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubaccountDepositsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubaccountDepositsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Subaccount != nil {
		{
			size, err := m.Subaccount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubaccountDepositsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubaccountDepositsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubaccountDepositsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Deposits) > 0 {
		for k := range m.Deposits {
			v := m.Deposits[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintQuery(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintQuery(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryExchangeBalancesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExchangeBalancesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExchangeBalancesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryExchangeBalancesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExchangeBalancesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExchangeBalancesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Balances) > 0 {
		for iNdEx := len(m.Balances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAggregateVolumeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAggregateVolumeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAggregateVolumeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAggregateVolumeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAggregateVolumeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAggregateVolumeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AggregateVolumes) > 0 {
		for iNdEx := len(m.AggregateVolumes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AggregateVolumes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAggregateVolumesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAggregateVolumesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAggregateVolumesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketIds) > 0 {
		for iNdEx := len(m.MarketIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MarketIds[iNdEx])
			copy(dAtA[i:], m.MarketIds[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Accounts[iNdEx])
			copy(dAtA[i:], m.Accounts[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Accounts[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAggregateVolumesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAggregateVolumesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAggregateVolumesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AggregateMarketVolumes) > 0 {
		for iNdEx := len(m.AggregateMarketVolumes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AggregateMarketVolumes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.AggregateAccountVolumes) > 0 {
		for iNdEx := len(m.AggregateAccountVolumes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AggregateAccountVolumes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAggregateMarketVolumeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAggregateMarketVolumeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAggregateMarketVolumeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAggregateMarketVolumeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAggregateMarketVolumeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAggregateMarketVolumeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Volume.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDenomDecimalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDenomDecimalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDenomDecimalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDenomDecimalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDenomDecimalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDenomDecimalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Decimal != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Decimal))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDenomDecimalsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDenomDecimalsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDenomDecimalsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denoms) > 0 {
		for iNdEx := len(m.Denoms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Denoms[iNdEx])
			copy(dAtA[i:], m.Denoms[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Denoms[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDenomDecimalsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDenomDecimalsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDenomDecimalsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DenomDecimals) > 0 {
		for iNdEx := len(m.DenomDecimals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DenomDecimals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAggregateMarketVolumesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAggregateMarketVolumesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAggregateMarketVolumesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketIds) > 0 {
		for iNdEx := len(m.MarketIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MarketIds[iNdEx])
			copy(dAtA[i:], m.MarketIds[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAggregateMarketVolumesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAggregateMarketVolumesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAggregateMarketVolumesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Volumes) > 0 {
		for iNdEx := len(m.Volumes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Volumes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubaccountDepositRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubaccountDepositRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubaccountDepositRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubaccountDepositResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubaccountDepositResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubaccountDepositResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Deposits != nil {
		{
			size, err := m.Deposits.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpotMarketsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpotMarketsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpotMarketsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketIds) > 0 {
		for iNdEx := len(m.MarketIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MarketIds[iNdEx])
			copy(dAtA[i:], m.MarketIds[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpotMarketsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpotMarketsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpotMarketsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Markets) > 0 {
		for iNdEx := len(m.Markets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Markets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpotMarketRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpotMarketRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpotMarketRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpotMarketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpotMarketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpotMarketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Market != nil {
		{
			size, err := m.Market.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpotOrderbookRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpotOrderbookRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpotOrderbookRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LimitCumulativeQuantity != nil {
		{
			size := m.LimitCumulativeQuantity.Size()
			i -= size
			if _, err := m.LimitCumulativeQuantity.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.LimitCumulativeNotional != nil {
		{
			size := m.LimitCumulativeNotional.Size()
			i -= size
			if _, err := m.LimitCumulativeNotional.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.OrderSide != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.OrderSide))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpotOrderbookResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpotOrderbookResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpotOrderbookResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SellsPriceLevel) > 0 {
		for iNdEx := len(m.SellsPriceLevel) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SellsPriceLevel[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.BuysPriceLevel) > 0 {
		for iNdEx := len(m.BuysPriceLevel) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuysPriceLevel[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FullSpotMarket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FullSpotMarket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FullSpotMarket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MidPriceAndTob != nil {
		{
			size, err := m.MidPriceAndTob.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Market != nil {
		{
			size, err := m.Market.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFullSpotMarketsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFullSpotMarketsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFullSpotMarketsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WithMidPriceAndTob {
		i--
		if m.WithMidPriceAndTob {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.MarketIds) > 0 {
		for iNdEx := len(m.MarketIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MarketIds[iNdEx])
			copy(dAtA[i:], m.MarketIds[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFullSpotMarketsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFullSpotMarketsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFullSpotMarketsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Markets) > 0 {
		for iNdEx := len(m.Markets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Markets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFullSpotMarketRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFullSpotMarketRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFullSpotMarketRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WithMidPriceAndTob {
		i--
		if m.WithMidPriceAndTob {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFullSpotMarketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFullSpotMarketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFullSpotMarketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Market != nil {
		{
			size, err := m.Market.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpotOrdersByHashesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpotOrdersByHashesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpotOrdersByHashesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrderHashes) > 0 {
		for iNdEx := len(m.OrderHashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OrderHashes[iNdEx])
			copy(dAtA[i:], m.OrderHashes[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.OrderHashes[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpotOrdersByHashesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpotOrdersByHashesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpotOrdersByHashesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for iNdEx := len(m.Orders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTraderSpotOrdersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTraderSpotOrdersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTraderSpotOrdersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAccountAddressSpotOrdersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAccountAddressSpotOrdersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAccountAddressSpotOrdersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccountAddress) > 0 {
		i -= len(m.AccountAddress)
		copy(dAtA[i:], m.AccountAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AccountAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TrimmedSpotLimitOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrimmedSpotLimitOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrimmedSpotLimitOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OrderHash) > 0 {
		i -= len(m.OrderHash)
		copy(dAtA[i:], m.OrderHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OrderHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.IsBuy {
		i--
		if m.IsBuy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.Fillable.Size()
		i -= size
		if _, err := m.Fillable.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Quantity.Size()
		i -= size
		if _, err := m.Quantity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTraderSpotOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTraderSpotOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTraderSpotOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for iNdEx := len(m.Orders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAccountAddressSpotOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAccountAddressSpotOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAccountAddressSpotOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for iNdEx := len(m.Orders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpotMidPriceAndTOBRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpotMidPriceAndTOBRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpotMidPriceAndTOBRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpotMidPriceAndTOBResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpotMidPriceAndTOBResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpotMidPriceAndTOBResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BestSellPrice != nil {
		{
			size := m.BestSellPrice.Size()
			i -= size
			if _, err := m.BestSellPrice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BestBuyPrice != nil {
		{
			size := m.BestBuyPrice.Size()
			i -= size
			if _, err := m.BestBuyPrice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.MidPrice != nil {
		{
			size := m.MidPrice.Size()
			i -= size
			if _, err := m.MidPrice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDerivativeMidPriceAndTOBRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDerivativeMidPriceAndTOBRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDerivativeMidPriceAndTOBRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDerivativeMidPriceAndTOBResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDerivativeMidPriceAndTOBResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDerivativeMidPriceAndTOBResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BestSellPrice != nil {
		{
			size := m.BestSellPrice.Size()
			i -= size
			if _, err := m.BestSellPrice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BestBuyPrice != nil {
		{
			size := m.BestBuyPrice.Size()
			i -= size
			if _, err := m.BestBuyPrice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.MidPrice != nil {
		{
			size := m.MidPrice.Size()
			i -= size
			if _, err := m.MidPrice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDerivativeOrderbookRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDerivativeOrderbookRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDerivativeOrderbookRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LimitCumulativeNotional != nil {
		{
			size := m.LimitCumulativeNotional.Size()
			i -= size
			if _, err := m.LimitCumulativeNotional.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Limit != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDerivativeOrderbookResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDerivativeOrderbookResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDerivativeOrderbookResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SellsPriceLevel) > 0 {
		for iNdEx := len(m.SellsPriceLevel) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SellsPriceLevel[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.BuysPriceLevel) > 0 {
		for iNdEx := len(m.BuysPriceLevel) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuysPriceLevel[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTraderSpotOrdersToCancelUpToAmountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTraderSpotOrdersToCancelUpToAmountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTraderSpotOrdersToCancelUpToAmountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReferencePrice != nil {
		{
			size := m.ReferencePrice.Size()
			i -= size
			if _, err := m.ReferencePrice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Strategy != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Strategy))
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.QuoteAmount.Size()
		i -= size
		if _, err := m.QuoteAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.BaseAmount.Size()
		i -= size
		if _, err := m.BaseAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTraderDerivativeOrdersToCancelUpToAmountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTraderDerivativeOrdersToCancelUpToAmountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTraderDerivativeOrdersToCancelUpToAmountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReferencePrice != nil {
		{
			size := m.ReferencePrice.Size()
			i -= size
			if _, err := m.ReferencePrice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Strategy != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Strategy))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.QuoteAmount.Size()
		i -= size
		if _, err := m.QuoteAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTraderDerivativeOrdersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTraderDerivativeOrdersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTraderDerivativeOrdersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAccountAddressDerivativeOrdersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAccountAddressDerivativeOrdersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAccountAddressDerivativeOrdersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccountAddress) > 0 {
		i -= len(m.AccountAddress)
		copy(dAtA[i:], m.AccountAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AccountAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TrimmedDerivativeLimitOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrimmedDerivativeLimitOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrimmedDerivativeLimitOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.OrderHash) > 0 {
		i -= len(m.OrderHash)
		copy(dAtA[i:], m.OrderHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OrderHash)))
		i--
		dAtA[i] = 0x32
	}
	if m.IsBuy {
		i--
		if m.IsBuy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.Fillable.Size()
		i -= size
		if _, err := m.Fillable.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Margin.Size()
		i -= size
		if _, err := m.Margin.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Quantity.Size()
		i -= size
		if _, err := m.Quantity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTraderDerivativeOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTraderDerivativeOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTraderDerivativeOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for iNdEx := len(m.Orders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAccountAddressDerivativeOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAccountAddressDerivativeOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAccountAddressDerivativeOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for iNdEx := len(m.Orders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDerivativeOrdersByHashesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDerivativeOrdersByHashesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDerivativeOrdersByHashesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrderHashes) > 0 {
		for iNdEx := len(m.OrderHashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OrderHashes[iNdEx])
			copy(dAtA[i:], m.OrderHashes[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.OrderHashes[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDerivativeOrdersByHashesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDerivativeOrdersByHashesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDerivativeOrdersByHashesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for iNdEx := len(m.Orders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDerivativeMarketsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDerivativeMarketsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDerivativeMarketsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WithMidPriceAndTob {
		i--
		if m.WithMidPriceAndTob {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.MarketIds) > 0 {
		for iNdEx := len(m.MarketIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MarketIds[iNdEx])
			copy(dAtA[i:], m.MarketIds[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PriceLevel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PriceLevel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PriceLevel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Quantity.Size()
		i -= size
		if _, err := m.Quantity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PerpetualMarketState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PerpetualMarketState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PerpetualMarketState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FundingInfo != nil {
		{
			size, err := m.FundingInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.MarketInfo != nil {
		{
			size, err := m.MarketInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FullDerivativeMarket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FullDerivativeMarket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FullDerivativeMarket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MidPriceAndTob != nil {
		{
			size, err := m.MidPriceAndTob.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.MarkPrice.Size()
		i -= size
		if _, err := m.MarkPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Info != nil {
		{
			size := m.Info.Size()
			i -= size
			if _, err := m.Info.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Market != nil {
		{
			size, err := m.Market.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FullDerivativeMarket_PerpetualInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FullDerivativeMarket_PerpetualInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PerpetualInfo != nil {
		{
			size, err := m.PerpetualInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *FullDerivativeMarket_FuturesInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FullDerivativeMarket_FuturesInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FuturesInfo != nil {
		{
			size, err := m.FuturesInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *QueryDerivativeMarketsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDerivativeMarketsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDerivativeMarketsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Markets) > 0 {
		for iNdEx := len(m.Markets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Markets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDerivativeMarketRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDerivativeMarketRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDerivativeMarketRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDerivativeMarketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDerivativeMarketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDerivativeMarketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Market != nil {
		{
			size, err := m.Market.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDerivativeMarketAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDerivativeMarketAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDerivativeMarketAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDerivativeMarketAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDerivativeMarketAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDerivativeMarketAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubaccountTradeNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubaccountTradeNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubaccountTradeNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubaccountPositionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubaccountPositionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubaccountPositionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubaccountPositionInMarketRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubaccountPositionInMarketRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubaccountPositionInMarketRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubaccountEffectivePositionInMarketRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubaccountEffectivePositionInMarketRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubaccountEffectivePositionInMarketRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubaccountOrderMetadataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubaccountOrderMetadataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubaccountOrderMetadataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubaccountPositionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubaccountPositionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubaccountPositionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.State) > 0 {
		for iNdEx := len(m.State) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.State[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubaccountPositionInMarketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubaccountPositionInMarketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubaccountPositionInMarketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EffectivePosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EffectivePosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EffectivePosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.EffectiveMargin.Size()
		i -= size
		if _, err := m.EffectiveMargin.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.EntryPrice.Size()
		i -= size
		if _, err := m.EntryPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Quantity.Size()
		i -= size
		if _, err := m.Quantity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.IsLong {
		i--
		if m.IsLong {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubaccountEffectivePositionInMarketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubaccountEffectivePositionInMarketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubaccountEffectivePositionInMarketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPerpetualMarketInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPerpetualMarketInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPerpetualMarketInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPerpetualMarketInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPerpetualMarketInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPerpetualMarketInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryExpiryFuturesMarketInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExpiryFuturesMarketInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExpiryFuturesMarketInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryExpiryFuturesMarketInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExpiryFuturesMarketInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExpiryFuturesMarketInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPerpetualMarketFundingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPerpetualMarketFundingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPerpetualMarketFundingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPerpetualMarketFundingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPerpetualMarketFundingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPerpetualMarketFundingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QuerySubaccountOrderMetadataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubaccountOrderMetadataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubaccountOrderMetadataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		for iNdEx := len(m.Metadata) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Metadata[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubaccountTradeNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubaccountTradeNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubaccountTradeNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryModuleStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryModuleStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryModuleStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryModuleStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryModuleStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryModuleStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPositionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPositionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPositionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPositionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPositionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPositionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.State) > 0 {
		for iNdEx := len(m.State) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.State[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTradeRewardPointsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTradeRewardPointsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTradeRewardPointsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PendingPoolTimestamp != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PendingPoolTimestamp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Accounts[iNdEx])
			copy(dAtA[i:], m.Accounts[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Accounts[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTradeRewardPointsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTradeRewardPointsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTradeRewardPointsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccountTradeRewardPoints) > 0 {
		for iNdEx := len(m.AccountTradeRewardPoints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.AccountTradeRewardPoints[iNdEx].Size()
				i -= size
				if _, err := m.AccountTradeRewardPoints[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTradeRewardCampaignRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTradeRewardCampaignRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTradeRewardCampaignRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTradeRewardCampaignResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTradeRewardCampaignResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTradeRewardCampaignResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PendingTotalTradeRewardPoints) > 0 {
		for iNdEx := len(m.PendingTotalTradeRewardPoints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.PendingTotalTradeRewardPoints[iNdEx].Size()
				i -= size
				if _, err := m.PendingTotalTradeRewardPoints[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.PendingTradingRewardPoolCampaignSchedule) > 0 {
		for iNdEx := len(m.PendingTradingRewardPoolCampaignSchedule) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingTradingRewardPoolCampaignSchedule[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size := m.TotalTradeRewardPoints.Size()
		i -= size
		if _, err := m.TotalTradeRewardPoints.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.TradingRewardPoolCampaignSchedule) > 0 {
		for iNdEx := len(m.TradingRewardPoolCampaignSchedule) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TradingRewardPoolCampaignSchedule[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.TradingRewardCampaignInfo != nil {
		{
			size, err := m.TradingRewardCampaignInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsOptedOutOfRewardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsOptedOutOfRewardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsOptedOutOfRewardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsOptedOutOfRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsOptedOutOfRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsOptedOutOfRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsOptedOut {
		i--
		if m.IsOptedOut {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOptedOutOfRewardsAccountsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOptedOutOfRewardsAccountsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOptedOutOfRewardsAccountsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryOptedOutOfRewardsAccountsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOptedOutOfRewardsAccountsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOptedOutOfRewardsAccountsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Accounts[iNdEx])
			copy(dAtA[i:], m.Accounts[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Accounts[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeeDiscountAccountInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeDiscountAccountInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeDiscountAccountInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeeDiscountAccountInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeDiscountAccountInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeDiscountAccountInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AccountTtl != nil {
		{
			size, err := m.AccountTtl.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.AccountInfo != nil {
		{
			size, err := m.AccountInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TierLevel != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TierLevel))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeeDiscountScheduleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeDiscountScheduleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeDiscountScheduleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryFeeDiscountScheduleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeDiscountScheduleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeDiscountScheduleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeeDiscountSchedule != nil {
		{
			size, err := m.FeeDiscountSchedule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBalanceMismatchesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBalanceMismatchesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBalanceMismatchesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DustFactor != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DustFactor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BalanceMismatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BalanceMismatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BalanceMismatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Difference.Size()
		i -= size
		if _, err := m.Difference.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.ExpectedTotal.Size()
		i -= size
		if _, err := m.ExpectedTotal.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.BalanceHold.Size()
		i -= size
		if _, err := m.BalanceHold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Total.Size()
		i -= size
		if _, err := m.Total.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Available.Size()
		i -= size
		if _, err := m.Available.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBalanceMismatchesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBalanceMismatchesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBalanceMismatchesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BalanceMismatches) > 0 {
		for iNdEx := len(m.BalanceMismatches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BalanceMismatches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBalanceWithBalanceHoldsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBalanceWithBalanceHoldsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBalanceWithBalanceHoldsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *BalanceWithMarginHold) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BalanceWithMarginHold) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BalanceWithMarginHold) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.BalanceHold.Size()
		i -= size
		if _, err := m.BalanceHold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Total.Size()
		i -= size
		if _, err := m.Total.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Available.Size()
		i -= size
		if _, err := m.Available.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBalanceWithBalanceHoldsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBalanceWithBalanceHoldsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBalanceWithBalanceHoldsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BalanceWithBalanceHolds) > 0 {
		for iNdEx := len(m.BalanceWithBalanceHolds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BalanceWithBalanceHolds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeeDiscountTierStatisticsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeDiscountTierStatisticsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeDiscountTierStatisticsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TierStatistic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TierStatistic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TierStatistic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.Tier != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Tier))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeeDiscountTierStatisticsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeDiscountTierStatisticsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeDiscountTierStatisticsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Statistics) > 0 {
		for iNdEx := len(m.Statistics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Statistics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MitoVaultInfosRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MitoVaultInfosRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MitoVaultInfosRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MitoVaultInfosResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MitoVaultInfosResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MitoVaultInfosResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cw20Addresses) > 0 {
		for iNdEx := len(m.Cw20Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Cw20Addresses[iNdEx])
			copy(dAtA[i:], m.Cw20Addresses[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Cw20Addresses[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.SpotAddresses) > 0 {
		for iNdEx := len(m.SpotAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SpotAddresses[iNdEx])
			copy(dAtA[i:], m.SpotAddresses[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.SpotAddresses[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DerivativeAddresses) > 0 {
		for iNdEx := len(m.DerivativeAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DerivativeAddresses[iNdEx])
			copy(dAtA[i:], m.DerivativeAddresses[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.DerivativeAddresses[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MasterAddresses) > 0 {
		for iNdEx := len(m.MasterAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MasterAddresses[iNdEx])
			copy(dAtA[i:], m.MasterAddresses[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.MasterAddresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryMarketIDFromVaultRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMarketIDFromVaultRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMarketIDFromVaultRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VaultAddress) > 0 {
		i -= len(m.VaultAddress)
		copy(dAtA[i:], m.VaultAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VaultAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMarketIDFromVaultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMarketIDFromVaultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMarketIDFromVaultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHistoricalTradeRecordsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHistoricalTradeRecordsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHistoricalTradeRecordsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHistoricalTradeRecordsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHistoricalTradeRecordsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHistoricalTradeRecordsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TradeRecords) > 0 {
		for iNdEx := len(m.TradeRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TradeRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TradeHistoryOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TradeHistoryOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TradeHistoryOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeMetadata {
		i--
		if m.IncludeMetadata {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.IncludeRawHistory {
		i--
		if m.IncludeRawHistory {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.MaxAge != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MaxAge))
		i--
		dAtA[i] = 0x10
	}
	if m.TradeGroupingSec != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TradeGroupingSec))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryMarketVolatilityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMarketVolatilityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMarketVolatilityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TradeHistoryOptions != nil {
		{
			size, err := m.TradeHistoryOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMarketVolatilityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMarketVolatilityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMarketVolatilityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RawHistory) > 0 {
		for iNdEx := len(m.RawHistory) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RawHistory[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.HistoryMetadata != nil {
		{
			size, err := m.HistoryMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Volatility != nil {
		{
			size := m.Volatility.Size()
			i -= size
			if _, err := m.Volatility.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBinaryMarketsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBinaryMarketsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBinaryMarketsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBinaryMarketsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBinaryMarketsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBinaryMarketsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Markets) > 0 {
		for iNdEx := len(m.Markets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Markets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTraderDerivativeConditionalOrdersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTraderDerivativeConditionalOrdersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTraderDerivativeConditionalOrdersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TrimmedDerivativeConditionalOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrimmedDerivativeConditionalOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrimmedDerivativeConditionalOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.OrderHash) > 0 {
		i -= len(m.OrderHash)
		copy(dAtA[i:], m.OrderHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OrderHash)))
		i--
		dAtA[i] = 0x3a
	}
	if m.IsLimit {
		i--
		if m.IsLimit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.IsBuy {
		i--
		if m.IsBuy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.TriggerPrice.Size()
		i -= size
		if _, err := m.TriggerPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Margin.Size()
		i -= size
		if _, err := m.Margin.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Quantity.Size()
		i -= size
		if _, err := m.Quantity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTraderDerivativeConditionalOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTraderDerivativeConditionalOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTraderDerivativeConditionalOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for iNdEx := len(m.Orders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFullSpotOrderbookRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFullSpotOrderbookRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFullSpotOrderbookRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFullSpotOrderbookResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFullSpotOrderbookResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFullSpotOrderbookResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Asks) > 0 {
		for iNdEx := len(m.Asks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Asks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Bids) > 0 {
		for iNdEx := len(m.Bids) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bids[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFullDerivativeOrderbookRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFullDerivativeOrderbookRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFullDerivativeOrderbookRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFullDerivativeOrderbookResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFullDerivativeOrderbookResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFullDerivativeOrderbookResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Asks) > 0 {
		for iNdEx := len(m.Asks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Asks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Bids) > 0 {
		for iNdEx := len(m.Bids) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bids[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TrimmedLimitOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrimmedLimitOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrimmedLimitOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OrderHash) > 0 {
		i -= len(m.OrderHash)
		copy(dAtA[i:], m.OrderHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OrderHash)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Quantity.Size()
		i -= size
		if _, err := m.Quantity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryMarketAtomicExecutionFeeMultiplierRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMarketAtomicExecutionFeeMultiplierRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMarketAtomicExecutionFeeMultiplierRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMarketAtomicExecutionFeeMultiplierResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMarketAtomicExecutionFeeMultiplierResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMarketAtomicExecutionFeeMultiplierResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Multiplier.Size()
		i -= size
		if _, err := m.Multiplier.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryActiveStakeGrantRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActiveStakeGrantRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActiveStakeGrantRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Grantee) > 0 {
		i -= len(m.Grantee)
		copy(dAtA[i:], m.Grantee)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Grantee)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryActiveStakeGrantResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActiveStakeGrantResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActiveStakeGrantResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EffectiveGrant != nil {
		{
			size, err := m.EffectiveGrant.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Grant != nil {
		{
			size, err := m.Grant.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGrantAuthorizationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGrantAuthorizationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGrantAuthorizationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Grantee) > 0 {
		i -= len(m.Grantee)
		copy(dAtA[i:], m.Grantee)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Grantee)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Granter) > 0 {
		i -= len(m.Granter)
		copy(dAtA[i:], m.Granter)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Granter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGrantAuthorizationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGrantAuthorizationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGrantAuthorizationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGrantAuthorizationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGrantAuthorizationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGrantAuthorizationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Granter) > 0 {
		i -= len(m.Granter)
		copy(dAtA[i:], m.Granter)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Granter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGrantAuthorizationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGrantAuthorizationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGrantAuthorizationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Grants) > 0 {
		for iNdEx := len(m.Grants) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Grants[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size := m.TotalGrantAmount.Size()
		i -= size
		if _, err := m.TotalGrantAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Subaccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Trader)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.SubaccountNonce != 0 {
		n += 1 + sovQuery(uint64(m.SubaccountNonce))
	}
	return n
}

func (m *QuerySubaccountOrdersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySubaccountOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BuyOrders) > 0 {
		for _, e := range m.BuyOrders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.SellOrders) > 0 {
		for _, e := range m.SellOrders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *SubaccountOrderbookMetadataWithMarket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.IsBuy {
		n += 2
	}
	return n
}

func (m *QueryExchangeParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryExchangeParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QuerySubaccountDepositsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Subaccount != nil {
		l = m.Subaccount.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySubaccountDepositsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Deposits) > 0 {
		for k, v := range m.Deposits {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovQuery(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovQuery(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *QueryExchangeBalancesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryExchangeBalancesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Balances) > 0 {
		for _, e := range m.Balances {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAggregateVolumeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAggregateVolumeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AggregateVolumes) > 0 {
		for _, e := range m.AggregateVolumes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAggregateVolumesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, s := range m.Accounts {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.MarketIds) > 0 {
		for _, s := range m.MarketIds {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAggregateVolumesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AggregateAccountVolumes) > 0 {
		for _, e := range m.AggregateAccountVolumes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.AggregateMarketVolumes) > 0 {
		for _, e := range m.AggregateMarketVolumes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAggregateMarketVolumeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAggregateMarketVolumeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Volume.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDenomDecimalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDenomDecimalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Decimal != 0 {
		n += 1 + sovQuery(uint64(m.Decimal))
	}
	return n
}

func (m *QueryDenomDecimalsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Denoms) > 0 {
		for _, s := range m.Denoms {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDenomDecimalsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DenomDecimals) > 0 {
		for _, e := range m.DenomDecimals {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAggregateMarketVolumesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MarketIds) > 0 {
		for _, s := range m.MarketIds {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAggregateMarketVolumesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Volumes) > 0 {
		for _, e := range m.Volumes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QuerySubaccountDepositRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySubaccountDepositResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Deposits != nil {
		l = m.Deposits.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySpotMarketsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.MarketIds) > 0 {
		for _, s := range m.MarketIds {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QuerySpotMarketsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Markets) > 0 {
		for _, e := range m.Markets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QuerySpotMarketRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySpotMarketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Market != nil {
		l = m.Market.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySpotOrderbookRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovQuery(uint64(m.Limit))
	}
	if m.OrderSide != 0 {
		n += 1 + sovQuery(uint64(m.OrderSide))
	}
	if m.LimitCumulativeNotional != nil {
		l = m.LimitCumulativeNotional.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.LimitCumulativeQuantity != nil {
		l = m.LimitCumulativeQuantity.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySpotOrderbookResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BuysPriceLevel) > 0 {
		for _, e := range m.BuysPriceLevel {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.SellsPriceLevel) > 0 {
		for _, e := range m.SellsPriceLevel {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *FullSpotMarket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Market != nil {
		l = m.Market.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.MidPriceAndTob != nil {
		l = m.MidPriceAndTob.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFullSpotMarketsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.MarketIds) > 0 {
		for _, s := range m.MarketIds {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.WithMidPriceAndTob {
		n += 2
	}
	return n
}

func (m *QueryFullSpotMarketsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Markets) > 0 {
		for _, e := range m.Markets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryFullSpotMarketRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.WithMidPriceAndTob {
		n += 2
	}
	return n
}

func (m *QueryFullSpotMarketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Market != nil {
		l = m.Market.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySpotOrdersByHashesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.OrderHashes) > 0 {
		for _, s := range m.OrderHashes {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QuerySpotOrdersByHashesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTraderSpotOrdersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAccountAddressSpotOrdersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AccountAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *TrimmedSpotLimitOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Price.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Quantity.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Fillable.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.IsBuy {
		n += 2
	}
	l = len(m.OrderHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTraderSpotOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAccountAddressSpotOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QuerySpotMidPriceAndTOBRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySpotMidPriceAndTOBResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MidPrice != nil {
		l = m.MidPrice.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.BestBuyPrice != nil {
		l = m.BestBuyPrice.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.BestSellPrice != nil {
		l = m.BestSellPrice.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDerivativeMidPriceAndTOBRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDerivativeMidPriceAndTOBResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MidPrice != nil {
		l = m.MidPrice.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.BestBuyPrice != nil {
		l = m.BestBuyPrice.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.BestSellPrice != nil {
		l = m.BestSellPrice.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDerivativeOrderbookRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovQuery(uint64(m.Limit))
	}
	if m.LimitCumulativeNotional != nil {
		l = m.LimitCumulativeNotional.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDerivativeOrderbookResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BuysPriceLevel) > 0 {
		for _, e := range m.BuysPriceLevel {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.SellsPriceLevel) > 0 {
		for _, e := range m.SellsPriceLevel {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTraderSpotOrdersToCancelUpToAmountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.BaseAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.QuoteAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.Strategy != 0 {
		n += 1 + sovQuery(uint64(m.Strategy))
	}
	if m.ReferencePrice != nil {
		l = m.ReferencePrice.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTraderDerivativeOrdersToCancelUpToAmountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.QuoteAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.Strategy != 0 {
		n += 1 + sovQuery(uint64(m.Strategy))
	}
	if m.ReferencePrice != nil {
		l = m.ReferencePrice.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTraderDerivativeOrdersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAccountAddressDerivativeOrdersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AccountAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *TrimmedDerivativeLimitOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Price.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Quantity.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Margin.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Fillable.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.IsBuy {
		n += 2
	}
	l = len(m.OrderHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTraderDerivativeOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAccountAddressDerivativeOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDerivativeOrdersByHashesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.OrderHashes) > 0 {
		for _, s := range m.OrderHashes {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDerivativeOrdersByHashesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDerivativeMarketsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.MarketIds) > 0 {
		for _, s := range m.MarketIds {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.WithMidPriceAndTob {
		n += 2
	}
	return n
}

func (m *PriceLevel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Price.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Quantity.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *PerpetualMarketState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MarketInfo != nil {
		l = m.MarketInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.FundingInfo != nil {
		l = m.FundingInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *FullDerivativeMarket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Market != nil {
		l = m.Market.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Info != nil {
		n += m.Info.Size()
	}
	l = m.MarkPrice.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.MidPriceAndTob != nil {
		l = m.MidPriceAndTob.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *FullDerivativeMarket_PerpetualInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PerpetualInfo != nil {
		l = m.PerpetualInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}
func (m *FullDerivativeMarket_FuturesInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FuturesInfo != nil {
		l = m.FuturesInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}
func (m *QueryDerivativeMarketsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Markets) > 0 {
		for _, e := range m.Markets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDerivativeMarketRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDerivativeMarketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Market != nil {
		l = m.Market.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDerivativeMarketAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDerivativeMarketAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySubaccountTradeNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySubaccountPositionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySubaccountPositionInMarketRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySubaccountEffectivePositionInMarketRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySubaccountOrderMetadataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySubaccountPositionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.State) > 0 {
		for _, e := range m.State {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QuerySubaccountPositionInMarketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *EffectivePosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsLong {
		n += 2
	}
	l = m.Quantity.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.EntryPrice.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.EffectiveMargin.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QuerySubaccountEffectivePositionInMarketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPerpetualMarketInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPerpetualMarketInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Info.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryExpiryFuturesMarketInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryExpiryFuturesMarketInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Info.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPerpetualMarketFundingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPerpetualMarketFundingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.State.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QuerySubaccountOrderMetadataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		for _, e := range m.Metadata {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QuerySubaccountTradeNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QueryModuleStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryModuleStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPositionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPositionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.State) > 0 {
		for _, e := range m.State {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTradeRewardPointsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, s := range m.Accounts {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.PendingPoolTimestamp != 0 {
		n += 1 + sovQuery(uint64(m.PendingPoolTimestamp))
	}
	return n
}

func (m *QueryTradeRewardPointsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AccountTradeRewardPoints) > 0 {
		for _, e := range m.AccountTradeRewardPoints {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTradeRewardCampaignRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTradeRewardCampaignResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TradingRewardCampaignInfo != nil {
		l = m.TradingRewardCampaignInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.TradingRewardPoolCampaignSchedule) > 0 {
		for _, e := range m.TradingRewardPoolCampaignSchedule {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = m.TotalTradeRewardPoints.Size()
	n += 1 + l + sovQuery(uint64(l))
	if len(m.PendingTradingRewardPoolCampaignSchedule) > 0 {
		for _, e := range m.PendingTradingRewardPoolCampaignSchedule {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.PendingTotalTradeRewardPoints) > 0 {
		for _, e := range m.PendingTotalTradeRewardPoints {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryIsOptedOutOfRewardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIsOptedOutOfRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsOptedOut {
		n += 2
	}
	return n
}

func (m *QueryOptedOutOfRewardsAccountsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryOptedOutOfRewardsAccountsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, s := range m.Accounts {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryFeeDiscountAccountInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFeeDiscountAccountInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TierLevel != 0 {
		n += 1 + sovQuery(uint64(m.TierLevel))
	}
	if m.AccountInfo != nil {
		l = m.AccountInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.AccountTtl != nil {
		l = m.AccountTtl.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFeeDiscountScheduleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryFeeDiscountScheduleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FeeDiscountSchedule != nil {
		l = m.FeeDiscountSchedule.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBalanceMismatchesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DustFactor != 0 {
		n += 1 + sovQuery(uint64(m.DustFactor))
	}
	return n
}

func (m *BalanceMismatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.Available.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Total.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.BalanceHold.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.ExpectedTotal.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Difference.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBalanceMismatchesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BalanceMismatches) > 0 {
		for _, e := range m.BalanceMismatches {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryBalanceWithBalanceHoldsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BalanceWithMarginHold) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.Available.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Total.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.BalanceHold.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBalanceWithBalanceHoldsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BalanceWithBalanceHolds) > 0 {
		for _, e := range m.BalanceWithBalanceHolds {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryFeeDiscountTierStatisticsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TierStatistic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tier != 0 {
		n += 1 + sovQuery(uint64(m.Tier))
	}
	if m.Count != 0 {
		n += 1 + sovQuery(uint64(m.Count))
	}
	return n
}

func (m *QueryFeeDiscountTierStatisticsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Statistics) > 0 {
		for _, e := range m.Statistics {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *MitoVaultInfosRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MitoVaultInfosResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MasterAddresses) > 0 {
		for _, s := range m.MasterAddresses {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.DerivativeAddresses) > 0 {
		for _, s := range m.DerivativeAddresses {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.SpotAddresses) > 0 {
		for _, s := range m.SpotAddresses {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Cw20Addresses) > 0 {
		for _, s := range m.Cw20Addresses {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryMarketIDFromVaultRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VaultAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMarketIDFromVaultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHistoricalTradeRecordsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHistoricalTradeRecordsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TradeRecords) > 0 {
		for _, e := range m.TradeRecords {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *TradeHistoryOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TradeGroupingSec != 0 {
		n += 1 + sovQuery(uint64(m.TradeGroupingSec))
	}
	if m.MaxAge != 0 {
		n += 1 + sovQuery(uint64(m.MaxAge))
	}
	if m.IncludeRawHistory {
		n += 2
	}
	if m.IncludeMetadata {
		n += 2
	}
	return n
}

func (m *QueryMarketVolatilityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TradeHistoryOptions != nil {
		l = m.TradeHistoryOptions.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMarketVolatilityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Volatility != nil {
		l = m.Volatility.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.HistoryMetadata != nil {
		l = m.HistoryMetadata.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.RawHistory) > 0 {
		for _, e := range m.RawHistory {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryBinaryMarketsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBinaryMarketsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Markets) > 0 {
		for _, e := range m.Markets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTraderDerivativeConditionalOrdersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *TrimmedDerivativeConditionalOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Price.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Quantity.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Margin.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.TriggerPrice.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.IsBuy {
		n += 2
	}
	if m.IsLimit {
		n += 2
	}
	l = len(m.OrderHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTraderDerivativeConditionalOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryFullSpotOrderbookRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFullSpotOrderbookResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Bids) > 0 {
		for _, e := range m.Bids {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Asks) > 0 {
		for _, e := range m.Asks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryFullDerivativeOrderbookRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFullDerivativeOrderbookResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Bids) > 0 {
		for _, e := range m.Bids {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Asks) > 0 {
		for _, e := range m.Asks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *TrimmedLimitOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Price.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Quantity.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = len(m.OrderHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMarketAtomicExecutionFeeMultiplierRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMarketAtomicExecutionFeeMultiplierResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Multiplier.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryActiveStakeGrantRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Grantee)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryActiveStakeGrantResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Grant != nil {
		l = m.Grant.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.EffectiveGrant != nil {
		l = m.EffectiveGrant.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGrantAuthorizationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Granter)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Grantee)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGrantAuthorizationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGrantAuthorizationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Granter)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGrantAuthorizationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalGrantAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	if len(m.Grants) > 0 {
		for _, e := range m.Grants {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Subaccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Subaccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Subaccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trader = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountNonce", wireType)
			}
			m.SubaccountNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubaccountNonce |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubaccountOrdersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubaccountOrdersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubaccountOrdersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubaccountOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubaccountOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubaccountOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyOrders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyOrders = append(m.BuyOrders, &SubaccountOrderData{})
			if err := m.BuyOrders[len(m.BuyOrders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellOrders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellOrders = append(m.SellOrders, &SubaccountOrderData{})
			if err := m.SellOrders[len(m.SellOrders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubaccountOrderbookMetadataWithMarket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubaccountOrderbookMetadataWithMarket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubaccountOrderbookMetadataWithMarket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &SubaccountOrderbookMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBuy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBuy = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExchangeParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExchangeParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExchangeParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExchangeParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExchangeParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExchangeParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubaccountDepositsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubaccountDepositsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubaccountDepositsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subaccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subaccount == nil {
				m.Subaccount = &Subaccount{}
			}
			if err := m.Subaccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubaccountDepositsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubaccountDepositsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubaccountDepositsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Deposits == nil {
				m.Deposits = make(map[string]*Deposit)
			}
			var mapkey string
			var mapvalue *Deposit
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthQuery
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthQuery
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Deposit{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Deposits[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExchangeBalancesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExchangeBalancesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExchangeBalancesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExchangeBalancesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExchangeBalancesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExchangeBalancesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balances = append(m.Balances, Balance{})
			if err := m.Balances[len(m.Balances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAggregateVolumeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAggregateVolumeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAggregateVolumeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAggregateVolumeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAggregateVolumeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAggregateVolumeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregateVolumes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregateVolumes = append(m.AggregateVolumes, &MarketVolume{})
			if err := m.AggregateVolumes[len(m.AggregateVolumes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAggregateVolumesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAggregateVolumesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAggregateVolumesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketIds = append(m.MarketIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAggregateVolumesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAggregateVolumesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAggregateVolumesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregateAccountVolumes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregateAccountVolumes = append(m.AggregateAccountVolumes, &AggregateAccountVolumeRecord{})
			if err := m.AggregateAccountVolumes[len(m.AggregateAccountVolumes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregateMarketVolumes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregateMarketVolumes = append(m.AggregateMarketVolumes, &MarketVolume{})
			if err := m.AggregateMarketVolumes[len(m.AggregateMarketVolumes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAggregateMarketVolumeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAggregateMarketVolumeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAggregateMarketVolumeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAggregateMarketVolumeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAggregateMarketVolumeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAggregateMarketVolumeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Volume.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDenomDecimalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDenomDecimalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDenomDecimalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDenomDecimalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDenomDecimalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDenomDecimalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimal", wireType)
			}
			m.Decimal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDenomDecimalsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDenomDecimalsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDenomDecimalsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denoms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denoms = append(m.Denoms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDenomDecimalsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDenomDecimalsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDenomDecimalsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomDecimals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomDecimals = append(m.DenomDecimals, DenomDecimals{})
			if err := m.DenomDecimals[len(m.DenomDecimals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAggregateMarketVolumesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAggregateMarketVolumesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAggregateMarketVolumesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketIds = append(m.MarketIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAggregateMarketVolumesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAggregateMarketVolumesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAggregateMarketVolumesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volumes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Volumes = append(m.Volumes, &MarketVolume{})
			if err := m.Volumes[len(m.Volumes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubaccountDepositRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubaccountDepositRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubaccountDepositRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubaccountDepositResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubaccountDepositResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubaccountDepositResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Deposits == nil {
				m.Deposits = &Deposit{}
			}
			if err := m.Deposits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpotMarketsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpotMarketsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpotMarketsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketIds = append(m.MarketIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpotMarketsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpotMarketsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpotMarketsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Markets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Markets = append(m.Markets, &SpotMarket{})
			if err := m.Markets[len(m.Markets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpotMarketRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpotMarketRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpotMarketRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpotMarketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpotMarketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpotMarketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Market", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Market == nil {
				m.Market = &SpotMarket{}
			}
			if err := m.Market.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpotOrderbookRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpotOrderbookRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpotOrderbookRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderSide", wireType)
			}
			m.OrderSide = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderSide |= OrderSide(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitCumulativeNotional", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.LimitCumulativeNotional = &v
			if err := m.LimitCumulativeNotional.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitCumulativeQuantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.LimitCumulativeQuantity = &v
			if err := m.LimitCumulativeQuantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpotOrderbookResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpotOrderbookResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpotOrderbookResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuysPriceLevel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuysPriceLevel = append(m.BuysPriceLevel, &Level{})
			if err := m.BuysPriceLevel[len(m.BuysPriceLevel)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellsPriceLevel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellsPriceLevel = append(m.SellsPriceLevel, &Level{})
			if err := m.SellsPriceLevel[len(m.SellsPriceLevel)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FullSpotMarket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FullSpotMarket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FullSpotMarket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Market", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Market == nil {
				m.Market = &SpotMarket{}
			}
			if err := m.Market.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MidPriceAndTob", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MidPriceAndTob == nil {
				m.MidPriceAndTob = &MidPriceAndTOB{}
			}
			if err := m.MidPriceAndTob.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFullSpotMarketsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFullSpotMarketsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFullSpotMarketsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketIds = append(m.MarketIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithMidPriceAndTob", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithMidPriceAndTob = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFullSpotMarketsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFullSpotMarketsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFullSpotMarketsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Markets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Markets = append(m.Markets, &FullSpotMarket{})
			if err := m.Markets[len(m.Markets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFullSpotMarketRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFullSpotMarketRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFullSpotMarketRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithMidPriceAndTob", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithMidPriceAndTob = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFullSpotMarketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFullSpotMarketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFullSpotMarketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Market", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Market == nil {
				m.Market = &FullSpotMarket{}
			}
			if err := m.Market.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpotOrdersByHashesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpotOrdersByHashesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpotOrdersByHashesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderHashes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderHashes = append(m.OrderHashes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpotOrdersByHashesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpotOrdersByHashesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpotOrdersByHashesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, &TrimmedSpotLimitOrder{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTraderSpotOrdersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTraderSpotOrdersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTraderSpotOrdersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAccountAddressSpotOrdersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAccountAddressSpotOrdersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAccountAddressSpotOrdersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrimmedSpotLimitOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrimmedSpotLimitOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrimmedSpotLimitOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fillable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fillable.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBuy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBuy = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTraderSpotOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTraderSpotOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTraderSpotOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, &TrimmedSpotLimitOrder{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAccountAddressSpotOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAccountAddressSpotOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAccountAddressSpotOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, &TrimmedSpotLimitOrder{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpotMidPriceAndTOBRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpotMidPriceAndTOBRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpotMidPriceAndTOBRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpotMidPriceAndTOBResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpotMidPriceAndTOBResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpotMidPriceAndTOBResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MidPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.MidPrice = &v
			if err := m.MidPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BestBuyPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.BestBuyPrice = &v
			if err := m.BestBuyPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BestSellPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.BestSellPrice = &v
			if err := m.BestSellPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDerivativeMidPriceAndTOBRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDerivativeMidPriceAndTOBRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDerivativeMidPriceAndTOBRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDerivativeMidPriceAndTOBResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDerivativeMidPriceAndTOBResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDerivativeMidPriceAndTOBResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MidPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.MidPrice = &v
			if err := m.MidPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BestBuyPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.BestBuyPrice = &v
			if err := m.BestBuyPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BestSellPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.BestSellPrice = &v
			if err := m.BestSellPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDerivativeOrderbookRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDerivativeOrderbookRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDerivativeOrderbookRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitCumulativeNotional", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.LimitCumulativeNotional = &v
			if err := m.LimitCumulativeNotional.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDerivativeOrderbookResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDerivativeOrderbookResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDerivativeOrderbookResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuysPriceLevel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuysPriceLevel = append(m.BuysPriceLevel, &Level{})
			if err := m.BuysPriceLevel[len(m.BuysPriceLevel)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellsPriceLevel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellsPriceLevel = append(m.SellsPriceLevel, &Level{})
			if err := m.SellsPriceLevel[len(m.SellsPriceLevel)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTraderSpotOrdersToCancelUpToAmountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTraderSpotOrdersToCancelUpToAmountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTraderSpotOrdersToCancelUpToAmountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.QuoteAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strategy", wireType)
			}
			m.Strategy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Strategy |= CancellationStrategy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferencePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.ReferencePrice = &v
			if err := m.ReferencePrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTraderDerivativeOrdersToCancelUpToAmountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTraderDerivativeOrdersToCancelUpToAmountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTraderDerivativeOrdersToCancelUpToAmountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.QuoteAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strategy", wireType)
			}
			m.Strategy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Strategy |= CancellationStrategy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferencePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.ReferencePrice = &v
			if err := m.ReferencePrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTraderDerivativeOrdersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTraderDerivativeOrdersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTraderDerivativeOrdersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAccountAddressDerivativeOrdersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAccountAddressDerivativeOrdersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAccountAddressDerivativeOrdersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrimmedDerivativeLimitOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrimmedDerivativeLimitOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrimmedDerivativeLimitOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Margin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Margin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fillable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fillable.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBuy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBuy = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTraderDerivativeOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTraderDerivativeOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTraderDerivativeOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, &TrimmedDerivativeLimitOrder{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAccountAddressDerivativeOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAccountAddressDerivativeOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAccountAddressDerivativeOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, &TrimmedDerivativeLimitOrder{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDerivativeOrdersByHashesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDerivativeOrdersByHashesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDerivativeOrdersByHashesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderHashes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderHashes = append(m.OrderHashes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDerivativeOrdersByHashesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDerivativeOrdersByHashesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDerivativeOrdersByHashesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, &TrimmedDerivativeLimitOrder{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDerivativeMarketsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDerivativeMarketsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDerivativeMarketsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketIds = append(m.MarketIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithMidPriceAndTob", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithMidPriceAndTob = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PriceLevel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriceLevel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriceLevel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PerpetualMarketState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PerpetualMarketState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PerpetualMarketState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MarketInfo == nil {
				m.MarketInfo = &PerpetualMarketInfo{}
			}
			if err := m.MarketInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundingInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FundingInfo == nil {
				m.FundingInfo = &PerpetualMarketFunding{}
			}
			if err := m.FundingInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FullDerivativeMarket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FullDerivativeMarket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FullDerivativeMarket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Market", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Market == nil {
				m.Market = &DerivativeMarket{}
			}
			if err := m.Market.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerpetualInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PerpetualMarketState{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Info = &FullDerivativeMarket_PerpetualInfo{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FuturesInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExpiryFuturesMarketInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Info = &FullDerivativeMarket_FuturesInfo{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MarkPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MidPriceAndTob", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MidPriceAndTob == nil {
				m.MidPriceAndTob = &MidPriceAndTOB{}
			}
			if err := m.MidPriceAndTob.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDerivativeMarketsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDerivativeMarketsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDerivativeMarketsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Markets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Markets = append(m.Markets, &FullDerivativeMarket{})
			if err := m.Markets[len(m.Markets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDerivativeMarketRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDerivativeMarketRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDerivativeMarketRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDerivativeMarketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDerivativeMarketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDerivativeMarketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Market", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Market == nil {
				m.Market = &FullDerivativeMarket{}
			}
			if err := m.Market.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDerivativeMarketAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDerivativeMarketAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDerivativeMarketAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDerivativeMarketAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDerivativeMarketAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDerivativeMarketAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubaccountTradeNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubaccountTradeNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubaccountTradeNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubaccountPositionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubaccountPositionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubaccountPositionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubaccountPositionInMarketRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubaccountPositionInMarketRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubaccountPositionInMarketRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubaccountEffectivePositionInMarketRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubaccountEffectivePositionInMarketRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubaccountEffectivePositionInMarketRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubaccountOrderMetadataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubaccountOrderMetadataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubaccountOrderMetadataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubaccountPositionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubaccountPositionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubaccountPositionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State, DerivativePosition{})
			if err := m.State[len(m.State)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubaccountPositionInMarketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubaccountPositionInMarketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubaccountPositionInMarketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &Position{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EffectivePosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EffectivePosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EffectivePosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLong", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLong = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EntryPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveMargin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EffectiveMargin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubaccountEffectivePositionInMarketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubaccountEffectivePositionInMarketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubaccountEffectivePositionInMarketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &EffectivePosition{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPerpetualMarketInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPerpetualMarketInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPerpetualMarketInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPerpetualMarketInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPerpetualMarketInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPerpetualMarketInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExpiryFuturesMarketInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExpiryFuturesMarketInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExpiryFuturesMarketInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExpiryFuturesMarketInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExpiryFuturesMarketInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExpiryFuturesMarketInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPerpetualMarketFundingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPerpetualMarketFundingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPerpetualMarketFundingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPerpetualMarketFundingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPerpetualMarketFundingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPerpetualMarketFundingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubaccountOrderMetadataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubaccountOrderMetadataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubaccountOrderMetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata, SubaccountOrderbookMetadataWithMarket{})
			if err := m.Metadata[len(m.Metadata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubaccountTradeNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubaccountTradeNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubaccountTradeNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryModuleStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryModuleStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryModuleStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryModuleStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryModuleStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryModuleStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &GenesisState{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPositionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPositionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPositionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPositionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPositionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPositionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State, DerivativePosition{})
			if err := m.State[len(m.State)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTradeRewardPointsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTradeRewardPointsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTradeRewardPointsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingPoolTimestamp", wireType)
			}
			m.PendingPoolTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PendingPoolTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTradeRewardPointsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTradeRewardPointsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTradeRewardPointsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountTradeRewardPoints", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.AccountTradeRewardPoints = append(m.AccountTradeRewardPoints, v)
			if err := m.AccountTradeRewardPoints[len(m.AccountTradeRewardPoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTradeRewardCampaignRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTradeRewardCampaignRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTradeRewardCampaignRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTradeRewardCampaignResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTradeRewardCampaignResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTradeRewardCampaignResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingRewardCampaignInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TradingRewardCampaignInfo == nil {
				m.TradingRewardCampaignInfo = &TradingRewardCampaignInfo{}
			}
			if err := m.TradingRewardCampaignInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingRewardPoolCampaignSchedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingRewardPoolCampaignSchedule = append(m.TradingRewardPoolCampaignSchedule, &CampaignRewardPool{})
			if err := m.TradingRewardPoolCampaignSchedule[len(m.TradingRewardPoolCampaignSchedule)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTradeRewardPoints", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalTradeRewardPoints.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingTradingRewardPoolCampaignSchedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingTradingRewardPoolCampaignSchedule = append(m.PendingTradingRewardPoolCampaignSchedule, &CampaignRewardPool{})
			if err := m.PendingTradingRewardPoolCampaignSchedule[len(m.PendingTradingRewardPoolCampaignSchedule)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingTotalTradeRewardPoints", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.PendingTotalTradeRewardPoints = append(m.PendingTotalTradeRewardPoints, v)
			if err := m.PendingTotalTradeRewardPoints[len(m.PendingTotalTradeRewardPoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsOptedOutOfRewardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsOptedOutOfRewardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsOptedOutOfRewardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsOptedOutOfRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsOptedOutOfRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsOptedOutOfRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOptedOut", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOptedOut = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOptedOutOfRewardsAccountsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOptedOutOfRewardsAccountsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOptedOutOfRewardsAccountsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOptedOutOfRewardsAccountsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOptedOutOfRewardsAccountsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOptedOutOfRewardsAccountsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeDiscountAccountInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeDiscountAccountInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeDiscountAccountInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeDiscountAccountInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeDiscountAccountInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeDiscountAccountInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TierLevel", wireType)
			}
			m.TierLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TierLevel |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccountInfo == nil {
				m.AccountInfo = &FeeDiscountTierInfo{}
			}
			if err := m.AccountInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountTtl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccountTtl == nil {
				m.AccountTtl = &FeeDiscountTierTTL{}
			}
			if err := m.AccountTtl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeDiscountScheduleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeDiscountScheduleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeDiscountScheduleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeDiscountScheduleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeDiscountScheduleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeDiscountScheduleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeDiscountSchedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeeDiscountSchedule == nil {
				m.FeeDiscountSchedule = &FeeDiscountSchedule{}
			}
			if err := m.FeeDiscountSchedule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBalanceMismatchesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBalanceMismatchesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBalanceMismatchesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DustFactor", wireType)
			}
			m.DustFactor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DustFactor |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BalanceMismatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BalanceMismatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BalanceMismatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Available", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Available.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Total.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalanceHold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BalanceHold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedTotal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExpectedTotal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Difference", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Difference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBalanceMismatchesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBalanceMismatchesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBalanceMismatchesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalanceMismatches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BalanceMismatches = append(m.BalanceMismatches, &BalanceMismatch{})
			if err := m.BalanceMismatches[len(m.BalanceMismatches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBalanceWithBalanceHoldsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBalanceWithBalanceHoldsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBalanceWithBalanceHoldsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BalanceWithMarginHold) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BalanceWithMarginHold: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BalanceWithMarginHold: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Available", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Available.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Total.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalanceHold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BalanceHold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBalanceWithBalanceHoldsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBalanceWithBalanceHoldsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBalanceWithBalanceHoldsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalanceWithBalanceHolds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BalanceWithBalanceHolds = append(m.BalanceWithBalanceHolds, &BalanceWithMarginHold{})
			if err := m.BalanceWithBalanceHolds[len(m.BalanceWithBalanceHolds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeDiscountTierStatisticsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeDiscountTierStatisticsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeDiscountTierStatisticsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TierStatistic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TierStatistic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TierStatistic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tier", wireType)
			}
			m.Tier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeDiscountTierStatisticsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeDiscountTierStatisticsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeDiscountTierStatisticsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statistics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statistics = append(m.Statistics, &TierStatistic{})
			if err := m.Statistics[len(m.Statistics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MitoVaultInfosRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MitoVaultInfosRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MitoVaultInfosRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MitoVaultInfosResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MitoVaultInfosResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MitoVaultInfosResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterAddresses = append(m.MasterAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DerivativeAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DerivativeAddresses = append(m.DerivativeAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpotAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpotAddresses = append(m.SpotAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cw20Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cw20Addresses = append(m.Cw20Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMarketIDFromVaultRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMarketIDFromVaultRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMarketIDFromVaultRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMarketIDFromVaultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMarketIDFromVaultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMarketIDFromVaultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHistoricalTradeRecordsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHistoricalTradeRecordsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHistoricalTradeRecordsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHistoricalTradeRecordsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHistoricalTradeRecordsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHistoricalTradeRecordsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradeRecords = append(m.TradeRecords, &TradeRecords{})
			if err := m.TradeRecords[len(m.TradeRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TradeHistoryOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradeHistoryOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradeHistoryOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeGroupingSec", wireType)
			}
			m.TradeGroupingSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TradeGroupingSec |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAge", wireType)
			}
			m.MaxAge = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAge |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeRawHistory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeRawHistory = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeMetadata", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeMetadata = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMarketVolatilityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMarketVolatilityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMarketVolatilityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeHistoryOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TradeHistoryOptions == nil {
				m.TradeHistoryOptions = &TradeHistoryOptions{}
			}
			if err := m.TradeHistoryOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMarketVolatilityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMarketVolatilityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMarketVolatilityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volatility", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.Volatility = &v
			if err := m.Volatility.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HistoryMetadata == nil {
				m.HistoryMetadata = &types.MetadataStatistics{}
			}
			if err := m.HistoryMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawHistory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawHistory = append(m.RawHistory, &TradeRecord{})
			if err := m.RawHistory[len(m.RawHistory)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBinaryMarketsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBinaryMarketsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBinaryMarketsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBinaryMarketsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBinaryMarketsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBinaryMarketsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Markets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Markets = append(m.Markets, &BinaryOptionsMarket{})
			if err := m.Markets[len(m.Markets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTraderDerivativeConditionalOrdersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTraderDerivativeConditionalOrdersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTraderDerivativeConditionalOrdersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrimmedDerivativeConditionalOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrimmedDerivativeConditionalOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrimmedDerivativeConditionalOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Margin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Margin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TriggerPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBuy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBuy = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLimit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLimit = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTraderDerivativeConditionalOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTraderDerivativeConditionalOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTraderDerivativeConditionalOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, &TrimmedDerivativeConditionalOrder{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFullSpotOrderbookRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFullSpotOrderbookRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFullSpotOrderbookRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFullSpotOrderbookResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFullSpotOrderbookResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFullSpotOrderbookResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bids = append(m.Bids, &TrimmedLimitOrder{})
			if err := m.Bids[len(m.Bids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asks = append(m.Asks, &TrimmedLimitOrder{})
			if err := m.Asks[len(m.Asks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFullDerivativeOrderbookRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFullDerivativeOrderbookRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFullDerivativeOrderbookRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFullDerivativeOrderbookResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFullDerivativeOrderbookResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFullDerivativeOrderbookResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bids = append(m.Bids, &TrimmedLimitOrder{})
			if err := m.Bids[len(m.Bids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asks = append(m.Asks, &TrimmedLimitOrder{})
			if err := m.Asks[len(m.Asks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrimmedLimitOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrimmedLimitOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrimmedLimitOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMarketAtomicExecutionFeeMultiplierRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMarketAtomicExecutionFeeMultiplierRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMarketAtomicExecutionFeeMultiplierRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMarketAtomicExecutionFeeMultiplierResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMarketAtomicExecutionFeeMultiplierResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMarketAtomicExecutionFeeMultiplierResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Multiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActiveStakeGrantRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActiveStakeGrantRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActiveStakeGrantRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grantee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grantee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActiveStakeGrantResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActiveStakeGrantResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActiveStakeGrantResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Grant == nil {
				m.Grant = &ActiveGrant{}
			}
			if err := m.Grant.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveGrant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EffectiveGrant == nil {
				m.EffectiveGrant = &EffectiveGrant{}
			}
			if err := m.EffectiveGrant.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGrantAuthorizationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGrantAuthorizationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGrantAuthorizationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Granter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Granter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grantee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grantee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGrantAuthorizationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGrantAuthorizationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGrantAuthorizationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGrantAuthorizationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGrantAuthorizationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGrantAuthorizationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Granter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Granter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGrantAuthorizationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGrantAuthorizationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGrantAuthorizationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalGrantAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalGrantAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grants = append(m.Grants, &GrantAuthorization{})
			if err := m.Grants[len(m.Grants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
