// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: injective/ocr/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9921480020d97b2c, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9921480020d97b2c, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryFeedConfigRequest struct {
	FeedId string `protobuf:"bytes,1,opt,name=feed_id,json=feedId,proto3" json:"feed_id,omitempty"`
}

func (m *QueryFeedConfigRequest) Reset()         { *m = QueryFeedConfigRequest{} }
func (m *QueryFeedConfigRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFeedConfigRequest) ProtoMessage()    {}
func (*QueryFeedConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9921480020d97b2c, []int{2}
}
func (m *QueryFeedConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeedConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeedConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeedConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeedConfigRequest.Merge(m, src)
}
func (m *QueryFeedConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeedConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeedConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeedConfigRequest proto.InternalMessageInfo

func (m *QueryFeedConfigRequest) GetFeedId() string {
	if m != nil {
		return m.FeedId
	}
	return ""
}

type QueryFeedConfigResponse struct {
	FeedConfigInfo *FeedConfigInfo `protobuf:"bytes,1,opt,name=feed_config_info,json=feedConfigInfo,proto3" json:"feed_config_info,omitempty"`
	FeedConfig     *FeedConfig     `protobuf:"bytes,2,opt,name=feed_config,json=feedConfig,proto3" json:"feed_config,omitempty"`
}

func (m *QueryFeedConfigResponse) Reset()         { *m = QueryFeedConfigResponse{} }
func (m *QueryFeedConfigResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeedConfigResponse) ProtoMessage()    {}
func (*QueryFeedConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9921480020d97b2c, []int{3}
}
func (m *QueryFeedConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeedConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeedConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeedConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeedConfigResponse.Merge(m, src)
}
func (m *QueryFeedConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeedConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeedConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeedConfigResponse proto.InternalMessageInfo

func (m *QueryFeedConfigResponse) GetFeedConfigInfo() *FeedConfigInfo {
	if m != nil {
		return m.FeedConfigInfo
	}
	return nil
}

func (m *QueryFeedConfigResponse) GetFeedConfig() *FeedConfig {
	if m != nil {
		return m.FeedConfig
	}
	return nil
}

type QueryFeedConfigInfoRequest struct {
	FeedId string `protobuf:"bytes,1,opt,name=feed_id,json=feedId,proto3" json:"feed_id,omitempty"`
}

func (m *QueryFeedConfigInfoRequest) Reset()         { *m = QueryFeedConfigInfoRequest{} }
func (m *QueryFeedConfigInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFeedConfigInfoRequest) ProtoMessage()    {}
func (*QueryFeedConfigInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9921480020d97b2c, []int{4}
}
func (m *QueryFeedConfigInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeedConfigInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeedConfigInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeedConfigInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeedConfigInfoRequest.Merge(m, src)
}
func (m *QueryFeedConfigInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeedConfigInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeedConfigInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeedConfigInfoRequest proto.InternalMessageInfo

func (m *QueryFeedConfigInfoRequest) GetFeedId() string {
	if m != nil {
		return m.FeedId
	}
	return ""
}

type QueryFeedConfigInfoResponse struct {
	FeedConfigInfo *FeedConfigInfo `protobuf:"bytes,1,opt,name=feed_config_info,json=feedConfigInfo,proto3" json:"feed_config_info,omitempty"`
	EpochAndRound  *EpochAndRound  `protobuf:"bytes,2,opt,name=epoch_and_round,json=epochAndRound,proto3" json:"epoch_and_round,omitempty"`
}

func (m *QueryFeedConfigInfoResponse) Reset()         { *m = QueryFeedConfigInfoResponse{} }
func (m *QueryFeedConfigInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeedConfigInfoResponse) ProtoMessage()    {}
func (*QueryFeedConfigInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9921480020d97b2c, []int{5}
}
func (m *QueryFeedConfigInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeedConfigInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeedConfigInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeedConfigInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeedConfigInfoResponse.Merge(m, src)
}
func (m *QueryFeedConfigInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeedConfigInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeedConfigInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeedConfigInfoResponse proto.InternalMessageInfo

func (m *QueryFeedConfigInfoResponse) GetFeedConfigInfo() *FeedConfigInfo {
	if m != nil {
		return m.FeedConfigInfo
	}
	return nil
}

func (m *QueryFeedConfigInfoResponse) GetEpochAndRound() *EpochAndRound {
	if m != nil {
		return m.EpochAndRound
	}
	return nil
}

type QueryLatestRoundRequest struct {
	FeedId string `protobuf:"bytes,1,opt,name=feed_id,json=feedId,proto3" json:"feed_id,omitempty"`
}

func (m *QueryLatestRoundRequest) Reset()         { *m = QueryLatestRoundRequest{} }
func (m *QueryLatestRoundRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLatestRoundRequest) ProtoMessage()    {}
func (*QueryLatestRoundRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9921480020d97b2c, []int{6}
}
func (m *QueryLatestRoundRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestRoundRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestRoundRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestRoundRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestRoundRequest.Merge(m, src)
}
func (m *QueryLatestRoundRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestRoundRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestRoundRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestRoundRequest proto.InternalMessageInfo

func (m *QueryLatestRoundRequest) GetFeedId() string {
	if m != nil {
		return m.FeedId
	}
	return ""
}

type QueryLatestRoundResponse struct {
	LatestRoundId uint64        `protobuf:"varint,1,opt,name=latest_round_id,json=latestRoundId,proto3" json:"latest_round_id,omitempty"`
	Data          *Transmission `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *QueryLatestRoundResponse) Reset()         { *m = QueryLatestRoundResponse{} }
func (m *QueryLatestRoundResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLatestRoundResponse) ProtoMessage()    {}
func (*QueryLatestRoundResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9921480020d97b2c, []int{7}
}
func (m *QueryLatestRoundResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestRoundResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestRoundResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestRoundResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestRoundResponse.Merge(m, src)
}
func (m *QueryLatestRoundResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestRoundResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestRoundResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestRoundResponse proto.InternalMessageInfo

func (m *QueryLatestRoundResponse) GetLatestRoundId() uint64 {
	if m != nil {
		return m.LatestRoundId
	}
	return 0
}

func (m *QueryLatestRoundResponse) GetData() *Transmission {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryLatestTransmissionDetailsRequest struct {
	FeedId string `protobuf:"bytes,1,opt,name=feed_id,json=feedId,proto3" json:"feed_id,omitempty"`
}

func (m *QueryLatestTransmissionDetailsRequest) Reset()         { *m = QueryLatestTransmissionDetailsRequest{} }
func (m *QueryLatestTransmissionDetailsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLatestTransmissionDetailsRequest) ProtoMessage()    {}
func (*QueryLatestTransmissionDetailsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9921480020d97b2c, []int{8}
}
func (m *QueryLatestTransmissionDetailsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestTransmissionDetailsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestTransmissionDetailsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestTransmissionDetailsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestTransmissionDetailsRequest.Merge(m, src)
}
func (m *QueryLatestTransmissionDetailsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestTransmissionDetailsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestTransmissionDetailsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestTransmissionDetailsRequest proto.InternalMessageInfo

func (m *QueryLatestTransmissionDetailsRequest) GetFeedId() string {
	if m != nil {
		return m.FeedId
	}
	return ""
}

type QueryLatestTransmissionDetailsResponse struct {
	ConfigDigest  []byte         `protobuf:"bytes,1,opt,name=config_digest,json=configDigest,proto3" json:"config_digest,omitempty"`
	EpochAndRound *EpochAndRound `protobuf:"bytes,2,opt,name=epoch_and_round,json=epochAndRound,proto3" json:"epoch_and_round,omitempty"`
	Data          *Transmission  `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *QueryLatestTransmissionDetailsResponse) Reset() {
	*m = QueryLatestTransmissionDetailsResponse{}
}
func (m *QueryLatestTransmissionDetailsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLatestTransmissionDetailsResponse) ProtoMessage()    {}
func (*QueryLatestTransmissionDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9921480020d97b2c, []int{9}
}
func (m *QueryLatestTransmissionDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestTransmissionDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestTransmissionDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestTransmissionDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestTransmissionDetailsResponse.Merge(m, src)
}
func (m *QueryLatestTransmissionDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestTransmissionDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestTransmissionDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestTransmissionDetailsResponse proto.InternalMessageInfo

func (m *QueryLatestTransmissionDetailsResponse) GetConfigDigest() []byte {
	if m != nil {
		return m.ConfigDigest
	}
	return nil
}

func (m *QueryLatestTransmissionDetailsResponse) GetEpochAndRound() *EpochAndRound {
	if m != nil {
		return m.EpochAndRound
	}
	return nil
}

func (m *QueryLatestTransmissionDetailsResponse) GetData() *Transmission {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryOwedAmountRequest struct {
	Transmitter string `protobuf:"bytes,1,opt,name=transmitter,proto3" json:"transmitter,omitempty"`
}

func (m *QueryOwedAmountRequest) Reset()         { *m = QueryOwedAmountRequest{} }
func (m *QueryOwedAmountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOwedAmountRequest) ProtoMessage()    {}
func (*QueryOwedAmountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9921480020d97b2c, []int{10}
}
func (m *QueryOwedAmountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOwedAmountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOwedAmountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOwedAmountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOwedAmountRequest.Merge(m, src)
}
func (m *QueryOwedAmountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOwedAmountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOwedAmountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOwedAmountRequest proto.InternalMessageInfo

func (m *QueryOwedAmountRequest) GetTransmitter() string {
	if m != nil {
		return m.Transmitter
	}
	return ""
}

type QueryOwedAmountResponse struct {
	Amount types.Coin `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount"`
}

func (m *QueryOwedAmountResponse) Reset()         { *m = QueryOwedAmountResponse{} }
func (m *QueryOwedAmountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOwedAmountResponse) ProtoMessage()    {}
func (*QueryOwedAmountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9921480020d97b2c, []int{11}
}
func (m *QueryOwedAmountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOwedAmountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOwedAmountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOwedAmountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOwedAmountResponse.Merge(m, src)
}
func (m *QueryOwedAmountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOwedAmountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOwedAmountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOwedAmountResponse proto.InternalMessageInfo

func (m *QueryOwedAmountResponse) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

type QueryModuleStateRequest struct {
}

func (m *QueryModuleStateRequest) Reset()         { *m = QueryModuleStateRequest{} }
func (m *QueryModuleStateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryModuleStateRequest) ProtoMessage()    {}
func (*QueryModuleStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9921480020d97b2c, []int{12}
}
func (m *QueryModuleStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryModuleStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryModuleStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryModuleStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryModuleStateRequest.Merge(m, src)
}
func (m *QueryModuleStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryModuleStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryModuleStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryModuleStateRequest proto.InternalMessageInfo

type QueryModuleStateResponse struct {
	State *GenesisState `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *QueryModuleStateResponse) Reset()         { *m = QueryModuleStateResponse{} }
func (m *QueryModuleStateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryModuleStateResponse) ProtoMessage()    {}
func (*QueryModuleStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9921480020d97b2c, []int{13}
}
func (m *QueryModuleStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryModuleStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryModuleStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryModuleStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryModuleStateResponse.Merge(m, src)
}
func (m *QueryModuleStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryModuleStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryModuleStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryModuleStateResponse proto.InternalMessageInfo

func (m *QueryModuleStateResponse) GetState() *GenesisState {
	if m != nil {
		return m.State
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "injective.ocr.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "injective.ocr.v1beta1.QueryParamsResponse")
	proto.RegisterType((*QueryFeedConfigRequest)(nil), "injective.ocr.v1beta1.QueryFeedConfigRequest")
	proto.RegisterType((*QueryFeedConfigResponse)(nil), "injective.ocr.v1beta1.QueryFeedConfigResponse")
	proto.RegisterType((*QueryFeedConfigInfoRequest)(nil), "injective.ocr.v1beta1.QueryFeedConfigInfoRequest")
	proto.RegisterType((*QueryFeedConfigInfoResponse)(nil), "injective.ocr.v1beta1.QueryFeedConfigInfoResponse")
	proto.RegisterType((*QueryLatestRoundRequest)(nil), "injective.ocr.v1beta1.QueryLatestRoundRequest")
	proto.RegisterType((*QueryLatestRoundResponse)(nil), "injective.ocr.v1beta1.QueryLatestRoundResponse")
	proto.RegisterType((*QueryLatestTransmissionDetailsRequest)(nil), "injective.ocr.v1beta1.QueryLatestTransmissionDetailsRequest")
	proto.RegisterType((*QueryLatestTransmissionDetailsResponse)(nil), "injective.ocr.v1beta1.QueryLatestTransmissionDetailsResponse")
	proto.RegisterType((*QueryOwedAmountRequest)(nil), "injective.ocr.v1beta1.QueryOwedAmountRequest")
	proto.RegisterType((*QueryOwedAmountResponse)(nil), "injective.ocr.v1beta1.QueryOwedAmountResponse")
	proto.RegisterType((*QueryModuleStateRequest)(nil), "injective.ocr.v1beta1.QueryModuleStateRequest")
	proto.RegisterType((*QueryModuleStateResponse)(nil), "injective.ocr.v1beta1.QueryModuleStateResponse")
}

func init() { proto.RegisterFile("injective/ocr/v1beta1/query.proto", fileDescriptor_9921480020d97b2c) }

var fileDescriptor_9921480020d97b2c = []byte{
	// 891 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcf, 0x6f, 0x23, 0x35,
	0x14, 0xce, 0x2c, 0xdd, 0xa0, 0x75, 0xb6, 0x5d, 0x64, 0x16, 0xb6, 0x1d, 0xd8, 0xb4, 0x9d, 0x90,
	0x8a, 0x5f, 0x9d, 0x21, 0x29, 0x55, 0x29, 0x14, 0x44, 0x7f, 0x00, 0x8a, 0x54, 0x54, 0x18, 0xe0,
	0xc2, 0x25, 0x72, 0x66, 0x9c, 0xa9, 0x21, 0xb1, 0xd3, 0xb1, 0xd3, 0xaa, 0xaa, 0x7a, 0xe1, 0xc0,
	0x19, 0x89, 0x3b, 0x12, 0x07, 0xae, 0x1c, 0xb8, 0xc2, 0x1f, 0xd0, 0x63, 0x25, 0x38, 0x70, 0xaa,
	0x50, 0xcb, 0x1f, 0x82, 0xc6, 0x76, 0x12, 0x87, 0xc9, 0x24, 0x29, 0x62, 0x6f, 0xf1, 0x9b, 0xf7,
	0x7d, 0xef, 0x7b, 0xcf, 0xcf, 0x9f, 0x02, 0x96, 0x09, 0xfd, 0x0a, 0x07, 0x82, 0x1c, 0x63, 0x8f,
	0x05, 0xb1, 0x77, 0x5c, 0x69, 0x60, 0x81, 0x2a, 0xde, 0x51, 0x17, 0xc7, 0xa7, 0x6e, 0x27, 0x66,
	0x82, 0xc1, 0xe7, 0xfa, 0x29, 0x2e, 0x0b, 0x62, 0x57, 0xa7, 0xd8, 0x2f, 0x46, 0x8c, 0x45, 0x2d,
	0xec, 0xa1, 0x0e, 0xf1, 0x10, 0xa5, 0x4c, 0x20, 0x41, 0x18, 0xe5, 0x0a, 0x64, 0x2f, 0x8e, 0xe6,
	0x4d, 0x08, 0x54, 0xc2, 0xc3, 0x88, 0x45, 0x4c, 0xfe, 0xf4, 0x92, 0x5f, 0x3a, 0x5a, 0x0c, 0x18,
	0x6f, 0x33, 0xee, 0x35, 0x10, 0xc7, 0x7d, 0x50, 0xc0, 0x08, 0xd5, 0xdf, 0x4b, 0xa3, 0x69, 0x23,
	0x4c, 0x31, 0x27, 0xba, 0xb6, 0xf3, 0x10, 0xc0, 0x4f, 0x13, 0xfd, 0x9f, 0xa0, 0x18, 0xb5, 0xb9,
	0x8f, 0x8f, 0xba, 0x98, 0x0b, 0xc7, 0x07, 0xcf, 0x0e, 0x45, 0x79, 0x87, 0x51, 0x8e, 0xe1, 0x3b,
	0x20, 0xdf, 0x91, 0x91, 0x79, 0x6b, 0xc9, 0x7a, 0xb9, 0x50, 0x7d, 0xec, 0x8e, 0x6c, 0xd7, 0x55,
	0xb0, 0x9d, 0x99, 0x8b, 0xab, 0xc5, 0x9c, 0xaf, 0x21, 0x4e, 0x05, 0x3c, 0x2f, 0x39, 0x3f, 0xc4,
	0x38, 0xdc, 0x65, 0xb4, 0x49, 0x22, 0x5d, 0x0d, 0x3e, 0x02, 0x4f, 0x37, 0x31, 0x0e, 0xeb, 0x24,
	0x94, 0xbc, 0xf7, 0xfc, 0x7c, 0x72, 0xac, 0x85, 0xce, 0xcf, 0x16, 0x78, 0x94, 0xc2, 0x68, 0x2d,
	0x07, 0xe0, 0x19, 0x09, 0x0a, 0x64, 0xb8, 0x4e, 0x68, 0x93, 0x69, 0x55, 0xe5, 0x0c, 0x55, 0x03,
	0x92, 0x1a, 0x6d, 0x32, 0x7f, 0xae, 0x39, 0x74, 0x86, 0x3b, 0xa0, 0x60, 0x10, 0xce, 0xdf, 0x91,
	0x5c, 0xcb, 0x13, 0xb9, 0x7c, 0x30, 0xe0, 0x71, 0xd6, 0x81, 0xfd, 0x2f, 0xbd, 0xb2, 0xd4, 0xa4,
	0x3e, 0x7f, 0xb3, 0xc0, 0x0b, 0x23, 0x71, 0x4f, 0xaa, 0xd7, 0x7d, 0xf0, 0x00, 0x77, 0x58, 0x70,
	0x58, 0x47, 0x34, 0xac, 0xc7, 0xac, 0x4b, 0x43, 0xdd, 0xef, 0x4b, 0x19, 0x7c, 0x1f, 0x24, 0xd9,
	0xdb, 0x34, 0xf4, 0x93, 0x5c, 0x7f, 0x16, 0x9b, 0x47, 0xa7, 0xaa, 0x6f, 0x69, 0x1f, 0x09, 0xcc,
	0x85, 0x4a, 0x99, 0xd4, 0xf2, 0x19, 0x98, 0x4f, 0x63, 0x74, 0xbb, 0x2b, 0xe0, 0x41, 0x4b, 0x86,
	0x95, 0xb4, 0x1e, 0x78, 0xc6, 0x9f, 0x6d, 0x0d, 0xb2, 0x6b, 0x21, 0xdc, 0x00, 0x33, 0x21, 0x12,
	0x48, 0x4b, 0x2f, 0x65, 0x48, 0xff, 0x3c, 0x46, 0x94, 0xb7, 0x09, 0xe7, 0x84, 0x51, 0x5f, 0x02,
	0x9c, 0xf7, 0x41, 0xd9, 0x28, 0x6e, 0x26, 0xec, 0x61, 0x81, 0x48, 0x8b, 0x4f, 0x94, 0xff, 0x87,
	0x05, 0x56, 0x26, 0x51, 0xe8, 0x6e, 0x4a, 0x60, 0x56, 0xdf, 0x5b, 0x48, 0x22, 0xcc, 0x85, 0x64,
	0xba, 0xef, 0xdf, 0x57, 0xc1, 0x3d, 0x19, 0xfb, 0x7f, 0x2f, 0xa4, 0x3f, 0x98, 0xa7, 0x6e, 0x3b,
	0x98, 0xb7, 0xf5, 0x1b, 0x3d, 0x38, 0xc1, 0xe1, 0x76, 0x9b, 0x75, 0xa9, 0xe8, 0x4d, 0x62, 0x09,
	0x14, 0x84, 0xca, 0x17, 0x02, 0xc7, 0x7a, 0x1a, 0x66, 0xc8, 0xf1, 0xf5, 0x16, 0x98, 0x58, 0x3d,
	0x82, 0x0d, 0x90, 0x47, 0x32, 0xa2, 0xb7, 0x76, 0xc1, 0x55, 0xd6, 0xe5, 0x26, 0xd6, 0xd5, 0xd7,
	0xb3, 0xcb, 0x08, 0xed, 0x79, 0x86, 0x4a, 0x77, 0x16, 0x34, 0xe7, 0xc7, 0x2c, 0xec, 0xb6, 0xf0,
	0x67, 0x02, 0x09, 0xdc, 0xb3, 0xa8, 0x2f, 0xf4, 0x02, 0x0d, 0x7d, 0xd2, 0xf5, 0x36, 0xc1, 0x5d,
	0x9e, 0x04, 0x74, 0xb9, 0xac, 0x01, 0x7c, 0xa4, 0x9c, 0x50, 0x61, 0x15, 0xa2, 0xfa, 0xeb, 0x3d,
	0x70, 0x57, 0xf2, 0xc2, 0x6f, 0x2d, 0x90, 0x57, 0x46, 0x06, 0x5f, 0xc9, 0x20, 0x48, 0x3b, 0xa7,
	0xfd, 0xea, 0x34, 0xa9, 0x4a, 0xa6, 0x53, 0xfe, 0xe6, 0xf7, 0xbf, 0xbf, 0xbf, 0xb3, 0x08, 0x1f,
	0x7b, 0xc1, 0x21, 0x22, 0xb4, 0x45, 0xe8, 0xd7, 0x43, 0x4e, 0xad, 0x8c, 0x13, 0xfe, 0x68, 0x01,
	0x30, 0x78, 0xcf, 0x70, 0x75, 0x5c, 0x85, 0x94, 0xb9, 0xda, 0xee, 0xb4, 0xe9, 0x5a, 0xd4, 0x9b,
	0x52, 0x94, 0x0b, 0x5f, 0xcf, 0x10, 0x65, 0x18, 0x91, 0x77, 0xa6, 0x1f, 0xc7, 0x39, 0xfc, 0xc5,
	0x02, 0x73, 0xc3, 0x9e, 0x03, 0x2b, 0xd3, 0x15, 0x36, 0x0c, 0xd2, 0xae, 0xde, 0x06, 0xa2, 0xf5,
	0x6e, 0x4a, 0xbd, 0x6b, 0xb0, 0x32, 0x59, 0xaf, 0x34, 0x4e, 0x43, 0xf4, 0x4f, 0x16, 0x28, 0x18,
	0xfe, 0x03, 0xc7, 0x8e, 0x2a, 0x6d, 0x6e, 0xb6, 0x37, 0x75, 0xbe, 0xd6, 0xba, 0x2e, 0xb5, 0x7a,
	0x70, 0x35, 0x43, 0xab, 0xe9, 0x7a, 0x86, 0xce, 0x2b, 0x0b, 0x2c, 0x64, 0xfa, 0x0c, 0xdc, 0x9a,
	0xac, 0x22, 0xdb, 0xe1, 0xec, 0x77, 0xff, 0x23, 0x5a, 0x77, 0xb4, 0x27, 0x3b, 0x7a, 0x0f, 0x6e,
	0x8d, 0xef, 0x48, 0x18, 0x14, 0xf5, 0x50, 0x71, 0x0c, 0x5f, 0x04, 0x18, 0xd8, 0xc6, 0xf8, 0x0d,
	0x4f, 0x59, 0xd3, 0xf8, 0x0d, 0x4f, 0xbb, 0x91, 0xf3, 0x96, 0xd4, 0x5c, 0x85, 0x6f, 0x64, 0x68,
	0x66, 0x27, 0x38, 0xac, 0x2b, 0x03, 0xf2, 0xce, 0x0c, 0x87, 0x3b, 0x87, 0x3f, 0x58, 0x60, 0xee,
	0x20, 0x88, 0x0d, 0xcb, 0x19, 0xbf, 0x33, 0x69, 0xdb, 0x1a, 0xbf, 0x33, 0x23, 0xbc, 0xcc, 0x79,
	0x4d, 0xaa, 0x2d, 0xc3, 0x52, 0x86, 0xda, 0xb6, 0xc4, 0xd4, 0xa5, 0x7b, 0xed, 0x04, 0x17, 0xd7,
	0x45, 0xeb, 0xf2, 0xba, 0x68, 0xfd, 0x75, 0x5d, 0xb4, 0xbe, 0xbb, 0x29, 0xe6, 0x2e, 0x6f, 0x8a,
	0xb9, 0x3f, 0x6f, 0x8a, 0xb9, 0x2f, 0x6b, 0x11, 0x11, 0x87, 0xdd, 0x86, 0x1b, 0xb0, 0xb6, 0x57,
	0xeb, 0x29, 0xd8, 0x47, 0x0d, 0xee, 0xf5, 0xf5, 0xac, 0x06, 0x2c, 0xc6, 0xe6, 0x31, 0xa9, 0xa7,
	0xf9, 0xb9, 0xac, 0x29, 0x4e, 0x3b, 0x98, 0x37, 0xf2, 0xf2, 0x9f, 0xe3, 0xda, 0x3f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x43, 0xc1, 0x8b, 0x1b, 0x0f, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Retrieves the OCR FeedConfig for a given FeedId
	FeedConfig(ctx context.Context, in *QueryFeedConfigRequest, opts ...grpc.CallOption) (*QueryFeedConfigResponse, error)
	// Retrieves the OCR FeedConfigInfo for a given FeedId
	FeedConfigInfo(ctx context.Context, in *QueryFeedConfigInfoRequest, opts ...grpc.CallOption) (*QueryFeedConfigInfoResponse, error)
	// Retrieves latest round ID and data, including median answer for that round
	LatestRound(ctx context.Context, in *QueryLatestRoundRequest, opts ...grpc.CallOption) (*QueryLatestRoundResponse, error)
	// LatestTransmissionDetails returns details about the latest trasmission
	// recorded on chain for the given feed ID.
	LatestTransmissionDetails(ctx context.Context, in *QueryLatestTransmissionDetailsRequest, opts ...grpc.CallOption) (*QueryLatestTransmissionDetailsResponse, error)
	// Retrieves transmitter's owed amount
	OwedAmount(ctx context.Context, in *QueryOwedAmountRequest, opts ...grpc.CallOption) (*QueryOwedAmountResponse, error)
	// Retrieves the entire OCR module's state
	OcrModuleState(ctx context.Context, in *QueryModuleStateRequest, opts ...grpc.CallOption) (*QueryModuleStateResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/injective.ocr.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeedConfig(ctx context.Context, in *QueryFeedConfigRequest, opts ...grpc.CallOption) (*QueryFeedConfigResponse, error) {
	out := new(QueryFeedConfigResponse)
	err := c.cc.Invoke(ctx, "/injective.ocr.v1beta1.Query/FeedConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeedConfigInfo(ctx context.Context, in *QueryFeedConfigInfoRequest, opts ...grpc.CallOption) (*QueryFeedConfigInfoResponse, error) {
	out := new(QueryFeedConfigInfoResponse)
	err := c.cc.Invoke(ctx, "/injective.ocr.v1beta1.Query/FeedConfigInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LatestRound(ctx context.Context, in *QueryLatestRoundRequest, opts ...grpc.CallOption) (*QueryLatestRoundResponse, error) {
	out := new(QueryLatestRoundResponse)
	err := c.cc.Invoke(ctx, "/injective.ocr.v1beta1.Query/LatestRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LatestTransmissionDetails(ctx context.Context, in *QueryLatestTransmissionDetailsRequest, opts ...grpc.CallOption) (*QueryLatestTransmissionDetailsResponse, error) {
	out := new(QueryLatestTransmissionDetailsResponse)
	err := c.cc.Invoke(ctx, "/injective.ocr.v1beta1.Query/LatestTransmissionDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OwedAmount(ctx context.Context, in *QueryOwedAmountRequest, opts ...grpc.CallOption) (*QueryOwedAmountResponse, error) {
	out := new(QueryOwedAmountResponse)
	err := c.cc.Invoke(ctx, "/injective.ocr.v1beta1.Query/OwedAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OcrModuleState(ctx context.Context, in *QueryModuleStateRequest, opts ...grpc.CallOption) (*QueryModuleStateResponse, error) {
	out := new(QueryModuleStateResponse)
	err := c.cc.Invoke(ctx, "/injective.ocr.v1beta1.Query/OcrModuleState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Retrieves the OCR FeedConfig for a given FeedId
	FeedConfig(context.Context, *QueryFeedConfigRequest) (*QueryFeedConfigResponse, error)
	// Retrieves the OCR FeedConfigInfo for a given FeedId
	FeedConfigInfo(context.Context, *QueryFeedConfigInfoRequest) (*QueryFeedConfigInfoResponse, error)
	// Retrieves latest round ID and data, including median answer for that round
	LatestRound(context.Context, *QueryLatestRoundRequest) (*QueryLatestRoundResponse, error)
	// LatestTransmissionDetails returns details about the latest trasmission
	// recorded on chain for the given feed ID.
	LatestTransmissionDetails(context.Context, *QueryLatestTransmissionDetailsRequest) (*QueryLatestTransmissionDetailsResponse, error)
	// Retrieves transmitter's owed amount
	OwedAmount(context.Context, *QueryOwedAmountRequest) (*QueryOwedAmountResponse, error)
	// Retrieves the entire OCR module's state
	OcrModuleState(context.Context, *QueryModuleStateRequest) (*QueryModuleStateResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) FeedConfig(ctx context.Context, req *QueryFeedConfigRequest) (*QueryFeedConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeedConfig not implemented")
}
func (*UnimplementedQueryServer) FeedConfigInfo(ctx context.Context, req *QueryFeedConfigInfoRequest) (*QueryFeedConfigInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeedConfigInfo not implemented")
}
func (*UnimplementedQueryServer) LatestRound(ctx context.Context, req *QueryLatestRoundRequest) (*QueryLatestRoundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestRound not implemented")
}
func (*UnimplementedQueryServer) LatestTransmissionDetails(ctx context.Context, req *QueryLatestTransmissionDetailsRequest) (*QueryLatestTransmissionDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestTransmissionDetails not implemented")
}
func (*UnimplementedQueryServer) OwedAmount(ctx context.Context, req *QueryOwedAmountRequest) (*QueryOwedAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OwedAmount not implemented")
}
func (*UnimplementedQueryServer) OcrModuleState(ctx context.Context, req *QueryModuleStateRequest) (*QueryModuleStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OcrModuleState not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.ocr.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeedConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeedConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeedConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.ocr.v1beta1.Query/FeedConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeedConfig(ctx, req.(*QueryFeedConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeedConfigInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeedConfigInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeedConfigInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.ocr.v1beta1.Query/FeedConfigInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeedConfigInfo(ctx, req.(*QueryFeedConfigInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LatestRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestRoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LatestRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.ocr.v1beta1.Query/LatestRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LatestRound(ctx, req.(*QueryLatestRoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LatestTransmissionDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestTransmissionDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LatestTransmissionDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.ocr.v1beta1.Query/LatestTransmissionDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LatestTransmissionDetails(ctx, req.(*QueryLatestTransmissionDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OwedAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOwedAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OwedAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.ocr.v1beta1.Query/OwedAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OwedAmount(ctx, req.(*QueryOwedAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OcrModuleState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryModuleStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OcrModuleState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.ocr.v1beta1.Query/OcrModuleState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OcrModuleState(ctx, req.(*QueryModuleStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "injective.ocr.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "FeedConfig",
			Handler:    _Query_FeedConfig_Handler,
		},
		{
			MethodName: "FeedConfigInfo",
			Handler:    _Query_FeedConfigInfo_Handler,
		},
		{
			MethodName: "LatestRound",
			Handler:    _Query_LatestRound_Handler,
		},
		{
			MethodName: "LatestTransmissionDetails",
			Handler:    _Query_LatestTransmissionDetails_Handler,
		},
		{
			MethodName: "OwedAmount",
			Handler:    _Query_OwedAmount_Handler,
		},
		{
			MethodName: "OcrModuleState",
			Handler:    _Query_OcrModuleState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "injective/ocr/v1beta1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryFeedConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeedConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeedConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeedConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeedConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeedConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeedConfig != nil {
		{
			size, err := m.FeedConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.FeedConfigInfo != nil {
		{
			size, err := m.FeedConfigInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeedConfigInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeedConfigInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeedConfigInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeedConfigInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeedConfigInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeedConfigInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochAndRound != nil {
		{
			size, err := m.EpochAndRound.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.FeedConfigInfo != nil {
		{
			size, err := m.FeedConfigInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestRoundRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestRoundRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestRoundRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestRoundResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestRoundResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestRoundResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.LatestRoundId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LatestRoundId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestTransmissionDetailsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestTransmissionDetailsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestTransmissionDetailsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestTransmissionDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestTransmissionDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestTransmissionDetailsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.EpochAndRound != nil {
		{
			size, err := m.EpochAndRound.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConfigDigest) > 0 {
		i -= len(m.ConfigDigest)
		copy(dAtA[i:], m.ConfigDigest)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ConfigDigest)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOwedAmountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOwedAmountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOwedAmountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Transmitter) > 0 {
		i -= len(m.Transmitter)
		copy(dAtA[i:], m.Transmitter)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Transmitter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOwedAmountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOwedAmountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOwedAmountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryModuleStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryModuleStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryModuleStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryModuleStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryModuleStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryModuleStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryFeedConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFeedConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FeedConfigInfo != nil {
		l = m.FeedConfigInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.FeedConfig != nil {
		l = m.FeedConfig.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFeedConfigInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFeedConfigInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FeedConfigInfo != nil {
		l = m.FeedConfigInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.EpochAndRound != nil {
		l = m.EpochAndRound.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLatestRoundRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLatestRoundResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LatestRoundId != 0 {
		n += 1 + sovQuery(uint64(m.LatestRoundId))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLatestTransmissionDetailsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLatestTransmissionDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConfigDigest)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.EpochAndRound != nil {
		l = m.EpochAndRound.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOwedAmountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Transmitter)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOwedAmountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryModuleStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryModuleStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeedConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeedConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeedConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeedConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeedConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeedConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedConfigInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeedConfigInfo == nil {
				m.FeedConfigInfo = &FeedConfigInfo{}
			}
			if err := m.FeedConfigInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeedConfig == nil {
				m.FeedConfig = &FeedConfig{}
			}
			if err := m.FeedConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeedConfigInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeedConfigInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeedConfigInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeedConfigInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeedConfigInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeedConfigInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedConfigInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeedConfigInfo == nil {
				m.FeedConfigInfo = &FeedConfigInfo{}
			}
			if err := m.FeedConfigInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochAndRound", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EpochAndRound == nil {
				m.EpochAndRound = &EpochAndRound{}
			}
			if err := m.EpochAndRound.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestRoundRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestRoundRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestRoundRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestRoundResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestRoundResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestRoundResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestRoundId", wireType)
			}
			m.LatestRoundId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestRoundId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Transmission{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestTransmissionDetailsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestTransmissionDetailsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestTransmissionDetailsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestTransmissionDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestTransmissionDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestTransmissionDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigDigest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigDigest = append(m.ConfigDigest[:0], dAtA[iNdEx:postIndex]...)
			if m.ConfigDigest == nil {
				m.ConfigDigest = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochAndRound", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EpochAndRound == nil {
				m.EpochAndRound = &EpochAndRound{}
			}
			if err := m.EpochAndRound.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Transmission{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOwedAmountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOwedAmountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOwedAmountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transmitter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transmitter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOwedAmountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOwedAmountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOwedAmountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryModuleStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryModuleStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryModuleStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryModuleStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryModuleStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryModuleStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &GenesisState{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
